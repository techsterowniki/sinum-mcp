{
  "openapi":"3.0.3",
  "servers":[
     {
        "description":"Sinum Local API",
        "url":"http://{hostname_or_ip}/api/v1",
        "variables":{
           "hostname_or_ip":{
              "default":"sinum.local"
           }
        }
     }
  ],
  "info":{
     "description":"sinum Main Process BackEnd API documentation",
     "version":"1.20.0",
     "title":"[Local] eHome Main API",
     "contact":{
        "email":"wojciech.marmurowicz@techsterowniki.pl"
     }
  },
  "tags":[
     {
        "name":"devices",
        "description":"Devices general endpoints"
     },
     {
        "name":"devices/wtp",
        "description":"WTP Devices (Wireless) endpoints"
     },
     {
        "name":"devices/tech",
        "description":"TECH Devices (Wired) endpoints"
     },
     {
        "name":"devices/virtual",
        "description":"Virtual Devices endpoints"
     },
     {
        "name":"devices/sbus",
        "description":"SBus Devices endpoints"
     },
     {
        "name":"devices/slink",
        "description":"SLink Devices endpoints"
     },
     {
        "name":"devices/system-module",
        "description":"System Module Devices endpoints"
     },
     {
        "name":"devices/lora",
        "description":"Lora Devices endpoints"
     },
     {
        "name":"devices/alarm-system",
        "description":"Alarm system Devices endpoints"
     },
     {
        "name":"devices/modbus",
        "description":"Modbus Devices endpoints"
     },
     {
        "name":"devices/custom-device-module",
        "description":"Custom device modules endpoints"
     },
     {
        "name":"devices/video",
        "description":"Video devices endpoints"
     },
     {
        "name":"marketplace",
        "description":"Marketplace endpoints"
     },
     {
        "name":"device-network",
        "description":"Device network diagnostic endpoints"
     },
     {
        "name":"parent-devices",
        "description":"Parent Devices endpoints"
     },
     {
        "name":"parent-devices/wtp",
        "description":"WTP Parent Devices endpoints"
     },
     {
        "name":"parent-devices/sbus",
        "description":"SBus Parent Devices endpoints"
     },
     {
        "name":"parent-devices/slink",
        "description":"SLink Parent Devices endpoints"
     },
     {
        "name":"parent-devices/tech",
        "description":"TECH Parent Devices endpoints"
     },
     {
        "name":"parent-devices/lora",
        "description":"LoRA Parent Devices endpoints"
     },
     {
        "name":"parent-devices/system-module",
        "description":"SystemModule Parent Devices endpoints"
     },
     {
        "name":"parent-devices/modbus",
        "description":"Modbus Parent Devices endpoints"
     },
     {
        "name":"parent-devices/alarm-system",
        "description":"AlarmSystem Parent Devices endpoints"
     },
     {
        "name":"parent-devices/video",
        "description":"Video Parent Devices endpoints"
     },
     {
        "name":"scenes",
        "description":"Scenes endpoints"
     },
     {
        "name":"automations",
        "description":"Automations endpoints"
     },
     {
        "name":"directories/automations",
        "description":"Automations directories endpoints"
     },
     {
        "name":"directories/scenes",
        "description":"Scenes directories endpoints"
     },
     {
        "name":"schedules",
        "description":"Schedules endpoints"
     },
     {
        "name":"rooms",
        "description":"Rooms endpoints"
     },
     {
        "name":"weather",
        "description":"Weather endpoints"
     },
     {
        "name":"energy-center/associations",
        "description":"EnergyCenter Associations endpoints"
     },
     {
        "name":"energy-center/flow-monitor",
        "description":"EnergyCenter Flow Monitor endpoints"
     },
     {
        "name":"energy-center/prices",
        "description":"EnergyCenter Prices Endpoint"
     },
     {
        "name":"energy-center/energy-storage",
        "description":"EnergyCenter Energy Storage endpoints"
     },
     {
        "name":"energy-center/energy-consumption",
        "description":"EnergyCenter Energy Consumption endpoints"
     },
     {
        "name":"energy-center/energy-production",
        "description":"EnergyCenter Energy Production endpoints"
     },
     {
        "name":"energy-center",
        "description":"EnergyCenter General endpoints"
     },
     {
        "name":"lua",
        "description":"General lua endpoints"
     },
     {
        "name":"lua/variables",
        "description":"Lua variables endpoints"
     },
     {
        "name":"lua/timers",
        "description":"Lua timers endpoints"
     },
     {
        "name":"lua/examples",
        "description":"Lua code examples endpoints"
     },
     {
        "name":"lua/modbus-clients",
        "description":"Lua Modbus Clients endpoints"
     },
     {
        "name":"lua/http-clients",
        "description":"Lua HTTP Clients endpoints"
     },
     {
        "name":"lua/mqtt-clients",
        "description":"Lua MQTT Clients endpoints"
     },
     {
        "name":"lua/ws-clients",
        "description":"Lua Websocket Clients endpoints"
     },
     {
        "name":"lua/http-server",
        "description":"Lua HTTP Server forwarding endpoints"
     },
     {
        "name":"influx",
        "description":"InfluxDB statistics endpoints"
     },
     {
        "name":"influx/notifications",
        "description":"InfluxDB notification endpoints"
     },
     {
        "name":"influx/query-template",
        "description":"InfluxDB Templated statistics endpoints"
     },
     {
        "name":"influx/login-history",
        "description":"InfluxDb login history endpoints"
     },
     {
        "name":"settings/localization",
        "description":"Localization settings endpoints"
     },
     {
        "name":"settings/main/logs",
        "description":"Log settings endpoints"
     },
     {
        "name":"settings/weather",
        "description":"Weather settings endpoints"
     },
     {
        "name":"settings/modbus",
        "description":"Modbus settings endpoints"
     },
     {
        "name":"settings/floors",
        "description":"Floors settings endpoints"
     }
  ],
  "paths":{
     "/devices":{
        "get":{
           "tags":[
              "devices"
           ],
           "summary":"Get collection of all devices.",
           "description":"Get collection of all devices.",
           "parameters":[
              {
                 "in":"query",
                 "name":"modified_since",
                 "schema":{
                    "type":"integer"
                 },
                 "description":"Test"
              }
           ],
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Device.Collection"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "patch":{
           "tags":[
              "devices"
           ],
           "summary":"Edit all existing devices.",
           "description":"Edit all existing devices.",
           "requestBody":{
              "description":"Generic device model.",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "type":"object",
                       "required":[
                          "color"
                       ],
                       "properties":{
                          "color":{
                             "description":"HTML/Hex RGB representation of device widget color.",
                             "type":"string",
                             "pattern":"/^#[0-9a-f]{6}$/i"
                          }
                       }
                    },
                    "examples":{
                       "ColorUpdate":{
                          "description":"Update color for all device widgets.",
                          "value":{
                             "color":"#ffcc00"
                          }
                       }
                    }
                 }
              }
           },
           "responses":{
              "204":{
                 "$ref":"#/components/responses/NoContent"
              },
              "304":{
                 "$ref":"#/components/responses/NotModified"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        },
        "delete":{
           "tags":[
              "devices"
           ],
           "summary":"Delete all devices in system.",
           "description":"Delete all devices in system. **NOTE:** Some devices may remain if they cannot be deleted.",
           "responses":{
              "204":{
                 "$ref":"#/components/responses/NoContent"
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/devices/tags":{
        "get":{
           "tags":[
              "devices"
           ],
           "summary":"Get list of all tags added to all devices.",
           "description":"Get list of all tags added to all devices.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/TagCollection"
                             }
                          }
                       },
                       "example":{
                          "data":[
                             "light",
                             "outlet",
                             "sensor"
                          ]
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/device-registration":{
        "get":{
           "tags":[
              "devices"
           ],
           "summary":"Get current state of device registration.",
           "description":"Get current state of device registration.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Device.Registration"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/device-registration/enable":{
        "post":{
           "requestBody":{
              "description":"Request body is needed only when Lora gateway or Lora device is already registered",
              "required":false,
              "content":{
                 "application/json":{
                    "schema":{
                       "$ref":"#/components/schemas/Device.RegistrationBody"
                    },
                    "examples":{
                       "RegistrationBody":{
                          "$ref":"#/components/examples/Device.RegistrationBody"
                       }
                    }
                 }
              }
           },
           "tags":[
              "devices"
           ],
           "summary":"Enable registration process.",
           "description":"Enable registration process.",
           "responses":{
              "204":{
                 "$ref":"#/components/responses/NoContent"
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "409":{
                 "$ref":"#/components/responses/RegistrationAlreadyInProgress"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/device-registration/disable":{
        "post":{
           "tags":[
              "devices"
           ],
           "summary":"Disable registration process.",
           "description":"Disable registration process.",
           "responses":{
              "204":{
                 "$ref":"#/components/responses/NoContent"
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "405":{
                 "$ref":"#/components/responses/MethodNotAllowed"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/device-identification/enable":{
        "post":{
           "tags":[
              "devices"
           ],
           "summary":"Enable devices identification process.",
           "description":"Enable devices identification process.",
           "responses":{
              "204":{
                 "$ref":"#/components/responses/NoContent"
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "409":{
                 "$ref":"#/components/responses/IdentificationAlreadyInProgress"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/device-identification/disable":{
        "post":{
           "tags":[
              "devices"
           ],
           "summary":"Disable devices identification process.",
           "description":"Disable devices identification process.",
           "responses":{
              "204":{
                 "$ref":"#/components/responses/NoContent"
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/devices/wtp":{
        "get":{
           "tags":[
              "devices/wtp"
           ],
           "summary":"Get collection of devices.",
           "description":"Get collection of devices.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Device.WTP.Collection"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/devices/wtp/{id}":{
        "get":{
           "tags":[
              "devices/wtp"
           ],
           "summary":"Get a device by ID",
           "description":"Get a device by ID",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the device to get"
              }
           ],
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.WTP.OneOf"
                                   }
                                ]
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "patch":{
           "tags":[
              "devices/wtp"
           ],
           "summary":"Edit existing device.",
           "description":"Edit existing device.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the device to edit"
              }
           ],
           "requestBody":{
              "description":"WTP device model.<br> **NOTE:** Read-only parameters eg. `id`, `type`, `class`, `messages` etc should not be sent. See schema for more info.<br> **NOTE:** Partial update is possible by sending single member of object, then rest of values remain unmodified. (See PartialUpdateExampe)",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.WTP.OneOf"
                          }
                       ]
                    },
                    "examples":{
                       "Relay":{
                          "$ref":"#/components/examples/Device.WTP.Relay"
                       },
                       "TemperatureSensor":{
                          "$ref":"#/components/examples/Device.WTP.TemperatureSensor"
                       },
                       "PartialUpdateExample":{
                          "$ref":"#/components/examples/PartialUpdateExample"
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.WTP.OneOf"
                                   }
                                ]
                             }
                          }
                       }
                    }
                 }
              },
              "304":{
                 "$ref":"#/components/responses/NotModified"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        },
        "delete":{
           "tags":[
              "devices/wtp"
           ],
           "summary":"Delete device by ID.",
           "description":"Delete device by ID. It is possible to delete all related devices i.e. with the same address by adding following body to request `{\"delete_related\":true}`",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the device to delete"
              }
           ],
           "responses":{
              "200":{
                 "$ref":"#/components/responses/DevicesSuccessfullyDeleted"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "405":{
                 "$ref":"#/components/responses/MethodNotAllowed"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/devices/wtp/{id}/command/{command}":{
        "post":{
           "tags":[
              "devices/wtp"
           ],
           "summary":"Sends command to Device",
           "description":"Sends command to Device",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the device for which command should be called"
              },
              {
                 "in":"path",
                 "name":"command",
                 "schema":{
                    "type":"string"
                 },
                 "required":true,
                 "description":"Device specific command name. See commands schema descriptions for more info."
              }
           ],
           "requestBody":{
              "description":"Command represented as name -> parameters object. See commands schema descriptions for more info.",
              "content":{
                 "application/json":{
                    "schema":{
                       "allOf":[
                          {
                             "type":"object"
                          },
                          {
                             "$ref":"#/components/schemas/DeviceCommand.WTP.OneOf"
                          }
                       ]
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success, returns updated object.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.WTP.OneOf"
                                   }
                                ]
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/devices/tech":{
        "get":{
           "tags":[
              "devices/tech"
           ],
           "summary":"Get collection of devices.",
           "description":"Get collection of devices.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Device.TECH.Collection"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/devices/tech/{id}":{
        "get":{
           "tags":[
              "devices/tech"
           ],
           "summary":"Get a device by ID",
           "description":"Get a device by ID",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the device to get"
              }
           ],
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.TECH.OneOf"
                                   }
                                ]
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "patch":{
           "tags":[
              "devices/tech"
           ],
           "summary":"Edit existing device.",
           "description":"Edit existing device.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the device to edit"
              }
           ],
           "requestBody":{
              "description":"TECH device model.<br> **NOTE:** Read-only parameters eg. `id`, `type`, `class`, `messages` etc should not be sent. See schema for more info.<br> **NOTE:** Partial update is possible by sending single member of object, then rest of values remain unmodified. (See PartialUpdateExampe)",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.TECH.OneOf"
                          }
                       ]
                    },
                    "examples":{
                       "Relay":{
                          "$ref":"#/components/examples/Device.TECH.Relay"
                       },
                       "TemperatureSensor":{
                          "$ref":"#/components/examples/Device.TECH.TemperatureSensor"
                       },
                       "PartialUpdateExample":{
                          "$ref":"#/components/examples/PartialUpdateExample"
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.TECH.OneOf"
                                   }
                                ]
                             }
                          }
                       }
                    }
                 }
              },
              "304":{
                 "$ref":"#/components/responses/NotModified"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/devices/tech/{id}/command/{command}":{
        "post":{
           "tags":[
              "devices/tech"
           ],
           "summary":"Sends command to Device",
           "description":"Sends command to Device",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the device for which command should be called"
              },
              {
                 "in":"path",
                 "name":"command",
                 "schema":{
                    "type":"string"
                 },
                 "required":true,
                 "description":"Device specific command name. See commands schema descriptions for more info."
              }
           ],
           "requestBody":{
              "description":"Command represented as name -> parameters object. See commands schema descriptions for more info.",
              "content":{
                 "application/json":{
                    "schema":{
                       "allOf":[
                          {
                             "type":"object"
                          },
                          {
                             "$ref":"#/components/schemas/DeviceCommand.TECH.OneOf"
                          }
                       ]
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success, returns updated object.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.TECH.OneOf"
                                   }
                                ]
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/devices/modbus":{
        "get":{
           "tags":[
              "devices/modbus"
           ],
           "summary":"Get collection of Modbus devices.",
           "description":"Get collection of Modbus devices.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Device.Modbus.Collection"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/devices/modbus/{id}":{
        "get":{
           "tags":[
              "devices/modbus"
           ],
           "summary":"Get a device by ID",
           "description":"Get a device by ID",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the device to get"
              }
           ],
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.Modbus.OneOf"
                                   }
                                ]
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "patch":{
           "tags":[
              "devices/modbus"
           ],
           "summary":"Edit existing Modbus device.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the device to edit."
              }
           ],
           "requestBody":{
              "description":"Modbus device model.<br> **NOTE:** Read-only parameters eg. `id`, `type`, `class`, `messages` etc should not be sent. See schema for more info.<br> **NOTE:** Partial update is possible by sending single member of object, then rest of values remain unmodified. (See PartialUpdateExampe)",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.Modbus.OneOf"
                          }
                       ]
                    },
                    "examples":{
                       "EcoAirHeatPump":{
                          "$ref":"#/components/examples/Device.Modbus.EcoAirHeatPump"
                       },
                       "AlphaInnotecMainDhw":{
                          "$ref":"#/components/examples/Device.Modbus.AlphaInnotecMainDhw"
                       },
                       "PartialUpdateExample":{
                          "$ref":"#/components/examples/PartialUpdateExample"
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.Modbus.OneOf"
                                   }
                                ]
                             }
                          }
                       }
                    }
                 }
              },
              "304":{
                 "$ref":"#/components/responses/NotModified"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        },
        "delete":{
           "tags":[
              "devices/modbus"
           ],
           "summary":"Delete device by ID.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the device to delete"
              }
           ],
           "responses":{
              "200":{
                 "$ref":"#/components/responses/DevicesSuccessfullyDeleted"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/devices/modbus/{id}/command/{command}":{
        "post":{
           "tags":[
              "devices/modbus"
           ],
           "summary":"Sends command to Modbus Device.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the device for which command should be called."
              },
              {
                 "in":"path",
                 "name":"command",
                 "schema":{
                    "type":"string"
                 },
                 "required":true,
                 "description":"Device specific command name. See commands schema descriptions for more info."
              }
           ],
           "requestBody":{
              "description":"Command represented as name -> parameters object. See commands schema descriptions for more info.",
              "content":{
                 "application/json":{
                    "schema":{
                       "allOf":[
                          {
                             "type":"object"
                          },
                          {
                             "$ref":"#/components/schemas/DeviceCommand.Modbus.OneOf"
                          }
                       ]
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.Modbus.OneOf"
                                   }
                                ]
                             }
                          }
                       }
                    }
                 }
              },
              "304":{
                 "$ref":"#/components/responses/NotModified"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/device-network/modbus":{
        "get":{
           "tags":[
              "device-network"
           ],
           "summary":"Get collection of Modbus devices diagnostic information.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Device.ModbusParentDeviceDiagnosticInfo.Collection"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/device-network/modbus/{id}":{
        "get":{
           "tags":[
              "device-network"
           ],
           "summary":"Get Modbus device diagnostic info by parent device ID.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the modbus parent device to get."
              }
           ],
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/ModbusParentDeviceDiagnosticInfo"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/device-network/sbus":{
        "get":{
           "tags":[
              "device-network"
           ],
           "summary":"Get collection of SBus devices diagnostic information.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "description":"SBus devices diagnostic information.",
                                "type":"object"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/device-network/wtp":{
        "get":{
           "tags":[
              "device-network"
           ],
           "summary":"Get collection of WTP devices diagnostic information.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "description":"WTP devices diagnostic information.",
                                "type":"object"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/devices/virtual":{
        "get":{
           "tags":[
              "devices/virtual"
           ],
           "summary":"Get collection of devices.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Device.VIRTUAL.Collection"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "post":{
           "tags":[
              "devices/virtual"
           ],
           "summary":"Add new virtual device.",
           "requestBody":{
              "description":"VIRTUAL device model.<br> **NOTE:** Parameter `id` is ignored. (Read-only)<br> **NOTE:** Parameter `type` is required.<br> **NOTE:** Since keys are optional (excluding these mentioned in notes), missing values will be set to default.<br> **NOTE:** Adding **Gate** requires `variant` to be set to one of following values: `sliding_gate`, `swing_gate` or `garage_gate`!<br> **NOTE:** When adding **CustomDevice** you can choose type of custom device by setting `variant` to one of following values: `generic`, `temperature_sensor`, `heat_pump`, `inverter`, `energy_meter`, `battery`, `common_dhw_main`.",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.VIRTUAL.OneOf"
                          }
                       ]
                    },
                    "examples":{
                       "Thermostat":{
                          "$ref":"#/components/examples/Device.VIRTUAL.Thermostat"
                       },
                       "CustomDevice":{
                          "$ref":"#/components/examples/Device.VIRTUAL.CustomDevice"
                       },
                       "PartialUpdateExample":{
                          "$ref":"#/components/examples/PartialUpdateExample"
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.VIRTUAL.OneOf"
                                   }
                                ]
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "ObjectAllocationError":{
                             "$ref":"#/components/examples/Response.ObjectAllocationError"
                          },
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              },
              "503":{
                 "$ref":"#/components/responses/ObjectContainerBusyError"
              }
           }
        }
     },
     "/devices/virtual/{id}":{
        "get":{
           "tags":[
              "devices/virtual"
           ],
           "summary":"Get a device by ID",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the device to get"
              }
           ],
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.VIRTUAL.OneOf"
                                   }
                                ]
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "patch":{
           "tags":[
              "devices/virtual"
           ],
           "summary":"Edit existing device.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the device to edit"
              }
           ],
           "requestBody":{
              "description":"VIRTUAL device model.<br> **NOTE:** Read-only parameters eg. `id`, `type`, `class`, `messages` etc should not be sent. See schema for more info.<br> **NOTE:** Partial update is possible by sending single member of object, then rest of values remain unmodified. (See PartialUpdateExampe)",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.VIRTUAL.OneOf"
                          }
                       ]
                    },
                    "examples":{
                       "Thermostat":{
                          "$ref":"#/components/examples/Device.VIRTUAL.Thermostat"
                       },
                       "CustomDevice":{
                          "$ref":"#/components/examples/Device.VIRTUAL.CustomDevice"
                       },
                       "PartialUpdateExample":{
                          "$ref":"#/components/examples/PartialUpdateExample"
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.VIRTUAL.OneOf"
                                   }
                                ]
                             }
                          }
                       }
                    }
                 }
              },
              "304":{
                 "$ref":"#/components/responses/NotModified"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        },
        "delete":{
           "tags":[
              "devices/virtual"
           ],
           "summary":"Delete device by ID.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the device to delete"
              }
           ],
           "responses":{
              "200":{
                 "$ref":"#/components/responses/DevicesSuccessfullyDeleted"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/devices/virtual/{id}/logs":{
        "get":{
           "tags":[
              "devices/virtual"
           ],
           "summary":"Get custom device logs by ID.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the custom device"
              }
           ],
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/LuaLog.Collection"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/devices/virtual/{id}/lua":{
        "get":{
           "tags":[
              "devices/virtual"
           ],
           "summary":"Get custom device lua code by ID.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the custom device"
              }
           ],
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "type":"string",
                                "example":"wtp[5]:setValue(\"state\", false)"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/devices/virtual/{id}/command/{command}":{
        "post":{
           "tags":[
              "devices/virtual"
           ],
           "summary":"Sends command to Device",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the device for which command should be called"
              },
              {
                 "in":"path",
                 "name":"command",
                 "schema":{
                    "type":"string"
                 },
                 "required":true,
                 "description":"Device specific command name. See commands schema descriptions for more info."
              }
           ],
           "requestBody":{
              "description":"Command represented as name -> parameters object. See commands schema descriptions for more info.",
              "content":{
                 "application/json":{
                    "schema":{
                       "allOf":[
                          {
                             "type":"object"
                          },
                          {
                             "$ref":"#/components/schemas/DeviceCommand.VIRTUAL.OneOf"
                          }
                       ]
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success, returns updated object.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.VIRTUAL.OneOf"
                                   }
                                ]
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/devices/virtual/{id}/element/{name}/command/{command}":{
        "post":{
           "tags":[
              "devices/virtual"
           ],
           "summary":"Sends command to Custom Device`s element",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the device"
              },
              {
                 "in":"path",
                 "name":"name",
                 "schema":{
                    "type":"string"
                 },
                 "required":true,
                 "description":"Name of element."
              },
              {
                 "in":"path",
                 "name":"command",
                 "schema":{
                    "type":"string"
                 },
                 "required":true,
                 "description":"Element specific command name. See commands schema descriptions for more info."
              }
           ],
           "requestBody":{
              "description":"Command represented as name -> parameters object. See commands schema descriptions for more info.",
              "content":{
                 "application/json":{
                    "schema":{
                       "allOf":[
                          {
                             "type":"object"
                          },
                          {
                             "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.ElementCommand.OneOf"
                          }
                       ]
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success, returns updated object.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.ElementOneOf"
                                   }
                                ]
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/devices/virtual/{id}/config-started":{
        "post":{
           "tags":[
              "devices/virtual"
           ],
           "summary":"Notify CustomDevice that configuration started.",
           "description":"Executes `onConfigStarted` in custom device. Should be called when configuration view is opened by user.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the custom device"
              }
           ],
           "responses":{
              "204":{
                 "$ref":"#/components/responses/NoContent"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/devices/virtual/{id}/config-finished":{
        "post":{
           "tags":[
              "devices/virtual"
           ],
           "summary":"Notify CustomDevice that configuration finished.",
           "description":"Executes `onConfigFinished` in custom device. Should be called when configuration view is closed by user.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the custom device"
              }
           ],
           "responses":{
              "204":{
                 "$ref":"#/components/responses/NoContent"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/devices/virtual/{id}/unban":{
        "post":{
           "tags":[
              "devices/virtual"
           ],
           "summary":"Unban custom device by ID.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the custom device"
              }
           ],
           "responses":{
              "204":{
                 "$ref":"#/components/responses/NoContent"
              },
              "304":{
                 "$ref":"#/components/responses/NotModified"
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/devices/virtual/{id}/check-update":{
        "post":{
           "tags":[
              "devices/virtual"
           ],
           "summary":"Check marketplace update of custom device.",
           "description":"Check marketplace update of custom device.<br>**NOTE:** May only be used on custom devices imported from marketplace.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the custom device"
              }
           ],
           "responses":{
              "204":{
                 "$ref":"#/components/responses/NoContent"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "405":{
                 "$ref":"#/components/responses/MethodNotAllowed"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/devices/virtual/{id}/update":{
        "post":{
           "tags":[
              "devices/virtual"
           ],
           "summary":"Update custom device from marketplace.",
           "description":"Update custom device from marketplace.<br>**NOTE:** May only be used on custom devices imported from marketplace and when its `software_status` is `update_available`.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the custom device"
              }
           ],
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice"
                             }
                          }
                       }
                    }
                 }
              },
              "304":{
                 "$ref":"#/components/responses/NotModified"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "405":{
                 "$ref":"#/components/responses/MethodNotAllowed"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              },
              "503":{
                 "$ref":"#/components/responses/NoDataAvailable"
              }
           }
        }
     },
     "/devices/virtual/{id}/export":{
        "post":{
           "tags":[
              "devices/virtual"
           ],
           "summary":"Export custom device.",
           "description":"Export custom device.<br>**NOTE:**Blocked custom device cannot be exported.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the custom device"
              }
           ],
           "requestBody":{
              "description":"Parameters of exporting",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "type":"object",
                       "required":[
                          "blocked"
                       ],
                       "properties":{
                          "blocked":{
                             "description":"Indicates whether custom device should be exported as blocked. When someone import blocked custom device they cannot modify it.",
                             "type":"boolean",
                             "example":false
                          }
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.Export"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "405":{
                 "$ref":"#/components/responses/MethodNotAllowed"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/devices/import/virtual":{
        "post":{
           "tags":[
              "devices/virtual"
           ],
           "summary":"Import custom device.",
           "requestBody":{
              "description":"Custom device to import.",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.Export"
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "ObjectAllocationError":{
                             "$ref":"#/components/examples/Response.ObjectAllocationError"
                          },
                          "ContainerOperationError":{
                             "$ref":"#/components/examples/Response.ContainerOperationError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/devices/virtual/{id}/validate-pin-code":{
        "post":{
           "tags":[
              "devices/virtual"
           ],
           "summary":"Validate pin code of custom device.",
           "description":"Validate pin code to modify or delete device for device with given `id`. Compare with device pin code when `blockade_pin_code_enabled` set to true or return success if blockade not enabled.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the virtual device"
              }
           ],
           "requestBody":{
              "description":"Pin code to validate.",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "type":"object",
                       "required":[
                          "blockade_pin_code"
                       ],
                       "properties":{
                          "blockade_pin_code":{
                             "description":"Pin code to validate.",
                             "type":"string",
                             "example":"1234"
                          }
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.Export"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "405":{
                 "$ref":"#/components/responses/MethodNotAllowed"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/marketplace/check-updates":{
        "post":{
           "tags":[
              "marketplace"
           ],
           "summary":"Check updates of every object imported from marketplace.",
           "responses":{
              "204":{
                 "$ref":"#/components/responses/NoContent"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/marketplace/custom-device/{uuid}":{
        "post":{
           "tags":[
              "marketplace"
           ],
           "summary":"Import custom device from marketplace",
           "parameters":[
              {
                 "in":"path",
                 "name":"uuid",
                 "schema":{
                    "type":"string"
                 },
                 "required":true,
                 "description":"UUID of custom device in marketplace."
              }
           ],
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "ObjectAllocationError":{
                             "$ref":"#/components/examples/Response.ObjectAllocationError"
                          },
                          "ContainerOperationError":{
                             "$ref":"#/components/examples/Response.ContainerOperationError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              },
              "504":{
                 "description":"Timeout Error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "AsyncResponseTimeout":{
                             "$ref":"#/components/examples/Response.AsyncResponseTimeout"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/devices/sbus":{
        "get":{
           "tags":[
              "devices/sbus"
           ],
           "summary":"Get collection of devices.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Device.SBus.Collection"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/devices/sbus/{id}":{
        "get":{
           "tags":[
              "devices/sbus"
           ],
           "summary":"Get a device by ID",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the device to get"
              }
           ],
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.SBus.OneOf"
                                   }
                                ]
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "patch":{
           "tags":[
              "devices/sbus"
           ],
           "summary":"Edit existing device.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the device to edit"
              }
           ],
           "requestBody":{
              "description":"SBUS device model.<br> **NOTE:** Read-only parameters eg. `id`, `type`, `class`, `messages` etc should not be sent. See schema for more info.<br> **NOTE:** Partial update is possible by sending single member of object, then rest of values remain unmodified. (See PartialUpdateExampe)",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.SBus.OneOf"
                          }
                       ]
                    },
                    "examples":{
                       "Relay":{
                          "$ref":"#/components/examples/Device.SBus.Relay"
                       },
                       "TemperatureSensor":{
                          "$ref":"#/components/examples/Device.SBus.TemperatureSensor"
                       },
                       "PartialUpdateExample":{
                          "$ref":"#/components/examples/PartialUpdateExample"
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.SBus.OneOf"
                                   }
                                ]
                             }
                          }
                       }
                    }
                 }
              },
              "304":{
                 "$ref":"#/components/responses/NotModified"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        },
        "delete":{
           "tags":[
              "devices/sbus"
           ],
           "summary":"Delete device by ID.",
           "description":"Delete device by ID. It is possible to delete all related devices i.e. with the same address by adding following body to request `{\"delete_related\":true}`",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the device to delete"
              }
           ],
           "responses":{
              "200":{
                 "$ref":"#/components/responses/DevicesSuccessfullyDeleted"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "405":{
                 "$ref":"#/components/responses/MethodNotAllowed"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/devices/sbus/{id}/command/{command}":{
        "post":{
           "tags":[
              "devices/sbus"
           ],
           "summary":"Sends command to Device",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the device for which command should be called"
              },
              {
                 "in":"path",
                 "name":"command",
                 "schema":{
                    "type":"string"
                 },
                 "required":true,
                 "description":"Device specific command name. See commands schema descriptions for more info."
              }
           ],
           "requestBody":{
              "description":"Command represented as name -> parameters object. See commands schema descriptions for more info.",
              "content":{
                 "application/json":{
                    "schema":{
                       "allOf":[
                          {
                             "type":"object"
                          },
                          {
                             "$ref":"#/components/schemas/DeviceCommand.SBus.OneOf"
                          }
                       ]
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success, returns updated object.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.SBus.OneOf"
                                   }
                                ]
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/devices/slink":{
        "get":{
           "tags":[
              "devices/slink"
           ],
           "summary":"Get collection of devices.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Device.SLink.Collection"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/devices/slink/{id}":{
        "get":{
           "tags":[
              "devices/slink"
           ],
           "summary":"Get a device by ID",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the device to get"
              }
           ],
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.SLink.OneOf"
                                   }
                                ]
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "patch":{
           "tags":[
              "devices/slink"
           ],
           "summary":"Edit existing device.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the device to edit"
              }
           ],
           "requestBody":{
              "description":"SLink device model.<br> **NOTE:** Read-only parameters eg. `id`, `type`, `class`, `messages` etc should not be sent. See schema for more info.<br> **NOTE:** Partial update is possible by sending single member of object, then rest of values remain unmodified. (See PartialUpdateExampe)",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.SLink.OneOf"
                          }
                       ]
                    },
                    "examples":{
                       "Relay":{
                          "$ref":"#/components/examples/Device.SBus.Relay"
                       },
                       "TemperatureSensor":{
                          "$ref":"#/components/examples/Device.SBus.TemperatureSensor"
                       },
                       "PartialUpdateExample":{
                          "$ref":"#/components/examples/PartialUpdateExample"
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.SLink.OneOf"
                                   }
                                ]
                             }
                          }
                       }
                    }
                 }
              },
              "304":{
                 "$ref":"#/components/responses/NotModified"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        },
        "delete":{
           "tags":[
              "devices/slink"
           ],
           "summary":"Delete device by ID.",
           "description":"Delete device by ID. It is possible to delete all related devices i.e. with the same address by adding following body to request `{\"delete_related\":true}`",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the device to delete"
              }
           ],
           "responses":{
              "200":{
                 "$ref":"#/components/responses/DevicesSuccessfullyDeleted"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "405":{
                 "$ref":"#/components/responses/MethodNotAllowed"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/devices/slink/{id}/command/{command}":{
        "post":{
           "tags":[
              "devices/slink"
           ],
           "summary":"Sends command to Device",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the device for which command should be called"
              },
              {
                 "in":"path",
                 "name":"command",
                 "schema":{
                    "type":"string"
                 },
                 "required":true,
                 "description":"Device specific command name. See commands schema descriptions for more info."
              }
           ],
           "requestBody":{
              "description":"Command represented as name -> parameters object. See commands schema descriptions for more info.",
              "content":{
                 "application/json":{
                    "schema":{
                       "allOf":[
                          {
                             "type":"object"
                          },
                          {
                             "$ref":"#/components/schemas/DeviceCommand.SLink.OneOf"
                          }
                       ]
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success, returns updated object.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.SLink.OneOf"
                                   }
                                ]
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/devices/lora":{
        "get":{
           "tags":[
              "devices/lora"
           ],
           "summary":"Get collection of devices.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Device.Lora.Collection"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/devices/lora/{id}":{
        "get":{
           "tags":[
              "devices/lora"
           ],
           "summary":"Get a device by ID",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the device to get"
              }
           ],
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.Lora.OneOf"
                                   }
                                ]
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "patch":{
           "tags":[
              "devices/lora"
           ],
           "summary":"Edit existing device.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the device to edit"
              }
           ],
           "requestBody":{
              "description":"Lora device model.<br> **NOTE:** Read-only parameters eg. `id`, `type`, `class`, `messages` etc should not be sent. See schema for more info.<br> **NOTE:** Partial update is possible by sending single member of object, then rest of values remain unmodified. (See PartialUpdateExampe)",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.Lora.OneOf"
                          }
                       ]
                    },
                    "examples":{
                       "Relay":{
                          "$ref":"#/components/examples/Device.Lora.Relay"
                       },
                       "TemperatureSensor":{
                          "$ref":"#/components/examples/Device.Lora.TemperatureSensor"
                       },
                       "PartialUpdateExample":{
                          "$ref":"#/components/examples/PartialUpdateExample"
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.Lora.OneOf"
                                   }
                                ]
                             }
                          }
                       }
                    }
                 }
              },
              "304":{
                 "$ref":"#/components/responses/NotModified"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        },
        "delete":{
           "tags":[
              "devices/lora"
           ],
           "summary":"Delete device by ID.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the device to delete"
              }
           ],
           "responses":{
              "200":{
                 "$ref":"#/components/responses/DevicesSuccessfullyDeleted"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "405":{
                 "$ref":"#/components/responses/MethodNotAllowed"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/devices/lora/{id}/command/{command}":{
        "post":{
           "tags":[
              "devices/lora"
           ],
           "summary":"Sends command to Device",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the device for which command should be called"
              },
              {
                 "in":"path",
                 "name":"command",
                 "schema":{
                    "type":"string"
                 },
                 "required":true,
                 "description":"Device specific command name. See commands schema descriptions for more info."
              }
           ],
           "requestBody":{
              "description":"Command represented as name -> parameters object. See commands schema descriptions for more info.",
              "content":{
                 "application/json":{
                    "schema":{
                       "allOf":[
                          {
                             "type":"object"
                          },
                          {
                             "$ref":"#/components/schemas/DeviceCommand.Lora.OneOf"
                          }
                       ]
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success, returns updated object.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.Lora.OneOf"
                                   }
                                ]
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/devices/specifications/modbus":{
        "get":{
           "tags":[
              "devices/modbus"
           ],
           "summary":"Get collection of all Modbus devices specifications.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Modbus.Specification.Collection"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/devices/specifications/modbus/{id}":{
        "get":{
           "tags":[
              "devices/modbus"
           ],
           "summary":"Get a Modbus device specification by ID.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the specification to get."
              }
           ],
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Modbus.Specification"
                             }
                          }
                       },
                       "examples":{
                          "Modbus.Specification.Tcp":{
                             "$ref":"#/components/examples/Modbus.Specification.Tcp"
                          },
                          "Modbus.Specification.Rtu":{
                             "$ref":"#/components/examples/Modbus.Specification.Rtu"
                          },
                          "Modbus.Specification.Tcp.HuaweiSUN2000":{
                             "$ref":"#/components/examples/Modbus.Specification.Tcp.HuaweiSUN2000"
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/devices/custom-device-module":{
        "get":{
           "tags":[
              "devices/custom-device-module"
           ],
           "summary":"Get collection of custom devices modules.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Device.CustomDeviceModule.Collection"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/devices/custom-device-module/{id}":{
        "get":{
           "tags":[
              "devices/custom-device-module"
           ],
           "summary":"Get a device module by ID",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the module device to get"
              }
           ],
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.CustomDeviceModule.OneOf"
                                   }
                                ]
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "patch":{
           "tags":[
              "devices/custom-device-module"
           ],
           "summary":"Edit existing device.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the device to edit"
              }
           ],
           "requestBody":{
              "description":"CustomDeviceModule device model.<br> **NOTE:** Read-only parameters eg. `id`, `type`, `class`, `messages` etc should not be sent. See schema for more info.<br> **NOTE:** Partial update is possible by sending single member of object, then rest of values remain unmodified. (See PartialUpdateExampe)",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.CustomDeviceModule.OneOf"
                          }
                       ]
                    },
                    "examples":{
                       "Relay":{
                          "$ref":"#/components/examples/Device.CustomDeviceModule.Relay"
                       },
                       "TemperatureRegulator":{
                          "$ref":"#/components/examples/Device.CustomDeviceModule.TemperatureRegulator"
                       },
                       "PartialUpdateExample":{
                          "$ref":"#/components/examples/PartialUpdateExample"
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.CustomDeviceModule.OneOf"
                                   }
                                ]
                             }
                          }
                       }
                    }
                 }
              },
              "304":{
                 "$ref":"#/components/responses/NotModified"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        },
        "delete":{
           "tags":[
              "devices/custom-device-module"
           ],
           "summary":"Delete device by ID.",
           "description":"Delete device by ID.`",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the device to delete"
              }
           ],
           "responses":{
              "200":{
                 "$ref":"#/components/responses/DevicesSuccessfullyDeleted"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "405":{
                 "$ref":"#/components/responses/MethodNotAllowed"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/devices/custom-device-module/{id}/command/{command}":{
        "post":{
           "tags":[
              "devices/custom-device-module"
           ],
           "summary":"Sends command to Device",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the device for which command should be called"
              },
              {
                 "in":"path",
                 "name":"command",
                 "schema":{
                    "type":"string"
                 },
                 "required":true,
                 "description":"Device specific command name. See commands schema descriptions for more info."
              }
           ],
           "requestBody":{
              "description":"Command represented as name -> parameters object. See commands schema descriptions for more info.",
              "content":{
                 "application/json":{
                    "schema":{
                       "allOf":[
                          {
                             "type":"object"
                          },
                          {
                             "$ref":"#/components/schemas/DeviceCommand.CustomDeviceModule.OneOf"
                          }
                       ]
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success, returns updated object.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.SLink.OneOf"
                                   }
                                ]
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/devices/video":{
        "get":{
           "tags":[
              "devices/video"
           ],
           "summary":"Get list of video devices",
           "description":"Returns a list of all configured video devices (cameras).",
           "responses":{
              "200":{
                 "description":"Lista urządzeń wideo.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"array",
                          "items":{
                             "$ref":"#/components/schemas/Device.Video.OneOf"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/devices/video/{id}/":{
        "get":{
           "tags":[
              "devices/video"
           ],
           "summary":"Get video device",
           "description":"Returns data for the video device with the specified ID.",
           "parameters":[
              {
                 "name":"id",
                 "in":"path",
                 "required":true,
                 "description":"Numeric ID of the device to get",
                 "schema":{
                    "type":"integer"
                 }
              }
           ],
           "responses":{
              "200":{
                 "description":"Dane urządzenia wideo.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Device.Video.OneOf"
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "patch":{
           "tags":[
              "devices/video"
           ],
           "summary":"Update video device",
           "description":"Updates data for the video device with the specified ID.",
           "parameters":[
              {
                 "name":"id",
                 "in":"path",
                 "required":true,
                 "description":"Numeric ID of the device",
                 "schema":{
                    "type":"integer"
                 }
              }
           ],
           "requestBody":{
              "description":"Camera device model.<br> **NOTE:** Read-only parameters eg. `id`, `type`, `class`, `messages` etc should not be sent. See schema for more info.<br> **NOTE:** Partial update is possible by sending single member of object, then rest of values remain unmodified. (See PartialUpdateExampe)",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.Video.OneOf"
                          }
                       ]
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.Video.OneOf"
                                   }
                                ]
                             }
                          }
                       }
                    }
                 }
              },
              "304":{
                 "$ref":"#/components/responses/NotModified"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        },
        "delete":{
           "tags":[
              "devices/video"
           ],
           "summary":"Delete video device",
           "description":"Deletes the video device with the specified ID.",
           "parameters":[
              {
                 "name":"id",
                 "in":"path",
                 "required":true,
                 "description":"Numeric ID of the device",
                 "schema":{
                    "type":"integer"
                 }
              }
           ],
           "responses":{
              "200":{
                 "$ref":"#/components/responses/DevicesSuccessfullyDeleted"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "405":{
                 "$ref":"#/components/responses/MethodNotAllowed"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/devices/video/{id}/command/{command}":{
        "post":{
           "tags":[
              "devices/video"
           ],
           "summary":"Sends command to Device",
           "description":"Sends command to Device",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the device for which command should be called"
              },
              {
                 "in":"path",
                 "name":"command",
                 "schema":{
                    "type":"string"
                 },
                 "required":true,
                 "description":"Device specific command name. See commands schema descriptions for more info."
              }
           ],
           "requestBody":{
              "description":"Command represented as name -> parameters object. See commands schema descriptions for more info.",
              "content":{
                 "application/json":{
                    "schema":{
                       "allOf":[
                          {
                             "type":"object"
                          },
                          {
                             "$ref":"#/components/schemas/Device.Video.OneOf"
                          }
                       ]
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":" Command executed successfully.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.Video.OneOf"
                                   }
                                ]
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/devices/video/{id}/snapshot":{
        "get":{
           "tags":[
              "devices/video"
           ],
           "summary":"Get camera snapshot",
           "description":"Returns the latest available snapshot from the video device.",
           "parameters":[
              {
                 "name":"id",
                 "in":"path",
                 "required":true,
                 "description":"Numeric ID of the device",
                 "schema":{
                    "type":"integer"
                 }
              }
           ],
           "responses":{
              "200":{
                 "description":" Camera snapshot.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Snapshot"
                                   }
                                ]
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/devices/video/{id}/stream":{
        "post":{
           "tags":[
              "devices/video"
           ],
           "summary":"Initialize video stream",
           "description":"Starts WebRTC negotiation process for video device. Accepts WebRTC offer structure with SDP, ICE servers and session metadata.",
           "parameters":[
              {
                 "name":"id",
                 "in":"path",
                 "required":true,
                 "description":"Numeric ID of the device",
                 "schema":{
                    "type":"integer"
                 }
              }
           ],
           "requestBody":{
              "description":"WebRTC offer message with SDP, ICE servers and session metadata.",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "$ref":"#/components/schemas/WebRTCOffer"
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Stream initialization confirmation with session information.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/StreamInitResponse"
                                   }
                                ]
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/devices/video/{id}/streams/info":{
        "get":{
           "tags":[
              "devices/video"
           ],
           "summary":"Get streams information",
           "description":"Returns information about active streams for the specified video device.",
           "parameters":[
              {
                 "name":"id",
                 "in":"path",
                 "required":true,
                 "description":"Numeric ID of the device",
                 "schema":{
                    "type":"integer"
                 }
              }
           ],
           "responses":{
              "200":{
                 "description":"Streams information for the video device.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/StreamsInfo"
                                   }
                                ]
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/devices/video/{id}/webrtc/answer":{
        "post":{
           "tags":[
              "devices/video"
           ],
           "summary":"Process WebRTC answer",
           "description":"Processes WebRTC \"answer\" message for specific video device.",
           "parameters":[
              {
                 "name":"id",
                 "in":"path",
                 "required":true,
                 "description":"Numeric ID of the device",
                 "schema":{
                    "type":"integer"
                 }
              }
           ],
           "requestBody":{
              "description":"WebRTC answer message with SDP.",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "$ref":"#/components/schemas/WebRTCAnswer"
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"WebRTC answer processing confirmation.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/WebRTCAnswerResponse"
                                   }
                                ]
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/devices/video/{id}/webrtc/bye":{
        "post":{
           "tags":[
              "devices/video"
           ],
           "summary":"Process WebRTC bye",
           "description":"Processes WebRTC \"bye\" message for the specific video device.",
           "parameters":[
              {
                 "name":"id",
                 "in":"path",
                 "required":true,
                 "description":"Numeric ID of the device",
                 "schema":{
                    "type":"integer"
                 }
              }
           ],
           "requestBody":{
              "description":"WebRTC 'bye' message with session information.",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "$ref":"#/components/schemas/WebRTCBye"
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Message processed successfully.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/WebRTCByeResponse"
                                   }
                                ]
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/devices/video/{id}/webrtc/candidate":{
        "post":{
           "tags":[
              "devices/video"
           ],
           "summary":"Process WebRTC ICE candidate",
           "description":"Processes WebRTC \"candidate\" message (ICE candidate) for specific video device.",
           "parameters":[
              {
                 "name":"id",
                 "in":"path",
                 "required":true,
                 "description":"Numeric ID of the device",
                 "schema":{
                    "type":"integer"
                 }
              }
           ],
           "requestBody":{
              "description":"WebRTC candidate message with ICE data.",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "$ref":"#/components/schemas/WebRTCCandidate"
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"ICE candidate processing confirmation.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/WebRTCCandidateResponse"
                                   }
                                ]
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/devices/video/streams/global":{
        "get":{
           "tags":[
              "devices/video"
           ],
           "summary":"Get global streams information",
           "description":"Returns global information about all active video streams across the entire system.",
           "responses":{
              "200":{
                 "description":"Global streams information for the entire system.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/GlobalStreamsInfo"
                                   }
                                ]
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/parent-devices":{
        "get":{
           "tags":[
              "parent-devices"
           ],
           "summary":"Get collection of all parent devices without contained devices data.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Parent.Collection"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/parent-devices/models":{
        "get":{
           "tags":[
              "parent-devices"
           ],
           "summary":"Get collection of all parent device models available in system.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "type":"array",
                                "items":{
                                   "type":"string"
                                }
                             }
                          }
                       },
                       "example":{
                          "data":[
                             "R-8b+",
                             "C-2n",
                             "PS-08",
                             "L9",
                             "STT-869"
                          ]
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/parent-devices/wtp":{
        "get":{
           "tags":[
              "parent-devices/wtp"
           ],
           "summary":"Get collection of all WTP parent devices with contained devices data.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Parent.WTP.Collection"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/parent-devices/wtp/{id}":{
        "get":{
           "tags":[
              "parent-devices/wtp"
           ],
           "summary":"Get wtp parent device by ID",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the device to get"
              }
           ],
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Parent.Device"
                             }
                          }
                       },
                       "examples":{
                          "Parent.WTP":{
                             "$ref":"#/components/examples/Parent.WTP/value"
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "delete":{
           "tags":[
              "parent-devices/wtp"
           ],
           "summary":"Delete parent device by ID and all related wtp devices.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the device to delete"
              }
           ],
           "responses":{
              "200":{
                 "$ref":"#/components/responses/DevicesSuccessfullyDeleted"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "405":{
                 "$ref":"#/components/responses/MethodNotAllowed"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "409":{
                 "description":"Request cannot be performed.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DeviceNotOfflineError":{
                             "$ref":"#/components/examples/Response.DeviceAssociatedWithThermostat"
                          }
                       }
                    }
                 }
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        },
        "patch":{
           "tags":[
              "parent-devices/wtp"
           ],
           "summary":"Edit existing parent device.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the device to edit"
              }
           ],
           "requestBody":{
              "description":"WTP parent device model.<br> **NOTE:** Read-only parameters eg. `id`, `status`, `address`, `version`, `firm`, should not be sent. See schema for more info.<br> **NOTE:** Partial update is possible by sending single member of object, then rest of values remain unmodified.",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "oneOf":[
                          {
                             "$ref":"#/components/schemas/Parent.Device"
                          }
                       ]
                    },
                    "examples":{
                       "ParentWTP":{
                          "value":{
                             "name":"PS-08"
                          }
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Parent.Device"
                             }
                          }
                       },
                       "examples":{
                          "Parent.WTP":{
                             "$ref":"#/components/examples/Parent.WTP/value"
                          }
                       }
                    }
                 }
              },
              "304":{
                 "$ref":"#/components/responses/NotModified"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/parent-devices/wtp/{id}/command/{command}":{
        "post":{
           "tags":[
              "parent-devices/wtp"
           ],
           "summary":"Sends command to Parent Device",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the parent device for which command should be called"
              },
              {
                 "in":"path",
                 "name":"command",
                 "schema":{
                    "type":"string"
                 },
                 "required":true,
                 "description":"Parent Device specific command name. See commands schema descriptions for more info."
              }
           ],
           "requestBody":{
              "description":"Command represented as name -> parameters object. See commands schema descriptions for more info.",
              "content":{
                 "application/json":{
                    "schema":{
                       "allOf":[
                          {
                             "type":"object"
                          },
                          {
                             "$ref":"#/components/schemas/ParentCommand.WTP.OneOf"
                          }
                       ]
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success, returns updated object.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "oneOf":[
                                   {
                                      "$ref":"#/components/schemas/Parent.Device"
                                   }
                                ]
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/parent-devices/sbus":{
        "get":{
           "tags":[
              "parent-devices/sbus"
           ],
           "summary":"Get collection of all SBus parent devices with contained devices data.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Parent.SBus.Collection"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/parent-devices/sbus/{id}":{
        "get":{
           "tags":[
              "parent-devices/sbus"
           ],
           "summary":"Get sbus parent device by ID",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the device to get"
              }
           ],
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "oneOf":[
                             {
                                "$ref":"#/components/schemas/Parent.Device"
                             },
                             {
                                "$ref":"#/components/schemas/Parent.SBus.SceneControlPanel"
                             },
                             {
                                "$ref":"#/components/schemas/Parent.SBus.EHI01"
                             },
                             {
                                "$ref":"#/components/schemas/Parent.SBus.FanCoil"
                             },
                             {
                                "$ref":"#/components/schemas/Parent.SBus.ParentDeviceWithMbus"
                             }
                          ]
                       },
                       "examples":{
                          "SBusGenericParent":{
                             "$ref":"#/components/examples/Parent.SBus"
                          },
                          "SBusSceneControlPanelParent":{
                             "$ref":"#/components/examples/Parent.SBus.SceneControlPanel"
                          },
                          "SBusEHI01":{
                             "$ref":"#/components/examples/Parent.SBus.EHI01"
                          },
                          "SBusFanCoil":{
                             "$ref":"#/components/examples/Parent.SBus.FanCoil"
                          },
                          "ParentDeviceWithMbus":{
                             "$ref":"#/components/examples/Parent.SBus.ParentDeviceWithMbus"
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "delete":{
           "tags":[
              "parent-devices/sbus"
           ],
           "summary":"Delete parent device by ID and all related sbus devices.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the device to delete"
              }
           ],
           "responses":{
              "200":{
                 "$ref":"#/components/responses/DevicesSuccessfullyDeleted"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "405":{
                 "$ref":"#/components/responses/MethodNotAllowed"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "409":{
                 "description":"Request cannot be performed.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DeviceNotOfflineError":{
                             "$ref":"#/components/examples/Response.DeviceAssociatedWithThermostat"
                          }
                       }
                    }
                 }
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        },
        "patch":{
           "tags":[
              "parent-devices/sbus"
           ],
           "summary":"Edit existing parent device.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the device to edit"
              }
           ],
           "requestBody":{
              "description":"SBus parent device model.<br> **NOTE:** Read-only parameters eg. `id`, `status`, `address`, `version`, `firm`, `has_messages` should not be sent. See schema for more info.<br> **NOTE:** Partial update is possible by sending single member of object, then rest of values remain unmodified.",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "oneOf":[
                          {
                             "$ref":"#/components/schemas/Parent.Device"
                          },
                          {
                             "$ref":"#/components/schemas/Parent.SBus.SceneControlPanel"
                          },
                          {
                             "$ref":"#/components/schemas/Parent.SBus.EHI01"
                          },
                          {
                             "$ref":"#/components/schemas/Parent.SBus.FanCoil"
                          },
                          {
                             "$ref":"#/components/schemas/Parent.SBus.ParentDeviceWithMbus"
                          }
                       ]
                    },
                    "examples":{
                       "SBusGenericParent":{
                          "$ref":"#/components/examples/Parent.SBus"
                       },
                       "SBusSceneControlPanelParent":{
                          "$ref":"#/components/examples/Parent.SBus.SceneControlPanel"
                       },
                       "SBusEHI01":{
                          "$ref":"#/components/examples/Parent.SBus.EHI01"
                       },
                       "SBusFanCoil":{
                          "$ref":"#/components/examples/Parent.SBus.FanCoil"
                       },
                       "ParentDeviceWithMbus":{
                          "$ref":"#/components/examples/Parent.SBus.ParentDeviceWithMbus"
                       },
                       "PartialUpdateExample":{
                          "$ref":"#/components/examples/PartialUpdateExample"
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Parent.Device"
                             }
                          }
                       },
                       "examples":{
                          "Parent.SBus":{
                             "$ref":"#/components/examples/Parent.SBus/value"
                          }
                       }
                    }
                 }
              },
              "304":{
                 "$ref":"#/components/responses/NotModified"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/parent-devices/sbus/{id}/command/{command}":{
        "post":{
           "tags":[
              "parent-devices/sbus"
           ],
           "summary":"Sends command to Parent Device",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the parent device for which command should be called"
              },
              {
                 "in":"path",
                 "name":"command",
                 "schema":{
                    "type":"string"
                 },
                 "required":true,
                 "description":"Parent Device specific command name. See commands schema descriptions for more info."
              }
           ],
           "requestBody":{
              "description":"Command represented as name -> parameters object. See commands schema descriptions for more info.",
              "content":{
                 "application/json":{
                    "schema":{
                       "allOf":[
                          {
                             "type":"object"
                          },
                          {
                             "$ref":"#/components/schemas/ParentCommand.SBus.OneOf"
                          }
                       ]
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success, returns updated object.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "oneOf":[
                                   {
                                      "$ref":"#/components/schemas/Parent.Device"
                                   },
                                   {
                                      "$ref":"#/components/schemas/Parent.SBus.SceneControlPanel"
                                   },
                                   {
                                      "$ref":"#/components/schemas/Parent.SBus.EHI01"
                                   },
                                   {
                                      "$ref":"#/components/schemas/Parent.SBus.FanCoil"
                                   },
                                   {
                                      "$ref":"#/components/schemas/Parent.SBus.ParentDeviceWithMbus"
                                   }
                                ]
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/parent-devices/update/sbus":{
        "post":{
           "tags":[
              "parent-devices/sbus"
           ],
           "summary":"Runs software update for given parent devices.",
           "requestBody":{
              "description":"Payload request.",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "type":"object",
                       "required":[
                          "devices"
                       ],
                       "properties":{
                          "devices":{
                             "description":"List of ID`s and classes of devices to update.",
                             "type":"array",
                             "items":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.AssociationInfoWithParent"
                                   }
                                ]
                             }
                          },
                          "force_update":{
                             "description":"Optional argument to force update, even if device up to date. Will download and send most recent update to device.",
                             "type":"boolean",
                             "example":true
                          }
                       }
                    },
                    "examples":{
                       "DevicesUpdate":{
                          "value":{
                             "devices":[
                                {
                                   "id":2,
                                   "class":"sbus_parent_device"
                                },
                                {
                                   "id":4,
                                   "class":"sbus_parent_device"
                                }
                             ]
                          }
                       },
                       "DevicesForceUpdate":{
                          "value":{
                             "devices":[
                                {
                                   "id":2,
                                   "class":"sbus_parent_device"
                                },
                                {
                                   "id":4,
                                   "class":"sbus_parent_device"
                                }
                             ],
                             "force_update":true
                          }
                       }
                    }
                 }
              }
           },
           "responses":{
              "204":{
                 "$ref":"#/components/responses/NoContent"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/parent-devices/check-update/sbus":{
        "post":{
           "tags":[
              "parent-devices/sbus"
           ],
           "summary":"Check if software update is available for given parent devices. Checks update for all devices if body not provided.",
           "requestBody":{
              "description":"List of ID`s and classes of devices to update.",
              "required":false,
              "content":{
                 "application/json":{
                    "schema":{
                       "description":"List of devices to update.",
                       "type":"object",
                       "required":[
                          "devices"
                       ],
                       "properties":{
                          "devices":{
                             "type":"array",
                             "items":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.AssociationInfoWithParent"
                                   }
                                ]
                             }
                          }
                       }
                    },
                    "examples":{
                       "DevicesUpdate":{
                          "value":{
                             "devices":[
                                {
                                   "id":2,
                                   "class":"sbus_parent_device"
                                },
                                {
                                   "id":4,
                                   "class":"sbus_parent_device"
                                }
                             ]
                          }
                       }
                    }
                 }
              }
           },
           "responses":{
              "204":{
                 "$ref":"#/components/responses/NoContent"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/parent-devices/slink":{
        "get":{
           "tags":[
              "parent-devices/slink"
           ],
           "summary":"Get collection of all SLink parent devices with contained devices data.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Parent.SLink.Collection"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/parent-devices/slink/{id}":{
        "get":{
           "tags":[
              "parent-devices/slink"
           ],
           "summary":"Get slink parent device by ID",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the device to get"
              }
           ],
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "oneOf":[
                             {
                                "$ref":"#/components/schemas/Parent.Device"
                             },
                             {
                                "$ref":"#/components/schemas/Parent.SBus.SceneControlPanel"
                             },
                             {
                                "$ref":"#/components/schemas/Parent.SBus.EHI01"
                             },
                             {
                                "$ref":"#/components/schemas/Parent.SBus.FanCoil"
                             },
                             {
                                "$ref":"#/components/schemas/Parent.SBus.ParentDeviceWithMbus"
                             }
                          ]
                       },
                       "examples":{
                          "SLinkGenericParent":{
                             "$ref":"#/components/examples/Parent.SBus"
                          },
                          "SLinkSceneControlPanelParent":{
                             "$ref":"#/components/examples/Parent.SBus.SceneControlPanel"
                          },
                          "SLinkEHI01":{
                             "$ref":"#/components/examples/Parent.SBus.EHI01"
                          },
                          "SLinkFanCoil":{
                             "$ref":"#/components/examples/Parent.SBus.ParentDeviceWithMbus"
                          },
                          "SLinkParentDeviceWithMbus":{
                             "$ref":"#/components/examples/Parent.SBus.ParentDeviceWithMbus"
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "delete":{
           "tags":[
              "parent-devices/slink"
           ],
           "summary":"Delete parent device by ID and all related slink devices.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the device to delete"
              }
           ],
           "responses":{
              "200":{
                 "$ref":"#/components/responses/DevicesSuccessfullyDeleted"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "405":{
                 "$ref":"#/components/responses/MethodNotAllowed"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "409":{
                 "description":"Request cannot be performed.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DeviceNotOfflineError":{
                             "$ref":"#/components/examples/Response.DeviceAssociatedWithThermostat"
                          }
                       }
                    }
                 }
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        },
        "patch":{
           "tags":[
              "parent-devices/slink"
           ],
           "summary":"Edit existing parent device.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the device to edit"
              }
           ],
           "requestBody":{
              "description":"SLink parent device model.<br> **NOTE:** Read-only parameters eg. `id`, `status`, `address`, `version`, `firm`, `has_messages` should not be sent. See schema for more info.<br> **NOTE:** Partial update is possible by sending single member of object, then rest of values remain unmodified.",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "oneOf":[
                          {
                             "$ref":"#/components/schemas/Parent.Device"
                          },
                          {
                             "$ref":"#/components/schemas/Parent.SBus.SceneControlPanel"
                          },
                          {
                             "$ref":"#/components/schemas/Parent.SBus.EHI01"
                          },
                          {
                             "$ref":"#/components/schemas/Parent.SBus.FanCoil"
                          },
                          {
                             "$ref":"#/components/schemas/Parent.SBus.ParentDeviceWithMbus"
                          }
                       ]
                    },
                    "examples":{
                       "SLinkGenericParent":{
                          "$ref":"#/components/examples/Parent.SBus"
                       },
                       "SLinkSceneControlPanelParent":{
                          "$ref":"#/components/examples/Parent.SBus.SceneControlPanel"
                       },
                       "SLinkEHI01":{
                          "$ref":"#/components/examples/Parent.SBus.EHI01"
                       },
                       "SLinkFanCoil":{
                          "$ref":"#/components/examples/Parent.SBus.FanCoil"
                       },
                       "SLinkParentDeviceWithMbus":{
                          "$ref":"#/components/examples/Parent.SBus.ParentDeviceWithMbus"
                       },
                       "PartialUpdateExample":{
                          "$ref":"#/components/examples/PartialUpdateExample"
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Parent.Device"
                             }
                          }
                       },
                       "examples":{
                          "Parent.SLink":{
                             "$ref":"#/components/examples/Parent.SBus/value"
                          }
                       }
                    }
                 }
              },
              "304":{
                 "$ref":"#/components/responses/NotModified"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/parent-devices/slink/{id}/command/{command}":{
        "post":{
           "tags":[
              "parent-devices/slink"
           ],
           "summary":"Sends command to Parent Device",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the parent device for which command should be called"
              },
              {
                 "in":"path",
                 "name":"command",
                 "schema":{
                    "type":"string"
                 },
                 "required":true,
                 "description":"Parent Device specific command name. See commands schema descriptions for more info."
              }
           ],
           "requestBody":{
              "description":"Command represented as name -> parameters object. See commands schema descriptions for more info.",
              "content":{
                 "application/json":{
                    "schema":{
                       "allOf":[
                          {
                             "type":"object"
                          },
                          {
                             "$ref":"#/components/schemas/ParentCommand.SLink.OneOf"
                          }
                       ]
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success, returns updated object.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "oneOf":[
                                   {
                                      "$ref":"#/components/schemas/Parent.Device"
                                   }
                                ]
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/parent-devices/update/slink":{
        "post":{
           "tags":[
              "parent-devices/slink"
           ],
           "summary":"Runs software update for given parent devices.",
           "requestBody":{
              "description":"Payload request.",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "type":"object",
                       "required":[
                          "devices"
                       ],
                       "properties":{
                          "devices":{
                             "description":"List of ID`s and classes of devices to update.",
                             "type":"array",
                             "items":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.AssociationInfoWithParent"
                                   }
                                ]
                             }
                          },
                          "force_update":{
                             "description":"Optional argument to force update, even if device up to date. Will download and send most recent update to device.",
                             "type":"boolean",
                             "example":true
                          }
                       }
                    },
                    "examples":{
                       "DevicesUpdate":{
                          "value":{
                             "devices":[
                                {
                                   "id":2,
                                   "class":"slink_parent_device"
                                },
                                {
                                   "id":4,
                                   "class":"slink_parent_device"
                                }
                             ]
                          }
                       },
                       "DevicesForceUpdate":{
                          "value":{
                             "devices":[
                                {
                                   "id":2,
                                   "class":"slink_parent_device"
                                },
                                {
                                   "id":4,
                                   "class":"slink_parent_device"
                                }
                             ],
                             "force_update":true
                          }
                       }
                    }
                 }
              }
           },
           "responses":{
              "204":{
                 "$ref":"#/components/responses/NoContent"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/parent-devices/check-update/slink":{
        "post":{
           "tags":[
              "parent-devices/slink"
           ],
           "summary":"Check if software update is available for given parent devices. Checks update for all devices if body not provided.",
           "requestBody":{
              "description":"List of ID`s and classes of devices to update.",
              "required":false,
              "content":{
                 "application/json":{
                    "schema":{
                       "description":"List of devices to update.",
                       "type":"object",
                       "required":[
                          "devices"
                       ],
                       "properties":{
                          "devices":{
                             "type":"array",
                             "items":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.AssociationInfoWithParent"
                                   }
                                ]
                             }
                          }
                       }
                    },
                    "examples":{
                       "DevicesUpdate":{
                          "value":{
                             "devices":[
                                {
                                   "id":2,
                                   "class":"slink_parent_device"
                                },
                                {
                                   "id":4,
                                   "class":"slink_parent_device"
                                }
                             ]
                          }
                       }
                    }
                 }
              }
           },
           "responses":{
              "204":{
                 "$ref":"#/components/responses/NoContent"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/parent-devices/tech":{
        "get":{
           "tags":[
              "parent-devices/tech"
           ],
           "summary":"Get collection of all TECH wired parent devices with contained devices data.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Parent.Tech.Collection"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/parent-devices/tech/{id}":{
        "get":{
           "tags":[
              "parent-devices/tech"
           ],
           "summary":"Get tech parent device by ID",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the device to get"
              }
           ],
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Parent.Tech"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "delete":{
           "tags":[
              "parent-devices/tech"
           ],
           "summary":"Delete parent device by ID and all related wired tech devices.",
           "description":"Delete parent device by ID and all related wired tech devices. Can be deleted only when parent is offline.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the module to delete"
              }
           ],
           "responses":{
              "200":{
                 "$ref":"#/components/responses/DevicesSuccessfullyDeleted"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "405":{
                 "$ref":"#/components/responses/MethodNotAllowed"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "409":{
                 "description":"Request cannot be performed.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DeviceNotOfflineError":{
                             "$ref":"#/components/examples/Response.DeviceNotOffline"
                          }
                       }
                    }
                 }
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        },
        "patch":{
           "tags":[
              "parent-devices/tech"
           ],
           "summary":"Edit existing parent device.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the device to edit"
              }
           ],
           "requestBody":{
              "description":"Tech parent device model.<br> **NOTE:** Read-only parameters eg. `id`, `status`, `address`, `vesion`, `firm`, `controller_name` etc should not be sent. See schema for more info.<br> **NOTE:** Partial update is possible by sending single member of object, then rest of values remain unmodified.",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "oneOf":[
                          {
                             "$ref":"#/components/schemas/Parent.Tech"
                          }
                       ]
                    },
                    "examples":{
                       "ParentTech":{
                          "value":{
                             "name":"L9 Central"
                          }
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Parent.Tech"
                             }
                          }
                       }
                    }
                 }
              },
              "304":{
                 "$ref":"#/components/responses/NotModified"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/parent-devices/tech/{id}/command/{command}":{
        "post":{
           "tags":[
              "parent-devices/tech"
           ],
           "summary":"Sends command to Parent Device",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the parent device for which command should be called"
              },
              {
                 "in":"path",
                 "name":"command",
                 "schema":{
                    "type":"string"
                 },
                 "required":true,
                 "description":"Parent Device specific command name. See commands schema descriptions for more info."
              }
           ],
           "requestBody":{
              "description":"Command represented as name -> parameters object. See commands schema descriptions for more info.",
              "content":{
                 "application/json":{
                    "schema":{
                       "allOf":[
                          {
                             "type":"object"
                          },
                          {
                             "$ref":"#/components/schemas/ParentCommand.TECH.OneOf"
                          }
                       ]
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success, returns updated object.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "oneOf":[
                                   {
                                      "$ref":"#/components/schemas/Parent.Tech"
                                   }
                                ]
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/parent-devices/lora":{
        "get":{
           "tags":[
              "parent-devices/lora"
           ],
           "summary":"Get collection of all Lora parent devices with contained devices data.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Parent.Lora.Collection"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/parent-devices/lora/{id}":{
        "get":{
           "tags":[
              "parent-devices/lora"
           ],
           "summary":"Get lora parent device by ID",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the device to get"
              }
           ],
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Parent.Device"
                             }
                          }
                       },
                       "examples":{
                          "Parent.Lora":{
                             "$ref":"#/components/examples/Parent.Lora/value"
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "delete":{
           "tags":[
              "parent-devices/lora"
           ],
           "summary":"Delete parent device by ID and all related lora devices.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the device to delete"
              }
           ],
           "responses":{
              "200":{
                 "$ref":"#/components/responses/DevicesSuccessfullyDeleted"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "405":{
                 "$ref":"#/components/responses/MethodNotAllowed"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "409":{
                 "description":"Request cannot be performed.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DeviceNotOfflineError":{
                             "$ref":"#/components/examples/Response.DeviceAssociatedWithThermostat"
                          }
                       }
                    }
                 }
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        },
        "patch":{
           "tags":[
              "parent-devices/lora"
           ],
           "summary":"Edit existing parent device.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the device to edit"
              }
           ],
           "requestBody":{
              "description":"Lora parent device model.<br> **NOTE:** Read-only parameters eg. `id`, `status`, `address`, `version`, `firm`, should not be sent. See schema for more info.<br> **NOTE:** Partial update is possible by sending single member of object, then rest of values remain unmodified.",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "oneOf":[
                          {
                             "$ref":"#/components/schemas/Parent.Device"
                          }
                       ]
                    },
                    "examples":{
                       "ParentLora":{
                          "value":{
                             "name":"PS-08"
                          }
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Parent.Device"
                             }
                          }
                       },
                       "examples":{
                          "Parent.Lora":{
                             "$ref":"#/components/examples/Parent.Lora/value"
                          }
                       }
                    }
                 }
              },
              "304":{
                 "$ref":"#/components/responses/NotModified"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/parent-devices/lora/{id}/command/{command}":{
        "post":{
           "tags":[
              "parent-devices/lora"
           ],
           "summary":"Sends command to Parent Device",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the parent device for which command should be called"
              },
              {
                 "in":"path",
                 "name":"command",
                 "schema":{
                    "type":"string"
                 },
                 "required":true,
                 "description":"Parent Device specific command name. See commands schema descriptions for more info."
              }
           ],
           "requestBody":{
              "description":"Command represented as name -> parameters object. See commands schema descriptions for more info.",
              "content":{
                 "application/json":{
                    "schema":{
                       "allOf":[
                          {
                             "type":"object"
                          },
                          {
                             "$ref":"#/components/schemas/ParentCommand.Lora.OneOf"
                          }
                       ]
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success, returns updated object.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "oneOf":[
                                   {
                                      "$ref":"#/components/schemas/Parent.Device"
                                   }
                                ]
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/parent-devices/system-module":{
        "get":{
           "tags":[
              "parent-devices/system-module"
           ],
           "summary":"Get collection of all System Module parent devices with contained devices data.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Parent.SystemModule.Collection"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/parent-devices/system-module/{id}":{
        "get":{
           "tags":[
              "parent-devices/system-module"
           ],
           "summary":"Get System Module parent device by ID",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the device to get"
              }
           ],
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Parent.SystemModule"
                             }
                          }
                       },
                       "examples":{
                          "Parent.WTP":{
                             "$ref":"#/components/examples/Parent.SystemModule/value"
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "delete":{
           "tags":[
              "parent-devices/system-module"
           ],
           "summary":"Delete parent device by ID and all related SystemModule devices.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the device to delete"
              }
           ],
           "responses":{
              "200":{
                 "$ref":"#/components/responses/DevicesSuccessfullyDeleted"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "405":{
                 "$ref":"#/components/responses/MethodNotAllowed"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "409":{
                 "description":"Request cannot be performed.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DeviceNotOfflineError":{
                             "$ref":"#/components/examples/Response.DeviceAssociatedWithThermostat"
                          }
                       }
                    }
                 }
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        },
        "patch":{
           "tags":[
              "parent-devices/system-module"
           ],
           "summary":"Edit existing parent device.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the device to edit"
              }
           ],
           "requestBody":{
              "description":"System Module parent device model.<br> **NOTE:** Read-only parameters eg. `id`, `status`, `uuid`, `version`, `firm`, should not be sent. See schema for more info.<br> **NOTE:** Partial update is possible by sending single member of object, then rest of values remain unmodified.",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "oneOf":[
                          {
                             "$ref":"#/components/schemas/Parent.SystemModule"
                          }
                       ]
                    },
                    "examples":{
                       "ParentSystemModule":{
                          "value":{
                             "name":"My WTP Extender"
                          }
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Parent.SystemModule"
                             }
                          }
                       },
                       "examples":{
                          "Parent.WTP":{
                             "$ref":"#/components/examples/Parent.SystemModule/value"
                          }
                       }
                    }
                 }
              },
              "304":{
                 "$ref":"#/components/responses/NotModified"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/parent-devices/system-module/{id}/command/{command}":{
        "post":{
           "tags":[
              "parent-devices/system-module"
           ],
           "summary":"Sends command to Parent Device",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the parent device for which command should be called"
              },
              {
                 "in":"path",
                 "name":"command",
                 "schema":{
                    "type":"string"
                 },
                 "required":true,
                 "description":"Parent Device specific command name. See commands schema descriptions for more info."
              }
           ],
           "requestBody":{
              "description":"Command represented as name -> parameters object. See commands schema descriptions for more info.",
              "content":{
                 "application/json":{
                    "schema":{
                       "allOf":[
                          {
                             "type":"object"
                          },
                          {
                             "$ref":"#/components/schemas/ParentCommand.SystemModule.OneOf"
                          }
                       ]
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success, returns updated object.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "oneOf":[
                                   {
                                      "$ref":"#/components/schemas/Parent.SystemModule"
                                   }
                                ]
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/parent-devices/update/system-module":{
        "post":{
           "tags":[
              "parent-devices/system-module"
           ],
           "summary":"Runs software update for given parent devices.",
           "requestBody":{
              "description":"List of ID`s and classes of devices to update.",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "description":"List of devices to update.",
                       "type":"object",
                       "required":[
                          "devices"
                       ],
                       "properties":{
                          "devices":{
                             "type":"array",
                             "items":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.AssociationInfoWithParent"
                                   }
                                ]
                             }
                          }
                       }
                    },
                    "examples":{
                       "DevicesUpdate":{
                          "value":{
                             "devices":[
                                {
                                   "id":2,
                                   "class":"system_module_parent_device"
                                },
                                {
                                   "id":4,
                                   "class":"system_module_parent_device"
                                }
                             ]
                          }
                       }
                    }
                 }
              }
           },
           "responses":{
              "204":{
                 "$ref":"#/components/responses/NoContent"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "405":{
                 "$ref":"#/components/responses/MethodNotAllowed"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/parent-devices/check-update/system-module":{
        "post":{
           "tags":[
              "parent-devices/system-module"
           ],
           "summary":"Check if software update is available for given parent devices. Checks update for all devices if body not provided.",
           "requestBody":{
              "description":"List of ID`s and classes of devices to update.",
              "required":false,
              "content":{
                 "application/json":{
                    "schema":{
                       "description":"List of devices to update.",
                       "type":"object",
                       "required":[
                          "devices"
                       ],
                       "properties":{
                          "devices":{
                             "type":"array",
                             "items":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.AssociationInfoWithParent"
                                   }
                                ]
                             }
                          }
                       }
                    },
                    "examples":{
                       "DevicesUpdate":{
                          "value":{
                             "devices":[
                                {
                                   "id":2,
                                   "class":"system_module_parent_device"
                                },
                                {
                                   "id":4,
                                   "class":"system_module_parent_device"
                                }
                             ]
                          }
                       }
                    }
                 }
              }
           },
           "responses":{
              "204":{
                 "$ref":"#/components/responses/NoContent"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/parent-devices/modbus":{
        "get":{
           "tags":[
              "parent-devices/modbus"
           ],
           "summary":"Get collection of all Modbus parent devices with contained devices data.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Parent.Modbus.Collection"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "post":{
           "tags":[
              "parent-devices/modbus"
           ],
           "summary":"Add new Modbus parent device using certain specification",
           "requestBody":{
              "description":"Modbus parent device data and identifier of model specification.",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "oneOf":[
                          {
                             "$ref":"#/components/schemas/Parent.Modbus.Request"
                          },
                          {
                             "$ref":"#/components/schemas/Parent.Modbus.Request.HuaweiSUN2000"
                          },
                          {
                             "$ref":"#/components/schemas/Parent.Modbus.Request.DaikinAltherma"
                          },
                          {
                             "$ref":"#/components/schemas/Parent.Modbus.Request.AmpowrAmpihome"
                          }
                       ]
                    },
                    "examples":{
                       "Modbus.Parent.Tcp":{
                          "$ref":"#/components/examples/Parent.Modbus.Request.Tcp"
                       },
                       "Modbus.Parent.Rtu":{
                          "$ref":"#/components/examples/Parent.Modbus.Request.Rtu"
                       },
                       "Modbus.Parent.Tcp.HuaweiSUN2000":{
                          "$ref":"#/components/examples/Parent.Modbus.Request.Tcp.HuaweiSUN2000"
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Parent.Modbus"
                             }
                          }
                       },
                       "examples":{
                          "Modbus.Parent.Tcp":{
                             "$ref":"#/components/examples/Parent.Modbus.Tcp"
                          },
                          "Modbus.Parent.Rtu":{
                             "$ref":"#/components/examples/Parent.Modbus.Rtu"
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "ObjectAllocationError":{
                             "$ref":"#/components/examples/Response.ObjectAllocationError"
                          },
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              },
              "503":{
                 "$ref":"#/components/responses/ObjectContainerBusyError"
              }
           }
        }
     },
     "/parent-devices/modbus/{id}":{
        "get":{
           "tags":[
              "parent-devices/modbus"
           ],
           "summary":"Get Modbus parent device by ID.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numberic ID of the device to get."
              }
           ],
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Parent.Modbus"
                             }
                          }
                       },
                       "examples":{
                          "Parent.Modbus.Tcp":{
                             "$ref":"#/components/examples/Parent.Modbus.Tcp"
                          },
                          "Parent.Modbus.Rtu":{
                             "$ref":"#/components/examples/Parent.Modbus.Rtu"
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "delete":{
           "tags":[
              "parent-devices/modbus"
           ],
           "summary":"Delete parent device by ID and all related modbus devices.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the parent device to delete."
              }
           ],
           "responses":{
              "200":{
                 "$ref":"#/components/responses/DevicesSuccessfullyDeleted"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "405":{
                 "$ref":"#/components/responses/MethodNotAllowed"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "409":{
                 "description":"Request cannot be performed.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DeviceNotOfflineError":{
                             "$ref":"#/components/examples/Response.DeviceAssociatedWithThermostat"
                          }
                       }
                    }
                 }
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        },
        "patch":{
           "tags":[
              "parent-devices/modbus"
           ],
           "summary":"Edit existing parent device.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the device to edit."
              }
           ],
           "requestBody":{
              "description":"Modbus parent device model.<br> **NOTE:** Read-only parameters eg. `id`, `status`, `model`, `class` should not be sent. See schema for more info.<br> **NOTE:** Partial update is possible by sending single member of object, then rest of values remain unmodified.",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "$ref":"#/components/schemas/Parent.Modbus"
                    },
                    "examples":{
                       "Parent.Modbus.Tcp":{
                          "$ref":"#/components/examples/Parent.Modbus.Tcp"
                       },
                       "Parent.Modbus.Rtu":{
                          "$ref":"#/components/examples/Parent.Modbus.Rtu"
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Parent.Modbus"
                             }
                          }
                       },
                       "examples":{
                          "Parent.Modbus.Tcp":{
                             "$ref":"#/components/examples/Parent.Modbus.Tcp"
                          },
                          "Parent.Modbus.Rtu":{
                             "$ref":"#/components/examples/Parent.Modbus.Rtu"
                          }
                       }
                    }
                 }
              },
              "304":{
                 "$ref":"#/components/responses/NotModified"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/parent-devices/modbus/{id}/command/{command}":{
        "post":{
           "tags":[
              "parent-devices/modbus"
           ],
           "summary":"Sends command to Modbus Parent Device.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the parent device for which command should be called."
              },
              {
                 "in":"path",
                 "name":"command",
                 "schema":{
                    "type":"string"
                 },
                 "required":true,
                 "description":"Parent Device specific command name. See commands schema descriptions for more info."
              }
           ],
           "requestBody":{
              "description":"Command represented as name -> parameters object. See commands schema descriptions for more info.",
              "content":{
                 "application/json":{
                    "schema":{
                       "allOf":[
                          {
                             "type":"object"
                          },
                          {
                             "$ref":"#/components/schemas/ParentCommand.Modbus.OneOf"
                          }
                       ]
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "oneOf":[
                                   {
                                      "$ref":"#/components/schemas/Parent.Modbus"
                                   }
                                ]
                             }
                          }
                       },
                       "examples":{
                          "Parent.Modbus.Tcp":{
                             "$ref":"#/components/examples/Parent.Modbus.Tcp"
                          },
                          "Parent.Modbus.Rtu":{
                             "$ref":"#/components/examples/Parent.Modbus.Rtu"
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/parent-devices/alarm-system":{
        "get":{
           "tags":[
              "parent-devices/alarm-system"
           ],
           "summary":"Get collection of all Alarm system parent devices with contained devices data.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Parent.AlarmSystem.Collection"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "post":{
           "tags":[
              "parent-devices/alarm-system"
           ],
           "summary":"Add new Alarm system parent device.",
           "requestBody":{
              "description":"Alarm System device model.<br> **NOTE:** Parameter `id` is ignored. (Read-only)<br> **NOTE:** Parameter `type` is required.<br> **NOTE:** Since keys are optional (excluding these mentioned in notes), missing values will be set to default.",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "oneOf":[
                          {
                             "$ref":"#/components/schemas/Parent.AlarmSystem.Satel"
                          }
                       ]
                    },
                    "examples":{
                       "SatelParentDevice":{
                          "$ref":"#/components/examples/Parent.AlarmSystem.Satel"
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Parent.AlarmSystem.Satel"
                             }
                          }
                       },
                       "examples":{
                          "SatelParentDevice":{
                             "$ref":"#/components/examples/Parent.AlarmSystem.Satel"
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "ObjectAllocationError":{
                             "$ref":"#/components/examples/Response.ObjectAllocationError"
                          },
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              },
              "503":{
                 "$ref":"#/components/responses/ObjectContainerBusyError"
              }
           }
        }
     },
     "/parent-devices/alarm-system/{id}":{
        "get":{
           "tags":[
              "parent-devices/alarm-system"
           ],
           "summary":"Get Alarm system parent device by ID.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numberic ID of the device to get."
              }
           ],
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Parent.AlarmSystem.Satel"
                             }
                          }
                       },
                       "examples":{
                          "SatelParentDevice":{
                             "$ref":"#/components/examples/Parent.AlarmSystem.Satel"
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "delete":{
           "tags":[
              "parent-devices/alarm-system"
           ],
           "summary":"Delete parent device by ID and all related devices.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the parent device to delete."
              }
           ],
           "responses":{
              "200":{
                 "$ref":"#/components/responses/DevicesSuccessfullyDeleted"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "405":{
                 "$ref":"#/components/responses/MethodNotAllowed"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "409":{
                 "description":"Request cannot be performed.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DeviceNotOfflineError":{
                             "$ref":"#/components/examples/Response.DeviceAssociatedWithThermostat"
                          }
                       }
                    }
                 }
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        },
        "patch":{
           "tags":[
              "parent-devices/alarm-system"
           ],
           "summary":"Edit existing parent device.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the device to edit."
              }
           ],
           "requestBody":{
              "description":"Alarm System parent device model.<br> **NOTE:** Read-only parameters eg. `id`, `status`, `model`, `class` should not be sent. See schema for more info.<br> **NOTE:** Partial update is possible by sending single member of object, then rest of values remain unmodified.",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "$ref":"#/components/schemas/Parent.AlarmSystem.Satel"
                    },
                    "examples":{
                       "SatelParentDevice":{
                          "$ref":"#/components/examples/Parent.AlarmSystem.Satel"
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Parent.AlarmSystem.Satel"
                             }
                          }
                       },
                       "examples":{
                          "SatelParentDevice":{
                             "$ref":"#/components/examples/Parent.AlarmSystem.Satel"
                          }
                       }
                    }
                 }
              },
              "304":{
                 "$ref":"#/components/responses/NotModified"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/parent-devices/alarm-system/{id}/command/{command}":{
        "post":{
           "tags":[
              "parent-devices/alarm-system"
           ],
           "summary":"Sends command to Alarm System Parent Device.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the parent device for which command should be called."
              },
              {
                 "in":"path",
                 "name":"command",
                 "schema":{
                    "type":"string"
                 },
                 "required":true,
                 "description":"Parent Device specific command name. See commands schema descriptions for more info."
              }
           ],
           "requestBody":{
              "description":"Command represented as name -> parameters object. See commands schema descriptions for more info.",
              "content":{
                 "application/json":{
                    "schema":{
                       "allOf":[
                          {
                             "type":"object"
                          },
                          {
                             "$ref":"#/components/schemas/ParentCommand.AlarmSystem.OneOf"
                          }
                       ]
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "oneOf":[
                                   {
                                      "$ref":"#/components/schemas/Parent.AlarmSystem.Satel"
                                   }
                                ]
                             }
                          }
                       },
                       "examples":{
                          "SatelParentDevice":{
                             "$ref":"#/components/examples/Parent.AlarmSystem.Satel"
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/parent-devices/video":{
        "get":{
           "tags":[
              "parent-devices/video"
           ],
           "summary":"Get list of video parent devices",
           "description":"Returns a list of all configured video parent devices (e.g., NVR, video servers).",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Parent.Video.Collection"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "post":{
           "tags":[
              "parent-devices/video"
           ],
           "summary":"Add new video parent device with cameras",
           "description":"Adds a new video parent device (e.g., NVR, video server) with cameras to the system.",
           "requestBody":{
              "description":"Data for the new video parent device with cameras.",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "$ref":"#/components/schemas/VideoParentDeviceInput"
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/VideoParentDevice"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "ObjectAllocationError":{
                             "$ref":"#/components/examples/Response.ObjectAllocationError"
                          },
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/parent-devices/video/{id}":{
        "get":{
           "tags":[
              "parent-devices/video"
           ],
           "summary":"Get video parent device",
           "description":"Returns data for the video parent device with the specified ID.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numberic ID of the device to get."
              }
           ],
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Parent.Video"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "patch":{
           "tags":[
              "parent-devices/video"
           ],
           "summary":"Update video parent device",
           "description":"Updates data for the video parent device with the specified ID.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numberic ID of the device to get."
              }
           ],
           "requestBody":{
              "description":"Video System parent device model.<br> **NOTE:** Read-only parameters eg. `id`, `status`, `model`, `class` should not be sent. See schema for more info.<br> **NOTE:** Partial update is possible by sending single member of object, then rest of values remain unmodified.",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "$ref":"#/components/schemas/Parent.Video"
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Parent.Video"
                             }
                          }
                       }
                    }
                 }
              },
              "304":{
                 "$ref":"#/components/responses/NotModified"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        },
        "delete":{
           "tags":[
              "parent-devices/video"
           ],
           "summary":"Delete video parent device",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the parent device to delete."
              }
           ],
           "responses":{
              "200":{
                 "$ref":"#/components/responses/DevicesSuccessfullyDeleted"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "405":{
                 "$ref":"#/components/responses/MethodNotAllowed"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "409":{
                 "description":"Request cannot be performed.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DeviceNotOfflineError":{
                             "$ref":"#/components/examples/Response.DeviceAssociatedWithThermostat"
                          }
                       }
                    }
                 }
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/parent-devices/video/{id}/command/{command}":{
        "post":{
           "tags":[
              "parent-devices/video"
           ],
           "summary":"Execute command on video parent device",
           "description":"Executes a command on the video parent device (e.g., restart, get_status).",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the parent device for which command should be called."
              },
              {
                 "in":"path",
                 "name":"command",
                 "schema":{
                    "type":"string"
                 },
                 "required":true,
                 "description":"Parent Device specific command name. See commands schema descriptions for more info."
              }
           ],
           "requestBody":{
              "description":"Command represented as name -> parameters object. See commands schema descriptions for more info.",
              "content":{
                 "application/json":{
                    "schema":{
                       "allOf":[
                          {
                             "type":"object"
                          },
                          {
                             "$ref":"#/components/schemas/ParentCommand.Video.OneOf"
                          }
                       ]
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "oneOf":[
                                   {
                                      "$ref":"#/components/schemas/Parent.Video"
                                   }
                                ]
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/devices/system-module":{
        "get":{
           "tags":[
              "devices/system-module"
           ],
           "summary":"Get collection of system modules.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Device.SystemModule.Collection"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/devices/system-module/{id}":{
        "get":{
           "tags":[
              "devices/system-module"
           ],
           "summary":"Get a device by ID",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the device to get"
              }
           ],
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.SystemModule.OneOf"
                                   }
                                ]
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "patch":{
           "tags":[
              "devices/system-module"
           ],
           "summary":"Edit existing module.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the module to edit"
              }
           ],
           "requestBody":{
              "description":"System module model.<br> **NOTE:** Read-only parameters eg. `id`, `type`, `class`, `messages` etc should not be sent. See schema for more info.<br> **NOTE:** Partial update is possible by sending single member of object, then rest of values remain unmodified. (See PartialUpdateExampe)",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.SystemModule.OneOf"
                          }
                       ]
                    },
                    "examples":{
                       "WTPTransceiver":{
                          "$ref":"#/components/examples/Device.SystemModule.WTPTransceiver"
                       },
                       "WTPExtender":{
                          "$ref":"#/components/examples/Device.SystemModule.WTPExtender"
                       },
                       "SBusTransceiver":{
                          "$ref":"#/components/examples/Device.SystemModule.SBusTransceiver"
                       },
                       "SBusExtender":{
                          "$ref":"#/components/examples/Device.SystemModule.SBusExtender"
                       },
                       "ModbusTransceiver":{
                          "$ref":"#/components/examples/Device.SystemModule.ModbusTransceiver"
                       },
                       "ModbusExtender":{
                          "$ref":"#/components/examples/Device.SystemModule.ModbusExtender"
                       },
                       "TECHRSTransceiver":{
                          "$ref":"#/components/examples/Device.SystemModule.TECHRSTransceiver"
                       },
                       "TECHRSExtender":{
                          "$ref":"#/components/examples/Device.SystemModule.TECHRSExtender"
                       },
                       "PartialUpdateExample":{
                          "$ref":"#/components/examples/PartialUpdateExample"
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.SystemModule.OneOf"
                                   }
                                ]
                             }
                          }
                       }
                    }
                 }
              },
              "304":{
                 "$ref":"#/components/responses/NotModified"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        },
        "delete":{
           "tags":[
              "devices/system-module"
           ],
           "summary":"Delete module by ID.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the module to delete"
              }
           ],
           "responses":{
              "200":{
                 "$ref":"#/components/responses/DevicesSuccessfullyDeleted"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "405":{
                 "$ref":"#/components/responses/MethodNotAllowed"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/devices/system-module/{id}/ping":{
        "post":{
           "tags":[
              "devices/system-module"
           ],
           "summary":"Ping device by id.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the module to ping"
              }
           ],
           "responses":{
              "204":{
                 "$ref":"#/components/responses/NoContent"
              },
              "400":{
                 "$ref":"#/components/responses/InvalidObjectIdSupplied"
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/devices/system-module/{id}/command/{command}":{
        "post":{
           "tags":[
              "devices/system-module"
           ],
           "summary":"Sends command to Device",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the device for which command should be called"
              },
              {
                 "in":"path",
                 "name":"command",
                 "schema":{
                    "type":"string"
                 },
                 "required":true,
                 "description":"Device specific command name. See commands schema descriptions for more info."
              }
           ],
           "requestBody":{
              "description":"Command represented as name -> parameters object. See commands schema descriptions for more info.",
              "content":{
                 "application/json":{
                    "schema":{
                       "allOf":[
                          {
                             "type":"object"
                          },
                          {
                             "$ref":"#/components/schemas/DeviceCommand.SystemModule.OneOf"
                          }
                       ]
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success, returns updated object.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.SystemModule.OneOf"
                                   }
                                ]
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/devices/alarm-system":{
        "get":{
           "tags":[
              "devices/alarm-system"
           ],
           "summary":"Get collection of alarm system devices.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Device.AlarmSystem.Collection"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/devices/alarm-system/{id}":{
        "get":{
           "tags":[
              "devices/alarm-system"
           ],
           "summary":"Get a device by ID",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the device to get"
              }
           ],
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.AlarmSystem.OneOf"
                                   }
                                ]
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "patch":{
           "tags":[
              "devices/alarm-system"
           ],
           "summary":"Edit existing device.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the device to edit"
              }
           ],
           "requestBody":{
              "description":"Alarm system device model.<br> **NOTE:** Read-only parameters eg. `id`, `type`, `class`, `messages` etc should not be sent. See schema for more info.<br> **NOTE:** Partial update is possible by sending single member of object, then rest of values remain unmodified. (See PartialUpdateExampe)",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.AlarmSystem.OneOf"
                          }
                       ]
                    },
                    "examples":{
                       "TwoStateInputSensor":{
                          "$ref":"#/components/examples/Device.AlarmSystem.Satel.TwoStateInputSensor"
                       },
                       "TwoStateOutput":{
                          "$ref":"#/components/examples/Device.AlarmSystem.Satel.TwoStateOutput"
                       },
                       "PartialUpdateExample":{
                          "$ref":"#/components/examples/PartialUpdateExample"
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.AlarmSystem.OneOf"
                                   }
                                ]
                             }
                          }
                       }
                    }
                 }
              },
              "304":{
                 "$ref":"#/components/responses/NotModified"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        },
        "delete":{
           "tags":[
              "devices/alarm-system"
           ],
           "summary":"Delete device by ID.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the device to delete"
              }
           ],
           "responses":{
              "200":{
                 "$ref":"#/components/responses/DevicesSuccessfullyDeleted"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "405":{
                 "$ref":"#/components/responses/MethodNotAllowed"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/devices/alarm-system/{id}/command/{command}":{
        "post":{
           "tags":[
              "devices/alarm-system"
           ],
           "summary":"Sends command to Device",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the device for which command should be called"
              },
              {
                 "in":"path",
                 "name":"command",
                 "schema":{
                    "type":"string"
                 },
                 "required":true,
                 "description":"Device specific command name. See commands schema descriptions for more info."
              }
           ],
           "requestBody":{
              "description":"Command represented as name -> parameters object. See commands schema descriptions for more info.",
              "content":{
                 "application/json":{
                    "schema":{
                       "allOf":[
                          {
                             "type":"object"
                          },
                          {
                             "$ref":"#/components/schemas/DeviceCommand.AlarmSystem.OneOf"
                          }
                       ]
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success, returns updated object.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.AlarmSystem.OneOf"
                                   }
                                ]
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/scenes":{
        "get":{
           "tags":[
              "scenes"
           ],
           "summary":"Get collection of all scenes.",
           "responses":{
              "200":{
                 "description":"Success.<br> **NOTE:** Scene items in collection are stripped out of lua and xml code to make response more lightweight.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Scene.Collection"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "post":{
           "tags":[
              "scenes"
           ],
           "summary":"Add new scene.",
           "requestBody":{
              "description":"Scene model.<br> **NOTE:** Parameter `id` is ignored. (Read-only)<br> **NOTE:** Since keys are optional (excluding these mentioned in notes), missing values will be set to default.",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "$ref":"#/components/schemas/Scene.Model"
                    },
                    "examples":{
                       "Scene":{
                          "$ref":"#/components/examples/Scene.Model"
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Scene.Model"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "ObjectAllocationError":{
                             "$ref":"#/components/examples/Response.ObjectAllocationError"
                          },
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              },
              "503":{
                 "$ref":"#/components/responses/ObjectContainerBusyError"
              }
           }
        }
     },
     "/scenes/tags":{
        "get":{
           "tags":[
              "scenes"
           ],
           "summary":"Get list of all tags added to all scenes.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/TagCollection"
                             }
                          }
                       },
                       "example":{
                          "data":[
                             "light",
                             "outlet",
                             "sensor"
                          ]
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/scenes/{id}":{
        "get":{
           "tags":[
              "scenes"
           ],
           "summary":"Get scene by ID.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the scene to get"
              }
           ],
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Scene.Model"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "patch":{
           "tags":[
              "scenes"
           ],
           "summary":"Edit existing scene.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the scene to edit"
              }
           ],
           "requestBody":{
              "description":"Scene model.<br> **NOTE:** Parameter `id` is ignored. (Read-only)<br> **NOTE:** Partial update is possible by sending single member of object, then rest of values remain unmodified. (See PartialUpdateExampe)",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "$ref":"#/components/schemas/Scene.Model"
                    },
                    "examples":{
                       "Scene":{
                          "$ref":"#/components/examples/Scene.Model"
                       },
                       "PartialUpdateExample":{
                          "$ref":"#/components/examples/PartialUpdateExample"
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Scene.Model"
                             }
                          }
                       }
                    }
                 }
              },
              "304":{
                 "$ref":"#/components/responses/NotModified"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        },
        "delete":{
           "tags":[
              "scenes"
           ],
           "summary":"Delete scene by ID.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the scene to delete"
              }
           ],
           "responses":{
              "204":{
                 "$ref":"#/components/responses/NoContent"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/scenes/{id}/lua":{
        "get":{
           "tags":[
              "scenes"
           ],
           "summary":"Get scene lua by ID.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the scene"
              }
           ],
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "type":"string",
                                "example":"wtp[5]:setValue(\"state\", false)"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/scenes/{id}/schema":{
        "get":{
           "tags":[
              "scenes"
           ],
           "summary":"Get scene schema by ID.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the scene"
              }
           ],
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "type":"string",
                                "example":"{\"json\": \"schema\", \"goes\": \"here\"}"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/scenes/{id}/activate":{
        "post":{
           "tags":[
              "scenes"
           ],
           "summary":"Activate scene by ID.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the scene to activate"
              }
           ],
           "responses":{
              "204":{
                 "$ref":"#/components/responses/NoContent"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "SceneDisabledError":{
                             "description":"Returned when user tried to activate disabled scene.",
                             "value":{
                                "error":{
                                   "message":{
                                      "text":"Scene disabled.",
                                      "id":7209
                                   }
                                }
                             }
                          },
                          "SceneBannedError":{
                             "description":"Returned when user tried to activate banned scene.",
                             "value":{
                                "error":{
                                   "message":{
                                      "text":"Scene banned.",
                                      "id":7210
                                   }
                                }
                             }
                          },
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/scenes/{id}/unban":{
        "post":{
           "tags":[
              "scenes"
           ],
           "summary":"Unban scene by ID.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the scene to unban"
              }
           ],
           "responses":{
              "204":{
                 "$ref":"#/components/responses/NoContent"
              },
              "304":{
                 "$ref":"#/components/responses/NotModified"
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/scenes/{id}/command/{command}":{
        "post":{
           "tags":[
              "scenes"
           ],
           "summary":"Sends command to scenes",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the scene for which command should be called"
              },
              {
                 "in":"path",
                 "name":"command",
                 "schema":{
                    "type":"string"
                 },
                 "required":true,
                 "description":"Scene specific command name. See commands schema descriptions for more info."
              }
           ],
           "requestBody":{
              "description":"Command represented as name -> parameters object. See commands schema descriptions for more info.",
              "content":{
                 "application/json":{
                    "schema":{
                       "allOf":[
                          {
                             "type":"object"
                          },
                          {
                             "$ref":"#/components/schemas/SceneCommand.OneOf"
                          }
                       ]
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success, returns updated object.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Scene.Model"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/scenes/{id}/logs":{
        "get":{
           "tags":[
              "scenes"
           ],
           "summary":"Get scene logs by ID.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the scene"
              }
           ],
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/LuaLog.Collection"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/automations":{
        "get":{
           "tags":[
              "automations"
           ],
           "summary":"Get collection of all automations.",
           "responses":{
              "200":{
                 "description":"Success.<br> **NOTE:** Automation items in collection are stripped out of lua and xml code to make response more lightweight.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Automation.Collection"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "post":{
           "tags":[
              "automations"
           ],
           "summary":"Add new automation.",
           "requestBody":{
              "description":"Automation model.<br> **NOTE:** Parameter `id` is ignored. (Read-only)<br> **NOTE:** Since keys are optional (excluding these mentioned in notes), missing values will be set to default.",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "$ref":"#/components/schemas/Automation.Model"
                    },
                    "examples":{
                       "Automation":{
                          "$ref":"#/components/examples/Automation.Model"
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Automation.Model"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "ObjectAllocationError":{
                             "$ref":"#/components/examples/Response.ObjectAllocationError"
                          },
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              },
              "503":{
                 "$ref":"#/components/responses/ObjectContainerBusyError"
              }
           }
        }
     },
     "/automations/tags":{
        "get":{
           "tags":[
              "automations"
           ],
           "summary":"Get list of all tags added to all automations.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/TagCollection"
                             }
                          }
                       },
                       "example":{
                          "data":[
                             "light",
                             "outlet",
                             "sensor"
                          ]
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/automations/{id}":{
        "get":{
           "tags":[
              "automations"
           ],
           "summary":"Get automation by ID.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the automation to get"
              }
           ],
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Automation.Model"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "patch":{
           "tags":[
              "automations"
           ],
           "summary":"Edit existing automation.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the automation to edit"
              }
           ],
           "requestBody":{
              "description":"Automation model.<br> **NOTE:** Parameter `id` is ignored. (Read-only)<br> **NOTE:** Partial update is possible by sending single member of object, then rest of values remain unmodified. (See PartialUpdateExampe)",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "$ref":"#/components/schemas/Automation.Model"
                    },
                    "examples":{
                       "Automation":{
                          "$ref":"#/components/examples/Automation.Model"
                       },
                       "PartialUpdateExample":{
                          "$ref":"#/components/examples/PartialUpdateExample"
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Automation.Model"
                             }
                          }
                       }
                    }
                 }
              },
              "304":{
                 "$ref":"#/components/responses/NotModified"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        },
        "delete":{
           "tags":[
              "automations"
           ],
           "summary":"Delete automation by ID.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the automation to delete"
              }
           ],
           "responses":{
              "204":{
                 "$ref":"#/components/responses/NoContent"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/automations/{id}/lua":{
        "get":{
           "tags":[
              "automations"
           ],
           "summary":"Get automation lua by ID.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the automation"
              }
           ],
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "type":"string",
                                "example":"wtp[5]:setValue(\"state\", false)"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/automations/{id}/schema":{
        "get":{
           "tags":[
              "automations"
           ],
           "summary":"Get automation schema by ID.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the automation"
              }
           ],
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "type":"string",
                                "example":"{\"json\": \"schema\", \"goes\": \"here\"}"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/automations/{id}/unban":{
        "post":{
           "tags":[
              "automations"
           ],
           "summary":"Unban automation by ID.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the automation to unban"
              }
           ],
           "responses":{
              "204":{
                 "$ref":"#/components/responses/NoContent"
              },
              "304":{
                 "$ref":"#/components/responses/NotModified"
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/automations/{id}/command/{command}":{
        "post":{
           "tags":[
              "automations"
           ],
           "summary":"Sends command to automations",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the automation for which command should be called"
              },
              {
                 "in":"path",
                 "name":"command",
                 "schema":{
                    "type":"string"
                 },
                 "required":true,
                 "description":"Automations specific command name. See commands schema descriptions for more info."
              }
           ],
           "requestBody":{
              "description":"Command represented as name -> parameters object. See commands schema descriptions for more info.",
              "content":{
                 "application/json":{
                    "schema":{
                       "allOf":[
                          {
                             "type":"object"
                          },
                          {
                             "$ref":"#/components/schemas/AutomationCommand.OneOf"
                          }
                       ]
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success, returns updated object.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Automation.Model"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/automations/{id}/logs":{
        "get":{
           "tags":[
              "automations"
           ],
           "summary":"Get automation log by ID.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the automation"
              }
           ],
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/LuaLog.Collection"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/directories/automations":{
        "get":{
           "tags":[
              "directories/automations"
           ],
           "summary":"Get collection of all automation directories.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Directory.Collection"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "post":{
           "tags":[
              "directories/automations"
           ],
           "summary":"Add new directory.",
           "requestBody":{
              "description":"Directory Model. **NOTE:** Parameter `id` is ignored. (Read-only)",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "$ref":"#/components/schemas/Directory.Model"
                    },
                    "examples":{
                       "Directory":{
                          "$ref":"#/components/examples/Directory.Model"
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Directory.Model"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "ObjectAllocationError":{
                             "$ref":"#/components/examples/Response.ObjectAllocationError"
                          },
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              },
              "503":{
                 "$ref":"#/components/responses/ObjectContainerBusyError"
              }
           }
        }
     },
     "/directories/automations/{id}":{
        "get":{
           "tags":[
              "directories/automations"
           ],
           "summary":"Get automation directory by ID.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the directory to get."
              }
           ],
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Directory.Model"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "patch":{
           "tags":[
              "directories/automations"
           ],
           "summary":"Edit existing automation directory.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the directory to edit."
              }
           ],
           "requestBody":{
              "description":"Directory model.<br> **NOTE:** Parameter `id` is ignored. (Read-only)<br> **NOTE:** Partial update is possible by sending single member of object, then rest of values remain unmodified. (See PartialUpdateExampe)",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "$ref":"#/components/schemas/Directory.Model"
                    },
                    "examples":{
                       "Directory":{
                          "$ref":"#/components/examples/Directory.Model"
                       },
                       "PartialUpdateExample":{
                          "$ref":"#/components/examples/PartialUpdateExample"
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Directory.Model"
                             }
                          }
                       }
                    }
                 }
              },
              "304":{
                 "$ref":"#/components/responses/NotModified"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        },
        "delete":{
           "tags":[
              "directories/automations"
           ],
           "summary":"Delete automation directory by ID.",
           "description":"Delete automation directory by ID.<br>**NOTE:** It also deletes all directory children.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the directory to delete"
              }
           ],
           "responses":{
              "204":{
                 "$ref":"#/components/responses/NoContent"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/directories/automations/{id}/children":{
        "get":{
           "tags":[
              "directories/automations"
           ],
           "summary":"Get children of automation directory.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the directory."
              }
           ],
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Directory.Collection"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/directories/automations/{id}/add-items":{
        "post":{
           "tags":[
              "directories/automations"
           ],
           "summary":"Add automations to the directory.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the directory."
              }
           ],
           "requestBody":{
              "content":{
                 "application/json":{
                    "schema":{
                       "type":"object",
                       "required":[
                          "items"
                       ],
                       "properties":{
                          "items":{
                             "type":"array",
                             "items":{
                                "type":"integer"
                             },
                             "example":[
                                2,
                                3
                             ]
                          }
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Directory.Model"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "InvalidObjectTypeSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectTypeSupplied"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/directories/automations/{id}/remove-items":{
        "post":{
           "tags":[
              "directories/automations"
           ],
           "summary":"Remove automations from the directory by ID.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the directory."
              }
           ],
           "requestBody":{
              "content":{
                 "application/json":{
                    "schema":{
                       "type":"object",
                       "required":[
                          "items"
                       ],
                       "properties":{
                          "items":{
                             "type":"array",
                             "items":{
                                "type":"integer"
                             },
                             "example":[
                                2,
                                3
                             ]
                          }
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Directory.Model"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "InvalidObjectTypeSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectTypeSupplied"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/directories/automations/{id}/change-items-order":{
        "post":{
           "tags":[
              "directories/automations"
           ],
           "summary":"Change order of automation in the directory.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the directory."
              }
           ],
           "requestBody":{
              "content":{
                 "application/json":{
                    "schema":{
                       "type":"object",
                       "required":[
                          "items"
                       ],
                       "properties":{
                          "items":{
                             "type":"array",
                             "items":{
                                "type":"integer"
                             },
                             "example":[
                                3,
                                2
                             ]
                          }
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Directory.Model"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "InvalidObjectTypeSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectTypeSupplied"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/directories/automations/{id}/change-children-order":{
        "post":{
           "tags":[
              "directories/automations"
           ],
           "summary":"Change order of child directories in the directory.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the directory."
              }
           ],
           "requestBody":{
              "content":{
                 "application/json":{
                    "schema":{
                       "type":"object",
                       "required":[
                          "children"
                       ],
                       "properties":{
                          "children":{
                             "type":"array",
                             "items":{
                                "type":"integer"
                             },
                             "example":[
                                3,
                                2
                             ]
                          }
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Directory.Model"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "InvalidObjectTypeSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectTypeSupplied"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/directories/scenes":{
        "get":{
           "tags":[
              "directories/scenes"
           ],
           "summary":"Get collection of all scene directories.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Directory.Collection"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "post":{
           "tags":[
              "directories/scenes"
           ],
           "summary":"Add new directory.",
           "requestBody":{
              "description":"Directory Model. **NOTE:** Parameter `id` is ignored. (Read-only)",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "$ref":"#/components/schemas/Directory.Model"
                    },
                    "examples":{
                       "Directory":{
                          "$ref":"#/components/examples/Directory.Model"
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Directory.Model"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "ObjectAllocationError":{
                             "$ref":"#/components/examples/Response.ObjectAllocationError"
                          },
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              },
              "503":{
                 "$ref":"#/components/responses/ObjectContainerBusyError"
              }
           }
        }
     },
     "/directories/scenes/{id}":{
        "get":{
           "tags":[
              "directories/scenes"
           ],
           "summary":"Get scene directory by ID.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the directory to get."
              }
           ],
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Directory.Model"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "patch":{
           "tags":[
              "directories/scenes"
           ],
           "summary":"Edit existing scene directory.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the directory to edit."
              }
           ],
           "requestBody":{
              "description":"Directory model.<br> **NOTE:** Parameter `id` is ignored. (Read-only)<br> **NOTE:** Partial update is possible by sending single member of object, then rest of values remain unmodified. (See PartialUpdateExampe)",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "$ref":"#/components/schemas/Directory.Model"
                    },
                    "examples":{
                       "Directory":{
                          "$ref":"#/components/examples/Directory.Model"
                       },
                       "PartialUpdateExample":{
                          "$ref":"#/components/examples/PartialUpdateExample"
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Directory.Model"
                             }
                          }
                       }
                    }
                 }
              },
              "304":{
                 "$ref":"#/components/responses/NotModified"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        },
        "delete":{
           "tags":[
              "directories/scenes"
           ],
           "summary":"Delete scene directory by ID.",
           "description":"Delete scene directory by ID.<br>**NOTE:** It also deletes all directory children.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the directory to delete"
              }
           ],
           "responses":{
              "204":{
                 "$ref":"#/components/responses/NoContent"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/directories/scenes/{id}/children":{
        "get":{
           "tags":[
              "directories/scenes"
           ],
           "summary":"Get children of scene directory.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the directory."
              }
           ],
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Directory.Collection"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/directories/scenes/{id}/add-items":{
        "post":{
           "tags":[
              "directories/scenes"
           ],
           "summary":"Add scene to the directory.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the directory."
              }
           ],
           "requestBody":{
              "content":{
                 "application/json":{
                    "schema":{
                       "type":"object",
                       "required":[
                          "items"
                       ],
                       "properties":{
                          "items":{
                             "type":"array",
                             "items":{
                                "type":"integer"
                             },
                             "example":[
                                2,
                                3
                             ]
                          }
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Directory.Model"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "InvalidObjectTypeSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectTypeSupplied"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/directories/scenes/{id}/remove-items":{
        "post":{
           "tags":[
              "directories/scenes"
           ],
           "summary":"Remove scenes from the directory by ID.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the directory."
              }
           ],
           "requestBody":{
              "content":{
                 "application/json":{
                    "schema":{
                       "type":"object",
                       "required":[
                          "items"
                       ],
                       "properties":{
                          "items":{
                             "type":"array",
                             "items":{
                                "type":"integer"
                             },
                             "example":[
                                2,
                                3
                             ]
                          }
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Directory.Model"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "InvalidObjectTypeSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectTypeSupplied"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/directories/scenes/{id}/change-items-order":{
        "post":{
           "tags":[
              "directories/scenes"
           ],
           "summary":"Change order of scene in the directory.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the directory."
              }
           ],
           "requestBody":{
              "content":{
                 "application/json":{
                    "schema":{
                       "type":"object",
                       "required":[
                          "items"
                       ],
                       "properties":{
                          "items":{
                             "type":"array",
                             "items":{
                                "type":"integer"
                             },
                             "example":[
                                3,
                                2
                             ]
                          }
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Directory.Model"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "InvalidObjectTypeSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectTypeSupplied"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/directories/scenes/{id}/change-children-order":{
        "post":{
           "tags":[
              "directories/scenes"
           ],
           "summary":"Change order of child directories in the directory.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the directory."
              }
           ],
           "requestBody":{
              "content":{
                 "application/json":{
                    "schema":{
                       "type":"object",
                       "required":[
                          "children"
                       ],
                       "properties":{
                          "children":{
                             "type":"array",
                             "items":{
                                "type":"integer"
                             },
                             "example":[
                                3,
                                2
                             ]
                          }
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Directory.Model"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "InvalidObjectTypeSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectTypeSupplied"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/schedules":{
        "get":{
           "tags":[
              "schedules"
           ],
           "summary":"Get collection of schedules.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Schedule.Collection"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "post":{
           "tags":[
              "schedules"
           ],
           "summary":"Add new schedule.",
           "requestBody":{
              "description":"Schedule model.<br> **NOTE:** Parameter `id` is ignored. (Read-only)<br> **NOTE:** Parameter `type` is required.<br> **NOTE:** Parameter `name` is required.<br> **NOTE:** Since keys are optional (excluding these mentioned in notes), missing values will be set to default.",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "oneOf":[
                          {
                             "$ref":"#/components/schemas/Schedule.Thermal"
                          },
                          {
                             "$ref":"#/components/schemas/Schedule.TemperatureCurve"
                          },
                          {
                             "$ref":"#/components/schemas/Schedule.RelayControl"
                          }
                       ]
                    },
                    "examples":{
                       "Thermal":{
                          "$ref":"#/components/examples/Schedule.Thermal"
                       },
                       "TemperatureCurve":{
                          "$ref":"#/components/examples/Schedule.TemperatureCurve"
                       },
                       "RelayControl":{
                          "$ref":"#/components/examples/Schedule.RelayControl"
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Schedule.Thermal"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "ObjectAllocationError":{
                             "$ref":"#/components/examples/Response.ObjectAllocationError"
                          },
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              },
              "503":{
                 "$ref":"#/components/responses/ObjectContainerBusyError"
              }
           }
        }
     },
     "/schedules/{id}":{
        "get":{
           "tags":[
              "schedules"
           ],
           "summary":"Get a schedule by ID",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the schedule to get"
              }
           ],
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Schedule.Thermal"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "patch":{
           "tags":[
              "schedules"
           ],
           "summary":"Edit existing schedule.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the schedule to edit"
              }
           ],
           "requestBody":{
              "description":"Schedule model.<br> **NOTE:** Read-only parameters eg. `id`, `type` etc should not be sent. See schema for more info.<br> **NOTE:** Partial update is possible by sending single member of object, then rest of values remain unmodified. (See PartialUpdateExampe)",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "oneOf":[
                          {
                             "$ref":"#/components/schemas/Schedule.Thermal"
                          },
                          {
                             "$ref":"#/components/schemas/Schedule.TemperatureCurve"
                          },
                          {
                             "$ref":"#/components/schemas/Schedule.RelayControl"
                          }
                       ]
                    },
                    "examples":{
                       "Thermal":{
                          "$ref":"#/components/examples/Schedule.Thermal"
                       },
                       "TemperatureCurve":{
                          "$ref":"#/components/examples/Schedule.TemperatureCurve"
                       },
                       "RelayControl":{
                          "$ref":"#/components/examples/Schedule.RelayControl"
                       },
                       "PartialUpdateExample":{
                          "$ref":"#/components/examples/PartialUpdateExample"
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Schedule.Thermal"
                             }
                          }
                       }
                    }
                 }
              },
              "304":{
                 "$ref":"#/components/responses/NotModified"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        },
        "delete":{
           "tags":[
              "schedules"
           ],
           "summary":"Delete schedule by ID.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the schedule to delete"
              }
           ],
           "responses":{
              "204":{
                 "$ref":"#/components/responses/NoContent"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/floors":{
        "get":{
           "tags":[
              "floors"
           ],
           "summary":"Get collection of all floors.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Floor.Collection"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "post":{
           "tags":[
              "floors"
           ],
           "summary":"Add new floor.",
           "requestBody":{
              "description":"Floor model.<br> **NOTE:** Parameter `id` is ignored. (Read-only)<br> **NOTE:** Since keys are optional, missing values will be set to default.",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "$ref":"#/components/schemas/Floor.Model"
                    },
                    "examples":{
                       "Floor":{
                          "$ref":"#/components/examples/Floor.Model"
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Floor.Model"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "InvalidObjectTypeSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectTypeSupplied"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "ObjectAllocationError":{
                             "$ref":"#/components/examples/Response.ObjectAllocationError"
                          },
                          "ContainerOperationFailed":{
                             "$ref":"#/components/examples/Response.ContainerOperationError"
                          },
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/floors/{id}":{
        "get":{
           "tags":[
              "floors"
           ],
           "summary":"Get floor by id.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the floor to get."
              }
           ],
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Floor.Model"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "patch":{
           "tags":[
              "floors"
           ],
           "summary":"Edit existing floor.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the floor to edit."
              }
           ],
           "requestBody":{
              "description":"Floor model. <br> **NOTE:** Parameter `id` is ignored. (Read-only)<br> **NOTE:** Partial update is possible by sending single member of object, then rest of values remain unmodified. (See PartialUpdateExampe)",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "$ref":"#/components/schemas/Floor.Model"
                    },
                    "examples":{
                       "Floor":{
                          "$ref":"#/components/examples/Floor.Model"
                       },
                       "PartialUpdateExample":{
                          "$ref":"#/components/examples/PartialUpdateExample"
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Floor.Model"
                             }
                          }
                       }
                    }
                 }
              },
              "304":{
                 "$ref":"#/components/responses/NotModified"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        },
        "delete":{
           "tags":[
              "floors"
           ],
           "summary":"Delete floor by ID.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the floor to delete."
              }
           ],
           "responses":{
              "204":{
                 "$ref":"#/components/responses/NoContent"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/floors/{id}/add-rooms":{
        "post":{
           "tags":[
              "floors"
           ],
           "summary":"Add (associate) rooms to floor by ID.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the floor."
              }
           ],
           "requestBody":{
              "content":{
                 "application/json":{
                    "schema":{
                       "type":"object",
                       "required":[
                          "rooms"
                       ],
                       "properties":{
                          "rooms":{
                             "type":"array",
                             "items":{
                                "type":"integer"
                             },
                             "example":[
                                1,
                                3
                             ]
                          }
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Floor.Model"
                             }
                          }
                       }
                    }
                 }
              },
              "304":{
                 "$ref":"#/components/responses/NotModified"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/floors/{id}/remove-rooms":{
        "post":{
           "tags":[
              "floors"
           ],
           "summary":"Remove rooms from floor by ID.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the floor."
              }
           ],
           "requestBody":{
              "content":{
                 "application/json":{
                    "schema":{
                       "type":"object",
                       "required":[
                          "rooms"
                       ],
                       "properties":{
                          "rooms":{
                             "type":"array",
                             "items":{
                                "type":"integer"
                             },
                             "example":[
                                1,
                                6
                             ]
                          }
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Floor.Model"
                             }
                          }
                       }
                    }
                 }
              },
              "304":{
                 "$ref":"#/components/responses/NotModified"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/floors/{id}/command/{command}":{
        "post":{
           "tags":[
              "floors"
           ],
           "summary":"Sends command to floor.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the floor for which command should be called."
              },
              {
                 "in":"path",
                 "name":"command",
                 "schema":{
                    "type":"string"
                 },
                 "required":true,
                 "description":"Floor specific command."
              }
           ],
           "requestBody":{
              "description":"Optional command parameters.<br>See examples description for more details.<br>If there are 0 examples it means that there are no commands implemented yet for this endpoint.",
              "content":{
                 "application/json":{
                    "schema":{
                       "type":"object"
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success, returns updated object.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Floor.Model"
                             }
                          }
                       }
                    }
                 }
              },
              "304":{
                 "$ref":"#/components/responses/NotModified"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/rooms":{
        "get":{
           "tags":[
              "rooms"
           ],
           "summary":"Get collection of all rooms.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Room.Collection"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "post":{
           "tags":[
              "rooms"
           ],
           "summary":"Add new room.",
           "requestBody":{
              "description":"Room model .<br> **NOTE:** Parameter `id` is ignored. (Read-only)<br> **NOTE:** Since keys are optional, missing values will be set to default.",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "$ref":"#/components/schemas/Room.Model"
                    },
                    "examples":{
                       "Room":{
                          "$ref":"#/components/examples/Room.Model"
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Room.Model"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "InvalidObjectTypeSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectTypeSupplied"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "ObjectAllocationError":{
                             "$ref":"#/components/examples/Response.ObjectAllocationError"
                          },
                          "ContainerOperationFailed":{
                             "$ref":"#/components/examples/Response.ContainerOperationError"
                          },
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              },
              "503":{
                 "$ref":"#/components/responses/ObjectContainerBusyError"
              }
           }
        }
     },
     "/rooms/{id}":{
        "get":{
           "tags":[
              "rooms"
           ],
           "summary":"Get room by ID.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the room to get"
              }
           ],
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Room.Model"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "patch":{
           "tags":[
              "rooms"
           ],
           "summary":"Edit existing room.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the room to edit"
              }
           ],
           "requestBody":{
              "description":"Room model.<br> **NOTE:** Parameter `id` is ignored. (Read-only)<br> **NOTE:** Partial update is possible by sending single member of object, then rest of values remain unmodified. (See PartialUpdateExampe)",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "$ref":"#/components/schemas/Room.Model"
                    },
                    "examples":{
                       "Room":{
                          "$ref":"#/components/examples/Room.Model"
                       },
                       "PartialUpdateExample":{
                          "$ref":"#/components/examples/PartialUpdateExample"
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Room.Model"
                             }
                          }
                       }
                    }
                 }
              },
              "304":{
                 "$ref":"#/components/responses/NotModified"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        },
        "delete":{
           "tags":[
              "rooms"
           ],
           "summary":"Delete room by ID.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the room to delete"
              }
           ],
           "responses":{
              "204":{
                 "$ref":"#/components/responses/NoContent"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/rooms/{id}/add-devices":{
        "post":{
           "tags":[
              "rooms"
           ],
           "summary":"Add (associate) devices to room by ID.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the room"
              }
           ],
           "requestBody":{
              "content":{
                 "application/json":{
                    "schema":{
                       "type":"object",
                       "required":[
                          "devices"
                       ],
                       "properties":{
                          "devices":{
                             "type":"array",
                             "items":{
                                "type":"object",
                                "required":[
                                   "class",
                                   "id"
                                ],
                                "properties":{
                                   "class":{
                                      "type":"string"
                                   },
                                   "id":{
                                      "type":"number"
                                   }
                                }
                             },
                             "example":[
                                {
                                   "class":"wtp",
                                   "id":5
                                },
                                {
                                   "class":"tech",
                                   "id":7
                                }
                             ]
                          }
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Room.Model"
                             }
                          }
                       }
                    }
                 }
              },
              "204":{
                 "$ref":"#/components/responses/NoContent"
              },
              "304":{
                 "$ref":"#/components/responses/NotModified"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/rooms/{id}/remove-devices":{
        "post":{
           "tags":[
              "rooms"
           ],
           "summary":"Remove (associate) devices from room by ID.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the room"
              }
           ],
           "requestBody":{
              "content":{
                 "application/json":{
                    "schema":{
                       "type":"object",
                       "required":[
                          "devices"
                       ],
                       "properties":{
                          "devices":{
                             "type":"array",
                             "items":{
                                "type":"object",
                                "required":[
                                   "class",
                                   "id"
                                ],
                                "properties":{
                                   "class":{
                                      "type":"string"
                                   },
                                   "id":{
                                      "type":"number"
                                   }
                                }
                             },
                             "example":[
                                {
                                   "class":"wtp",
                                   "id":5
                                },
                                {
                                   "class":"tech",
                                   "id":7
                                }
                             ]
                          }
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Room.Model"
                             }
                          }
                       }
                    }
                 }
              },
              "204":{
                 "$ref":"#/components/responses/NoContent"
              },
              "304":{
                 "$ref":"#/components/responses/NotModified"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/rooms/{id}/add-scenes":{
        "post":{
           "tags":[
              "rooms"
           ],
           "summary":"Add (associate) scenes to room by ID.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the room"
              }
           ],
           "requestBody":{
              "content":{
                 "application/json":{
                    "schema":{
                       "type":"object",
                       "required":[
                          "scenes"
                       ],
                       "properties":{
                          "scenes":{
                             "type":"array",
                             "items":{
                                "type":"integer"
                             },
                             "example":[
                                1,
                                3
                             ]
                          }
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Room.Model"
                             }
                          }
                       }
                    }
                 }
              },
              "204":{
                 "$ref":"#/components/responses/NoContent"
              },
              "304":{
                 "$ref":"#/components/responses/NotModified"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/rooms/{id}/remove-scenes":{
        "post":{
           "tags":[
              "rooms"
           ],
           "summary":"Remove scenes from room by ID.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the room"
              }
           ],
           "requestBody":{
              "content":{
                 "application/json":{
                    "schema":{
                       "type":"object",
                       "required":[
                          "scenes"
                       ],
                       "properties":{
                          "scenes":{
                             "type":"array",
                             "items":{
                                "type":"integer"
                             },
                             "example":[
                                1,
                                6
                             ]
                          }
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Room.Model"
                             }
                          }
                       }
                    }
                 }
              },
              "204":{
                 "$ref":"#/components/responses/NoContent"
              },
              "304":{
                 "$ref":"#/components/responses/NotModified"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/rooms/{id}/command/{command}":{
        "post":{
           "tags":[
              "rooms"
           ],
           "summary":"Sends command to rooms",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the room for which command should be called"
              },
              {
                 "in":"path",
                 "name":"command",
                 "schema":{
                    "type":"string"
                 },
                 "required":true,
                 "description":"Room specific command."
              }
           ],
           "requestBody":{
              "description":"Optional command parameters.<br>See examples description for more details.<br>If there are 0 examples it means that there are no commands implemented yet for this endpoint.",
              "content":{
                 "application/json":{
                    "schema":{
                       "type":"object"
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success, returns updated object.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Room.Model"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/lua/code/check":{
        "post":{
           "tags":[
              "lua"
           ],
           "summary":"Runs code through interpreter, checks if code is valid (syntax, etc)",
           "requestBody":{
              "description":"Lua code to check.",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "type":"object",
                       "required":[
                          "code"
                       ],
                       "properties":{
                          "code":{
                             "type":"string",
                             "example":"tech[82]:setValue(\"state\", false)"
                          }
                       }
                    }
                 }
              }
           },
           "responses":{
              "204":{
                 "$ref":"#/components/responses/NoContent"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/lua/variables":{
        "get":{
           "tags":[
              "lua/variables"
           ],
           "summary":"Get collection of all lua global variables.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/LuaVariable.Collection"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "post":{
           "tags":[
              "lua/variables"
           ],
           "summary":"Add new lua-variable.",
           "requestBody":{
              "description":"Lua variable model of type Boolean/Integer/String/Table.<br> **NOTE:** Parameter `id` is ignored. (Read-only)<br> **NOTE:** Parameter `type` is required.<br> **NOTE:** Parameter `default_value` is required.<br> **NOTE:** Since keys are optional (excluding these mentioned in notes), missing values will be set to default.",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "oneOf":[
                          {
                             "$ref":"#/components/schemas/LuaVariable.Boolean"
                          },
                          {
                             "$ref":"#/components/schemas/LuaVariable.Integer"
                          },
                          {
                             "$ref":"#/components/schemas/LuaVariable.String"
                          },
                          {
                             "$ref":"#/components/schemas/LuaVariable.Table"
                          }
                       ]
                    },
                    "examples":{
                       "Boolean":{
                          "$ref":"#/components/examples/LuaVariable.Boolean"
                       },
                       "Integer":{
                          "$ref":"#/components/examples/LuaVariable.Integer"
                       },
                       "String":{
                          "$ref":"#/components/examples/LuaVariable.String"
                       },
                       "Table":{
                          "$ref":"#/components/examples/LuaVariable.Table"
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/LuaVariable.Integer"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "InvalidObjectTypeSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectTypeSupplied"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "ObjectAllocationError":{
                             "$ref":"#/components/examples/Response.ObjectAllocationError"
                          },
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              },
              "503":{
                 "$ref":"#/components/responses/ObjectContainerBusyError"
              }
           }
        }
     },
     "/lua/variables/{id}":{
        "get":{
           "tags":[
              "lua/variables"
           ],
           "summary":"Get lua variable by ID.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the lua variable to get"
              }
           ],
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/LuaVariable.Boolean"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "patch":{
           "tags":[
              "lua/variables"
           ],
           "summary":"Edit existing lua variable.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the lua-variable to edit"
              }
           ],
           "requestBody":{
              "description":"Lua variable model of type Boolean/Integer/String/Table.<br> **NOTE:** Parameter `id` is ignored. (Read-only)<br> **NOTE:** Parameter `type` is ignored. (Read-only)<br> **NOTE:** Partial update is possible by sending single member of object, then rest of values remain unmodified. (See PartialUpdateExampe)",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "oneOf":[
                          {
                             "$ref":"#/components/schemas/LuaVariable.Boolean"
                          },
                          {
                             "$ref":"#/components/schemas/LuaVariable.Integer"
                          },
                          {
                             "$ref":"#/components/schemas/LuaVariable.String"
                          },
                          {
                             "$ref":"#/components/schemas/LuaVariable.Table"
                          }
                       ]
                    },
                    "examples":{
                       "Boolean":{
                          "$ref":"#/components/examples/LuaVariable.Boolean"
                       },
                       "Integer":{
                          "$ref":"#/components/examples/LuaVariable.Integer"
                       },
                       "String":{
                          "$ref":"#/components/examples/LuaVariable.String"
                       },
                       "Table":{
                          "$ref":"#/components/examples/LuaVariable.Table"
                       },
                       "PartialUpdateExample":{
                          "$ref":"#/components/examples/PartialUpdateExample"
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/LuaVariable.String"
                             }
                          }
                       }
                    }
                 }
              },
              "304":{
                 "$ref":"#/components/responses/NotModified"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        },
        "delete":{
           "tags":[
              "lua/variables"
           ],
           "summary":"Delete lua variable by ID.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the lua variable to delete"
              }
           ],
           "responses":{
              "204":{
                 "$ref":"#/components/responses/NoContent"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/lua/timers":{
        "get":{
           "tags":[
              "lua/timers"
           ],
           "summary":"Get collection of all lua global timers.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/LuaTimer.Collection"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "post":{
           "tags":[
              "lua/timers"
           ],
           "summary":"Add new lua-timer.",
           "requestBody":{
              "description":"Lua timer model of unit milliseconds/seconds/minutes/hours.<br> **NOTE:** Parameter `id` is ignored. (Read-only)<br> **NOTE:** Parameter `unit` is required.<br> **NOTE:** Since keys are optional (excluding these mentioned in notes), missing values will be set to default.",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "oneOf":[
                          {
                             "$ref":"#/components/schemas/LuaTimer"
                          }
                       ]
                    },
                    "examples":{
                       "Timer":{
                          "$ref":"#/components/examples/LuaTimer"
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/LuaTimer"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "InvalidObjectTypeSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectTypeSupplied"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "ObjectAllocationError":{
                             "$ref":"#/components/examples/Response.ObjectAllocationError"
                          },
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              },
              "503":{
                 "$ref":"#/components/responses/ObjectContainerBusyError"
              }
           }
        }
     },
     "/lua/timers/{id}":{
        "get":{
           "tags":[
              "lua/timers"
           ],
           "summary":"Get lua timer by ID.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the lua timer to get"
              }
           ],
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/LuaTimer"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "patch":{
           "tags":[
              "lua/timers"
           ],
           "summary":"Edit existing lua timer.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the lua-timer to edit"
              }
           ],
           "requestBody":{
              "description":"Lua timer model of unit milliseconds/seconds/minutes/hours<br> **NOTE:** Parameter `id` is ignored. (Read-only)<br> **NOTE:** Parameter `unit` is ignored. (Read-only)<br> **NOTE:** Partial update is possible by sending single member of object, then rest of values remain unmodified. (See PartialUpdateExampe)",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "oneOf":[
                          {
                             "$ref":"#/components/schemas/LuaTimer"
                          }
                       ]
                    },
                    "examples":{
                       "Timer":{
                          "$ref":"#/components/examples/LuaTimer"
                       },
                       "PartialUpdateExample":{
                          "$ref":"#/components/examples/PartialUpdateExample"
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/LuaTimer"
                             }
                          }
                       }
                    }
                 }
              },
              "304":{
                 "$ref":"#/components/responses/NotModified"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        },
        "delete":{
           "tags":[
              "lua/timers"
           ],
           "summary":"Delete lua timer by ID.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the lua timer to delete"
              }
           ],
           "responses":{
              "204":{
                 "$ref":"#/components/responses/NoContent"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/lua/examples":{
        "get":{
           "tags":[
              "lua/examples"
           ],
           "summary":"Get collection of all lua code examples.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/LuaExample.Collection"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/lua/examples/automation":{
        "get":{
           "tags":[
              "lua/examples"
           ],
           "summary":"Get collection of lua code examples useful for automations.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/LuaExample.Collection.Automation"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/lua/examples/scene":{
        "get":{
           "tags":[
              "lua/examples"
           ],
           "summary":"Get collection of lua code examples useful for scenes.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/LuaExample.Collection.Scene"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/lua/examples/custom-device":{
        "get":{
           "tags":[
              "lua/examples"
           ],
           "summary":"Get collection of lua code examples useful for custom devices.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/LuaExample.Collection.CustomDevice"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/lua/examples/{id}":{
        "get":{
           "tags":[
              "lua/examples"
           ],
           "summary":"Get lua code example by ID.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the lua code example to get"
              }
           ],
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/LuaExample"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/lua/http-clients":{
        "get":{
           "tags":[
              "lua/http-clients"
           ],
           "summary":"Get collection of all lua http clients.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/LuaHttpClients.Collection"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "post":{
           "tags":[
              "lua/http-clients"
           ],
           "summary":"Add new lua http client.",
           "requestBody":{
              "description":"Lua http client model.<br> **NOTE:** Parameter `id` is ignored. (Read-only)<br> **NOTE:** Parameter `name` is required.<br> **NOTE:** Since keys are optional (excluding these mentioned in notes), missing values will be set to default.",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "oneOf":[
                          {
                             "$ref":"#/components/schemas/LuaHttpClient"
                          }
                       ]
                    },
                    "examples":{
                       "HttpClient":{
                          "$ref":"#/components/examples/LuaHttpClient"
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/LuaHttpClient"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "InvalidObjectTypeSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectTypeSupplied"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "ObjectAllocationError":{
                             "$ref":"#/components/examples/Response.ObjectAllocationError"
                          },
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              },
              "503":{
                 "$ref":"#/components/responses/ObjectContainerBusyError"
              }
           }
        }
     },
     "/lua/http-clients/{id}":{
        "get":{
           "tags":[
              "lua/http-clients"
           ],
           "summary":"Get lua http-client by ID.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the lua http client to get"
              }
           ],
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/LuaHttpClient"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "patch":{
           "tags":[
              "lua/http-clients"
           ],
           "summary":"Edit existing lua http client.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the lua http client to edit"
              }
           ],
           "requestBody":{
              "description":"Lua http client model.<br> **NOTE:** Parameter `id` is forbidden in request body. (Read-only)<br> **NOTE:** Partial update is possible by sending single member of object, then rest of values remain unmodified. (See PartialUpdateExampe)",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "oneOf":[
                          {
                             "$ref":"#/components/schemas/LuaHttpClient"
                          }
                       ]
                    },
                    "examples":{
                       "HttpClient":{
                          "$ref":"#/components/examples/LuaHttpClient"
                       },
                       "PartialUpdateExample":{
                          "description":"Only `url` will be changed. Rest of object values remain unmodified.",
                          "value":{
                             "url":"https://mynewserver.com"
                          }
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/LuaHttpClient"
                             }
                          }
                       }
                    }
                 }
              },
              "304":{
                 "$ref":"#/components/responses/NotModified"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        },
        "delete":{
           "tags":[
              "lua/http-clients"
           ],
           "summary":"Delete lua http client by ID.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the lua http client to delete"
              }
           ],
           "responses":{
              "204":{
                 "$ref":"#/components/responses/NoContent"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/lua/modbus-clients":{
        "get":{
           "tags":[
              "lua/modbus-clients"
           ],
           "summary":"Get collection of all lua modbus clients.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/LuaModbusClients.Collection"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "post":{
           "tags":[
              "lua/modbus-clients"
           ],
           "summary":"Add new lua modbus client.",
           "requestBody":{
              "description":"Lua modbus client model.<br> **NOTE:** All parameters are required to create client.",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "oneOf":[
                          {
                             "$ref":"#/components/schemas/LuaModbusClient"
                          },
                          {
                             "$ref":"#/components/schemas/LuaModbusTcpClient"
                          }
                       ]
                    },
                    "examples":{
                       "ModbusClient":{
                          "$ref":"#/components/examples/LuaModbusClient"
                       },
                       "ModbusTcpClient":{
                          "$ref":"#/components/examples/LuaModbusTcpClient"
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "oneOf":[
                                   {
                                      "$ref":"#/components/schemas/LuaModbusClient"
                                   },
                                   {
                                      "$ref":"#/components/schemas/LuaModbusTcpClient"
                                   }
                                ]
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "InvalidObjectTypeSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectTypeSupplied"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "ObjectAllocationError":{
                             "$ref":"#/components/examples/Response.ObjectAllocationError"
                          },
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              },
              "503":{
                 "$ref":"#/components/responses/ObjectContainerBusyError"
              }
           }
        }
     },
     "/lua/modbus-clients/{id}":{
        "get":{
           "tags":[
              "lua/modbus-clients"
           ],
           "summary":"Get lua modbus-client by ID.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the lua modbus client to get"
              }
           ],
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "oneOf":[
                                   {
                                      "$ref":"#/components/schemas/LuaModbusClient"
                                   },
                                   {
                                      "$ref":"#/components/schemas/LuaModbusTcpClient"
                                   }
                                ]
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "patch":{
           "tags":[
              "lua/modbus-clients"
           ],
           "summary":"Edit existing lua modbus client.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the lua modbus client to edit"
              }
           ],
           "requestBody":{
              "description":"Lua modbus client model.<br> **NOTE:** Parameter `id` is forbidden in request body. (Read-only)<br> **NOTE:** Parameter `slave_address` is forbidden in request body. (Read-only)<br> **NOTE:** Partial update is possible by sending single member of object, then rest of values remain unmodified. (See PartialUpdateExampe)",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "oneOf":[
                          {
                             "$ref":"#/components/schemas/LuaModbusClient"
                          },
                          {
                             "$ref":"#/components/schemas/LuaModbusTcpClient"
                          }
                       ]
                    },
                    "examples":{
                       "ModbusClient":{
                          "$ref":"#/components/examples/LuaModbusClient"
                       },
                       "ModbusTcpClient":{
                          "$ref":"#/components/examples/LuaModbusTcpClient"
                       },
                       "PartialUpdateExample":{
                          "description":"Only `baud_rate` will be changed. Rest of object values remain unmodified.",
                          "value":{
                             "baud_rate":9600
                          }
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "oneOf":[
                                   {
                                      "$ref":"#/components/schemas/LuaModbusClient"
                                   },
                                   {
                                      "$ref":"#/components/schemas/LuaModbusTcpClient"
                                   }
                                ]
                             }
                          }
                       }
                    }
                 }
              },
              "304":{
                 "$ref":"#/components/responses/NotModified"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        },
        "delete":{
           "tags":[
              "lua/modbus-clients"
           ],
           "summary":"Delete lua modbus client by ID.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the lua modbus client to delete"
              }
           ],
           "responses":{
              "204":{
                 "$ref":"#/components/responses/NoContent"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/lua/http-server/{path}":{
        "get":{
           "tags":[
              "lua/http-server"
           ],
           "summary":"Wildcard GET request path to lua http server.",
           "parameters":[
              {
                 "in":"path",
                 "name":"path",
                 "schema":{
                    "type":"string",
                    "default":""
                 },
                 "required":true,
                 "description":"User custom url path."
              }
           ],
           "description":" This is wildcard route<br> **NOTE:** Wildcard ({path} in path) means that everything what comes into {path} place is forwarded as url path to your automation script.<br> **NOTE:** The `/lua/http-server` (`/api/v1/lua/http-server`) url prefix will be removed. eg. when you request `/api/v1/lua/http-server/my-endpoint/5` will get forwarded as `/my-endpoint/5` url. You can catch `5` as parameter (eg. named `id`) if you declared in script.<br> **NOTE:** Successful response depends on users`s lua script (automation) thus its not documented here, see lua documentation for http-server. ",
           "responses":{
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/LuaHttpServerPathNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "LuaHttpServerInternalError":{
                             "$ref":"#/components/examples/Response.LuaHttpServerInternalError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              },
              "501":{
                 "$ref":"#/components/responses/LuaHttpServerNotImplemented"
              }
           }
        },
        "patch":{
           "tags":[
              "lua/http-server"
           ],
           "summary":"Wildcard PATCH request path to lua http server.",
           "parameters":[
              {
                 "in":"path",
                 "name":"path",
                 "schema":{
                    "type":"string",
                    "default":""
                 },
                 "required":true,
                 "description":"User custom url path."
              }
           ],
           "description":" This is wildcard route<br> **NOTE:** Wildcard ({path} in path) means that everything what comes into {path} place is forwarded as url path to your automation script.<br> **NOTE:** The `/lua/http-server` (`/api/v1/lua/http-server`) url prefix will be removed. eg. when you request `/api/v1/lua/http-server/my-endpoint/5` will get forwarded as `/my-endpoint/5` url. You can catch `5` as parameter (eg. named `id`) if you declared in script.<br> **NOTE:** Successful response depends on users`s lua script (automation) thus its not documented here, see lua documentation for http-server. ",
           "responses":{
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/LuaHttpServerPathNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "LuaHttpServerInternalError":{
                             "$ref":"#/components/examples/Response.LuaHttpServerInternalError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              },
              "501":{
                 "$ref":"#/components/responses/LuaHttpServerNotImplemented"
              }
           }
        },
        "post":{
           "tags":[
              "lua/http-server"
           ],
           "summary":"Wildcard POST request path to lua http server.",
           "parameters":[
              {
                 "in":"path",
                 "name":"path",
                 "schema":{
                    "type":"string",
                    "default":""
                 },
                 "required":true,
                 "description":"User custom url path."
              }
           ],
           "description":" This is wildcard route<br> **NOTE:** Wildcard ({path} in path) means that everything what comes into {path} place is forwarded as url path to your automation script.<br> **NOTE:** The `/lua/http-server` (`/api/v1/lua/http-server`) url prefix will be removed. eg. when you request `/api/v1/lua/http-server/my-endpoint/5` will get forwarded as `/my-endpoint/5` url. You can catch `5` as parameter (eg. named `id`) if you declared in script.<br> **NOTE:** Successful response depends on users`s lua script (automation) thus its not documented here, see lua documentation for http-server. ",
           "responses":{
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/LuaHttpServerPathNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "LuaHttpServerInternalError":{
                             "$ref":"#/components/examples/Response.LuaHttpServerInternalError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              },
              "501":{
                 "$ref":"#/components/responses/LuaHttpServerNotImplemented"
              }
           }
        },
        "put":{
           "tags":[
              "lua/http-server"
           ],
           "summary":"Wildcard PUT request path to lua http server.",
           "parameters":[
              {
                 "in":"path",
                 "name":"path",
                 "schema":{
                    "type":"string",
                    "default":""
                 },
                 "required":true,
                 "description":"User custom url path."
              }
           ],
           "description":" This is wildcard route<br> **NOTE:** Wildcard ({path} in path) means that everything what comes into {path} place is forwarded as url path to your automation script.<br> **NOTE:** The `/lua/http-server` (`/api/v1/lua/http-server`) url prefix will be removed. eg. when you request `/api/v1/lua/http-server/my-endpoint/5` will get forwarded as `/my-endpoint/5` url. You can catch `5` as parameter (eg. named `id`) if you declared in script.<br> **NOTE:** Successful response depends on users`s lua script (automation) thus its not documented here, see lua documentation for http-server. ",
           "responses":{
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/LuaHttpServerPathNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "LuaHttpServerInternalError":{
                             "$ref":"#/components/examples/Response.LuaHttpServerInternalError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              },
              "501":{
                 "$ref":"#/components/responses/LuaHttpServerNotImplemented"
              }
           }
        },
        "delete":{
           "tags":[
              "lua/http-server"
           ],
           "summary":"Wildcard DELETE request path to lua http server.",
           "parameters":[
              {
                 "in":"path",
                 "name":"path",
                 "schema":{
                    "type":"string",
                    "default":""
                 },
                 "required":true,
                 "description":"User custom url path."
              }
           ],
           "description":" This is wildcard route<br> **NOTE:** Wildcard ({path} in path) means that everything what comes into {path} place is forwarded as url path to your automation script.<br> **NOTE:** The `/lua/http-server` (`/api/v1/lua/http-server`) url prefix will be removed. eg. when you request `/api/v1/lua/http-server/my-endpoint/5` will get forwarded as `/my-endpoint/5` url. You can catch `5` as parameter (eg. named `id`) if you declared in script.<br> **NOTE:** Successful response depends on users`s lua script (automation) thus its not documented here, see lua documentation for http-server. ",
           "responses":{
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/LuaHttpServerPathNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "LuaHttpServerInternalError":{
                             "$ref":"#/components/examples/Response.LuaHttpServerInternalError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              },
              "501":{
                 "$ref":"#/components/responses/LuaHttpServerNotImplemented"
              }
           }
        }
     },
     "/lua/mqtt-clients":{
        "get":{
           "tags":[
              "lua/mqtt-clients"
           ],
           "summary":"Get collection of all lua mqtt clients.",
           "responses":{
              "200":{
                 "description":"Success. <br> **NOTE:** Parameter `password` will be masked with `*******`.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/LuaMqttClients.Collection"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "post":{
           "tags":[
              "lua/mqtt-clients"
           ],
           "summary":"Add new lua mqtt client.",
           "requestBody":{
              "description":"Lua mqtt client model.<br> **NOTE:** Parameter `id` is ignored. (Read-only)<br> **NOTE:** Parameters `name`, `broker` and `port` are required.<br> **NOTE:** Since keys are optional (excluding these mentioned in notes), missing values will be set to default.",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "oneOf":[
                          {
                             "$ref":"#/components/schemas/LuaMqttClient"
                          }
                       ]
                    },
                    "examples":{
                       "MqttClient":{
                          "$ref":"#/components/examples/LuaMqttClient"
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/LuaMqttClient"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "InvalidObjectTypeSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectTypeSupplied"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "ObjectAllocationError":{
                             "$ref":"#/components/examples/Response.ObjectAllocationError"
                          },
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              },
              "503":{
                 "$ref":"#/components/responses/ObjectContainerBusyError"
              }
           }
        }
     },
     "/lua/mqtt-clients/{id}":{
        "get":{
           "tags":[
              "lua/mqtt-clients"
           ],
           "summary":"Get lua mqtt-client by ID.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the lua mqtt client to get"
              }
           ],
           "responses":{
              "200":{
                 "description":"Success. <br> **NOTE:** Parameter `password` will be masked with `*******`.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/LuaMqttClient"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "patch":{
           "tags":[
              "lua/mqtt-clients"
           ],
           "summary":"Edit existing lua mqtt client.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the lua mqtt client to edit"
              }
           ],
           "requestBody":{
              "description":"Lua mqtt client model.<br> **NOTE:** Parameter `id` is forbidden in request body. (Read-only)<br> **NOTE:** Partial update is possible by sending single member of object, then rest of values remain unmodified. (See PartialUpdateExampe)",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "oneOf":[
                          {
                             "$ref":"#/components/schemas/LuaMqttClient"
                          }
                       ]
                    },
                    "examples":{
                       "MqttClient":{
                          "$ref":"#/components/examples/LuaMqttClient"
                       },
                       "PartialUpdateExample":{
                          "description":"Only `broker` will be changed. Rest of object values remain unmodified.",
                          "value":{
                             "broker":"10.0.0.50"
                          }
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/LuaMqttClient"
                             }
                          }
                       }
                    }
                 }
              },
              "304":{
                 "$ref":"#/components/responses/NotModified"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        },
        "delete":{
           "tags":[
              "lua/mqtt-clients"
           ],
           "summary":"Delete lua mqtt client by ID.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the lua mqtt client to delete"
              }
           ],
           "responses":{
              "204":{
                 "$ref":"#/components/responses/NoContent"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/lua/ws-clients":{
        "get":{
           "tags":[
              "lua/ws-clients"
           ],
           "summary":"Get collection of all lua ws clients.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/LuaWsClients.Collection"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "post":{
           "tags":[
              "lua/ws-clients"
           ],
           "summary":"Add new lua ws client.",
           "requestBody":{
              "description":"Lua ws client model.<br> **NOTE:** Parameter `id` is ignored. (Read-only)<br> **NOTE:** Parameters `name`, `url` are required.<br> **NOTE:** Since keys are optional (excluding these mentioned in notes), missing values will be set to default.",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "oneOf":[
                          {
                             "$ref":"#/components/schemas/LuaWsClient"
                          }
                       ]
                    },
                    "examples":{
                       "WsClient":{
                          "$ref":"#/components/examples/LuaWsClient"
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/LuaWsClient"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "InvalidObjectTypeSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectTypeSupplied"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "ObjectAllocationError":{
                             "$ref":"#/components/examples/Response.ObjectAllocationError"
                          },
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              },
              "503":{
                 "$ref":"#/components/responses/ObjectContainerBusyError"
              }
           }
        }
     },
     "/lua/ws-clients/{id}":{
        "get":{
           "tags":[
              "lua/ws-clients"
           ],
           "summary":"Get lua ws-client by ID.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the lua ws client to get"
              }
           ],
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/LuaWsClient"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "patch":{
           "tags":[
              "lua/ws-clients"
           ],
           "summary":"Edit existing lua ws client.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the lua ws client to edit"
              }
           ],
           "requestBody":{
              "description":"Lua ws client model.<br> **NOTE:** Parameter `id` is forbidden in request body. (Read-only)<br> **NOTE:** Partial update is possible by sending single member of object, then rest of values remain unmodified. (See PartialUpdateExampe)",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "oneOf":[
                          {
                             "$ref":"#/components/schemas/LuaWsClient"
                          }
                       ]
                    },
                    "examples":{
                       "WsClient":{
                          "$ref":"#/components/examples/LuaWsClient"
                       },
                       "PartialUpdateExample":{
                          "description":"Only `url` will be changed. Rest of object values remain unmodified.",
                          "value":{
                             "url":"wss://my-server.example"
                          }
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/LuaWsClient"
                             }
                          }
                       }
                    }
                 }
              },
              "304":{
                 "$ref":"#/components/responses/NotModified"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        },
        "delete":{
           "tags":[
              "lua/ws-clients"
           ],
           "summary":"Delete lua ws client by ID.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the lua ws client to delete"
              }
           ],
           "responses":{
              "204":{
                 "$ref":"#/components/responses/NoContent"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/influx/filters/statistics":{
        "get":{
           "tags":[
              "influx"
           ],
           "summary":"Query for statistic filters.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/InfluxStatisticFilterRunResult"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "$ref":"#/components/responses/QueryError"
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              },
              "503":{
                 "$ref":"#/components/responses/ServiceUnavailable"
              }
           }
        }
     },
     "/influx/query":{
        "post":{
           "tags":[
              "influx"
           ],
           "summary":"Query for statistic data.",
           "requestBody":{
              "content":{
                 "application/json":{
                    "schema":{
                       "$ref":"#/components/schemas/InfluxQuery"
                    },
                    "example":{
                       "series":[
                          {
                             "devices":{
                                "tech":[
                                   5,
                                   6,
                                   7
                                ],
                                "wtp":[
                                   5,
                                   8,
                                   89
                                ],
                                "sbus":[
                                   5,
                                   8,
                                   89
                                ],
                                "virtual":[
                                   5,
                                   8,
                                   89
                                ],
                                "lora":[
                                   5,
                                   8,
                                   89
                                ],
                                "modbus":[
                                   5,
                                   8,
                                   89
                                ],
                                "system_module":[
                                   5,
                                   8,
                                   89
                                ]
                             },
                             "name":"temperature",
                             "query_variant":"standard"
                          }
                       ],
                       "time_start":"2021-11-12T23:00:00.000Z",
                       "time_end":"2021-12-13T22:59:59.999Z"
                    }
                 }
              },
              "required":true
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/InfluxQueryRunResult"
                             }
                          },
                          "example":{
                             "data":{
                                "series":[
                                   {
                                      "name":"temperature",
                                      "values":[
                                         [
                                            "2021-11-12T23:00:00Z",
                                            "wtp",
                                            "192",
                                            "Cx10",
                                            191
                                         ],
                                         [
                                            "2021-11-12T23:01:00Z",
                                            "tech",
                                            "80",
                                            "Cx10",
                                            200
                                         ]
                                      ],
                                      "columns":[
                                         "time",
                                         "class",
                                         "id",
                                         "unit",
                                         "val"
                                      ]
                                   }
                                ]
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "$ref":"#/components/responses/QueryError"
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              },
              "503":{
                 "$ref":"#/components/responses/ServiceUnavailable"
              }
           }
        }
     },
     "/influx/status":{
        "get":{
           "tags":[
              "influx"
           ],
           "summary":"Represents statistics and notification database status.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/InfluxStatus"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              },
              "503":{
                 "$ref":"#/components/responses/ServiceUnavailable"
              }
           }
        }
     },
     "/influx/notifications/query":{
        "post":{
           "tags":[
              "influx/notifications"
           ],
           "summary":"Return notification history",
           "requestBody":{
              "content":{
                 "application/json":{
                    "schema":{
                       "$ref":"#/components/schemas/InfluxNotificationQuery"
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/InfluxNotificationQueryRunResult"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              },
              "503":{
                 "$ref":"#/components/responses/ServiceUnavailable"
              }
           }
        }
     },
     "/influx/notifications/instaler-check":{
        "patch":{
           "tags":[
              "influx/notifications"
           ],
           "summary":"Mark installer notifications as checked.",
           "description":"Mark installer notifications as checked. Available for roles: SUPER_TECH_ADMIN, TECH_ADMIN, SUPER_FIRM_ADMIN, FIRM_ADMIN, INSTALLER",
           "responses":{
              "200":{
                 "description":"Success."
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              },
              "503":{
                 "$ref":"#/components/responses/ServiceUnavailable"
              }
           }
        }
     },
     "/influx/query-template":{
        "get":{
           "tags":[
              "influx/query-template"
           ],
           "summary":"Get collection of all saved query templates.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/InfluxQueryTemplate.Collection"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              },
              "503":{
                 "$ref":"#/components/responses/ServiceUnavailable"
              }
           }
        },
        "post":{
           "tags":[
              "influx/query-template"
           ],
           "summary":"Add new query template.",
           "requestBody":{
              "description":"Influx Query Template model.<br> **NOTE:** Read-only parameters eg. `id` should not be sent. See schema for more info.<br> **WARNING:** Partial create is not possible here.",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "$ref":"#/components/schemas/InfluxQueryTemplate"
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/InfluxQueryTemplate"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/influx/query-template/{id}":{
        "get":{
           "tags":[
              "influx/query-template"
           ],
           "summary":"Get a influx query template by ID",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the query template to get"
              }
           ],
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/InfluxQueryTemplate"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "patch":{
           "tags":[
              "influx/query-template"
           ],
           "summary":"Edit existing query template.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the query template to edit"
              }
           ],
           "requestBody":{
              "description":"Influx Query Template model.<br> **NOTE:** Read-only parameters eg. `id` should not be sent. See schema for more info.<br> **WARNING:** Partial update is not possible here.",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "$ref":"#/components/schemas/InfluxQueryTemplate"
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/InfluxQueryTemplate"
                             }
                          }
                       }
                    }
                 }
              },
              "304":{
                 "$ref":"#/components/responses/NotModified"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          },
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        },
        "delete":{
           "tags":[
              "influx/query-template"
           ],
           "summary":"Delete query template by ID.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the query template to delete"
              }
           ],
           "responses":{
              "204":{
                 "$ref":"#/components/responses/NoContent"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/influx/query-template/{id}/run":{
        "post":{
           "tags":[
              "influx/query-template"
           ],
           "summary":"Execute query template by ID.",
           "parameters":[
              {
                 "in":"path",
                 "name":"id",
                 "schema":{
                    "type":"integer"
                 },
                 "required":true,
                 "description":"Numeric ID of the query template to run"
              }
           ],
           "requestBody":{
              "content":{
                 "application/json":{
                    "schema":{
                       "type":"object",
                       "required":[
                          "time_start",
                          "time_end"
                       ],
                       "properties":{
                          "time_start":{
                             "type":"string"
                          },
                          "time_end":{
                             "type":"string"
                          }
                       }
                    },
                    "example":{
                       "time_start":"2021-11-12T23:00:00.000Z",
                       "time_end":"2021-12-13T22:59:59.999Z"
                    }
                 }
              },
              "required":true
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/InfluxQueryTemplateRunResult"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "InvalidObjectIdSupplied":{
                             "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                          },
                          "QueryError":{
                             "$ref":"#/components/examples/Response.QueryError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              },
              "503":{
                 "$ref":"#/components/responses/ServiceUnavailable"
              }
           }
        }
     },
     "/influx/filters/login-history":{
        "get":{
           "tags":[
              "influx/login-history"
           ],
           "summary":"Query for login history filters.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/InfluxLoginHistoryFilterRunResult"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "$ref":"#/components/responses/QueryError"
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              },
              "503":{
                 "$ref":"#/components/responses/ServiceUnavailable"
              }
           }
        }
     },
     "/influx/login-history/query":{
        "post":{
           "tags":[
              "influx/login-history"
           ],
           "summary":"Query for statistic data.",
           "requestBody":{
              "content":{
                 "application/json":{
                    "schema":{
                       "$ref":"#/components/schemas/InfluxLoginHistoryQuery"
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/InfluxLoginHistoryQueryRunResult"
                             }
                          }
                       }
                    }
                 }
              },
              "400":{
                 "$ref":"#/components/responses/QueryError"
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              },
              "503":{
                 "$ref":"#/components/responses/ServiceUnavailable"
              }
           }
        }
     },
     "/settings/localization":{
        "get":{
           "tags":[
              "settings/localization"
           ],
           "summary":"Get current localization settings.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/LocalizationSettings"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "patch":{
           "tags":[
              "settings/localization"
           ],
           "summary":"Update localization settings.",
           "requestBody":{
              "description":"Live settings model.<br> **NOTE:** Partial update is not possible here!",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "$ref":"#/components/schemas/LocalizationSettings"
                    },
                    "examples":{
                       "Cracow":{
                          "$ref":"#/components/examples/LocalizationSettings"
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/LocalizationSettings"
                             }
                          }
                       }
                    }
                 }
              },
              "304":{
                 "$ref":"#/components/responses/NotModified"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/settings/main/logs":{
        "get":{
           "tags":[
              "settings/main/logs"
           ],
           "summary":"Get current log settings.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/LogSettings"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "patch":{
           "tags":[
              "settings/main/logs"
           ],
           "summary":"Update log settings.",
           "requestBody":{
              "description":"LogSettings model.<br> **NOTE:** Partial update is possible by sending single member of object, then rest of values remain unmodified.",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "$ref":"#/components/schemas/LogSettings"
                    },
                    "examples":{
                       "Update":{
                          "$ref":"#/components/examples/LogSettings"
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/LogSettings"
                             }
                          }
                       }
                    }
                 }
              },
              "304":{
                 "$ref":"#/components/responses/NotModified"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/settings/main/logs/live":{
        "get":{
           "tags":[
              "settings/main/logs"
           ],
           "summary":"Get info if log streaming via websocket channel is enabled or not.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "type":"object",
                                "required":[
                                   "enabled"
                                ],
                                "properties":{
                                   "enabled":{
                                      "type":"boolean"
                                   }
                                }
                             }
                          }
                       },
                       "example":{
                          "data":{
                             "enabled":true
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "patch":{
           "tags":[
              "settings/main/logs"
           ],
           "summary":"Update log streaming settings.",
           "requestBody":{
              "description":"Live settings model.<br> **NOTE:** Partial update is not possible here!",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "type":"object",
                       "required":[
                          "enabled"
                       ],
                       "properties":{
                          "enabled":{
                             "type":"boolean"
                          }
                       }
                    },
                    "example":{
                       "enabled":true
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "type":"object",
                                "required":[
                                   "enabled"
                                ],
                                "properties":{
                                   "enabled":{
                                      "type":"boolean"
                                   }
                                }
                             }
                          }
                       },
                       "example":{
                          "data":{
                             "enabled":true
                          }
                       }
                    }
                 }
              },
              "304":{
                 "$ref":"#/components/responses/NotModified"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/weather":{
        "get":{
           "tags":[
              "weather"
           ],
           "summary":"Get all weather data, for current weather conditions and next 7 days.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/Weather"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "409":{
                 "$ref":"#/components/responses/InvalidWeatherSettings"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              },
              "503":{
                 "$ref":"#/components/responses/NoDataAvailable"
              }
           }
        }
     },
     "/settings/weather":{
        "get":{
           "tags":[
              "settings/weather"
           ],
           "summary":"Get current weather settings.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/WeatherSettings"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "patch":{
           "tags":[
              "settings/weather"
           ],
           "summary":"Update weather settings.",
           "requestBody":{
              "description":"Weather settings model.<br> **NOTE:** Partial update is possible by sending single member of object, then rest of values remain unmodified.",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "$ref":"#/components/schemas/WeatherSettings"
                    },
                    "examples":{
                       "Update":{
                          "$ref":"#/components/examples/WeatherSettings"
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/WeatherSettings"
                             }
                          }
                       }
                    }
                 }
              },
              "304":{
                 "$ref":"#/components/responses/NotModified"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "description":"Validation error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.ValidationError"
                       },
                       "examples":{
                          "InvalidAppID":{
                             "$ref":"#/components/examples/Response.ValidationFailedInvalidAppID"
                          },
                          "NoInternetConnection":{
                             "$ref":"#/components/examples/Response.ValidationFailedNoInternetConnection"
                          }
                       }
                    }
                 }
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/settings/building":{
        "get":{
           "tags":[
              "settings/building"
           ],
           "summary":"Get current building settings.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/BuildingSettings"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "patch":{
           "tags":[
              "settings/building"
           ],
           "summary":"Update building settings.",
           "requestBody":{
              "description":"Live settings model.",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "$ref":"#/components/schemas/BuildingSettings"
                    },
                    "examples":{
                       "Cracow":{
                          "$ref":"#/components/examples/BuildingSettings"
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/BuildingSettings"
                             }
                          }
                       }
                    }
                 }
              },
              "304":{
                 "$ref":"#/components/responses/NotModified"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "description":"Validation error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.ValidationError"
                       },
                       "examples":{
                          "InvalidAppID":{
                             "$ref":"#/components/examples/Response.ValidationFailedInvalidAppID"
                          },
                          "NoInternetConnection":{
                             "$ref":"#/components/examples/Response.ValidationFailedNoInternetConnection"
                          }
                       }
                    }
                 }
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/energy-center/associations":{
        "get":{
           "tags":[
              "energy-center/associations"
           ],
           "summary":"Get associated devices used by energy center.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/EnergyCenter.Associations"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              },
              "503":{
                 "$ref":"#/components/responses/NoDataAvailable"
              }
           }
        },
        "patch":{
           "tags":[
              "energy-center/associations"
           ],
           "summary":"Update energy center associations.",
           "requestBody":{
              "description":"EnergyCenter Associations model.<br> **NOTE:** Partial update is possible by sending single member of object, then rest of values remain unmodified.",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "$ref":"#/components/schemas/EnergyCenter.Associations"
                    },
                    "examples":{
                       "Update":{
                          "$ref":"#/components/examples/EnergyCenter.Associations"
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/EnergyCenter.Associations"
                             }
                          }
                       }
                    }
                 }
              },
              "304":{
                 "$ref":"#/components/responses/NotModified"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/energy-center/flow-monitor":{
        "get":{
           "tags":[
              "energy-center/flow-monitor"
           ],
           "summary":"Get power flow monitor data.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/EnergyCenter.FlowMonitor"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              },
              "503":{
                 "$ref":"#/components/responses/NoDataAvailable"
              }
           }
        }
     },
     "/statistics/clear-data":{
        "post":{
           "tags":[
              "statistics"
           ],
           "summary":"Clear old statistics for removed devices, scenes and automations from database.",
           "requestBody":{
              "description":"Time in seconds which will be checked for removed devices. If there is no newer data points the data series will be removed from database.",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "description":"List of devices to update.",
                       "type":"object",
                       "properties":{
                          "older_than":{
                             "description":"Time in seconds which will be checked for removed devices. If there is no newer data points the data series will be removed from database.<br>Optional. One month if not provided.<br>Unit: seconds",
                             "type":"integer",
                             "minimum":1,
                             "maximum":15552000
                          }
                       }
                    },
                    "examples":{
                       "ClearOlderThanOneWeek":{
                          "value":{
                             "older_than":604800
                          }
                       }
                    }
                 }
              }
           },
           "responses":{
              "204":{
                 "$ref":"#/components/responses/NoContent"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/energy-center/prices":{
        "get":{
           "tags":[
              "energy-center/prices"
           ],
           "summary":"Get today energy prices.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/EnergyCenter.Prices"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/energy-center/prices/settings":{
        "get":{
           "tags":[
              "energy-center/prices"
           ],
           "summary":"Get energy prices settings.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/EnergyCenter.Prices.Settings"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "patch":{
           "tags":[
              "energy-center/prices"
           ],
           "summary":"Update energy prices settings.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/EnergyCenter.Prices.Settings"
                             }
                          }
                       }
                    }
                 }
              },
              "304":{
                 "$ref":"#/components/responses/NotModified"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "DatabaseError":{
                             "$ref":"#/components/examples/Response.DatabaseError"
                          },
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/energy-center/prices/sources":{
        "get":{
           "tags":[
              "energy-center/prices"
           ],
           "summary":"Get supported APIs list for obtaining energy prices.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/EnergyCenter.Prices.Sources"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/energy-center/energy-storage":{
        "get":{
           "tags":[
              "energy-center/energy-storage"
           ],
           "summary":"Get energy storage data.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/EnergyCenter.EnergyStorage"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              },
              "503":{
                 "$ref":"#/components/responses/NoDataAvailable"
              }
           }
        }
     },
     "/energy-center/energy-consumption":{
        "get":{
           "tags":[
              "energy-center/energy-consumption"
           ],
           "summary":"Get energy consumption data.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/EnergyCenter.EnergyConsumption"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              },
              "503":{
                 "$ref":"#/components/responses/NoDataAvailable"
              }
           }
        }
     },
     "/energy-center/energy-production":{
        "get":{
           "tags":[
              "energy-center/energy-production"
           ],
           "summary":"Get energy production data.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/EnergyCenter.EnergyProduction"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              },
              "503":{
                 "$ref":"#/components/responses/NoDataAvailable"
              }
           }
        }
     },
     "/energy-center/clear-data":{
        "post":{
           "tags":[
              "energy-center"
           ],
           "summary":"Clear all statistics and internal data cached by energy center components.",
           "responses":{
              "204":{
                 "$ref":"#/components/responses/NoContent"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "description":"Server side error.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "UnknownError":{
                             "$ref":"#/components/examples/Response.UnknownError"
                          }
                       }
                    }
                 }
              }
           }
        }
     },
     "/settings/modbus":{
        "get":{
           "tags":[
              "settings/modbus"
           ],
           "summary":"Get current modbus settings.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/ModbusSettings"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "patch":{
           "tags":[
              "settings/modbus"
           ],
           "summary":"Update modbus settings.",
           "requestBody":{
              "description":"Modbus settings model.<br> **NOTE:** Partial update is possible by sending single member of object, then rest of values remain unmodified.",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "$ref":"#/components/schemas/ModbusSettings"
                    },
                    "examples":{
                       "Update":{
                          "$ref":"#/components/examples/ModbusSettings"
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/ModbusSettings"
                             }
                          }
                       }
                    }
                 }
              },
              "304":{
                 "$ref":"#/components/responses/NotModified"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     },
     "/settings/floors":{
        "get":{
           "tags":[
              "settings/floors"
           ],
           "summary":"Get current floors settings.",
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/FloorsSettings"
                             }
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "404":{
                 "$ref":"#/components/responses/ObjectNotFound"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        },
        "patch":{
           "tags":[
              "settings/floors"
           ],
           "summary":"Update floors settings.",
           "requestBody":{
              "description":"Floors settings model.<br> **NOTE:** Partial update is possible by sending single member of object, then rest of values remain unmodified.",
              "required":true,
              "content":{
                 "application/json":{
                    "schema":{
                       "$ref":"#/components/schemas/FloorsSettings"
                    },
                    "examples":{
                       "Update":{
                          "$ref":"#/components/examples/FloorsSettings"
                       }
                    }
                 }
              }
           },
           "responses":{
              "200":{
                 "description":"Success.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "type":"object",
                          "required":[
                             "data"
                          ],
                          "properties":{
                             "data":{
                                "$ref":"#/components/schemas/FloorsSettings"
                             }
                          }
                       }
                    }
                 }
              },
              "304":{
                 "$ref":"#/components/responses/NotModified"
              },
              "400":{
                 "description":"Bad request.",
                 "content":{
                    "application/json":{
                       "schema":{
                          "$ref":"#/components/schemas/Response.Error"
                       },
                       "examples":{
                          "RequestParseError":{
                             "$ref":"#/components/examples/Response.RequestParseError"
                          },
                          "GoRequestParseError":{
                             "$ref":"#/components/examples/Response.GoRequestParseError"
                          },
                          "EmptyDataError":{
                             "$ref":"#/components/examples/Response.EmptyDataError"
                          }
                       }
                    }
                 }
              },
              "401":{
                 "$ref":"#/components/responses/UnauthorizedError"
              },
              "408":{
                 "$ref":"#/components/responses/RequestTimeout"
              },
              "422":{
                 "$ref":"#/components/responses/ValidationFailed"
              },
              "500":{
                 "$ref":"#/components/responses/UnknownError"
              }
           }
        }
     }
  },
  "components":{
     "schemas":{
        "InfluxQueryTemplate.Collection":{
           "type":"array",
           "description":"Collection of all available query templates.",
           "items":{
              "anyOf":[
                 {
                    "$ref":"#/components/schemas/InfluxQueryTemplate"
                 }
              ]
           }
        },
        "TagCollection":{
           "description":"Collection of user defined tags.",
           "type":"object",
           "required":[
              "tags"
           ],
           "properties":{
              "tags":{
                 "type":"array",
                 "items":{
                    "type":"string"
                 },
                 "example":[
                    "light",
                    "outlet",
                    "sensor"
                 ]
              }
           }
        },
        "Device.Collection":{
           "type":"object",
           "required":[
              "wtp",
              "tech",
              "virtual",
              "system_module",
              "sbus",
              "slink",
              "lora",
              "modbus",
              "alarm_system",
              "video",
              "custom_device_module"
           ],
           "properties":{
              "wtp":{
                 "$ref":"#/components/schemas/Device.WTP.Collection"
              },
              "tech":{
                 "$ref":"#/components/schemas/Device.TECH.Collection"
              },
              "virtual":{
                 "$ref":"#/components/schemas/Device.VIRTUAL.Collection"
              },
              "system_module":{
                 "$ref":"#/components/schemas/Device.SystemModule.Collection"
              },
              "sbus":{
                 "$ref":"#/components/schemas/Device.SBus.Collection"
              },
              "slink":{
                 "$ref":"#/components/schemas/Device.SLink.Collection"
              },
              "lora":{
                 "$ref":"#/components/schemas/Device.Lora.Collection"
              },
              "modbus":{
                 "$ref":"#/components/schemas/Device.Modbus.Collection"
              },
              "alarm_system":{
                 "$ref":"#/components/schemas/Device.AlarmSystem.Collection"
              },
              "video":{
                 "$ref":"#/components/schemas/Device.Video.Collection"
              },
              "custom_device_module":{
                 "$ref":"#/components/schemas/Device.CustomDeviceModule.Collection"
              }
           }
        },
        "Device.WTP.OneOf":{
           "oneOf":[
              {
                 "$ref":"#/components/schemas/Device.WTP.Button"
              },
              {
                 "$ref":"#/components/schemas/Device.WTP.BlindController"
              },
              {
                 "$ref":"#/components/schemas/Device.WTP.TemperatureSensor"
              },
              {
                 "$ref":"#/components/schemas/Device.WTP.HumiditySensor"
              },
              {
                 "$ref":"#/components/schemas/Device.WTP.PressureSensor"
              },
              {
                 "$ref":"#/components/schemas/Device.WTP.CO2Sensor"
              },
              {
                 "$ref":"#/components/schemas/Device.WTP.IAQSensor"
              },
              {
                 "$ref":"#/components/schemas/Device.WTP.OpeningSensor"
              },
              {
                 "$ref":"#/components/schemas/Device.WTP.MotionSensor"
              },
              {
                 "$ref":"#/components/schemas/Device.WTP.TemperatureRegulator"
              },
              {
                 "$ref":"#/components/schemas/Device.WTP.Relay"
              },
              {
                 "$ref":"#/components/schemas/Device.WTP.RadiatorActuator"
              },
              {
                 "$ref":"#/components/schemas/Device.WTP.AQSensor"
              },
              {
                 "$ref":"#/components/schemas/Device.WTP.LightSensor"
              },
              {
                 "$ref":"#/components/schemas/Device.WTP.SmokeSensor"
              },
              {
                 "$ref":"#/components/schemas/Device.WTP.FloodSensor"
              },
              {
                 "$ref":"#/components/schemas/Device.WTP.Throttle"
              },
              {
                 "$ref":"#/components/schemas/Device.WTP.TwoStateInputSensor"
              },
              {
                 "$ref":"#/components/schemas/Device.WTP.Dimmer"
              },
              {
                 "$ref":"#/components/schemas/Device.WTP.EnergyMeter"
              },
              {
                 "$ref":"#/components/schemas/Device.WTP.RGBController"
              },
              {
                 "$ref":"#/components/schemas/Device.WTP.FanControl"
              },
              {
                 "$ref":"#/components/schemas/Device.WTP.FanCoil"
              },
              {
                 "$ref":"#/components/schemas/Device.WTP.IRHeater"
              }
           ]
        },
        "Device.WTP.Collection":{
           "type":"array",
           "items":{
              "anyOf":[
                 {
                    "$ref":"#/components/schemas/Device.WTP.Button"
                 },
                 {
                    "$ref":"#/components/schemas/Device.WTP.BlindController"
                 },
                 {
                    "$ref":"#/components/schemas/Device.WTP.TemperatureSensor"
                 },
                 {
                    "$ref":"#/components/schemas/Device.WTP.HumiditySensor"
                 },
                 {
                    "$ref":"#/components/schemas/Device.WTP.PressureSensor"
                 },
                 {
                    "$ref":"#/components/schemas/Device.WTP.CO2Sensor"
                 },
                 {
                    "$ref":"#/components/schemas/Device.WTP.IAQSensor"
                 },
                 {
                    "$ref":"#/components/schemas/Device.WTP.OpeningSensor"
                 },
                 {
                    "$ref":"#/components/schemas/Device.WTP.MotionSensor"
                 },
                 {
                    "$ref":"#/components/schemas/Device.WTP.TemperatureRegulator"
                 },
                 {
                    "$ref":"#/components/schemas/Device.WTP.Relay"
                 },
                 {
                    "$ref":"#/components/schemas/Device.WTP.RadiatorActuator"
                 },
                 {
                    "$ref":"#/components/schemas/Device.WTP.AQSensor"
                 },
                 {
                    "$ref":"#/components/schemas/Device.WTP.LightSensor"
                 },
                 {
                    "$ref":"#/components/schemas/Device.WTP.SmokeSensor"
                 },
                 {
                    "$ref":"#/components/schemas/Device.WTP.FloodSensor"
                 },
                 {
                    "$ref":"#/components/schemas/Device.WTP.Throttle"
                 },
                 {
                    "$ref":"#/components/schemas/Device.WTP.TwoStateInputSensor"
                 },
                 {
                    "$ref":"#/components/schemas/Device.WTP.Dimmer"
                 },
                 {
                    "$ref":"#/components/schemas/Device.WTP.EnergyMeter"
                 },
                 {
                    "$ref":"#/components/schemas/Device.WTP.RGBController"
                 },
                 {
                    "$ref":"#/components/schemas/Device.WTP.FanControl"
                 },
                 {
                    "$ref":"#/components/schemas/Device.WTP.FanCoil"
                 },
                 {
                    "$ref":"#/components/schemas/Device.WTP.IRHeater"
                 }
              ]
           }
        },
        "Device.TECH.OneOf":{
           "oneOf":[
              {
                 "$ref":"#/components/schemas/Device.TECH.TwoStateInputSensor"
              },
              {
                 "$ref":"#/components/schemas/Device.TECH.TemperatureSensor"
              },
              {
                 "$ref":"#/components/schemas/Device.TECH.HumiditySensor"
              },
              {
                 "$ref":"#/components/schemas/Device.TECH.TemperatureRegulator"
              },
              {
                 "$ref":"#/components/schemas/Device.TECH.Relay"
              },
              {
                 "$ref":"#/components/schemas/Device.TECH.HeatPump"
              },
              {
                 "$ref":"#/components/schemas/Device.TECH.ParamContainer"
              },
              {
                 "$ref":"#/components/schemas/Device.TECH.Ventilation"
              },
              {
                 "$ref":"#/components/schemas/Device.TECH.PelletBoiler"
              },
              {
                 "$ref":"#/components/schemas/Device.TECH.CommonDHWMain"
              },
              {
                 "$ref":"#/components/schemas/Device.TECH.CommonValve"
              },
              {
                 "$ref":"#/components/schemas/Device.TECH.CommonHeatBuffer"
              },
              {
                 "$ref":"#/components/schemas/Device.TECH.PelletChMain"
              },
              {
                 "$ref":"#/components/schemas/Device.TECH.CommonCoAdditional"
              },
              {
                 "$ref":"#/components/schemas/Device.TECH.CommonDHWAdditional"
              },
              {
                 "$ref":"#/components/schemas/Device.TECH.CommonFloorPumpAdditional"
              },
              {
                 "$ref":"#/components/schemas/Device.TECH.CommonRelayAdditional"
              },
              {
                 "$ref":"#/components/schemas/Device.TECH.CommonProtectPumpAdditional"
              },
              {
                 "$ref":"#/components/schemas/Device.TECH.Solar"
              }
           ]
        },
        "Device.TECH.Collection":{
           "type":"array",
           "items":{
              "anyOf":[
                 {
                    "$ref":"#/components/schemas/Device.TECH.TwoStateInputSensor"
                 },
                 {
                    "$ref":"#/components/schemas/Device.TECH.TemperatureSensor"
                 },
                 {
                    "$ref":"#/components/schemas/Device.TECH.HumiditySensor"
                 },
                 {
                    "$ref":"#/components/schemas/Device.TECH.TemperatureRegulator"
                 },
                 {
                    "$ref":"#/components/schemas/Device.TECH.Relay"
                 },
                 {
                    "$ref":"#/components/schemas/Device.TECH.HeatPump"
                 },
                 {
                    "$ref":"#/components/schemas/Device.TECH.ParamContainer"
                 },
                 {
                    "$ref":"#/components/schemas/Device.TECH.Ventilation"
                 },
                 {
                    "$ref":"#/components/schemas/Device.TECH.PelletBoiler"
                 },
                 {
                    "$ref":"#/components/schemas/Device.TECH.CommonDHWMain"
                 },
                 {
                    "$ref":"#/components/schemas/Device.TECH.CommonValve"
                 },
                 {
                    "$ref":"#/components/schemas/Device.TECH.CommonHeatBuffer"
                 },
                 {
                    "$ref":"#/components/schemas/Device.TECH.PelletChMain"
                 },
                 {
                    "$ref":"#/components/schemas/Device.TECH.CommonCoAdditional"
                 },
                 {
                    "$ref":"#/components/schemas/Device.TECH.CommonDHWAdditional"
                 },
                 {
                    "$ref":"#/components/schemas/Device.TECH.CommonFloorPumpAdditional"
                 },
                 {
                    "$ref":"#/components/schemas/Device.TECH.CommonRelayAdditional"
                 },
                 {
                    "$ref":"#/components/schemas/Device.TECH.CommonProtectPumpAdditional"
                 },
                 {
                    "$ref":"#/components/schemas/Device.TECH.Solar"
                 }
              ]
           }
        },
        "Device.Modbus.OneOf":{
           "oneOf":[
              {
                 "$ref":"#/components/schemas/Device.Modbus.EcoAirHeatPump"
              },
              {
                 "$ref":"#/components/schemas/Device.Modbus.EcoAirMainDhw"
              },
              {
                 "$ref":"#/components/schemas/Device.Modbus.EcoGeoHeatPump"
              },
              {
                 "$ref":"#/components/schemas/Device.Modbus.EcoGeoMainDhw"
              },
              {
                 "$ref":"#/components/schemas/Device.Modbus.HeatcompHeatPump"
              },
              {
                 "$ref":"#/components/schemas/Device.Modbus.HeatcompMainDhw"
              },
              {
                 "$ref":"#/components/schemas/Device.Modbus.RemehaElgaACEHeatPump"
              },
              {
                 "$ref":"#/components/schemas/Device.Modbus.RemehaElgaACETemperatureSensor"
              },
              {
                 "$ref":"#/components/schemas/Device.Modbus.AlphaInnotecHeatPump"
              },
              {
                 "$ref":"#/components/schemas/Device.Modbus.AlphaInnotecMainDhw"
              },
              {
                 "$ref":"#/components/schemas/Device.Modbus.AlphaInnotecTemperatureSensor"
              },
              {
                 "$ref":"#/components/schemas/Device.Modbus.SolaxX1Inverter"
              },
              {
                 "$ref":"#/components/schemas/Device.Modbus.SolaxX1EnergyMeter"
              },
              {
                 "$ref":"#/components/schemas/Device.Modbus.SolaxX1Battery"
              },
              {
                 "$ref":"#/components/schemas/Device.Modbus.SolaxX3Inverter"
              },
              {
                 "$ref":"#/components/schemas/Device.Modbus.SolaxX3EnergyMeter"
              },
              {
                 "$ref":"#/components/schemas/Device.Modbus.SolaxX3Battery"
              },
              {
                 "$ref":"#/components/schemas/Device.Modbus.IthoHeatPump"
              },
              {
                 "$ref":"#/components/schemas/Device.Modbus.IthoMainDhw"
              },
              {
                 "$ref":"#/components/schemas/Device.Modbus.IthoTemperatureSensor"
              },
              {
                 "$ref":"#/components/schemas/Device.Modbus.EastronSDM630EnergyMeter"
              },
              {
                 "$ref":"#/components/schemas/Device.Modbus.SolarEdgeSingleInverter"
              },
              {
                 "$ref":"#/components/schemas/Device.Modbus.SolarEdgeMultipleInverter"
              },
              {
                 "$ref":"#/components/schemas/Device.Modbus.MitsubishiEcodanHeatPump"
              },
              {
                 "$ref":"#/components/schemas/Device.Modbus.MitsubishiEcodanMainDhw"
              },
              {
                 "$ref":"#/components/schemas/Device.Modbus.MitsubishiEcodanTemperatureSensor"
              },
              {
                 "$ref":"#/components/schemas/Device.Modbus.GalmetPrimaHeatPump"
              },
              {
                 "$ref":"#/components/schemas/Device.Modbus.GalmetPrimaMainDhw"
              },
              {
                 "$ref":"#/components/schemas/Device.Modbus.GalmetPrimaTemperatureSensor"
              },
              {
                 "$ref":"#/components/schemas/Device.Modbus.KaisaiKHCHeatPump"
              },
              {
                 "$ref":"#/components/schemas/Device.Modbus.KaisaiKHCMainDhw"
              },
              {
                 "$ref":"#/components/schemas/Device.Modbus.KaisaiKHCTemperatureSensor"
              },
              {
                 "$ref":"#/components/schemas/Device.Modbus.GoodWeSdtMsDnsXsInverter"
              },
              {
                 "$ref":"#/components/schemas/Device.Modbus.GoodWeMtSmtInverter"
              },
              {
                 "$ref":"#/components/schemas/Device.Modbus.HeatEcoHeatPump"
              },
              {
                 "$ref":"#/components/schemas/Device.Modbus.HeatEcoMainDhw"
              },
              {
                 "$ref":"#/components/schemas/Device.Modbus.SolisInverter"
              },
              {
                 "$ref":"#/components/schemas/Device.Modbus.HuaweiSUN2000Inverter"
              },
              {
                 "$ref":"#/components/schemas/Device.Modbus.HuaweiSUN2000Battery"
              },
              {
                 "$ref":"#/components/schemas/Device.Modbus.HuaweiSUN2000EnergyMeter"
              },
              {
                 "$ref":"#/components/schemas/Device.Modbus.KM1EnergyMeterConverter"
              },
              {
                 "$ref":"#/components/schemas/Device.Modbus.AmpowrAmpiHomeInverter"
              },
              {
                 "$ref":"#/components/schemas/Device.Modbus.AmpowrAmpiHomeEnergyMeter1Phase"
              },
              {
                 "$ref":"#/components/schemas/Device.Modbus.AmpowrAmpiHomeEnergyMeter3Phase"
              },
              {
                 "$ref":"#/components/schemas/Device.Modbus.AmpowrAmpiHomeBattery"
              },
              {
                 "$ref":"#/components/schemas/Device.Modbus.HeatcompHCEV01CarCharger"
              },
              {
                 "$ref":"#/components/schemas/Device.Modbus.DaikinAlthermaHeatPump"
              },
              {
                 "$ref":"#/components/schemas/Device.Modbus.DaikinAlthermaMainDhw"
              },
              {
                 "$ref":"#/components/schemas/Device.Modbus.DaikinAlthermaTemperatureSensor"
              },
              {
                 "$ref":"#/components/schemas/Device.Modbus.EcoGeoHighPowerHeatPump"
              },
              {
                 "$ref":"#/components/schemas/Device.Modbus.EcoGeoHighPowerMainDhw"
              },
              {
                 "$ref":"#/components/schemas/Device.Modbus.TechLE3x230mb"
              },
              {
                 "$ref":"#/components/schemas/Device.Modbus.HeatcompInverter"
              },
              {
                 "$ref":"#/components/schemas/Device.Modbus.HeatcompBattery"
              }
           ]
        },
        "Device.Modbus.Collection":{
           "type":"array",
           "items":{
              "anyOf":[
                 {
                    "$ref":"#/components/schemas/Device.Modbus.EcoAirHeatPump"
                 },
                 {
                    "$ref":"#/components/schemas/Device.Modbus.EcoAirMainDhw"
                 },
                 {
                    "$ref":"#/components/schemas/Device.Modbus.EcoGeoHeatPump"
                 },
                 {
                    "$ref":"#/components/schemas/Device.Modbus.EcoGeoMainDhw"
                 },
                 {
                    "$ref":"#/components/schemas/Device.Modbus.HeatcompHeatPump"
                 },
                 {
                    "$ref":"#/components/schemas/Device.Modbus.HeatcompMainDhw"
                 },
                 {
                    "$ref":"#/components/schemas/Device.Modbus.RemehaElgaACEHeatPump"
                 },
                 {
                    "$ref":"#/components/schemas/Device.Modbus.RemehaElgaACETemperatureSensor"
                 },
                 {
                    "$ref":"#/components/schemas/Device.Modbus.AlphaInnotecHeatPump"
                 },
                 {
                    "$ref":"#/components/schemas/Device.Modbus.AlphaInnotecMainDhw"
                 },
                 {
                    "$ref":"#/components/schemas/Device.Modbus.AlphaInnotecTemperatureSensor"
                 },
                 {
                    "$ref":"#/components/schemas/Device.Modbus.SolaxX1Inverter"
                 },
                 {
                    "$ref":"#/components/schemas/Device.Modbus.SolaxX1EnergyMeter"
                 },
                 {
                    "$ref":"#/components/schemas/Device.Modbus.SolaxX1Battery"
                 },
                 {
                    "$ref":"#/components/schemas/Device.Modbus.SolaxX3Inverter"
                 },
                 {
                    "$ref":"#/components/schemas/Device.Modbus.SolaxX3EnergyMeter"
                 },
                 {
                    "$ref":"#/components/schemas/Device.Modbus.SolaxX3Battery"
                 },
                 {
                    "$ref":"#/components/schemas/Device.Modbus.IthoHeatPump"
                 },
                 {
                    "$ref":"#/components/schemas/Device.Modbus.IthoMainDhw"
                 },
                 {
                    "$ref":"#/components/schemas/Device.Modbus.IthoTemperatureSensor"
                 },
                 {
                    "$ref":"#/components/schemas/Device.Modbus.EastronSDM630EnergyMeter"
                 },
                 {
                    "$ref":"#/components/schemas/Device.Modbus.SolarEdgeSingleInverter"
                 },
                 {
                    "$ref":"#/components/schemas/Device.Modbus.SolarEdgeMultipleInverter"
                 },
                 {
                    "$ref":"#/components/schemas/Device.Modbus.MitsubishiEcodanHeatPump"
                 },
                 {
                    "$ref":"#/components/schemas/Device.Modbus.MitsubishiEcodanMainDhw"
                 },
                 {
                    "$ref":"#/components/schemas/Device.Modbus.MitsubishiEcodanTemperatureSensor"
                 },
                 {
                    "$ref":"#/components/schemas/Device.Modbus.GalmetPrimaHeatPump"
                 },
                 {
                    "$ref":"#/components/schemas/Device.Modbus.GalmetPrimaMainDhw"
                 },
                 {
                    "$ref":"#/components/schemas/Device.Modbus.GalmetPrimaTemperatureSensor"
                 },
                 {
                    "$ref":"#/components/schemas/Device.Modbus.KaisaiKHCHeatPump"
                 },
                 {
                    "$ref":"#/components/schemas/Device.Modbus.KaisaiKHCMainDhw"
                 },
                 {
                    "$ref":"#/components/schemas/Device.Modbus.KaisaiKHCTemperatureSensor"
                 },
                 {
                    "$ref":"#/components/schemas/Device.Modbus.GoodWeSdtMsDnsXsInverter"
                 },
                 {
                    "$ref":"#/components/schemas/Device.Modbus.GoodWeMtSmtInverter"
                 },
                 {
                    "$ref":"#/components/schemas/Device.Modbus.HeatEcoHeatPump"
                 },
                 {
                    "$ref":"#/components/schemas/Device.Modbus.HeatEcoMainDhw"
                 },
                 {
                    "$ref":"#/components/schemas/Device.Modbus.SolisInverter"
                 },
                 {
                    "$ref":"#/components/schemas/Device.Modbus.HuaweiSUN2000Inverter"
                 },
                 {
                    "$ref":"#/components/schemas/Device.Modbus.HuaweiSUN2000Battery"
                 },
                 {
                    "$ref":"#/components/schemas/Device.Modbus.HuaweiSUN2000EnergyMeter"
                 },
                 {
                    "$ref":"#/components/schemas/Device.Modbus.KM1EnergyMeterConverter"
                 },
                 {
                    "$ref":"#/components/schemas/Device.Modbus.AmpowrAmpiHomeInverter"
                 },
                 {
                    "$ref":"#/components/schemas/Device.Modbus.AmpowrAmpiHomeEnergyMeter1Phase"
                 },
                 {
                    "$ref":"#/components/schemas/Device.Modbus.AmpowrAmpiHomeEnergyMeter3Phase"
                 },
                 {
                    "$ref":"#/components/schemas/Device.Modbus.AmpowrAmpiHomeBattery"
                 },
                 {
                    "$ref":"#/components/schemas/Device.Modbus.HeatcompHCEV01CarCharger"
                 },
                 {
                    "$ref":"#/components/schemas/Device.Modbus.DaikinAlthermaHeatPump"
                 },
                 {
                    "$ref":"#/components/schemas/Device.Modbus.DaikinAlthermaMainDhw"
                 },
                 {
                    "$ref":"#/components/schemas/Device.Modbus.DaikinAlthermaTemperatureSensor"
                 },
                 {
                    "$ref":"#/components/schemas/Device.Modbus.EcoGeoHighPowerHeatPump"
                 },
                 {
                    "$ref":"#/components/schemas/Device.Modbus.EcoGeoHighPowerMainDhw"
                 },
                 {
                    "$ref":"#/components/schemas/Device.Modbus.TechLE3x230mb"
                 },
                 {
                    "$ref":"#/components/schemas/Device.Modbus.HeatcompInverter"
                 },
                 {
                    "$ref":"#/components/schemas/Device.Modbus.HeatcompBattery"
                 }
              ]
           }
        },
        "Device.ModbusParentDeviceDiagnosticInfo.Collection":{
           "type":"array",
           "items":{
              "anyOf":[
                 {
                    "$ref":"#/components/schemas/ModbusParentDeviceDiagnosticInfo"
                 }
              ]
           }
        },
        "Device.VIRTUAL.OneOf":{
           "oneOf":[
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.Thermostat"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.ThermostatOutputGroup"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.RelayIntegrator"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.BlindControllerIntegrator"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.DimmerRgbIntegrator"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.HeatPumpManager"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.Gate"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.Wicket"
              }
           ]
        },
        "Device.VIRTUAL.Collection":{
           "type":"array",
           "items":{
              "anyOf":[
                 {
                    "$ref":"#/components/schemas/Device.VIRTUAL.Thermostat"
                 },
                 {
                    "$ref":"#/components/schemas/Device.VIRTUAL.ThermostatOutputGroup"
                 },
                 {
                    "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice"
                 },
                 {
                    "$ref":"#/components/schemas/Device.VIRTUAL.RelayIntegrator"
                 },
                 {
                    "$ref":"#/components/schemas/Device.VIRTUAL.BlindControllerIntegrator"
                 },
                 {
                    "$ref":"#/components/schemas/Device.VIRTUAL.DimmerRgbIntegrator"
                 },
                 {
                    "$ref":"#/components/schemas/Device.VIRTUAL.HeatPumpManager"
                 },
                 {
                    "$ref":"#/components/schemas/Device.VIRTUAL.Gate"
                 },
                 {
                    "$ref":"#/components/schemas/Device.VIRTUAL.Wicket"
                 }
              ]
           }
        },
        "Device.SBus.OneOf":{
           "oneOf":[
              {
                 "$ref":"#/components/schemas/Device.SBus.Relay"
              },
              {
                 "$ref":"#/components/schemas/Device.SBus.TemperatureSensor"
              },
              {
                 "$ref":"#/components/schemas/Device.SBus.HumiditySensor"
              },
              {
                 "$ref":"#/components/schemas/Device.SBus.TemperatureRegulator"
              },
              {
                 "$ref":"#/components/schemas/Device.SBus.TwoStateInputSensor"
              },
              {
                 "$ref":"#/components/schemas/Device.SBus.Button"
              },
              {
                 "$ref":"#/components/schemas/Device.SBus.AnalogInput"
              },
              {
                 "$ref":"#/components/schemas/Device.SBus.Dimmer"
              },
              {
                 "$ref":"#/components/schemas/Device.SBus.RGBController"
              },
              {
                 "$ref":"#/components/schemas/Device.SBus.MotionSensor"
              },
              {
                 "$ref":"#/components/schemas/Device.SBus.LightSensor"
              },
              {
                 "$ref":"#/components/schemas/Device.SBus.PressureSensor"
              },
              {
                 "$ref":"#/components/schemas/Device.SBus.CO2Sensor"
              },
              {
                 "$ref":"#/components/schemas/Device.SBus.IAQSensor"
              },
              {
                 "$ref":"#/components/schemas/Device.SBus.BlindController"
              },
              {
                 "$ref":"#/components/schemas/Device.SBus.AnalogOutput"
              },
              {
                 "$ref":"#/components/schemas/Device.SBus.PulseWidthModulation"
              },
              {
                 "$ref":"#/components/schemas/Device.SBus.FloodSensor"
              },
              {
                 "$ref":"#/components/schemas/Device.SBus.Valve"
              },
              {
                 "$ref":"#/components/schemas/Device.SBus.ValvePump"
              },
              {
                 "$ref":"#/components/schemas/Device.SBus.EnergyMeter"
              },
              {
                 "$ref":"#/components/schemas/Device.SBus.ValveAnalogPID"
              },
              {
                 "$ref":"#/components/schemas/Device.SBus.WaterMeter"
              },
              {
                 "$ref":"#/components/schemas/Device.SBus.HeatMeter"
              },
              {
                 "$ref":"#/components/schemas/Device.SBus.FanCoil"
              }
           ]
        },
        "Device.SBus.Collection":{
           "type":"array",
           "items":{
              "anyOf":[
                 {
                    "$ref":"#/components/schemas/Device.SBus.Relay"
                 },
                 {
                    "$ref":"#/components/schemas/Device.SBus.TemperatureSensor"
                 },
                 {
                    "$ref":"#/components/schemas/Device.SBus.HumiditySensor"
                 },
                 {
                    "$ref":"#/components/schemas/Device.SBus.TemperatureRegulator"
                 },
                 {
                    "$ref":"#/components/schemas/Device.SBus.TwoStateInputSensor"
                 },
                 {
                    "$ref":"#/components/schemas/Device.SBus.Button"
                 },
                 {
                    "$ref":"#/components/schemas/Device.SBus.AnalogInput"
                 },
                 {
                    "$ref":"#/components/schemas/Device.SBus.Dimmer"
                 },
                 {
                    "$ref":"#/components/schemas/Device.SBus.RGBController"
                 },
                 {
                    "$ref":"#/components/schemas/Device.SBus.MotionSensor"
                 },
                 {
                    "$ref":"#/components/schemas/Device.SBus.LightSensor"
                 },
                 {
                    "$ref":"#/components/schemas/Device.SBus.PressureSensor"
                 },
                 {
                    "$ref":"#/components/schemas/Device.SBus.CO2Sensor"
                 },
                 {
                    "$ref":"#/components/schemas/Device.SBus.IAQSensor"
                 },
                 {
                    "$ref":"#/components/schemas/Device.SBus.BlindController"
                 },
                 {
                    "$ref":"#/components/schemas/Device.SBus.AnalogOutput"
                 },
                 {
                    "$ref":"#/components/schemas/Device.SBus.PulseWidthModulation"
                 },
                 {
                    "$ref":"#/components/schemas/Device.SBus.FloodSensor"
                 },
                 {
                    "$ref":"#/components/schemas/Device.SBus.Valve"
                 },
                 {
                    "$ref":"#/components/schemas/Device.SBus.ValvePump"
                 },
                 {
                    "$ref":"#/components/schemas/Device.SBus.EnergyMeter"
                 },
                 {
                    "$ref":"#/components/schemas/Device.SBus.ValveAnalogPID"
                 },
                 {
                    "$ref":"#/components/schemas/Device.SBus.WaterMeter"
                 },
                 {
                    "$ref":"#/components/schemas/Device.SBus.HeatMeter"
                 },
                 {
                    "$ref":"#/components/schemas/Device.SBus.FanCoil"
                 }
              ]
           }
        },
        "Device.SLink.OneOf":{
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.SBus.OneOf"
              }
           ]
        },
        "Device.SLink.Collection":{
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.SBus.Collection"
              }
           ]
        },
        "Device.SystemModule.OneOf":{
           "oneOf":[
              {
                 "$ref":"#/components/schemas/Device.SystemModule.WTPTransceiver"
              },
              {
                 "$ref":"#/components/schemas/Device.SystemModule.WTPExtender"
              },
              {
                 "$ref":"#/components/schemas/Device.SystemModule.SBusTransceiver"
              },
              {
                 "$ref":"#/components/schemas/Device.SystemModule.SBusExtender"
              },
              {
                 "$ref":"#/components/schemas/Device.SystemModule.LoraGateway"
              },
              {
                 "$ref":"#/components/schemas/Device.SystemModule.ModbusTransceiver"
              },
              {
                 "$ref":"#/components/schemas/Device.SystemModule.ModbusExtender"
              },
              {
                 "$ref":"#/components/schemas/Device.SystemModule.TECHRSTransceiver"
              },
              {
                 "$ref":"#/components/schemas/Device.SystemModule.TECHRSExtender"
              },
              {
                 "$ref":"#/components/schemas/Device.SystemModule.IrRemote"
              },
              {
                 "$ref":"#/components/schemas/Device.SystemModule.RfRemote"
              }
           ]
        },
        "Device.SystemModule.Collection":{
           "type":"array",
           "items":{
              "anyOf":[
                 {
                    "$ref":"#/components/schemas/Device.SystemModule.WTPTransceiver"
                 },
                 {
                    "$ref":"#/components/schemas/Device.SystemModule.WTPExtender"
                 },
                 {
                    "$ref":"#/components/schemas/Device.SystemModule.SBusTransceiver"
                 },
                 {
                    "$ref":"#/components/schemas/Device.SystemModule.SBusExtender"
                 },
                 {
                    "$ref":"#/components/schemas/Device.SystemModule.LoraGateway"
                 },
                 {
                    "$ref":"#/components/schemas/Device.SystemModule.ModbusTransceiver"
                 },
                 {
                    "$ref":"#/components/schemas/Device.SystemModule.ModbusExtender"
                 },
                 {
                    "$ref":"#/components/schemas/Device.SystemModule.TECHRSTransceiver"
                 },
                 {
                    "$ref":"#/components/schemas/Device.SystemModule.TECHRSExtender"
                 },
                 {
                    "$ref":"#/components/schemas/Device.SystemModule.IrRemote"
                 },
                 {
                    "$ref":"#/components/schemas/Device.SystemModule.RfRemote"
                 }
              ]
           }
        },
        "Device.Lora.OneOf":{
           "oneOf":[
              {
                 "$ref":"#/components/schemas/Device.Lora.TemperatureSensor"
              },
              {
                 "$ref":"#/components/schemas/Device.Lora.HumiditySensor"
              },
              {
                 "$ref":"#/components/schemas/Device.Lora.OpeningSensor"
              },
              {
                 "$ref":"#/components/schemas/Device.Lora.FloodSensor"
              },
              {
                 "$ref":"#/components/schemas/Device.Lora.Relay"
              },
              {
                 "$ref":"#/components/schemas/Device.Lora.TwoStateInputSensor"
              },
              {
                 "$ref":"#/components/schemas/Device.Lora.SmokeSensor"
              }
           ]
        },
        "Device.Lora.Collection":{
           "type":"array",
           "items":{
              "anyOf":[
                 {
                    "$ref":"#/components/schemas/Device.Lora.TemperatureSensor"
                 },
                 {
                    "$ref":"#/components/schemas/Device.Lora.HumiditySensor"
                 },
                 {
                    "$ref":"#/components/schemas/Device.Lora.OpeningSensor"
                 },
                 {
                    "$ref":"#/components/schemas/Device.Lora.FloodSensor"
                 },
                 {
                    "$ref":"#/components/schemas/Device.Lora.Relay"
                 },
                 {
                    "$ref":"#/components/schemas/Device.Lora.TwoStateInputSensor"
                 },
                 {
                    "$ref":"#/components/schemas/Device.Lora.SmokeSensor"
                 }
              ]
           }
        },
        "Device.AlarmSystem.OneOf":{
           "oneOf":[
              {
                 "$ref":"#/components/schemas/Device.AlarmSystem.Satel.TwoStateInputSensor"
              },
              {
                 "$ref":"#/components/schemas/Device.AlarmSystem.Satel.TwoStateOutput"
              },
              {
                 "$ref":"#/components/schemas/Device.AlarmSystem.Satel.AlarmZone"
              }
           ]
        },
        "Device.AlarmSystem.Collection":{
           "type":"array",
           "items":{
              "anyOf":[
                 {
                    "$ref":"#/components/schemas/Device.AlarmSystem.Satel.TwoStateInputSensor"
                 },
                 {
                    "$ref":"#/components/schemas/Device.AlarmSystem.Satel.TwoStateOutput"
                 },
                 {
                    "$ref":"#/components/schemas/Device.AlarmSystem.Satel.AlarmZone"
                 }
              ]
           }
        },
        "Device.Video.OneOf":{
           "oneOf":[
              {
                 "$ref":"#/components/schemas/Device.Video.Camera"
              }
           ]
        },
        "Device.Video.Collection":{
           "type":"array",
           "items":{
              "anyOf":[
                 {
                    "$ref":"#/components/schemas/Device.Video.Camera"
                 }
              ]
           }
        },
        "Device.CustomDeviceModule.OneOf":{
           "oneOf":[
              {
                 "$ref":"#/components/schemas/Device.CustomDeviceModule.Battery"
              },
              {
                 "$ref":"#/components/schemas/Device.CustomDeviceModule.CarCharger"
              },
              {
                 "$ref":"#/components/schemas/Device.CustomDeviceModule.Dimmer"
              },
              {
                 "$ref":"#/components/schemas/Device.CustomDeviceModule.DomesticHotWater"
              },
              {
                 "$ref":"#/components/schemas/Device.CustomDeviceModule.EnergyMeter"
              },
              {
                 "$ref":"#/components/schemas/Device.CustomDeviceModule.HeatPump"
              },
              {
                 "$ref":"#/components/schemas/Device.CustomDeviceModule.HumiditySensor"
              },
              {
                 "$ref":"#/components/schemas/Device.CustomDeviceModule.Inverter"
              },
              {
                 "$ref":"#/components/schemas/Device.CustomDeviceModule.Relay"
              },
              {
                 "$ref":"#/components/schemas/Device.CustomDeviceModule.RGBController"
              },
              {
                 "$ref":"#/components/schemas/Device.CustomDeviceModule.TemperatureRegulator"
              },
              {
                 "$ref":"#/components/schemas/Device.CustomDeviceModule.TemperatureSensor"
              },
              {
                 "$ref":"#/components/schemas/Device.CustomDeviceModule.TwoStateInputSensor"
              },
              {
                 "$ref":"#/components/schemas/Device.CustomDeviceModule.AnalogInput"
              },
              {
                 "$ref":"#/components/schemas/Device.CustomDeviceModule.AnalogOutput"
              },
              {
                 "$ref":"#/components/schemas/Device.CustomDeviceModule.AQSensor"
              },
              {
                 "$ref":"#/components/schemas/Device.CustomDeviceModule.BlindController"
              },
              {
                 "$ref":"#/components/schemas/Device.CustomDeviceModule.Co2Sensor"
              },
              {
                 "$ref":"#/components/schemas/Device.CustomDeviceModule.FloodSensor"
              },
              {
                 "$ref":"#/components/schemas/Device.CustomDeviceModule.IAQSensor"
              },
              {
                 "$ref":"#/components/schemas/Device.CustomDeviceModule.LightSensor"
              },
              {
                 "$ref":"#/components/schemas/Device.CustomDeviceModule.MotionSensor"
              },
              {
                 "$ref":"#/components/schemas/Device.CustomDeviceModule.OpeningSensor"
              },
              {
                 "$ref":"#/components/schemas/Device.CustomDeviceModule.PressureSensor"
              },
              {
                 "$ref":"#/components/schemas/Device.CustomDeviceModule.RadiatorActuator"
              },
              {
                 "$ref":"#/components/schemas/Device.CustomDeviceModule.SmokeSensor"
              },
              {
                 "$ref":"#/components/schemas/Device.CustomDeviceModule.HeatMeter"
              },
              {
                 "$ref":"#/components/schemas/Device.CustomDeviceModule.WaterMeter"
              },
              {
                 "$ref":"#/components/schemas/Device.CustomDeviceModule.GasMeter"
              },
              {
                 "$ref":"#/components/schemas/Device.CustomDeviceModule.AirConditioner"
              }
           ]
        },
        "Device.CustomDeviceModule.Collection":{
           "type":"array",
           "items":{
              "anyOf":[
                 {
                    "$ref":"#/components/schemas/Device.CustomDeviceModule.Battery"
                 },
                 {
                    "$ref":"#/components/schemas/Device.CustomDeviceModule.CarCharger"
                 },
                 {
                    "$ref":"#/components/schemas/Device.CustomDeviceModule.Dimmer"
                 },
                 {
                    "$ref":"#/components/schemas/Device.CustomDeviceModule.DomesticHotWater"
                 },
                 {
                    "$ref":"#/components/schemas/Device.CustomDeviceModule.EnergyMeter"
                 },
                 {
                    "$ref":"#/components/schemas/Device.CustomDeviceModule.HeatPump"
                 },
                 {
                    "$ref":"#/components/schemas/Device.CustomDeviceModule.HumiditySensor"
                 },
                 {
                    "$ref":"#/components/schemas/Device.CustomDeviceModule.Inverter"
                 },
                 {
                    "$ref":"#/components/schemas/Device.CustomDeviceModule.Relay"
                 },
                 {
                    "$ref":"#/components/schemas/Device.CustomDeviceModule.RGBController"
                 },
                 {
                    "$ref":"#/components/schemas/Device.CustomDeviceModule.TemperatureRegulator"
                 },
                 {
                    "$ref":"#/components/schemas/Device.CustomDeviceModule.TemperatureSensor"
                 },
                 {
                    "$ref":"#/components/schemas/Device.CustomDeviceModule.TwoStateInputSensor"
                 },
                 {
                    "$ref":"#/components/schemas/Device.CustomDeviceModule.AnalogInput"
                 },
                 {
                    "$ref":"#/components/schemas/Device.CustomDeviceModule.AnalogOutput"
                 },
                 {
                    "$ref":"#/components/schemas/Device.CustomDeviceModule.AQSensor"
                 },
                 {
                    "$ref":"#/components/schemas/Device.CustomDeviceModule.BlindController"
                 },
                 {
                    "$ref":"#/components/schemas/Device.CustomDeviceModule.Co2Sensor"
                 },
                 {
                    "$ref":"#/components/schemas/Device.CustomDeviceModule.FloodSensor"
                 },
                 {
                    "$ref":"#/components/schemas/Device.CustomDeviceModule.IAQSensor"
                 },
                 {
                    "$ref":"#/components/schemas/Device.CustomDeviceModule.LightSensor"
                 },
                 {
                    "$ref":"#/components/schemas/Device.CustomDeviceModule.MotionSensor"
                 },
                 {
                    "$ref":"#/components/schemas/Device.CustomDeviceModule.OpeningSensor"
                 },
                 {
                    "$ref":"#/components/schemas/Device.CustomDeviceModule.PressureSensor"
                 },
                 {
                    "$ref":"#/components/schemas/Device.CustomDeviceModule.RadiatorActuator"
                 },
                 {
                    "$ref":"#/components/schemas/Device.CustomDeviceModule.SmokeSensor"
                 },
                 {
                    "$ref":"#/components/schemas/Device.CustomDeviceModule.HeatMeter"
                 },
                 {
                    "$ref":"#/components/schemas/Device.CustomDeviceModule.WaterMeter"
                 },
                 {
                    "$ref":"#/components/schemas/Device.CustomDeviceModule.GasMeter"
                 },
                 {
                    "$ref":"#/components/schemas/Device.CustomDeviceModule.AirConditioner"
                 }
              ]
           }
        },
        "Snapshot":{
           "type":"object",
           "description":"Response structure for camera snapshot with base64 encoded image data.",
           "properties":{
              "cameraName":{
                 "type":"string",
                 "description":"Name of the camera",
                 "example":"kopulka 1"
              },
              "payload":{
                 "type":"string",
                 "format":"byte",
                 "description":"Base64 encoded image data",
                 "example":"/9j//gAQTGF2YzU4LjkxLjEwMAD/2wBDAAgODhAOEBMTExMTExYVFhcXFxYWFhYXFxcZGRkdHR0ZGRkXFxkZHBwdHSAhIB4eHR4hISMjIyoqKCgxMTI8PEj/xAC4AAEAAgMBAQEAAAAAAAAAAAAAAQIFBAMGBwgBAQEBAQEBAQAAAAAAAAAAAAABAgMEBQYQAQACAQMDAgQCBQQIDwsLBQACAQMRBBIxTxFBBSIyURRhBkJxIzOBUpEVNFWzsnTBYiQWw4WEobSisaTRNjXT1ENyc/BjdcLSJZJTxILj4ZOUVkVUo/GDRnZlJkTyEQEAAwACAgIDAQEAAgMBAAAAAhEBAxIxMiFBUSIEE2EUI0NCcTP/wAARCAQ4B4ADASIAAhEAAxEA/9oADAMBAAIRAxEAPwDy+TcZd/kuELusOvT6svi22PD0rz6/g4wrFhjUYefrddP53jvcfcqlriwy6+Jzr6fSN/7tvV8QysdfVse5bqFVeP8ASvrX8n9f4"
              }
           },
           "required":[
              "cameraName",
              "payload"
           ]
        },
        "StreamsInfo":{
           "type":"object",
           "description":"Information about active streams for a video device.",
           "properties":{
              "device_id":{
                 "type":"integer",
                 "description":"Video device ID"
              },
              "device_name":{
                 "type":"string",
                 "description":"Video device name"
              },
              "active_streams_count":{
                 "type":"integer",
                 "description":"Number of currently active streams"
              },
              "max_streams_limit":{
                 "type":"integer",
                 "description":"Maximum number of allowed streams"
              },
              "streams":{
                 "type":"array",
                 "description":"List of active streams",
                 "items":{
                    "type":"object",
                    "properties":{
                       "session_id":{
                          "type":"string",
                          "description":"Unique session identifier"
                       },
                       "media_type":{
                          "type":"string",
                          "enum":[
                             "video",
                             "audio"
                          ],
                          "description":"Type of media stream"
                       },
                       "start_time":{
                          "type":"string",
                          "format":"date-time",
                          "description":"Stream start timestamp"
                       },
                       "status":{
                          "type":"string",
                          "enum":[
                             "active",
                             "paused",
                             "ended"
                          ],
                          "description":"Current stream status"
                       },
                       "webrtc_connected":{
                          "type":"boolean",
                          "description":"Whether WebRTC connection is established"
                       }
                    }
                 }
              }
           }
        },
        "WebRTCOffer":{
           "type":"object",
           "description":"WebRTC offer message structure with SDP, ICE servers and session metadata.",
           "properties":{
              "type":{
                 "type":"string",
                 "enum":[
                    "offer"
                 ],
                 "description":"WebRTC message type"
              },
              "data":{
                 "type":"object",
                 "properties":{
                    "to":{
                       "type":"string",
                       "description":"Recipient ID"
                    },
                    "from":{
                       "type":"string",
                       "description":"Sender ID"
                    },
                    "session_id":{
                       "type":"string",
                       "description":"Unique session identifier"
                    },
                    "media":{
                       "type":"string",
                       "enum":[
                          "video",
                          "audio"
                       ],
                       "default":"video",
                       "description":"Media type"
                    },
                    "description":{
                       "type":"object",
                       "properties":{
                          "sdp":{
                             "type":"string",
                             "description":"SDP (Session Description Protocol) offer"
                          },
                          "type":{
                             "type":"string",
                             "enum":[
                                "offer"
                             ],
                             "description":"SDP description type"
                          },
                          "ice_servers":{
                             "type":"array",
                             "items":{
                                "type":"object",
                                "properties":{
                                   "urls":{
                                      "type":"array",
                                      "items":{
                                         "type":"string"
                                      },
                                      "description":"List of ICE server URLs"
                                   },
                                   "username":{
                                      "type":"string",
                                      "description":"TURN server username"
                                   },
                                   "credential":{
                                      "type":"string",
                                      "description":"TURN server password"
                                   }
                                }
                             }
                          }
                       }
                    }
                 }
              }
           },
           "required":[
              "type",
              "data"
           ]
        },
        "WebRTCAnswer":{
           "type":"object",
           "description":"WebRTC answer message structure with SDP.",
           "properties":{
              "type":{
                 "type":"string",
                 "enum":[
                    "answer"
                 ],
                 "description":"WebRTC message type"
              },
              "data":{
                 "type":"object",
                 "properties":{
                    "to":{
                       "type":"string",
                       "description":"Recipient ID"
                    },
                    "from":{
                       "type":"string",
                       "description":"Sender ID"
                    },
                    "session_id":{
                       "type":"string",
                       "description":"Unique session identifier"
                    },
                    "description":{
                       "type":"object",
                       "properties":{
                          "sdp":{
                             "type":"string",
                             "description":"SDP (Session Description Protocol) answer"
                          },
                          "type":{
                             "type":"string",
                             "enum":[
                                "answer"
                             ],
                             "description":"SDP description type"
                          }
                       }
                    }
                 }
              }
           },
           "required":[
              "type",
              "data"
           ]
        },
        "WebRTCAnswerResponse":{
           "type":"object",
           "description":"WebRTC answer processing response.",
           "properties":{
              "camera_name":{
                 "type":"string"
              },
              "answer_processed":{
                 "type":"boolean"
              },
              "session_id":{
                 "type":"string"
              },
              "stream_active":{
                 "type":"boolean"
              },
              "webrtc":{
                 "type":"object",
                 "properties":{
                    "type":{
                       "type":"string",
                       "enum":[
                          "answer_processed"
                       ]
                    },
                    "data":{
                       "type":"object",
                       "properties":{
                          "camera_name":{
                             "type":"string"
                          },
                          "session_id":{
                             "type":"string"
                          },
                          "stream_active":{
                             "type":"boolean"
                          }
                       }
                    }
                 }
              }
           }
        },
        "WebRTCBye":{
           "type":"object",
           "description":"WebRTC bye message structure with session information.",
           "properties":{
              "type":{
                 "type":"string",
                 "enum":[
                    "bye"
                 ],
                 "description":"WebRTC message type"
              },
              "data":{
                 "type":"object",
                 "properties":{
                    "to":{
                       "type":"string",
                       "description":"Recipient ID"
                    },
                    "from":{
                       "type":"string",
                       "description":"Sender ID"
                    },
                    "session_id":{
                       "type":"string",
                       "description":"Unique session identifier"
                    }
                 }
              }
           },
           "required":[
              "type",
              "data"
           ]
        },
        "WebRTCByeResponse":{
           "type":"object",
           "description":"WebRTC bye processing response.",
           "properties":{
              "camera_name":{
                 "type":"string"
              },
              "bye_processed":{
                 "type":"boolean"
              },
              "session_id":{
                 "type":"string"
              },
              "stream_active":{
                 "type":"boolean"
              },
              "webrtc":{
                 "type":"object",
                 "properties":{
                    "type":{
                       "type":"string",
                       "enum":[
                          "bye_processed"
                       ]
                    },
                    "data":{
                       "type":"object",
                       "properties":{
                          "camera_name":{
                             "type":"string"
                          },
                          "session_id":{
                             "type":"string"
                          },
                          "stream_active":{
                             "type":"boolean"
                          }
                       }
                    }
                 }
              }
           }
        },
        "WebRTCCandidate":{
           "type":"object",
           "description":"WebRTC candidate message structure with ICE data.",
           "properties":{
              "type":{
                 "type":"string",
                 "enum":[
                    "candidate"
                 ],
                 "description":"WebRTC message type"
              },
              "data":{
                 "type":"object",
                 "properties":{
                    "to":{
                       "type":"string",
                       "description":"Recipient ID"
                    },
                    "from":{
                       "type":"string",
                       "description":"Sender ID"
                    },
                    "session_id":{
                       "type":"string",
                       "description":"Unique session identifier"
                    },
                    "candidate":{
                       "oneOf":[
                          {
                             "type":"string",
                             "description":"ICE candidate string"
                          },
                          {
                             "type":"object",
                             "description":"ICE candidate object with metadata",
                             "properties":{
                                "candidate":{
                                   "type":"string",
                                   "description":"ICE candidate string"
                                },
                                "sdpMLineIndex":{
                                   "type":"integer",
                                   "description":"SDP line index"
                                },
                                "sdpMid":{
                                   "type":"string",
                                   "description":"SDP line ID"
                                }
                             },
                             "required":[
                                "candidate"
                             ]
                          }
                       ]
                    }
                 }
              }
           },
           "required":[
              "type",
              "data"
           ]
        },
        "WebRTCCandidateResponse":{
           "type":"object",
           "description":"WebRTC candidate processing response.",
           "properties":{
              "camera_name":{
                 "type":"string"
              },
              "candidate_processed":{
                 "type":"boolean"
              },
              "session_id":{
                 "type":"string"
              },
              "stream_active":{
                 "type":"boolean"
              },
              "webrtc":{
                 "type":"object",
                 "properties":{
                    "type":{
                       "type":"string",
                       "enum":[
                          "candidate_processed"
                       ]
                    },
                    "data":{
                       "type":"object",
                       "properties":{
                          "camera_name":{
                             "type":"string"
                          },
                          "session_id":{
                             "type":"string"
                          },
                          "stream_active":{
                             "type":"boolean"
                          }
                       }
                    }
                 }
              }
           }
        },
        "GlobalStreamsInfo":{
           "type":"object",
           "description":"Global information about all active video streams across the entire system.",
           "properties":{
              "system_info":{
                 "type":"object",
                 "description":"System-wide stream information",
                 "properties":{
                    "total_cameras":{
                       "type":"integer",
                       "description":"Total number of video cameras in the system"
                    },
                    "total_active_streams":{
                       "type":"integer",
                       "description":"Total number of active streams across all cameras"
                    },
                    "max_global_streams":{
                       "type":"integer",
                       "description":"Maximum number of streams allowed globally"
                    },
                    "global_streams_usage_percentage":{
                       "type":"number",
                       "format":"float",
                       "description":"Percentage of global stream limit usage"
                    }
                 }
              },
              "cameras":{
                 "type":"array",
                 "description":"List of cameras with their stream information",
                 "items":{
                    "type":"object",
                    "properties":{
                       "camera_id":{
                          "type":"integer",
                          "description":"Camera ID"
                       },
                       "camera_name":{
                          "type":"string",
                          "description":"Camera name"
                       },
                       "active_streams_count":{
                          "type":"integer",
                          "description":"Number of active streams for this camera"
                       },
                       "max_streams_limit":{
                          "type":"integer",
                          "description":"Maximum streams allowed for this camera"
                       },
                       "streams":{
                          "type":"array",
                          "description":"List of active streams for this camera",
                          "items":{
                             "type":"object",
                             "properties":{
                                "session_id":{
                                   "type":"string",
                                   "description":"Unique session identifier"
                                },
                                "media_type":{
                                   "type":"string",
                                   "enum":[
                                      "video",
                                      "audio"
                                   ],
                                   "description":"Type of media stream"
                                },
                                "start_time":{
                                   "type":"string",
                                   "format":"date-time",
                                   "description":"Stream start timestamp"
                                },
                                "status":{
                                   "type":"string",
                                   "enum":[
                                      "active",
                                      "paused",
                                      "ended"
                                   ],
                                   "description":"Current stream status"
                                },
                                "webrtc_connected":{
                                   "type":"boolean",
                                   "description":"Whether WebRTC connection is established"
                                }
                             }
                          }
                       }
                    }
                 }
              }
           }
        },
        "VideoParentDeviceInput":{
           "type":"object",
           "description":"Video parent device data used for creation (POST) and updates (PATCH).",
           "properties":{
              "name":{
                 "type":"string",
                 "description":"Video parent device name."
              },
              "ip":{
                 "type":"string",
                 "description":"Parent device IP address."
              },
              "model":{
                 "type":"string",
                 "description":"Device model."
              },
              "firm":{
                 "type":"string",
                 "description":"Device manufacturer."
              },
              "type":{
                 "type":"string",
                 "description":"Parent device type (generic, nvr, video_server)."
              },
              "devices":{
                 "type":"array",
                 "description":"List of cameras to create along with the parent device.",
                 "items":{
                    "type":"object",
                    "properties":{
                       "name":{
                          "type":"string",
                          "description":"Camera name."
                       },
                       "ip":{
                          "type":"string",
                          "description":"Camera IP address."
                       },
                       "mac":{
                          "type":"string",
                          "description":"Camera MAC address."
                       },
                       "video_type":{
                          "type":"string",
                          "description":"Video protocol type (rtsp, onvif).",
                          "enum":[
                             "rtsp",
                             "onvif"
                          ],
                          "default":"rtsp"
                       },
                       "login":{
                          "type":"string",
                          "description":"Camera login."
                       },
                       "password":{
                          "type":"string",
                          "format":"password",
                          "description":"Camera password."
                       },
                       "url":{
                          "type":"string",
                          "description":"Camera stream URL (e.g., RTSP)."
                       }
                    },
                    "required":[
                       "name",
                       "ip"
                    ]
                 }
              }
           },
           "required":[
              "name",
              "ip"
           ]
        },
        "VideoParentDevice":{
           "type":"object",
           "properties":{
              "id":{
                 "type":"integer",
                 "description":"Unique video parent device identifier.",
                 "readOnly":true
              },
              "name":{
                 "type":"string",
                 "description":"Video parent device name."
              },
              "ip":{
                 "type":"string",
                 "description":"Parent device IP address."
              },
              "model":{
                 "type":"string",
                 "description":"Device model."
              },
              "firm":{
                 "type":"string",
                 "description":"Device manufacturer."
              },
              "type":{
                 "type":"string",
                 "description":"Parent device type (generic, nvr, video_server)."
              },
              "class":{
                 "type":"string",
                 "description":"Device class.",
                 "readOnly":true
              },
              "status":{
                 "type":"string",
                 "description":"Device status (online, offline, unknown).",
                 "readOnly":true
              },
              "has_messages":{
                 "type":"boolean",
                 "description":"Whether the device has messages.",
                 "readOnly":true
              },
              "devices":{
                 "type":"array",
                 "description":"List of child devices (cameras).",
                 "readOnly":true,
                 "items":{
                    "$ref":"#/components/schemas/Device.Video.Camera"
                 }
              },
              "creation_date":{
                 "type":"string",
                 "format":"date-time",
                 "description":"Record creation date.",
                 "readOnly":true
              },
              "modification_date":{
                 "type":"string",
                 "format":"date-time",
                 "description":"Record last modification date.",
                 "readOnly":true
              }
           }
        },
        "Parent.Collection":{
           "type":"object",
           "required":[
              "tech",
              "wtp",
              "sbus",
              "slink",
              "lora",
              "modbus",
              "system_module",
              "alarm_system",
              "video"
           ],
           "properties":{
              "tech":{
                 "$ref":"#/components/schemas/Parent.Tech.Collection"
              },
              "wtp":{
                 "$ref":"#/components/schemas/Parent.WTP.Collection"
              },
              "sbus":{
                 "$ref":"#/components/schemas/Parent.SBus.Collection"
              },
              "slink":{
                 "$ref":"#/components/schemas/Parent.SLink.Collection"
              },
              "lora":{
                 "$ref":"#/components/schemas/Parent.Lora.Collection"
              },
              "modbus":{
                 "$ref":"#/components/schemas/Parent.Modbus.Collection"
              },
              "system_module":{
                 "$ref":"#/components/schemas/Parent.SystemModule.Collection"
              },
              "alarm_system":{
                 "$ref":"#/components/schemas/Parent.AlarmSystem.Collection"
              },
              "video":{
                 "$ref":"#/components/schemas/Parent.Video.Collection"
              }
           }
        },
        "StreamInitResponse":{
           "type":"object",
           "description":"Stream initialization response with session information.",
           "properties":{
              "camera_name":{
                 "type":"string",
                 "description":"Camera name"
              },
              "stream_started":{
                 "type":"boolean",
                 "description":"Whether stream was started"
              },
              "session_id":{
                 "type":"string",
                 "description":"Session ID"
              },
              "media_type":{
                 "type":"string",
                 "description":"Media type"
              },
              "active_streams_count":{
                 "type":"integer",
                 "description":"Number of active streams for this camera"
              },
              "max_streams_limit":{
                 "type":"integer",
                 "description":"Maximum number of streams for this camera"
              },
              "global_streams_info":{
                 "type":"object",
                 "description":"Global streams information",
                 "properties":{
                    "total_active_streams":{
                       "type":"integer",
                       "description":"Total number of active streams across all cameras"
                    },
                    "max_global_streams":{
                       "type":"integer",
                       "description":"Maximum number of streams allowed globally"
                    },
                    "global_streams_usage_percentage":{
                       "type":"number",
                       "format":"float",
                       "description":"Percentage of global stream limit usage"
                    }
                 }
              },
              "webrtc":{
                 "type":"object",
                 "properties":{
                    "type":{
                       "type":"string",
                       "enum":[
                          "offer_processed"
                       ]
                    },
                    "data":{
                       "type":"object",
                       "properties":{
                          "camera_name":{
                             "type":"string"
                          },
                          "session_id":{
                             "type":"string"
                          },
                          "stream_active":{
                             "type":"boolean"
                          }
                       }
                    }
                 }
              }
           }
        },
        "Parent.Tech.Collection":{
           "type":"array",
           "items":{
              "anyOf":[
                 {
                    "$ref":"#/components/schemas/Parent.Tech"
                 }
              ]
           }
        },
        "Parent.WTP.Collection":{
           "type":"array",
           "items":{
              "anyOf":[
                 {
                    "allOf":[
                       {
                          "$ref":"#/components/schemas/Parent.Device"
                       }
                    ],
                    "example":{
                       "$ref":"#/components/examples/Parent.WTP/value"
                    }
                 }
              ]
           }
        },
        "Parent.SBus.Collection":{
           "type":"array",
           "items":{
              "anyOf":[
                 {
                    "allOf":[
                       {
                          "$ref":"#/components/schemas/Parent.Device"
                       }
                    ],
                    "example":{
                       "$ref":"#/components/examples/Parent.SBus/value"
                    }
                 },
                 {
                    "allOf":[
                       {
                          "$ref":"#/components/schemas/Parent.SBus.SceneControlPanel"
                       }
                    ],
                    "example":{
                       "$ref":"#/components/examples/Parent.SBus.SceneControlPanel/value"
                    }
                 },
                 {
                    "allOf":[
                       {
                          "$ref":"#/components/schemas/Parent.SBus.EHI01"
                       }
                    ],
                    "example":{
                       "$ref":"#/components/examples/Parent.SBus.EHI01/value"
                    }
                 },
                 {
                    "allOf":[
                       {
                          "$ref":"#/components/schemas/Parent.SBus.FanCoil"
                       }
                    ],
                    "example":{
                       "$ref":"#/components/examples/Parent.SBus.FanCoil/value"
                    }
                 },
                 {
                    "allOf":[
                       {
                          "$ref":"#/components/schemas/Parent.SBus.ParentDeviceWithMbus"
                       }
                    ],
                    "example":{
                       "$ref":"#/components/examples/Parent.SBus.ParentDeviceWithMbus/value"
                    }
                 }
              ]
           }
        },
        "Parent.SLink.Collection":{
           "allOf":[
              {
                 "$ref":"#/components/schemas/Parent.SBus.Collection"
              }
           ]
        },
        "Parent.Lora.Collection":{
           "type":"array",
           "items":{
              "anyOf":[
                 {
                    "allOf":[
                       {
                          "$ref":"#/components/schemas/Parent.Device"
                       }
                    ],
                    "example":{
                       "$ref":"#/components/examples/Parent.Lora/value"
                    }
                 }
              ]
           }
        },
        "Parent.SystemModule.Collection":{
           "type":"array",
           "items":{
              "anyOf":[
                 {
                    "allOf":[
                       {
                          "$ref":"#/components/schemas/Parent.SystemModule"
                       }
                    ],
                    "example":{
                       "$ref":"#/components/examples/Parent.SystemModule/value"
                    }
                 }
              ]
           }
        },
        "Modbus.Specification.Collection":{
           "type":"array",
           "items":{
              "anyOf":[
                 {
                    "allOf":[
                       {
                          "$ref":"#/components/schemas/Modbus.Specification"
                       }
                    ],
                    "example":{
                       "$ref":"#/components/examples/Modbus.Specification.Tcp/value"
                    }
                 },
                 {
                    "allOf":[
                       {
                          "$ref":"#/components/schemas/Modbus.Specification"
                       }
                    ],
                    "example":{
                       "$ref":"#/components/examples/Modbus.Specification.Rtu/value"
                    }
                 },
                 {
                    "allOf":[
                       {
                          "$ref":"#/components/schemas/Modbus.Specification"
                       }
                    ],
                    "example":{
                       "$ref":"#/components/examples/Modbus.Specification.Tcp.HuaweiSUN2000/value"
                    }
                 }
              ]
           }
        },
        "Parent.Modbus.Collection":{
           "type":"array",
           "items":{
              "anyOf":[
                 {
                    "allOf":[
                       {
                          "$ref":"#/components/schemas/Parent.Modbus"
                       }
                    ],
                    "example":{
                       "$ref":"#/components/examples/Parent.Modbus.Tcp/value"
                    }
                 },
                 {
                    "allOf":[
                       {
                          "$ref":"#/components/schemas/Parent.Modbus"
                       }
                    ],
                    "example":{
                       "$ref":"#/components/examples/Parent.Modbus.Rtu/value"
                    }
                 }
              ]
           }
        },
        "Parent.AlarmSystem.Collection":{
           "type":"array",
           "items":{
              "anyOf":[
                 {
                    "allOf":[
                       {
                          "$ref":"#/components/schemas/Parent.AlarmSystem.Satel"
                       }
                    ],
                    "example":{
                       "$ref":"#/components/examples/Parent.AlarmSystem.Satel/value"
                    }
                 }
              ]
           }
        },
        "Parent.Video.Collection":{
           "type":"array",
           "items":{
              "anyOf":[
                 {
                    "allOf":[
                       {
                          "$ref":"#/components/schemas/Parent.Video"
                       }
                    ]
                 }
              ]
           }
        },
        "LuaVariable.Collection":{
           "type":"array",
           "description":"Collection of all available global lua variables.",
           "items":{
              "anyOf":[
                 {
                    "$ref":"#/components/schemas/LuaVariable.Boolean"
                 },
                 {
                    "$ref":"#/components/schemas/LuaVariable.Integer"
                 },
                 {
                    "$ref":"#/components/schemas/LuaVariable.String"
                 },
                 {
                    "$ref":"#/components/schemas/LuaVariable.Table"
                 }
              ]
           }
        },
        "LuaTimer.Collection":{
           "type":"array",
           "description":"Collection of all available global lua timers.",
           "items":{
              "anyOf":[
                 {
                    "$ref":"#/components/schemas/LuaTimer"
                 }
              ]
           }
        },
        "LuaExample.Collection":{
           "type":"array",
           "description":"Collection of all lua code examples.",
           "items":{
              "anyOf":[
                 {
                    "$ref":"#/components/schemas/LuaExampleWithoutCode"
                 }
              ]
           }
        },
        "LuaExample.Collection.Automation":{
           "type":"array",
           "description":"Collection of lua code examples useful for automations.",
           "items":{
              "anyOf":[
                 {
                    "$ref":"#/components/schemas/LuaExampleWithoutCode"
                 }
              ]
           }
        },
        "LuaExample.Collection.Scene":{
           "type":"array",
           "description":"Collection of lua code examples useful for scenes.",
           "items":{
              "anyOf":[
                 {
                    "$ref":"#/components/schemas/LuaExampleWithoutCode"
                 }
              ]
           }
        },
        "LuaExample.Collection.CustomDevice":{
           "type":"array",
           "description":"Collection of lua code examples useful for custom devices.",
           "items":{
              "anyOf":[
                 {
                    "$ref":"#/components/schemas/LuaExampleWithoutCode"
                 }
              ]
           }
        },
        "LuaHttpClients.Collection":{
           "type":"array",
           "description":"Collection of all available global lua http clients.",
           "items":{
              "anyOf":[
                 {
                    "$ref":"#/components/schemas/LuaHttpClient"
                 }
              ]
           }
        },
        "LuaMqttClients.Collection":{
           "type":"array",
           "description":"Collection of all available global lua mqtt clients.",
           "items":{
              "anyOf":[
                 {
                    "$ref":"#/components/schemas/LuaMqttClient"
                 }
              ]
           }
        },
        "LuaWsClients.Collection":{
           "type":"array",
           "description":"Collection of all available global lua ws clients.",
           "items":{
              "anyOf":[
                 {
                    "$ref":"#/components/schemas/LuaWsClient"
                 }
              ]
           }
        },
        "LuaModbusClients.Collection":{
           "type":"array",
           "description":"Collection of all available global lua modbus clients.",
           "items":{
              "anyOf":[
                 {
                    "$ref":"#/components/schemas/LuaModbusClient"
                 },
                 {
                    "$ref":"#/components/schemas/LuaModbusTcpClient"
                 }
              ]
           }
        },
        "Automation.Collection":{
           "type":"array",
           "description":"Collection of all available automations.",
           "items":{
              "anyOf":[
                 {
                    "$ref":"#/components/schemas/Automation.Model"
                 }
              ]
           }
        },
        "Scene.Collection":{
           "type":"array",
           "description":"Collection of all available scenes.",
           "items":{
              "anyOf":[
                 {
                    "$ref":"#/components/schemas/Scene.Model"
                 }
              ]
           }
        },
        "Directory.Collection":{
           "type":"array",
           "description":"Collection of directories.",
           "items":{
              "anyOf":[
                 {
                    "$ref":"#/components/schemas/Directory.Model"
                 }
              ]
           }
        },
        "Schedule.Collection":{
           "type":"array",
           "items":{
              "anyOf":[
                 {
                    "$ref":"#/components/schemas/Schedule.Thermal"
                 },
                 {
                    "$ref":"#/components/schemas/Schedule.TemperatureCurve"
                 },
                 {
                    "$ref":"#/components/schemas/Schedule.RelayControl"
                 }
              ]
           }
        },
        "LuaLog.Collection":{
           "description":"Collection of all scene/automation/custom device logs.",
           "type":"object",
           "required":[
              "list"
           ],
           "properties":{
              "list":{
                 "type":"array",
                 "items":{
                    "anyOf":[
                       {
                          "$ref":"#/components/schemas/LuaLog"
                       }
                    ]
                 }
              }
           }
        },
        "Floor.Collection":{
           "type":"array",
           "description":"Collection of all available floors.",
           "items":{
              "anyOf":[
                 {
                    "$ref":"#/components/schemas/Floor.Model"
                 }
              ]
           }
        },
        "Room.Collection":{
           "type":"array",
           "description":"Collection of all available rooms.",
           "items":{
              "anyOf":[
                 {
                    "$ref":"#/components/schemas/Room.Model"
                 }
              ]
           }
        },
        "DelayedAction":{
           "description":"Action scheduled to execute by the device/scene/automation.",
           "type":"object",
           "required":[
              "id",
              "type",
              "param_or_command",
              "argument",
              "deadline"
           ],
           "properties":{
              "id":{
                 "description":"Action id.",
                 "type":"string",
                 "readOnly":true
              },
              "type":{
                 "description":"Type of action to execute. Parameter change or command.",
                 "type":"string",
                 "readOnly":true,
                 "enum":[
                    "parameter",
                    "command"
                 ]
              },
              "param_or_command":{
                 "description":"Name of parameter that will be changed or command that will be executed.",
                 "type":"string",
                 "readOnly":true
              },
              "argument":{
                 "description":"Value that will be set in the parameter when action type is `parameter` or argument to execute command when action type is `command`. Type varies depending on the parameter or command.",
                 "readOnly":true
              },
              "deadline":{
                 "description":"UTC timestamp of when the action will be executed.",
                 "type":"integer",
                 "readOnly":true
              }
           }
        },
        "Device.Misc.ButtonAssociation.TriggerConfiguration":{
           "description":"Button Association Trigger Configuration",
           "type":"object",
           "required":[
              "type",
              "duration",
              "button_index",
              "set_index"
           ],
           "properties":{
              "type":{
                 "description":"Action type that triggers command",
                 "type":"string",
                 "readOnly":true,
                 "enum":[
                    "none",
                    "click",
                    "hold_start",
                    "hold_end"
                 ],
                 "example":"click"
              },
              "duration":{
                 "description":"Time in seconds or number of clicks required to trigger command",
                 "type":"integer",
                 "minimum":0,
                 "example":1
              },
              "button_index":{
                 "description":"Index of button that triggers command",
                 "type":"integer",
                 "minimum":1,
                 "example":1
              },
              "set_index":{
                 "description":"Index of button-set that contains triggering button",
                 "type":"integer",
                 "minimum":1,
                 "example":1
              }
           }
        },
        "DeviceCommand.Common.Any.EnqueueAction":{
           "description":"Command: `enqueue_action`.<br>Schedules the action to execute for device after a period of time.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "enqueue_action"
           ],
           "properties":{
              "enqueue_action":{
                 "type":"object",
                 "required":[
                    "type",
                    "param_or_command",
                    "argument",
                    "after"
                 ],
                 "properties":{
                    "type":{
                       "description":"Type of action to execute. Parameter change or command.",
                       "type":"string",
                       "enum":[
                          "parameter",
                          "command"
                       ]
                    },
                    "param_or_command":{
                       "description":"Name of parameter that will be changed or command that will be executed.",
                       "type":"string"
                    },
                    "argument":{
                       "description":"Value that will be set in the parameter when action type is `parameter` or argument to execute command when action type is `command`. Type varies depending on the parameter or command."
                    },
                    "after":{
                       "description":"Time in milliseconds after which the action should be executed.",
                       "type":"integer",
                       "minimum":1000,
                       "maximum":86400000
                    }
                 }
              }
           }
        },
        "DeviceCommand.Common.Any.CancelAction":{
           "description":"Command: `cancel_action`.<br>Cancels the scheduled action of a device.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "cancel_action"
           ],
           "properties":{
              "cancel_action":{
                 "description":"Id of action to cancel.",
                 "type":"string",
                 "minimum":1
              }
           }
        },
        "DeviceCommand.Common.Any.ClearActions":{
           "description":"Command: `clear_actions`.<br>Remove all scheduled actions for the device.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.Common.Relay.TurnOn":{
           "description":"Command: `turn_on`.<br>Calls Relay to turn on output.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.Common.Relay.TurnOff":{
           "description":"Command: `turn_off`.<br>Calls Relay to turn off output.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.Common.Relay.Toggle":{
           "description":"Command: `toggle`.<br>Calls Relay to toggle output.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.Common.TemperatureRegulator.SetTargetTemperature":{
           "description":"Command: `set_target_temperature`.<br>Calls Temperature to change `constant` or `time_limited` mode target temperature to the desired value. If regulator works in `time_limited` mode it will change target temperature only, not affecting `remaining_time`. If regulator works in `schedule` mode it will change target temperature mode to `constant`.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_target_temperature"
           ],
           "properties":{
              "set_target_temperature":{
                 "description":"Target temperature in Celsius degrees.",
                 "type":"number",
                 "example":230
              }
           }
        },
        "DeviceCommand.Common.TemperatureRegulator.EnableConstantMode":{
           "description":"Command: `enable_constant_mode`.<br>Calls Temperature Regulator to change target temperature mode to `constant`. When regulator is already in `constant` mode, it will change mode `target_temperature` only.<br>Body is <b>required</b>.<br><b>NOTE:</b> Cannot be executed when regulator is not associated with Thermostat.",
           "type":"object",
           "required":[
              "enable_constant_mode"
           ],
           "properties":{
              "enable_constant_mode":{
                 "description":"Target temperature in Celsius degrees.",
                 "type":"number",
                 "example":230
              }
           }
        },
        "DeviceCommand.Common.TemperatureRegulator.EnableTimeLimitedMode":{
           "description":"Command: `enable_time_limited_mode`.<br>Calls Temperature Regulator to change mode and target temperature mode to `time_limited` for desired time. When regulator is already in `time_limited` mode, it will change `remaining_time` or/and `target_temperature` depending on payload.<br>Body is <b>required</b>.<br>First parameter is `remaining_time`, second is `target_temperature`.<br><b>NOTE:</b> Cannot be executed when regulator is not associated with Thermostat.",
           "type":"object",
           "required":[
              "enable_time_limited_mode"
           ],
           "properties":{
              "enable_constant_mode":{
                 "description":"Two element array with Time in minutes (first element) and Target temperature in Celsius degrees (second element).",
                 "type":"array",
                 "items":{
                    "type":"number"
                 },
                 "example":[
                    800,
                    210
                 ]
              }
           }
        },
        "DeviceCommand.Common.TemperatureRegulator.DisableTimeLimitedMode":{
           "description":"Command: `disable_time_limited_mode`.<br>Calls Temperature Regulator to disable `time_limited` and go back to previous target temperature mode. When regulator is not in `time_limited` mode, it will do nothing.<br>Body is <b>ignored</b>.<br><b>NOTE:</b> Cannot be executed when regulator is not associated with Thermostat."
        },
        "DeviceCommand.Common.Dimmer.TurnOn":{
           "description":"Command: `turn_on`.<br>Calls Dimmer to turn on output.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.Common.Dimmer.TurnOff":{
           "description":"Command: `turn_off`.<br>Calls Dimmer to turn off output.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.Common.Dimmer.Toggle":{
           "description":"Command: `toggle`.<br>Calls Dimmer to toggle output.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.Common.Dimmer.SetLevel":{
           "description":"Command: `set_level`.<br>Calls Dimmer to set light intensity to requested level during requested period of time. <br>Body is <b>required</b>.<br>First parameter is `requested_level`, Unit: %, min: 0, max: 100.<br>Second parameter is `transition_time` , Unit: 0,1s, min: 1, max: 6000. Second parameter is optional, default: 5.",
           "type":"object",
           "required":[
              "set_level"
           ],
           "properties":{
              "set_level":{
                 "description":"Two element array with Requested level (first element) and Transition time in 0.1 of seconds (second element).",
                 "type":"array",
                 "items":{
                    "type":"number"
                 },
                 "example":[
                    80,
                    600
                 ]
              }
           }
        },
        "DeviceCommand.Common.Dimmer.Stop":{
           "description":"Command: `stop`.<br>Calls Dimmer to stop current level moving action. Does nothing if no action is in progress.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.Common.RGBController.TurnOn":{
           "description":"Command: `turn_on`.<br>Calls RGBController to turn on output.<br>Body is <b>optional</b>.<br>Parameter is `transition_time` , Unit: 0,1s, min: 1, max: 6000. Default: 5 when not provided.",
           "type":"object",
           "properties":{
              "turn_on":{
                 "description":"Transition time in 0.1 of seconds.",
                 "type":"number",
                 "example":150
              }
           }
        },
        "DeviceCommand.Common.RGBController.TurnOff":{
           "description":"Command: `turn_off`.<br>Calls RGBController to turn off output.<br>Body is <b>optional</b>.<br>Parameter is `transition_time` , Unit: 0,1s, min: 1, max: 6000. Default: 5 when not provided.",
           "type":"object",
           "properties":{
              "turn_off":{
                 "description":"Transition time in 0.1 of seconds.",
                 "type":"number",
                 "example":150
              }
           }
        },
        "DeviceCommand.Common.RGBController.Toggle":{
           "description":"Command: `toggle`.<br>Calls RGBController to toggle output.<br>Body is <b>optional</b>.<br>Parameter is `transition_time` , Unit: 0,1s, min: 1, max: 6000. Default: 5 when not provided.",
           "type":"object",
           "properties":{
              "turn_off":{
                 "description":"Transition time in 0.1 of seconds.",
                 "type":"number",
                 "example":150
              }
           }
        },
        "DeviceCommand.Common.RGBController.SetLevel":{
           "description":"Command: `set_brightness`.<br>Calls RGBController to set light intensity to requested level during requested period of time. <br>Body is <b>required</b>.<br>First parameter is `brightness_level`, Unit: %, min: 1, max: 100.<br>Second parameter is `transition_time` , Unit: 0,1s, min: 1, max: 6000. Second parameter is optional, default: 5.",
           "type":"object",
           "required":[
              "set_brightness"
           ],
           "properties":{
              "set_brightness":{
                 "description":"Two element array with Brightness level (first element) and Transition time in 0.1 of seconds (second element).",
                 "type":"array",
                 "items":{
                    "type":"number"
                 },
                 "example":[
                    80,
                    600
                 ]
              }
           }
        },
        "DeviceCommand.Common.RGBController.SetColor":{
           "description":"Command: `set_color`.<br>Calls RGBController to set output to requested color in RGB mode during requested period of time. Set `color_mode` to `rgb`.<br>Body is <b>required</b>.<br>First parameter is HTML/Hex RGB representation `led_color`.<br>Second parameter is `transition_time` , Unit: 0,1s, min: 1, max: 6000. Second parameter is optional, default: 5.",
           "type":"object",
           "required":[
              "set_color"
           ],
           "properties":{
              "set_color":{
                 "description":"Two element array with HTML/Hex RGB representation `led_color` (first element) and Transition time in 0.1 of seconds (second element).",
                 "type":"array",
                 "items":{
                    "oneOf":[
                       {
                          "type":"string"
                       },
                       {
                          "type":"number"
                       }
                    ]
                 },
                 "example":[
                    "#336ac9",
                    600
                 ]
              }
           }
        },
        "DeviceCommand.Common.RGBController.SetTemperature":{
           "description":"Command: `set_temperature`.<br>Calls RGBController to set output to requested color temperature during requested period of time. Set `color_mode` to `temperature`.<br>Body is <b>required</b>.<br>First parameter is `white_temperature`, Unit: Kelvins, min: 1000, max: 40000.<br>Second parameter is `transition_time` , Unit: 0,1s, min: 1, max: 6000. Second parameter is optional, default: 5.",
           "type":"object",
           "required":[
              "set_temperature"
           ],
           "properties":{
              "set_temperature":{
                 "description":"Two element array with `white_temperature` (first element) and Transition time in 0.1 of seconds (second element).",
                 "type":"array",
                 "items":{
                    "type":"number"
                 },
                 "example":[
                    4200,
                    600
                 ]
              }
           }
        },
        "DeviceCommand.Common.RGBController.AddAnimation":{
           "description":"Command: `add_animation`.<br>Add user defined animation with specified animation style.<br>Body is <b>required</b>.<br>Number of steps must be equal to number of steps for specified animation style.",
           "type":"object",
           "required":[
              "add_animation"
           ],
           "properties":{
              "add_animation":{
                 "type":"object",
                 "required":[
                    "style",
                    "name",
                    "steps"
                 ],
                 "properties":{
                    "style":{
                       "description":"Animation style.",
                       "type":"string",
                       "example":"ocean"
                    },
                    "name":{
                       "description":"Name of animation.",
                       "type":"string",
                       "example":"New ocean animation"
                    },
                    "steps":{
                       "description":"Array of animation steps.",
                       "type":"array",
                       "items":{
                          "type":"object",
                          "required":[
                             "color",
                             "min_transition_time",
                             "max_transition_time"
                          ],
                          "properties":{
                             "color":{
                                "description":"Color in HTML/Hex RGB representation.",
                                "type":"string",
                                "example":"#336ac9"
                             },
                             "min_transition_time":{
                                "description":"Minimum transition time in milliseconds.",
                                "type":"integer",
                                "example":3520
                             },
                             "max_transition_time":{
                                "description":"Maximum transition time in milliseconds.",
                                "type":"integer",
                                "example":4840
                             }
                          }
                       }
                    }
                 }
              }
           },
           "example":{
              "add_animation":{
                 "style":"ocean",
                 "name":"New ocean animation",
                 "steps":[
                    {
                       "color":"#004ac6",
                       "min_transition_time":3520,
                       "max_transition_time":4840
                    },
                    {
                       "color":"#0000e4",
                       "min_transition_time":1000,
                       "max_transition_time":1230
                    },
                    {
                       "color":"#0029fb",
                       "min_transition_time":5000,
                       "max_transition_time":6320
                    },
                    {
                       "color":"#0612c9",
                       "min_transition_time":1210,
                       "max_transition_time":1410
                    }
                 ]
              }
           }
        },
        "DeviceCommand.Common.RGBController.UpdateAnimation":{
           "description":"Command: `update_animation`.<br>Update user animation with specified id. <br>Body is <b>required</b>.<br>id is <b>required</b>. When updating steps, number of steps must be equal to number of steps for specified animation style.",
           "type":"object",
           "required":[
              "update_animation"
           ],
           "properties":{
              "update_animation":{
                 "type":"object",
                 "required":[
                    "id",
                    "name",
                    "steps"
                 ],
                 "properties":{
                    "id":{
                       "description":"Id of animation.",
                       "type":"integer",
                       "example":4
                    },
                    "name":{
                       "description":"Name of animation.",
                       "type":"string",
                       "example":"New ocean animation"
                    },
                    "steps":{
                       "description":"Array of animation steps.",
                       "type":"array",
                       "items":{
                          "type":"object",
                          "required":[
                             "color",
                             "min_transition_time",
                             "max_transition_time"
                          ],
                          "properties":{
                             "color":{
                                "description":"Color in HTML/Hex RGB representation.",
                                "type":"string",
                                "example":"#336ac9"
                             },
                             "min_transition_time":{
                                "description":"Minimum transition time in milliseconds.",
                                "type":"integer",
                                "example":3520
                             },
                             "max_transition_time":{
                                "description":"Maximum transition time in milliseconds.",
                                "type":"integer",
                                "example":4840
                             }
                          }
                       }
                    }
                 }
              }
           },
           "example":{
              "update_animation":{
                 "id":4,
                 "name":"New ocean animation",
                 "steps":[
                    {
                       "color":"#104ac7",
                       "min_transition_time":3511,
                       "max_transition_time":4833
                    },
                    {
                       "color":"#00f0f4",
                       "min_transition_time":1123,
                       "max_transition_time":1224
                    },
                    {
                       "color":"#0059fd",
                       "min_transition_time":5222,
                       "max_transition_time":6320
                    },
                    {
                       "color":"#0212d9",
                       "min_transition_time":1210,
                       "max_transition_time":1313
                    }
                 ]
              }
           }
        },
        "DeviceCommand.Common.RGBController.DeleteAnimation":{
           "description":"Command: `delete_animation`.<br>Delete specified user animation. <br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "delete_animation"
           ],
           "properties":{
              "delete_animation":{
                 "type":"object",
                 "required":[
                    "id"
                 ],
                 "properties":{
                    "id":{
                       "description":"Id of animation.",
                       "type":"integer",
                       "example":4
                    }
                 }
              }
           },
           "example":{
              "delete_animation":{
                 "id":4
              }
           }
        },
        "DeviceCommand.Common.RGBController.ActivateAnimation":{
           "description":"Command: `activate_animation`.<br>Calls RGBController to activate specified user animation. Set `color_mode` to `animation`.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "activate_animation"
           ],
           "properties":{
              "activate_animation":{
                 "type":"object",
                 "required":[
                    "id"
                 ],
                 "properties":{
                    "id":{
                       "description":"Id of animation.",
                       "type":"integer",
                       "example":4
                    }
                 }
              }
           },
           "example":{
              "activate_animation":{
                 "id":4
              }
           }
        },
        "DeviceCommand.Common.RGBController.StopAnimation":{
           "description":"Command: `stop_animation`.<br>Calls RGBController to stop animation and return to previous `color_mode`.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.Common.RGBController.SetLiveAnimation":{
           "description":"Command: `set_live_animation`.<br>Sends animation steps to RGB controller without changing anything in device representation. Turn on live editing mode, all changes from remote device will be discarded.<br>Body is <b>required</b>.<br>Number of steps must be equal to number of steps for specified animation style.",
           "type":"object",
           "required":[
              "set_live_animation"
           ],
           "properties":{
              "set_live_animation":{
                 "type":"object",
                 "required":[
                    "style",
                    "steps"
                 ],
                 "properties":{
                    "style":{
                       "description":"Animation style.",
                       "type":"string",
                       "example":"ocean"
                    },
                    "steps":{
                       "description":"Array of animation steps.",
                       "type":"array",
                       "items":{
                          "type":"object",
                          "required":[
                             "color",
                             "min_transition_time",
                             "max_transition_time"
                          ],
                          "properties":{
                             "color":{
                                "description":"Color in HTML/Hex RGB representation.",
                                "type":"string",
                                "example":"#336ac9"
                             },
                             "min_transition_time":{
                                "description":"Minimum transition time in milliseconds.",
                                "type":"integer",
                                "example":3520
                             },
                             "max_transition_time":{
                                "description":"Maximum transition time in milliseconds.",
                                "type":"integer",
                                "example":4840
                             }
                          }
                       }
                    }
                 }
              }
           },
           "example":{
              "set_live_animation":{
                 "style":"ocean",
                 "steps":[
                    {
                       "color":"#004ac6",
                       "min_transition_time":3520,
                       "max_transition_time":4840
                    },
                    {
                       "color":"#0000e4",
                       "min_transition_time":1000,
                       "max_transition_time":1230
                    },
                    {
                       "color":"#0029fb",
                       "min_transition_time":5000,
                       "max_transition_time":6320
                    },
                    {
                       "color":"#0612c9",
                       "min_transition_time":1210,
                       "max_transition_time":1410
                    }
                 ]
              }
           }
        },
        "DeviceCommand.Common.RGBController.StopLiveEditing":{
           "description":"Command: `stop_live_editing`.<br>Turns off live editing mode, set RGB controller device to current `color_mode` e.g. rgb.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.Common.RGBController.Stop":{
           "description":"Command: `stop`.<br>Calls RGBController to stop current moving action. Does nothing if no action is in progress.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.Common.Button.Emit":{
           "description":"Command: `emit`.<br>Emits button action event by software.",
           "type":"object",
           "required":[
              "emit"
           ],
           "properties":{
              "set_live_animation":{
                 "type":"object",
                 "required":[
                    "button_index",
                    "type"
                 ],
                 "properties":{
                    "button_index":{
                       "description":"index of the button that the action event concerns",
                       "type":"integer",
                       "minimum":1,
                       "example":1
                    },
                    "type":{
                       "description":"action that will be emitted",
                       "type":"string",
                       "enum":[
                          "click",
                          "hold_start",
                          "hold_end"
                       ],
                       "example":"click"
                    },
                    "duration":{
                       "description":"duration of the hold in seconds or amount of clicks, ignored if the type is `hold_start`",
                       "type":"integer",
                       "minimum":1,
                       "example":3
                    },
                    "set":{
                       "description":"the current button set (channel) that the action applies to (changes `button_set.current`)",
                       "type":"integer",
                       "minimum":1,
                       "example":2
                    }
                 }
              }
           },
           "example":{
              "emit":{
                 "button_index":1,
                 "type":"click",
                 "duration":3,
                 "set":2
              }
           }
        },
        "DeviceCommand.Common.MotionSensor.Enable":{
           "description":"Command: `enable`.<br>Calls Motion Sensor to enable motion detection.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.Common.MotionSensor.Disable":{
           "description":"Command: `disable`.<br>Calls Motion Sensor to disable motion detection.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.Common.MotionSensor.AddTimeSinceMotionEvent":{
           "description":"Command: `add_time_since_motion_event`.<br>Add custom interval for time_since_motion notify to motion sensor.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "add_time_since_motion_event"
           ],
           "properties":{
              "add_time_since_motion_event":{
                 "description":"Time in seconds.",
                 "type":"integer",
                 "example":77
              }
           }
        },
        "DeviceCommand.Common.BlindController.Open":{
           "description":"Command: `open`.<br>Calls Blind Controller to open to the desired value.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "open"
           ],
           "properties":{
              "open":{
                 "description":"Open value in %.",
                 "type":"integer",
                 "example":55
              }
           }
        },
        "DeviceCommand.Common.BlindController.Tilt":{
           "description":"Command: `tilt`.<br>Calls Blind Controller to tilt to the desired value.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "tilt"
           ],
           "properties":{
              "tilt":{
                 "description":"Tilt value in %.",
                 "type":"integer",
                 "example":55
              }
           }
        },
        "DeviceCommand.Common.BlindController.Up":{
           "description":"Command: `up`.<br>Calls Blind Controller to fully open blinds.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.Common.BlindController.Down":{
           "description":"Command: `down`.<br>Calls Blind Controller to fully close blinds.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.Common.BlindController.Stop":{
           "description":"Command: `stop`.<br>Calls Blind Controller to stop immediately at current position.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.Common.BlindController.Calibration":{
           "description":"Command: `calibration`.<br>Calls Blind Controller to start calibration cycle.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.Common.AnalogOutput.SetValue":{
           "description":"Command: `set_value`.<br>Calls Analog output to set output value.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_value"
           ],
           "properties":{
              "set_value":{
                 "type":"integer",
                 "example":1500
              }
           }
        },
        "DeviceCommand.Common.PulseWidthModulation.SetFrequency":{
           "description":"Command: `set_frequency`.<br>Calls PWM to set output frequency.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_frequency"
           ],
           "properties":{
              "set_frequency":{
                 "type":"integer",
                 "example":5000
              }
           }
        },
        "DeviceCommand.Common.PulseWidthModulation.SetDutyCycle":{
           "description":"Command: `set_duty_cycle`.<br>Calls PWM to set output duty cycle.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_duty_cycle"
           ],
           "properties":{
              "set_duty_cycle":{
                 "type":"integer",
                 "example":75
              }
           }
        },
        "DeviceCommand.Common.EnergyMeter.ResetEnergyConsumed":{
           "description":"Command: `reset_energy_consumed`.<br>Calls Energy meter to reset energy consumed data.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.Common.EnergyMeter.EnergyMeter_Calibration":{
           "description":"Command: `calibration`.<br>Calls Energy meter to calibrate sensor, adjusting measurements to expected values. <br>Body is <b>required</b>.<br>First parameter is `expected voltage` in mV unit, second is `expected current` in mA unit, third is `expected active power` in mW unit.<br><b>NOTE:</b> Calibration should be done using resistive load (or as close as possible to power factor [pF] = 1.0)!",
           "type":"object",
           "required":[
              "calibration"
           ],
           "properties":{
              "calibration":{
                 "description":"Array of three values: expected voltage in mV unit, expected current in mA unit, expected active power in mW unit.",
                 "type":"array",
                 "items":{
                    "type":"integer"
                 },
                 "example":[
                    230000,
                    10869,
                    2500000
                 ]
              }
           }
        },
        "DeviceCommand.WTP.RadiatorActuator.Open":{
           "description":"Command: `open`.<br>Calls Radiator Actuator to open to the desired value.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "open"
           ],
           "properties":{
              "open":{
                 "description":"Open value in %.",
                 "type":"integer",
                 "example":55
              }
           }
        },
        "DeviceCommand.WTP.RadiatorActuator.Calibration":{
           "description":"Command: `calibration`.<br>Calls Radiator Actuator to calibrate on next communication cycle.<br>Body is <b>ignored</b>.<br><b>NOTE:</b> Cannot be executed when radiator actuator does not have `calibration_support` label!"
        },
        "DeviceCommand.WTP.SmokeSensor.Lock":{
           "description":"Command: `lock`.<br>Locks the sensor. Smoke detection and high temperature alarms will not be reported.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.WTP.SmokeSensor.Unlock":{
           "description":"Command: `unlock`.<br>Unlocks the sensor. Smoke detection and high temperature alarms will be reported if detected.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.WTP.SmokeSensor.Test":{
           "description":"Command: `test`.<br>Starts self-test of device.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.WTP.SmokeSensor.Reset":{
           "description":"Command: `reset`.<br>Resets current device alarms.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.WTP.Throttle.ReFactoryResetset":{
           "description":"Command: `factory_reset`.<br>Calls Throttle to reset to factory settings.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.WTP.Throttle.Calibration":{
           "description":"Command: `calibration`.<br>Calls Throttle to start calibration cycle.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.WTP.FanControl.SetState":{
           "description":"Command `set_state`.<br>Sets current state of fan control device. <br>Body is <b>required</b>.<br> First parameter is the state. <br>Second parameter is duration the state should be on. Duration is forbidden for permament states (`off`, `automatic`, `holiday`) and optional for temporal states (`hurricane`, `party`, `hearth`, `flaccid`). When it is not passed default state duration is used.",
           "type":"object",
           "required":[
              "set_state"
           ],
           "properties":{
              "set_state":{
                 "description":"Array of two values: state and duration.",
                 "type":"array",
                 "items":{
                    "oneOf":[
                       {
                          "type":"string"
                       },
                       {
                          "type":"number"
                       }
                    ]
                 },
                 "example":[
                    "#party",
                    3600
                 ]
              }
           }
        },
        "DeviceCommand.WTP.IRHeater.TurnOn":{
           "description":"Command: `turn_on`.<br>Calls IR heater to turn on output.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.WTP.IRHeater.TurnOff":{
           "description":"Command: `turn_off`.<br>Calls IR heater to turn off output.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.WTP.IRHeater.Toggle":{
           "description":"Command: `toggle`.<br>Calls IR heater to toggle output.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.WTP.IRHeater.ResetAlarms":{
           "description":"Command: `reset_alarms`.<br>Calls IR heater to reset current alarms.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.WTP.OneOf":{
           "oneOf":[
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Any.EnqueueAction"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Any.CancelAction"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Any.ClearActions"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.WTP.RadiatorActuator.Open"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.WTP.RadiatorActuator.Calibration"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.WTP.SmokeSensor.Lock"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.WTP.SmokeSensor.Unlock"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.WTP.SmokeSensor.Test"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.WTP.SmokeSensor.Reset"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.WTP.Throttle.ReFactoryResetset"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.WTP.Throttle.Calibration"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.WTP.FanControl.SetState"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.BlindController.Open"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.BlindController.Tilt"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.BlindController.Up"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.BlindController.Down"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.BlindController.Stop"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.BlindController.Calibration"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.MotionSensor.Enable"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.MotionSensor.Disable"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.MotionSensor.AddTimeSinceMotionEvent"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Relay.TurnOn"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Relay.TurnOff"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Relay.Toggle"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.TemperatureRegulator.SetTargetTemperature"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.TemperatureRegulator.EnableConstantMode"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.TemperatureRegulator.EnableTimeLimitedMode"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.TemperatureRegulator.DisableTimeLimitedMode"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.EnergyMeter.ResetEnergyConsumed"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.EnergyMeter.EnergyMeter_Calibration"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Dimmer.TurnOn"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Dimmer.TurnOff"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Dimmer.Toggle"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Dimmer.SetLevel"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Dimmer.Stop"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.RGBController.TurnOn"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.RGBController.TurnOff"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.RGBController.Toggle"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.RGBController.SetLevel"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.RGBController.SetColor"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.RGBController.SetTemperature"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.RGBController.AddAnimation"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.RGBController.UpdateAnimation"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.RGBController.DeleteAnimation"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.RGBController.ActivateAnimation"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.RGBController.StopAnimation"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.RGBController.SetLiveAnimation"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.RGBController.StopLiveEditing"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.RGBController.Stop"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Button.Emit"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.WTP.IRHeater.TurnOn"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.WTP.IRHeater.TurnOff"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.WTP.IRHeater.Toggle"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.WTP.IRHeater.ResetAlarms"
              }
           ]
        },
        "DeviceCommand.SBus.Subscribe":{
           "description":"Command `subscribe`.<br>Every SBus device can use this command. It sends subscribe requests to given device. Used in case device lost subscriptions for some reason.<br>Subscriptions are used to tell the device that it should notify central unit about any changes that are requested."
        },
        "DeviceCommand.SBus.Valve.Calibration":{
           "description":"Command: `calibration`.<br>Calls valve to start calibration cycle.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.SBus.FanCoil.TurnOn":{
           "description":"Command: `turn_on`.<br>Send command to Fan coil device to turn on.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.SBus.FanCoil.TurnOff":{
           "description":"Command: `turn_off`.<br>Send command to Fan coil device to turn off.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.SBus.FanCoil.ForceBoostMode":{
           "description":"Command: `force_boost_mode`.<br>Send command to Fan coil device turn on boost mode.<br>Available only when `state` is `heating_demand` or `cooling_demand`.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.SBus.OneOf":{
           "oneOf":[
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Any.EnqueueAction"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Any.CancelAction"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Any.ClearActions"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.SBus.Subscribe"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Relay.TurnOn"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Relay.TurnOff"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Relay.Toggle"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.TemperatureRegulator.SetTargetTemperature"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.TemperatureRegulator.EnableConstantMode"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.TemperatureRegulator.EnableTimeLimitedMode"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.TemperatureRegulator.DisableTimeLimitedMode"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Dimmer.TurnOn"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Dimmer.TurnOff"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Dimmer.Toggle"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Dimmer.SetLevel"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Dimmer.Stop"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.RGBController.TurnOn"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.RGBController.TurnOff"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.RGBController.Toggle"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.RGBController.SetLevel"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.RGBController.SetColor"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.RGBController.SetTemperature"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.RGBController.AddAnimation"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.RGBController.UpdateAnimation"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.RGBController.DeleteAnimation"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.RGBController.ActivateAnimation"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.RGBController.StopAnimation"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.RGBController.SetLiveAnimation"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.RGBController.StopLiveEditing"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.RGBController.Stop"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.MotionSensor.Enable"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.MotionSensor.Disable"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.MotionSensor.AddTimeSinceMotionEvent"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.BlindController.Open"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.BlindController.Tilt"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.BlindController.Up"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.BlindController.Down"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.BlindController.Stop"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.BlindController.Calibration"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.AnalogOutput.SetValue"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.PulseWidthModulation.SetFrequency"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.PulseWidthModulation.SetDutyCycle"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.SBus.Valve.Calibration"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.EnergyMeter.ResetEnergyConsumed"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.EnergyMeter.EnergyMeter_Calibration"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Button.Emit"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.SBus.FanCoil.TurnOn"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.SBus.FanCoil.TurnOff"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.SBus.FanCoil.ForceBoostMode"
              }
           ]
        },
        "DeviceCommand.SLink.OneOf":{
           "allOf":[
              {
                 "$ref":"#/components/schemas/DeviceCommand.SBus.OneOf"
              }
           ]
        },
        "DeviceCommand.TECH.Ventilation.CoolingOnRequest":{
           "description":"Command: `cooling_on_request`.<br>Calls Ventilation to send cooling on request.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.TECH.Ventilation.CoolingOffRequest":{
           "description":"Command: `cooling_off_request`.<br>Calls Ventilation to send cooling off request.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.TECH.Ventilation.HeatingOnRequest":{
           "description":"Command: `heating_on_request`.<br>Calls Ventilation to send heating on request.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.TECH.Ventilation.HeatingOffRequest":{
           "description":"Command: `heating_off_request`.<br>Calls Ventilation to send heating off request.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.TECH.Ventilation.HumidifierOnRequest":{
           "description":"Command: `humidifier_on_request`.<br>Calls Ventilation to send humidifier on request.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.TECH.Ventilation.HumidifierOffRequest":{
           "description":"Command: `humidifier_off_request`.<br>Calls Ventilation to send humidifier off request.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.TECH.Ventilation.SetWorkMode":{
           "description":"Command: `set_work_mode`.<br>Calls Ventilation to change work mode.<br>Body is <b>required</b>.<br>Possible values: <b>See `work_mode` property description.</b>",
           "type":"object",
           "required":[
              "set_work_mode"
           ],
           "properties":{
              "set_work_mode":{
                 "type":"string",
                 "example":"sinum"
              }
           }
        },
        "DeviceCommand.TECH.Ventilation.SetTargetTemperature":{
           "description":"Command: `set_target_temperature`.<br>Calls Ventilation to change target temperature.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_target_temperature"
           ],
           "properties":{
              "set_target_temperature":{
                 "description":"Target temperature in Celsius degrees.",
                 "type":"integer",
                 "example":25
              }
           }
        },
        "DeviceCommand.TECH.Ventilation.SetBypassWorkMode":{
           "description":"Command: `set_bypass_work_mode`.<br>Calls Ventilation to change bypass work mode.<br>Body is <b>required</b>.<br>Possible values: <b>See `bypass_work_mode_list` property description.</b>",
           "type":"object",
           "required":[
              "set_bypass_work_mode"
           ],
           "properties":{
              "set_bypass_work_mode":{
                 "type":"integer",
                 "example":1
              }
           }
        },
        "DeviceCommand.TECH.Ventilation.SetGwcWorkMode":{
           "description":"Command: `set_gwc_work_mode`.<br>Calls Ventilation to change gwc work mode.<br>Body is <b>required</b>.<br>Possible values: <b>See `gwc_work_mode_list` property description.</b>",
           "type":"object",
           "required":[
              "set_gwc_work_mode"
           ],
           "properties":{
              "set_gwc_work_mode":{
                 "type":"integer",
                 "example":1
              }
           }
        },
        "DeviceCommand.TECH.Buffer.SetTargetTemperature":{
           "description":"Command: `set_target_temperature`.<br>Calls device to change target temperature.<br>Body is <b>required</b>.<br><b>NOTE:</b> Can be used only if device is in `fixed` target temperature mode.",
           "type":"object",
           "required":[
              "set_target_temperature"
           ],
           "properties":{
              "set_target_temperature":{
                 "description":"Target temperature in Celsius degrees.",
                 "type":"integer",
                 "example":25
              }
           }
        },
        "DeviceCommand.TECH.Buffer.SetTargetTemperatureMode":{
           "description":"Command: `set_target_temperature_mode`.<br>Calls device to change target temperature mode.<br>Body is <b>required</b>.<br>Possible values: `fixed` / `heat_curve`.<br><b>NOTE:</b> Can be used only if device has associated temperature curve.",
           "type":"object",
           "required":[
              "set_target_temperature_mode"
           ],
           "properties":{
              "set_target_temperature_mode":{
                 "description":"Target temperature mode. Possible values: `fixed` / `heat_curve`.",
                 "type":"string",
                 "enum":[
                    "fixed",
                    "heat_curve"
                 ],
                 "example":"heat_curve"
              }
           }
        },
        "DeviceCommand.TECH.MainDHW.SetTargetTemperature":{
           "description":"Command: `set_target_temperature`.<br>Calls device to change target temperature.<br>Body is <b>required</b>.<br><b>NOTE:</b> Can be used only if device is in `fixed` target temperature mode.",
           "type":"object",
           "required":[
              "set_target_temperature"
           ],
           "properties":{
              "set_target_temperature":{
                 "description":"Target temperature in Celsius degrees.",
                 "type":"integer",
                 "example":40
              }
           }
        },
        "DeviceCommand.TECH.MainDHW.SetTargetTemperatureMode":{
           "description":"Command: `set_target_temperature_mode`.<br>Calls device to change target temperature mode.<br>Body is <b>required</b>.<br>Possible values: `fixed` / `heat_curve`.<br><b>NOTE:</b> Can be used only if device has associated temperature curve.",
           "type":"object",
           "required":[
              "set_target_temperature_mode"
           ],
           "properties":{
              "set_target_temperature_mode":{
                 "description":"Target temperature mode. Possible values: `fixed` / `heat_curve`.",
                 "type":"string",
                 "enum":[
                    "fixed",
                    "heat_curve"
                 ],
                 "example":"heat_curve"
              }
           }
        },
        "DeviceCommand.TECH.PelletBoiler.SetTargetTemperature":{
           "description":"Command: `set_target_temperature`.<br>Calls device to change target temperature.<br>Body is <b>required</b>.<br><b>NOTE:</b> Can be used only if device is in `fixed` target temperature mode.",
           "type":"object",
           "required":[
              "set_target_temperature"
           ],
           "properties":{
              "set_target_temperature":{
                 "description":"Target temperature in Celsius degrees.",
                 "type":"integer",
                 "example":40
              }
           }
        },
        "DeviceCommand.TECH.PelletBoiler.SetTargetTemperatureMode":{
           "description":"Command: `set_target_temperature_mode`.<br>Calls device to change target temperature mode.<br>Body is <b>required</b>.<br>Possible values: `fixed` / `heat_curve`.<br><b>NOTE:</b> Can be used only if device has associated temperature curve.",
           "type":"object",
           "required":[
              "set_target_temperature_mode"
           ],
           "properties":{
              "set_target_temperature_mode":{
                 "description":"Target temperature mode. Possible values: `fixed` / `heat_curve`.",
                 "type":"string",
                 "enum":[
                    "fixed",
                    "heat_curve"
                 ],
                 "example":"heat_curve"
              }
           }
        },
        "DeviceCommand.TECH.CommonValve.SetTargetTemperature":{
           "description":"Command: `set_target_temperature`.<br>Calls device to change target temperature.<br>Body is <b>required</b>.<br><b>NOTE:</b> Can be used only if device is in `fixed` target temperature mode.",
           "type":"object",
           "required":[
              "set_target_temperature"
           ],
           "properties":{
              "set_target_temperature":{
                 "description":"Target temperature in Celsius degrees.",
                 "type":"integer",
                 "example":40
              }
           }
        },
        "DeviceCommand.TECH.CommonValve.SetTargetTemperatureMode":{
           "description":"Command: `set_target_temperature_mode`.<br>Calls device to change target temperature mode.<br>Body is <b>required</b>.<br>Possible values: `fixed` / `heat_curve`.<br><b>NOTE:</b> Can be used only if device has associated temperature curve.",
           "type":"object",
           "required":[
              "set_target_temperature_mode"
           ],
           "properties":{
              "set_target_temperature_mode":{
                 "description":"Target temperature mode. Possible values: `fixed` / `heat_curve`.",
                 "type":"string",
                 "enum":[
                    "fixed",
                    "heat_curve"
                 ],
                 "example":"heat_curve"
              }
           }
        },
        "DeviceCommand.TECH.CommonValve.SetWorkMode":{
           "description":"Command: `set_work_mode`.<br>Calls device to change work mode.<br>Body is <b>required</b>.<br>Possible values: <b>See `work_mode` property description.</b>",
           "type":"object",
           "required":[
              "set_work_mode"
           ],
           "properties":{
              "set_work_mode":{
                 "type":"string",
                 "example":"heating"
              }
           }
        },
        "DeviceCommand.TECH.HeatPump.SetEHomeWorkMode":{
           "description":"Command: `set_ehome_work_mode`.<br>Calls HeatPump to change ehome work mode (device climate mode).<br>Body is <b>required</b>.<br>Possible values: <b>See `ehome_work_mode` property description.</b>",
           "type":"object",
           "required":[
              "set_ehome_work_mode"
           ],
           "properties":{
              "set_ehome_work_mode":{
                 "type":"string",
                 "example":"heating"
              }
           }
        },
        "DeviceCommand.TECH.HeatPump.SetWorkMode":{
           "description":"Command: `set_work_mode`.<br>Calls HeatPump to change work mode.<br>Body is <b>required</b>.<br>Possible values: One of `work_mode_list`. <b>See `work_mode` and `work_mode_list` properties description.</b>",
           "type":"object",
           "required":[
              "set_work_mode"
           ],
           "properties":{
              "set_work_mode":{
                 "type":"integer",
                 "example":5466
              }
           }
        },
        "DeviceCommand.TECH.OneOf":{
           "oneOf":[
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Any.EnqueueAction"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Any.CancelAction"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Any.ClearActions"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Relay.TurnOn"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Relay.TurnOff"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Relay.Toggle"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.TemperatureRegulator.SetTargetTemperature"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.TemperatureRegulator.EnableConstantMode"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.TemperatureRegulator.EnableTimeLimitedMode"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.TemperatureRegulator.DisableTimeLimitedMode"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.TECH.Ventilation.CoolingOnRequest"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.TECH.Ventilation.CoolingOffRequest"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.TECH.Ventilation.HeatingOnRequest"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.TECH.Ventilation.HeatingOffRequest"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.TECH.Ventilation.HumidifierOnRequest"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.TECH.Ventilation.HumidifierOffRequest"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.TECH.Ventilation.SetWorkMode"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.TECH.Ventilation.SetTargetTemperature"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.TECH.Ventilation.SetBypassWorkMode"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.TECH.Ventilation.SetGwcWorkMode"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.TECH.Buffer.SetTargetTemperature"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.TECH.Buffer.SetTargetTemperatureMode"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.TECH.MainDHW.SetTargetTemperature"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.TECH.MainDHW.SetTargetTemperatureMode"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.TECH.PelletBoiler.SetTargetTemperature"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.TECH.PelletBoiler.SetTargetTemperatureMode"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.TECH.CommonValve.SetTargetTemperature"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.TECH.CommonValve.SetTargetTemperatureMode"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.TECH.CommonValve.SetWorkMode"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.TECH.HeatPump.SetEHomeWorkMode"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.TECH.HeatPump.SetWorkMode"
              }
           ]
        },
        "DeviceCommand.VIRTUAL.Thermostat.SetTargetTemperature":{
           "description":"Command: `set_target_temperature`.<br>Calls Thermostat to change `constant` or `time_limited` mode target temperature to the desired value. If thermostat works in `time_limited` mode it will change target temperature only, not affecting `remaining_time`. If thermostat works in `schedule` mode it will change target temperature mode to `constant`.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_target_temperature"
           ],
           "properties":{
              "set_target_temperature":{
                 "type":"integer",
                 "example":230
              }
           }
        },
        "DeviceCommand.VIRTUAL.Thermostat.EnableScheduleMode":{
           "description":"Command: `enable_schedule_mode`.<br>Calls Thermostat to change mode and target temperature mode to `schedule`.<br>Body is <b>ignored</b>.<br>Cannot be called on Thermostat without `has_schedule` label."
        },
        "DeviceCommand.VIRTUAL.Thermostat.EnableConstantMode":{
           "description":"Command: `enable_constant_mode`.<br>Calls Thermostat to change mode and target temperature mode to `constant`. When thermostat is already in `constant` mode, it will change mode `target_temperature` only.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "enable_constant_mode"
           ],
           "properties":{
              "enable_constant_mode":{
                 "type":"integer",
                 "example":230
              }
           }
        },
        "DeviceCommand.VIRTUAL.Thermostat.EnableTimeLimitedMode":{
           "description":"Command: `enable_time_limited_mode`.<br>Calls Thermostat to change target temperature mode to `time_limited` for desired time. When thermostat is already in `time_limited` mode, it will change `remaining_time` or/and `target_temperature` depending on payload.<br>Body is <b>required</b>.<br>First parameter is `remaining_time`, second is `target_temperature`.",
           "type":"object",
           "required":[
              "enable_time_limited_mode"
           ],
           "properties":{
              "enable_time_limited_mode":{
                 "description":"Array of two values: remaining time and target temperature.",
                 "type":"array",
                 "items":{
                    "type":"number"
                 },
                 "example":[
                    800,
                    210
                 ]
              }
           }
        },
        "DeviceCommand.VIRTUAL.Thermostat.SetMode":{
           "description":"Command: `set_mode`.<br>Calls Thermostat to change mode to `heating`, `cooling` or `off`. <br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_mode"
           ],
           "properties":{
              "set_mode":{
                 "description":"Mode. Possible values: `heating`, `cooling` or `off`.",
                 "type":"string",
                 "enum":[
                    "heating",
                    "cooling",
                    "off"
                 ],
                 "example":"heating"
              }
           }
        },
        "DeviceCommand.VIRTUAL.Thermostat.DisableTimeLimitedMode":{
           "description":"Command: `disable_time_limited_mode`.<br>Calls Thermostat to disable `time_limited` and go back to previous target temperature mode. When thermostat is not in `time_limited` mode, it will do nothing.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.VIRTUAL.ThermostatOutputGroup.Enable":{
           "description":"Command: `enable`.<br>Calls Thermostat Output Group to enable control.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.VIRTUAL.ThermostatOutputGroup.Disable":{
           "description":"Command: `disable`.<br>Calls Thermostat Output Group to disable control.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.VIRTUAL.ThermostatOutputGroup.SetPropagationDelay":{
           "description":"Command: `set_propagation_delay`.<br>Calls Thermostat Output Group to set propagation delay to the desired value.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_propagation_delay"
           ],
           "properties":{
              "set_propagation_delay":{
                 "type":"integer",
                 "example":5
              }
           }
        },
        "DeviceCommand.VIRTUAL.ThermostatOutputGroup.SetAntistopEnabled":{
           "description":"Command: `set_antistop_enabled`.<br>Calls Thermostat Output Group to enable/disable antistop function.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_antistop_enabled"
           ],
           "properties":{
              "set_antistop_enabled":{
                 "type":"boolean",
                 "example":true
              }
           }
        },
        "DeviceCommand.VIRTUAL.ThermostatOutputGroup.SetAntistopWorktime":{
           "description":"Command: `set_antistop_work_time`.<br>Calls Thermostat Output Group to set antistop work time to desired value.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_antistop_work_time"
           ],
           "properties":{
              "set_antistop_work_time":{
                 "type":"integer",
                 "example":80
              }
           }
        },
        "DeviceCommand.VIRTUAL.ThermostatOutputGroup.SetAntistopPausetime":{
           "description":"Command: `set_antistop_pause_time`.<br>Calls Thermostat Output Group to set antistop pause time to desired value.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_antistop_pause_time"
           ],
           "properties":{
              "set_antistop_pause_time":{
                 "type":"integer",
                 "example":48
              }
           }
        },
        "DeviceCommand.VIRTUAL.RelayIntegrator.TurnOn":{
           "description":"Command: `turn_on`.<br>Calls RelayIntegrator to turn on output.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.VIRTUAL.RelayIntegrator.TurnOff":{
           "description":"Command: `turn_off`.<br>Calls RelayIntegrator to turn off output.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.VIRTUAL.RelayIntegrator.Toggle":{
           "description":"Command: `toggle`.<br>Calls RelayIntegrator to toggle output.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.VIRTUAL.BlindControllerIntegrator.Open":{
           "description":"Command: `open`.<br>Calls Blind Controller Integrator to open to the desired value.<br>Body is <b>required</b>.<br>Command is <b>optional</b>. Available when: check if `percent_opening_control` label is provided.",
           "type":"object",
           "required":[
              "open"
           ],
           "properties":{
              "open":{
                 "type":"integer",
                 "example":50
              }
           }
        },
        "DeviceCommand.VIRTUAL.BlindControllerIntegrator.Up":{
           "description":"Command: `up`.<br>Calls Blind Controller Integrator to fully open blinds.<br>Body is <b>ignored</b>.<br>Command is <b>optional</b>. Available when: check if `percent_opening_control` label is provided."
        },
        "DeviceCommand.VIRTUAL.BlindControllerIntegrator.Down":{
           "description":"Command: `down`.<br>Calls Blind Controller Integrator to fully close blinds.<br>Body is <b>ignored</b>.<br>Command is <b>optional</b>. Available when: check if `percent_opening_control` label is provided."
        },
        "DeviceCommand.VIRTUAL.BlindControllerIntegrator.Stop":{
           "description":"Command: `stop`.<br>Calls Blind Controller Integrator to request stop on every associated blind.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.VIRTUAL.BlindControllerIntegrator.Tilt":{
           "description":"Command: `tilt`.<br>Calls Blind Controller Integrator to tilt to the desired value.<br>Body is <b>required</b>.<br>Command is <b>optional</b>. Available when: check if `percent_tilt_control` label is provided.",
           "type":"object",
           "required":[
              "tilt"
           ],
           "properties":{
              "tilt":{
                 "type":"integer",
                 "example":50
              }
           }
        },
        "DeviceCommand.VIRTUAL.DimmerRgbIntegrator.TurnOn":{
           "description":"Command: `turn_on`.<br>Calls Dimmer RGB Integrator to turn on dimmers and rgb controllers.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.VIRTUAL.DimmerRgbIntegrator.TurnOff":{
           "description":"Command: `turn_off`.<br>Calls Dimmer RGB Integrator to turn off dimmers and rgb controllers.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.VIRTUAL.DimmerRgbIntegrator.Toggle":{
           "description":"Command: `toggle`.<br>Calls Dimmer RGB Integrator to toggle dimmers and rgb controllers.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.VIRTUAL.DimmerRgbIntegrator.SetBrightness":{
           "description":"Command: `set_brightness`.<br>Calls Dimmer RGB Integrator to set brightness of dimmers and rgb controllers.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_brightness"
           ],
           "properties":{
              "set_brightness":{
                 "description":"Array of two values: target brightness and transition time in ms. Second one is optional.",
                 "type":"array",
                 "items":{
                    "type":"integer"
                 },
                 "example":[
                    50,
                    1000
                 ]
              }
           }
        },
        "DeviceCommand.VIRTUAL.DimmerRgbIntegrator.SetColor":{
           "description":"Command: `set_color`.<br>Calls Dimmer RGB Integrator to set color rgb controllers.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_color"
           ],
           "properties":{
              "set_color":{
                 "description":"Array of two values: color and transition time in ms. Second one is optional.",
                 "type":"array",
                 "items":{
                    "type":"string"
                 },
                 "example":[
                    "#FF0000",
                    1000
                 ]
              }
           }
        },
        "DeviceCommand.VIRTUAL.DimmerRgbIntegrator.SetTemperature":{
           "description":"Command: `set_temperature`.<br>Calls Dimmer RGB Integrator to set temperature of rgb controllers.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_temperature"
           ],
           "properties":{
              "set_temperature":{
                 "description":"Array of two values: temperature and transition time in ms. Second one is optional.",
                 "type":"array",
                 "items":{
                    "type":"integer"
                 },
                 "example":[
                    10000,
                    1000
                 ]
              }
           }
        },
        "DeviceCommand.VIRTUAL.HeatPumpManager.Enable":{
           "description":"Command: `enable`.<br>Calls Heat Pump Manager to enable control.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.VIRTUAL.HeatPumpManager.Disable":{
           "description":"Command: `disable`.<br>Calls Heat Pump Manager to disable control.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.VIRTUAL.HeatPumpManager.Toggle":{
           "description":"Command: `toggle`.<br>Calls Heat Pump Manager to toggle control.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.VIRTUAL.HeatPumpManager.SetHeatingTargetTemperature":{
           "description":"Command: `set_heating_target_temperature`.<br>Calls Heat Pump Manager to change `heating` work mode target temperature to the desired value.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_heating_target_temperature"
           ],
           "properties":{
              "set_heating_target_temperature":{
                 "type":"integer",
                 "example":230
              }
           }
        },
        "DeviceCommand.VIRTUAL.HeatPumpManager.SetCoolingTargetTemperature":{
           "description":"Command: `set_cooling_target_temperature`.<br>Calls Heat Pump Manager to change `cooling` work mode target temperature to the desired value.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_cooling_target_temperature"
           ],
           "properties":{
              "set_cooling_target_temperature":{
                 "type":"integer",
                 "example":230
              }
           }
        },
        "DeviceCommand.VIRTUAL.HeatPumpManager.SetAutomaticTargetTemperature":{
           "description":"Command: `set_automatic_target_temperature`.<br>Calls Heat Pump Manager to change `automatic` work mode target temperature to the desired value.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_automatic_target_temperature"
           ],
           "properties":{
              "set_automatic_target_temperature":{
                 "type":"integer",
                 "example":230
              }
           }
        },
        "DeviceCommand.VIRTUAL.HeatPumpManager.SetDHWTargetTemperature":{
           "description":"Command: `set_dhw_target_temperature`.<br>Calls Heat Pump Manager to change DHW control target temperature to the desired value.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_dhw_target_temperature"
           ],
           "properties":{
              "set_dhw_target_temperature":{
                 "type":"integer",
                 "example":230
              }
           }
        },
        "DeviceCommand.VIRTUAL.HeatPumpManager.SetWorkMode":{
           "description":"Command: `set_work_mode`.<br>Calls Heat Pump Manager to change mode to `heating`, `cooling`, `automatic` or `fireplace`. <br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_work_mode"
           ],
           "properties":{
              "set_work_mode":{
                 "description":"Mode. Possible values: `heating`, `cooling`, `automatic` or `fireplace`.",
                 "type":"string",
                 "enum":[
                    "heating",
                    "cooling",
                    "automatic",
                    "fireplace"
                 ],
                 "example":"heating"
              }
           }
        },
        "DeviceCommand.VIRTUAL.HeatPumpManager.EnableSchedule":{
           "description":"Command: `enable_schedule`.<br>Calls Heat Pump Manager to change target temperature mode to `schedule`. Available when manager has label `has_schedule`.`<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.VIRTUAL.HeatPumpManager.DisableSchedule":{
           "description":"Command: `disable_schedule`.<br>Calls Heat Pump Manager to change target temperature mode to `constant`. Available when manager has label `has_schedule`.`<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.VIRTUAL.Gate.FullMove":{
           "description":"Command: `full_move`.<br>Commands the gate controller to do the full move action. <br>Should be used when no `close_status_sensor` is associated or you want to just do the counter direction move according to current `state`.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.VIRTUAL.Gate.PartialMove":{
           "description":"Command: `partial_move`.<br>Commands the gate controller to do the partial move action. <br>Should be used when no `close_status_sensor` is associated or you want to just do the counter direction move according to current `state`. <br>**NOTE**: This command requires the `partial_open_close_output` to be associated!<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.VIRTUAL.Gate.FullOpen":{
           "description":"Command: `full_open`.<br>Commands the gate controller to do the full open action. <br>**NOTE**: This command requires the `close_status_sensor` to be associated!<br>**NOTE**: The command is accepted only if: the gate is in `closed` state or the gate is in `open` state while the `stopped_state` is `closing`, otherwise is ignored (returns not modified status).<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.VIRTUAL.Gate.PartialOpen":{
           "description":"Command: `partial_open`.<br>Commands the gate controller to do the partial open action. <br>**NOTE**: This command requires the `close_status_sensor` and `partial_open_close_output` to be associated!<br>**NOTE**: The command is accepted only if: the gate is in `closed` state, otherwise is ignored (returns not modified status).<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.VIRTUAL.Gate.Close":{
           "description":"Command: `close`.<br>Commands the gate controller to do the close action. <br>**NOTE**: This command requires the `close_status_sensor` to be associated!<br>**NOTE**: The command is accepted only if: the gate is in `open` state without `stopped_state` being `closing`, otherwise is ignored (returns not modified status).<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.VIRTUAL.Gate.Stop":{
           "description":"Command: `stop`.<br>Commands the gate controller to stop current move action. <br>**NOTE**: The command is accepted only if: the gate is in `moving`, `closing` or `opening` state, otherwise is ignored (returns not modified status).<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.VIRTUAL.Wicket.Unlock":{
           "description":"Command: `unlock`.<br>Unlocks (turns on) electric strike if its already locked.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.VIRTUAL.Wicket.Lock":{
           "description":"Command: `lock`.<br>Locks (turns off) electric strike if its already unlocked.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.VIRTUAL.OneOf":{
           "oneOf":[
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Any.EnqueueAction"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Any.CancelAction"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Any.ClearActions"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.VIRTUAL.Thermostat.SetTargetTemperature"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.VIRTUAL.Thermostat.SetTargetTemperature"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.VIRTUAL.Thermostat.EnableScheduleMode"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.VIRTUAL.Thermostat.EnableConstantMode"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.VIRTUAL.Thermostat.EnableTimeLimitedMode"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.VIRTUAL.Thermostat.SetMode"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.VIRTUAL.Thermostat.DisableTimeLimitedMode"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.VIRTUAL.ThermostatOutputGroup.Enable"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.VIRTUAL.ThermostatOutputGroup.Disable"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.VIRTUAL.ThermostatOutputGroup.SetPropagationDelay"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.VIRTUAL.ThermostatOutputGroup.SetAntistopEnabled"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.VIRTUAL.ThermostatOutputGroup.SetAntistopWorktime"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.VIRTUAL.ThermostatOutputGroup.SetAntistopPausetime"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.VIRTUAL.RelayIntegrator.TurnOn"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.VIRTUAL.RelayIntegrator.TurnOff"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.VIRTUAL.RelayIntegrator.Toggle"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.VIRTUAL.BlindControllerIntegrator.Open"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.VIRTUAL.BlindControllerIntegrator.Up"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.VIRTUAL.BlindControllerIntegrator.Down"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.VIRTUAL.BlindControllerIntegrator.Stop"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.VIRTUAL.BlindControllerIntegrator.Tilt"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.VIRTUAL.DimmerRgbIntegrator.TurnOn"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.VIRTUAL.DimmerRgbIntegrator.TurnOff"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.VIRTUAL.DimmerRgbIntegrator.Toggle"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.VIRTUAL.DimmerRgbIntegrator.SetBrightness"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.VIRTUAL.DimmerRgbIntegrator.SetColor"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.VIRTUAL.DimmerRgbIntegrator.SetTemperature"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.VIRTUAL.HeatPumpManager.Enable"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.VIRTUAL.HeatPumpManager.Disable"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.VIRTUAL.HeatPumpManager.Toggle"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.VIRTUAL.HeatPumpManager.SetHeatingTargetTemperature"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.VIRTUAL.HeatPumpManager.SetCoolingTargetTemperature"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.VIRTUAL.HeatPumpManager.SetAutomaticTargetTemperature"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.VIRTUAL.HeatPumpManager.SetDHWTargetTemperature"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.VIRTUAL.HeatPumpManager.SetWorkMode"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.VIRTUAL.HeatPumpManager.EnableSchedule"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.VIRTUAL.HeatPumpManager.DisableSchedule"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.VIRTUAL.Gate.FullMove"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.VIRTUAL.Gate.PartialMove"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.VIRTUAL.Gate.FullOpen"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.VIRTUAL.Gate.PartialOpen"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.VIRTUAL.Gate.Close"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.VIRTUAL.Gate.Stop"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.VIRTUAL.Wicket.Unlock"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.VIRTUAL.Wicket.Lock"
              }
           ]
        },
        "DeviceCommand.Lora.OneOf":{
           "oneOf":[
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Any.EnqueueAction"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Any.CancelAction"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Any.ClearActions"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Relay.TurnOn"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Relay.TurnOff"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Relay.Toggle"
              }
           ]
        },
        "DeviceCommand.SystemModule.IrRemote.Send":{
           "description":"Command: `send`.<br>Calls device to send the IR frame.<br>Body is <b>required</b>. Parameter: Hex string in broadlink format, max 2048 charactes, matching regex: `^[a-fA-F0-9]+$`.",
           "type":"object",
           "required":[
              "send"
           ],
           "properties":{
              "send":{
                 "type":"string",
                 "example":"260092000001128913311310131013311331131013101310133113101310133113101310131013101310131013101310131013101331133113101310131013101331131013311310131013311310130002601310133113311310131013101310131013311310131013101310133113101310131013101310131013101310131013101310131013101310131013311331133113000260"
              }
           }
        },
        "DeviceCommand.SystemModule.IrRemote.Learn":{
           "description":"Command: `learn`.<br>Calls device to start learning IR frame.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.SystemModule.RfRemote.Send":{
           "description":"Command: `send`.<br>Calls device to send the Rf frame.<br>Body is <b>required</b>. Parameter: Hex string in broadlink format, max 2048 charactes, matching regex: `^[a-fA-F0-9]+$`.",
           "type":"object",
           "required":[
              "send"
           ],
           "properties":{
              "send":{
                 "type":"string",
                 "example":"B10192000001128913311310131013311331131013101310133113101310133113101310131013101310131013101310131013101331133113101310131013101331131013311310131013311310130002601310133113311310131013101310131013311310131013101310133113101310131013101310131013101310131013101310131013101310131013311331133113000260"
              }
           }
        },
        "DeviceCommand.SystemModule.RfRemote.Learn":{
           "description":"Command: `learn`.<br>Calls device to start learning RF frame.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.SystemModule.ModbusTransceiver.EnableSlave":{
           "description":"Command: `enable_slave`.<br>Turn on modbus slave mode for transceiver.<br>Available when label `modbus_slave_support` provided.<br>Body is <b>required<b>.",
           "type":"object",
           "required":[
              "enable_slave"
           ],
           "properties":{
              "enable_slave":{
                 "description":"Modbus slave settings.",
                 "type":"object",
                 "required":[
                    "baud_rate",
                    "parity",
                    "stop_bits"
                 ],
                 "properties":{
                    "baud_rate":{
                       "description":"Baud rate on which the slave device works.",
                       "type":"integer",
                       "example":115200
                    },
                    "parity":{
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Modbus.Config.Parity"
                          }
                       ]
                    },
                    "stop_bits":{
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Modbus.Config.StopBit"
                          }
                       ]
                    }
                 }
              }
           }
        },
        "DeviceCommand.SystemModule.ModbusTransceiver.DisableSlave":{
           "description":"Command: `disable_slave`.<br>Turn off modbus slave mode for transceiver, returns to standard modbus master mode.<br>Available when label `modbus_slave_support` provided.<br>Body is <b>ignored<b>."
        },
        "DeviceCommand.SystemModule.ModbusExtender.EnableSlave":{
           "description":"Command: `enable_slave`.<br>Turn on modbus slave mode for extender.<br>Available when label `modbus_slave_support` provided.<br>Body is <b>required<b>.",
           "type":"object",
           "required":[
              "enable_slave"
           ],
           "properties":{
              "enable_slave":{
                 "description":"Modbus slave settings.",
                 "type":"object",
                 "required":[
                    "baud_rate",
                    "parity",
                    "stop_bits"
                 ],
                 "properties":{
                    "baud_rate":{
                       "description":"Baud rate on which the slave device works.",
                       "type":"integer",
                       "example":115200
                    },
                    "parity":{
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Modbus.Config.Parity"
                          }
                       ]
                    },
                    "stop_bits":{
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Modbus.Config.StopBit"
                          }
                       ]
                    }
                 }
              }
           }
        },
        "DeviceCommand.SystemModule.ModbusExtender.DisableSlave":{
           "description":"Command: `disable_slave`.<br>Turn off modbus slave mode for extender, returns to standard modbus master mode.<br>Available when label `modbus_slave_support` provided.<br>Body is <b>ignored<b>."
        },
        "DeviceCommand.SystemModule.AnyTransceiverOrExtender.EnableDiagnostic":{
           "description":"Command: `enable_diagnostic`.<br>Turn on diagnostic mode for transceiver or extender.<br>Available when label `diagnostic_support` provided.<br>Body is <b>ignored<b>."
        },
        "DeviceCommand.SystemModule.AnyTransceiverOrExtender.DisableDiagnostic":{
           "description":"Command: `disable_diagnostic`.<br>Turn off diagnostic mode for transceiver or extender.<br>Available when label `diagnostic_support` provided.<br>Body is <b>ignored<b>."
        },
        "DeviceCommand.SystemModule.OneOf":{
           "oneOf":[
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Any.EnqueueAction"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Any.CancelAction"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Any.ClearActions"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Relay.TurnOn"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.SystemModule.IrRemote.Send"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.SystemModule.IrRemote.Learn"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.SystemModule.RfRemote.Send"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.SystemModule.RfRemote.Learn"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.SystemModule.ModbusTransceiver.EnableSlave"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.SystemModule.ModbusTransceiver.DisableSlave"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.SystemModule.ModbusExtender.EnableSlave"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.SystemModule.ModbusExtender.DisableSlave"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.SystemModule.AnyTransceiverOrExtender.EnableDiagnostic"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.SystemModule.AnyTransceiverOrExtender.DisableDiagnostic"
              }
           ]
        },
        "DeviceCommand.AlarmSystem.TwoStateOutput.TurnOn":{
           "description":"Command: `turn_on`.<br>Calls device to turn on output.<br>Body is <b>required</b>. Parameter: Pin code to turn on output. Pin code can be 4 to 8 characters long and consists only of decimal numbers 0-9.<br> **NOTE**: Cannot be executed when output is managed by alarm central (output function is not 24, 25 or 64-79). You can check if your device contains `managed_by_alarm_central` label.",
           "type":"object",
           "required":[
              "turn_on"
           ],
           "properties":{
              "turn_on":{
                 "description":"Pin code to turn on output.",
                 "type":"string",
                 "example":"1234"
              }
           }
        },
        "DeviceCommand.AlarmSystem.TwoStateOutput.TurnOff":{
           "description":"Command: `turn_off`.<br>Calls device to turn off output.<br>Body is <b>required</b>. Parameter: Pin code to turn off output. Pin code can be 4 to 8 characters long and consists only of decimal numbers 0-9.<br> **NOTE**: Cannot be executed when output is managed by alarm central (output function is not 24, 25 or 64-79). You can check if your device contains `managed_by_alarm_central` label.",
           "type":"object",
           "required":[
              "turn_off"
           ],
           "properties":{
              "turn_off":{
                 "description":"Pin code to turn off output.",
                 "type":"string",
                 "example":"1234"
              }
           }
        },
        "DeviceCommand.AlarmSystem.TwoStateOutput.Toggle":{
           "description":"Command: `toggle`.<br>Calls device to toggle output.<br>Body is <b>required</b>. Parameter: Pin code to change output state. Pin code can be 4 to 8 characters long and consists only of decimal numbers 0-9.<br> **NOTE**: Cannot be executed when output is managed by alarm central (output function is not 24, 25 or 64-79). You can check if your device contains `managed_by_alarm_central` label.",
           "type":"object",
           "required":[
              "toggle"
           ],
           "properties":{
              "turn_on":{
                 "description":"Pin code to toggle output.",
                 "type":"string",
                 "example":"1234"
              }
           }
        },
        "DeviceCommand.AlarmSystem.SatelAlarmZone.Arm":{
           "description":"Command: `arm`.<br>Calls zone to arm.<br>Body is <b>required</b>. Parameter: Pin code to arm zone Pin code can be 4 to 8 characters long and consists only of decimal numbers 0-9..",
           "type":"object",
           "required":[
              "arm"
           ],
           "properties":{
              "arm":{
                 "description":"Pin code to arm zone.",
                 "type":"string",
                 "example":"1234"
              }
           }
        },
        "DeviceCommand.AlarmSystem.SatelAlarmZone.ArmInMode":{
           "description":"Command: `arm_in_mode`.<br>Calls zone to arm.<br>Body is <b>required</b>. Parameters:<br>`pin_code`: Pin code to arm zone. Pin code can be 4 to 8 characters long and consists only of decimal numbers 0-9.<br>`mode`: Mode which will be used to arm zone (0-3). For more information see Satel documentation.",
           "type":"object",
           "required":[
              "arm_in_mode"
           ],
           "properties":{
              "arm_in_mode":{
                 "description":"Parameters.",
                 "type":"object",
                 "required":[
                    "pin_code",
                    "mode"
                 ],
                 "properties":{
                    "pin_code":{
                       "description":"Pin code to arm zone.",
                       "type":"string",
                       "example":"1234"
                    },
                    "mode":{
                       "description":"Mode which will be used to arm zone (0-3). For more information see Satel documentation.",
                       "type":"integer",
                       "example":1
                    }
                 }
              }
           }
        },
        "DeviceCommand.AlarmSystem.SatelAlarmZone.Disarm":{
           "description":"Command: `disarm`.<br>Calls zone to disarm.<br>Body is <b>required</b>. Parameter: Pin code to arm zone. Pin code can be 4 to 8 characters long and consists only of decimal numbers 0-9.",
           "type":"object",
           "required":[
              "disarm"
           ],
           "properties":{
              "disarm":{
                 "description":"Pin code to disarm zone.",
                 "type":"string",
                 "example":"1234"
              }
           }
        },
        "DeviceCommand.AlarmSystem.OneOf":{
           "oneOf":[
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Any.EnqueueAction"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Any.CancelAction"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Any.ClearActions"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Relay.TurnOn"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.AlarmSystem.TwoStateOutput.TurnOn"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.AlarmSystem.TwoStateOutput.TurnOff"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.AlarmSystem.TwoStateOutput.Toggle"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.AlarmSystem.SatelAlarmZone.Arm"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.AlarmSystem.SatelAlarmZone.ArmInMode"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.AlarmSystem.SatelAlarmZone.Disarm"
              }
           ]
        },
        "DeviceCommand.Modbus.EcoAirHeatPump.ResetAlarms":{
           "description":"Command: `reset_alarms`.<br>Sends request to heat pump device to reset alarms.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.Modbus.EcoGeoHeatPump.ResetAlarms":{
           "description":"Command: `reset_alarms`.<br>Sends request to heat pump device to reset alarms.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.Modbus.RemehaElgaACEHeatPump.ResetAlarms":{
           "description":"Command: `reset_alarms`.<br>Sends request to heat pump device to reset alarms.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.Modbus.SolaxX1Battery.Charge":{
           "description":"Command: `charge`.<br>Calls battery to charge during given period of time.<br>Body is <b>required</b>.<br>First parameter is `active_power` in mW (minimum is 10000 (10W), maximum value from `maximum_charge_power` parameter), second is `duration_time` in seconds.",
           "type":"object",
           "required":[
              "charge"
           ],
           "properties":{
              "charge":{
                 "description":"Array of two values: active power and duration time.",
                 "type":"array",
                 "items":{
                    "type":"number"
                 },
                 "example":[
                    10000,
                    3600
                 ]
              }
           }
        },
        "DeviceCommand.Modbus.SolaxX1Battery.Discharge":{
           "description":"Command: `discharge`.<br>Calls battery to discharge during given period of time.<br>Body is <b>required</b>.<br>First parameter is `active_power` in mW (minimum is 10000 (10W), maximum value from `maximum_discharge_power` parameter), second is `duration_time` in seconds.",
           "type":"object",
           "required":[
              "discharge"
           ],
           "properties":{
              "discharge":{
                 "description":"Array of two values: active power and duration time.",
                 "type":"array",
                 "items":{
                    "type":"number"
                 },
                 "example":[
                    10000,
                    3600
                 ]
              }
           }
        },
        "DeviceCommand.Modbus.SolaxX3Battery.Charge":{
           "description":"Command: `charge`.<br>Calls battery to charge during given period of time.<br>Body is <b>required</b>.<br>First parameter is `active_power` in mW (minimum is 10000 (10W), maximum value from `maximum_charge_power` parameter), second is `duration_time` in seconds.",
           "type":"object",
           "required":[
              "charge"
           ],
           "properties":{
              "charge":{
                 "description":"Array of two values: active power and duration time.",
                 "type":"array",
                 "items":{
                    "type":"number"
                 },
                 "example":[
                    10000,
                    3600
                 ]
              }
           }
        },
        "DeviceCommand.Modbus.SolaxX3Battery.Discharge":{
           "description":"Command: `discharge`.<br>Calls battery to discharge during given period of time.<br>Body is <b>required</b>.<br>First parameter is `active_power` in mW (minimum is 10000 (10W), maximum value from `maximum_discharge_power` parameter), second is `duration_time` in seconds.",
           "type":"object",
           "required":[
              "discharge"
           ],
           "properties":{
              "discharge":{
                 "description":"Array of two values: active power and duration time.",
                 "type":"array",
                 "items":{
                    "type":"number"
                 },
                 "example":[
                    10000,
                    3600
                 ]
              }
           }
        },
        "DeviceCommand.Modbus.GoodWeMtSmtInverter.TurnOn":{
           "description":"Command: `turn_on`.<br>Turn on the inverter.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.Modbus.GoodWeMtSmtInverter.TurnOff":{
           "description":"Command: `turn_off`.<br>Turn off the inverter.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.Modbus.GoodWeMtSmtInverter.LimitActivePower":{
           "description":"Command: `limit_active_power`.<br>Sends request to limit current active power of inverter.<br>Body is <b>required</b>.<br>Parameter is limit in %.<br>**NOTE:**Requires `power_control_enabled` set to true.",
           "type":"object",
           "required":[
              "limit_active_power"
           ],
           "properties":{
              "limit_active_power":{
                 "description":"Limit in %.",
                 "type":"integer",
                 "example":75
              }
           }
        },
        "DeviceCommand.Modbus.GoodWeSdtMsDnsXsInverter.TurnOn":{
           "description":"Command: `turn_on`.<br>Turn on the inverter.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.Modbus.GoodWeSdtMsDnsXsInverter.TurnOff":{
           "description":"Command: `turn_off`.<br>Turn off the inverter.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.Modbus.GoodWeSdtMsDnsXsInverter.LimitActivePower":{
           "description":"Command: `limit_active_power`.<br>Sends request to limit current active power of inverter.<br>Body is <b>required</b>.<br>Parameter is limit in %.<br>**NOTE:**Requires `power_control_enabled` set to true.",
           "type":"object",
           "required":[
              "limit_active_power"
           ],
           "properties":{
              "limit_active_power":{
                 "description":"Limit in %.",
                 "type":"integer",
                 "example":75
              }
           }
        },
        "DeviceCommand.Modbus.HuaweiSUN2000Inverter.TurnOn":{
           "description":"Command: `turn_on`.<br>Turn on the inverter: set power limit to 100%.<br>Body is <b>ignored</b>.<br>**NOTE:**Command available when device has label `power_control_support`."
        },
        "DeviceCommand.Modbus.HuaweiSUN2000Inverter.TurnOff":{
           "description":"Command: `turn_off`.<br>Turn off the inverter: set power limit to 0%.<br>Body is <b>ignored</b>.<br>**NOTE:**Command available when device has label `power_control_support`."
        },
        "DeviceCommand.Modbus.HuaweiSUN2000Inverter.LimitActivePower":{
           "description":"Command: `limit_active_power`.<br>Sends request to limit current active power of inverter.<br>Body is <b>required</b>.<br>Parameter is limit in %.<br>**NOTE:**Command available when device has label `power_control_support`.",
           "type":"object",
           "required":[
              "limit_active_power"
           ],
           "properties":{
              "limit_active_power":{
                 "description":"Limit in %.",
                 "type":"integer",
                 "example":75
              }
           }
        },
        "DeviceCommand.Modbus.HuaweiSUN2000Inverter.SetPowerControlMode":{
           "description":"Command: `set_power_control_mode`.<br>Sends request to change power control mode of inverter.<br>Body is <b>required</b>.<br>Parameter is limit in %.<br>**NOTE:**Command available when device has label `power_control_mode_support`.",
           "type":"object",
           "required":[
              "set_power_control_mode"
           ],
           "properties":{
              "set_power_control_mode":{
                 "type":"string",
                 "example":"power_limited_grid_connection_percent"
              }
           }
        },
        "DeviceCommand.Modbus.AlphaInnotecHeatPump.ResetAlarms":{
           "description":"Command: `reset_alarms`.<br>Sends request to heat pump device to reset alarms.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.Modbus.AmpowrAmpiHomeInverter.LimitActivePower":{
           "description":"Command: `limit_active_power`.<br>Sends request to limit current active power of inverter.<br>Body is <b>required</b>.<br>Parameter is limit in %.<br>**NOTE:**Requires `power_control_enabled` set to true.",
           "type":"object",
           "required":[
              "limit_active_power"
           ],
           "properties":{
              "limit_active_power":{
                 "description":"Limit in %.",
                 "type":"integer",
                 "example":75
              }
           }
        },
        "DeviceCommand.Modbus.HeatcompHCEV01CarCharger.SetCurrentLimit":{
           "description":"Command: `set_current_limit`.<br>Sends request to limit charging current.<br>Body is <b>required</b>.<br>Parameter is limit in A, multiplied by 1000 (mA). (range: 0-32000)",
           "type":"object",
           "required":[
              "set_current_limit"
           ],
           "properties":{
              "set_current_limit":{
                 "description":"Limit in mA.",
                 "type":"integer",
                 "example":20000
              }
           }
        },
        "DeviceCommand.Modbus.HeatcompHCEV01CarCharger.SetPostponeTime":{
           "description":"Command: `set_postpone_time`.<br>Sends request to postpone charging.<br>Body is <b>required</b>.<br>Parameter is time in hours. (range: 0-15).",
           "type":"object",
           "required":[
              "set_postpone_time"
           ],
           "properties":{
              "set_postpone_time":{
                 "description":"Time in hours.",
                 "type":"integer",
                 "example":10
              }
           }
        },
        "DeviceCommand.Modbus.HeatcompHCEV01CarCharger.SetChargeTimeLeft":{
           "description":"Command: `set_charge_time_left`.<br>Sends request to limit charging time.<br>Body is <b>required</b>.<br>Parameter is time in hours. (range: 0-15).",
           "type":"object",
           "required":[
              "set_charge_time_left"
           ],
           "properties":{
              "set_charge_time_left":{
                 "description":"Time in hours.",
                 "type":"integer",
                 "example":10
              }
           }
        },
        "DeviceCommand.Modbus.GalmetPrimaHeatPump.SetWorkMode":{
           "description":"Command: `set_work_mode`.<br>Change work mode for heat pump.<br>Body is <b>required</b>.<br>Parameter is work mode, one of following: `cooling`, `heating`, `automatic`.",
           "type":"object",
           "required":[
              "set_work_mode"
           ],
           "properties":{
              "set_work_mode":{
                 "description":"Mode. Possible values: `heating`, `cooling`, `automatic`.",
                 "type":"string",
                 "enum":[
                    "heating",
                    "cooling",
                    "automatic"
                 ],
                 "example":"heating"
              }
           }
        },
        "DeviceCommand.Modbus.GalmetPrimaHeatPump.SetFixedTargetTemperature":{
           "description":"Command: `set_fixed_target_temperature`.<br>Change fixed target temperature for requested zone in heat pump.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_fixed_target_temperature"
           ],
           "properties":{
              "set_fixed_target_temperature":{
                 "description":"Parameters.",
                 "type":"object",
                 "required":[
                    "zone",
                    "value"
                 ],
                 "properties":{
                    "zone":{
                       "description":"Zone number.",
                       "type":"integer",
                       "example":1
                    },
                    "value":{
                       "description":"Target temperature in Celsius.",
                       "type":"integer",
                       "example":45
                    }
                 }
              }
           }
        },
        "DeviceCommand.Modbus.GalmetPrimaHeatPump.SetHeatDemand":{
           "description":"Command: `set_heat_demand`.<br>Set heat demand for requested zone in heat pump.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_heat_demand"
           ],
           "properties":{
              "set_heat_demand":{
                 "description":"Parameters.",
                 "type":"object",
                 "required":[
                    "zone",
                    "value"
                 ],
                 "properties":{
                    "zone":{
                       "description":"Zone number.",
                       "type":"integer",
                       "example":1
                    },
                    "value":{
                       "description":"Heat demand value.",
                       "type":"boolean",
                       "example":true
                    }
                 }
              }
           }
        },
        "DeviceCommand.Modbus.GalmetPrimaHeatPump.SetCoolDemand":{
           "description":"Command: `set_cool_demand`.<br>Set cool demand for requested zone in heat pump.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_cool_demand"
           ],
           "properties":{
              "set_cool_demand":{
                 "description":"Parameters.",
                 "type":"object",
                 "required":[
                    "zone",
                    "value"
                 ],
                 "properties":{
                    "zone":{
                       "description":"Zone number.",
                       "type":"integer",
                       "example":1
                    },
                    "value":{
                       "description":"Cool demand value.",
                       "type":"boolean",
                       "example":true
                    }
                 }
              }
           }
        },
        "DeviceCommand.Modbus.GalmetPrimaHeatPump.SetHeatCurve":{
           "description":"Command: `set_heat_curve`.<br>Set requested heat curve for requested zone in heat pump.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_heat_curve"
           ],
           "properties":{
              "set_heat_curve":{
                 "description":"Parameters.",
                 "type":"object",
                 "required":[
                    "zone",
                    "value"
                 ],
                 "properties":{
                    "zone":{
                       "description":"Zone number.",
                       "type":"integer",
                       "example":1
                    },
                    "value":{
                       "description":"Heat curve value.",
                       "type":"integer",
                       "example":4
                    }
                 }
              }
           }
        },
        "DeviceCommand.Modbus.GalmetPrimaHeatPump.SetHeatCurveEnabled":{
           "description":"Command: `set_heat_curve_enabled`.<br>Enable/Disable heat curve mode for requested zone in heat pump.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_heat_curve_enabled"
           ],
           "properties":{
              "set_heat_curve_enabled":{
                 "description":"Parameters.",
                 "type":"object",
                 "required":[
                    "zone",
                    "value"
                 ],
                 "properties":{
                    "zone":{
                       "description":"Zone number.",
                       "type":"integer",
                       "example":1
                    },
                    "value":{
                       "description":"Enable/Disable heat curve mode.",
                       "type":"boolean",
                       "example":false
                    }
                 }
              }
           }
        },
        "DeviceCommand.Modbus.GalmetPrimaHeatPump.SetElectricHeaterActive":{
           "description":"Command: `set_electric_heater_active`.<br>Enable/Disable electric heater in heat pump.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_electric_heater_active"
           ],
           "properties":{
              "set_electric_heater_active":{
                 "description":"Enable/Disable electric heater.",
                 "type":"boolean",
                 "example":true
              }
           }
        },
        "DeviceCommand.Modbus.GalmetPrimaMainDhw.SetTargetTemperature":{
           "description":"Command: `set_target_temperature`.<br>Change target temperature for DHW.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_target_temperature"
           ],
           "properties":{
              "set_target_temperature":{
                 "description":"Target temperature in Celsius.",
                 "type":"integer",
                 "example":45
              }
           }
        },
        "DeviceCommand.Modbus.GalmetPrimaMainDhw.SetDhwDemand":{
           "description":"Command: `set_dhw_demand`.<br>Set DHW demand.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_dhw_demand"
           ],
           "properties":{
              "set_dhw_demand":{
                 "description":"DHW demand value.",
                 "type":"boolean",
                 "example":true
              }
           }
        },
        "DeviceCommand.Modbus.GalmetPrimaMainDhw.SetElectricHeaterActive":{
           "description":"Command: `set_electric_heater_active`.<br>Enable/Disable DHW electric heater.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_electric_heater_active"
           ],
           "properties":{
              "set_electric_heater_active":{
                 "description":"Enable/Disable DHW electric heater.",
                 "type":"boolean",
                 "example":true
              }
           }
        },
        "DeviceCommand.Modbus.GalmetPrimaMainDhw.SetCirculationPumpEnabled":{
           "description":"Command: `set_circulation_pump_enabled`.<br>Enable/Disable cirulation pump for DHW.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_circulation_pump_enabled"
           ],
           "properties":{
              "set_circulation_pump_enabled":{
                 "description":"Enable/Disable circulation pump.",
                 "type":"boolean",
                 "example":true
              }
           }
        },
        "DeviceCommand.Modbus.KaisaiKHCHeatPump.SetWorkMode":{
           "description":"Command: `set_work_mode`.<br>Change work mode for heat pump.<br>Body is <b>required</b>.<br>Parameter is work mode, one of following: `cooling`, `heating`, `automatic`.",
           "type":"object",
           "required":[
              "set_work_mode"
           ],
           "properties":{
              "set_work_mode":{
                 "description":"Mode. Possible values: `heating`, `cooling`, `automatic`.",
                 "type":"string",
                 "enum":[
                    "heating",
                    "cooling",
                    "automatic"
                 ],
                 "example":"heating"
              }
           }
        },
        "DeviceCommand.Modbus.KaisaiKHCHeatPump.SetFixedTargetTemperature":{
           "description":"Command: `set_fixed_target_temperature`.<br>Change fixed target temperature for requested zone in heat pump.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_fixed_target_temperature"
           ],
           "properties":{
              "set_fixed_target_temperature":{
                 "description":"Parameters.",
                 "type":"object",
                 "required":[
                    "zone",
                    "value"
                 ],
                 "properties":{
                    "zone":{
                       "description":"Zone number.",
                       "type":"integer",
                       "example":1
                    },
                    "value":{
                       "description":"Target temperature in Celsius.",
                       "type":"integer",
                       "example":45
                    }
                 }
              }
           }
        },
        "DeviceCommand.Modbus.KaisaiKHCHeatPump.SetHeatDemand":{
           "description":"Command: `set_heat_demand`.<br>Set heat demand for requested zone in heat pump.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_heat_demand"
           ],
           "properties":{
              "set_heat_demand":{
                 "description":"Parameters.",
                 "type":"object",
                 "required":[
                    "zone",
                    "value"
                 ],
                 "properties":{
                    "zone":{
                       "description":"Zone number.",
                       "type":"integer",
                       "example":1
                    },
                    "value":{
                       "description":"Heat demand value.",
                       "type":"boolean",
                       "example":true
                    }
                 }
              }
           }
        },
        "DeviceCommand.Modbus.KaisaiKHCHeatPump.SetCoolDemand":{
           "description":"Command: `set_cool_demand`.<br>Set cool demand for requested zone in heat pump.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_cool_demand"
           ],
           "properties":{
              "set_cool_demand":{
                 "description":"Parameters.",
                 "type":"object",
                 "required":[
                    "zone",
                    "value"
                 ],
                 "properties":{
                    "zone":{
                       "description":"Zone number.",
                       "type":"integer",
                       "example":1
                    },
                    "value":{
                       "description":"Cool demand value.",
                       "type":"boolean",
                       "example":true
                    }
                 }
              }
           }
        },
        "DeviceCommand.Modbus.KaisaiKHCHeatPump.SetHeatCurve":{
           "description":"Command: `set_heat_curve`.<br>Set requested heat curve for requested zone in heat pump.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_heat_curve"
           ],
           "properties":{
              "set_heat_curve":{
                 "description":"Parameters.",
                 "type":"object",
                 "required":[
                    "zone",
                    "value"
                 ],
                 "properties":{
                    "zone":{
                       "description":"Zone number.",
                       "type":"integer",
                       "example":1
                    },
                    "value":{
                       "description":"Heat curve value.",
                       "type":"integer",
                       "example":4
                    }
                 }
              }
           }
        },
        "DeviceCommand.Modbus.KaisaiKHCHeatPump.SetHeatCurveEnabled":{
           "description":"Command: `set_heat_curve_enabled`.<br>Enable/Disable heat curve mode for requested zone in heat pump.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_heat_curve_enabled"
           ],
           "properties":{
              "set_heat_curve_enabled":{
                 "description":"Parameters.",
                 "type":"object",
                 "required":[
                    "zone",
                    "value"
                 ],
                 "properties":{
                    "zone":{
                       "description":"Zone number.",
                       "type":"integer",
                       "example":1
                    },
                    "value":{
                       "description":"Enable/Disable heat curve mode.",
                       "type":"boolean",
                       "example":false
                    }
                 }
              }
           }
        },
        "DeviceCommand.Modbus.KaisaiKHCHeatPump.SetElectricHeaterActive":{
           "description":"Command: `set_electric_heater_active`.<br>Enable/Disable electric heater in heat pump.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_electric_heater_active"
           ],
           "properties":{
              "set_electric_heater_active":{
                 "description":"Enable/Disable electric heater.",
                 "type":"boolean",
                 "example":true
              }
           }
        },
        "DeviceCommand.Modbus.KaisaiKHCMainDhw.SetTargetTemperature":{
           "description":"Command: `set_target_temperature`.<br>Change target temperature for DHW.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_target_temperature"
           ],
           "properties":{
              "set_target_temperature":{
                 "description":"Target temperature in Celsius.",
                 "type":"integer",
                 "example":45
              }
           }
        },
        "DeviceCommand.Modbus.KaisaiKHCMainDhw.SetDhwDemand":{
           "description":"Command: `set_dhw_demand`.<br>Set DHW demand.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_dhw_demand"
           ],
           "properties":{
              "set_dhw_demand":{
                 "description":"DHW demand value.",
                 "type":"boolean",
                 "example":true
              }
           }
        },
        "DeviceCommand.Modbus.KaisaiKHCMainDhw.SetElectricHeaterActive":{
           "description":"Command: `set_electric_heater_active`.<br>Enable/Disable DHW electric heater.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_electric_heater_active"
           ],
           "properties":{
              "set_electric_heater_active":{
                 "description":"Enable/Disable DHW electric heater.",
                 "type":"boolean",
                 "example":true
              }
           }
        },
        "DeviceCommand.Modbus.KaisaiKHCMainDhw.SetCirculationPumpEnabled":{
           "description":"Command: `set_circulation_pump_enabled`.<br>Enable/Disable cirulation pump for DHW.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_circulation_pump_enabled"
           ],
           "properties":{
              "set_circulation_pump_enabled":{
                 "description":"Enable/Disable circulation pump.",
                 "type":"boolean",
                 "example":true
              }
           }
        },
        "DeviceCommand.Modbus.SolarEdgeInverter.TurnOn":{
           "description":"Command: `turn_on`.<br>Turn on the inverter - set active power limit to 100%.<br>Body is <b>ignored</b>.<br/> **NOTE:** It is allowed to change only when `advanced_power_control_enabled` is set to `true` and `reactive_power_config` to `rrcr` and  device has label `power_control_support`."
        },
        "DeviceCommand.Modbus.SolarEdgeInverter.TurnOff":{
           "description":"Command: `turn_off`.<br>Turn off the inverter - set active power limit to 0%.<br>Body is <b>ignored</b>.<br/> **NOTE:** It is allowed to change only when `advanced_power_control_enabled` is set to `true` and `reactive_power_config` to `rrcr` and  device has label `power_control_support`."
        },
        "DeviceCommand.Modbus.SolisInverter.TurnOn":{
           "description":"Command: `turn_on`.<br>Turn on the inverter - set active power limit to 100%.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.Modbus.SolisInverter.TurnOff":{
           "description":"Command: `turn_off`.<br>Turn off the inverter - set active power limit to 0%.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.Modbus.SolaxInverter.TurnOn":{
           "description":"Command: `turn_on`.<br>Turn on the inverter - set active power limit to 100%.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.Modbus.SolaxInverter.TurnOff":{
           "description":"Command: `turn_off`.<br>Turn off the inverter - set active power limit to 0%.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.Modbus.AlphaInnotecHeatPump.SetFixedHeatingTargetTemperature":{
           "description":"Command: `set_fixed_heating_target_temperature`.<br>Changes `fixed_heating_target_temperature` parameter.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_fixed_heating_target_temperature"
           ],
           "properties":{
              "set_fixed_heating_target_temperature":{
                 "type":"integer",
                 "example":250
              }
           }
        },
        "DeviceCommand.Modbus.AlphaInnotecHeatPump.SetHeatCurveEndpoint":{
           "description":"Command: `set_heat_curve_end_point`.<br>Changes `heat_curve_end_point` parameter.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_heat_curve_end_point"
           ],
           "properties":{
              "set_heat_curve_end_point":{
                 "type":"integer",
                 "example":300
              }
           }
        },
        "DeviceCommand.Modbus.AlphaInnotecHeatPump.SetHeatCurveParallelShift":{
           "description":"Command: `set_heat_curve_parallel_shift`.<br>Changes `heat_curve_parallel_shift` parameter.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_heat_curve_parallel_shift"
           ],
           "properties":{
              "set_heat_curve_parallel_shift":{
                 "type":"integer",
                 "example":200
              }
           }
        },
        "DeviceCommand.Modbus.AlphaInnotecMainDHW.SetTargetTemperature":{
           "description":"Command: `set_target_temperature`.<br>Changes `target_temperature` parameter.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_target_temperature"
           ],
           "properties":{
              "set_target_temperature":{
                 "type":"integer",
                 "example":350
              }
           }
        },
        "DeviceCommand.Modbus.DaikinAlthermaHeatPump.SetHeatingTargetTemperature":{
           "description":"Command: `set_heating_target_temperature`.<br>Changes `heating_target_temperature` parameter.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_heating_target_temperature"
           ],
           "properties":{
              "set_heating_target_temperature":{
                 "description":"Target temperature in Celsius.",
                 "type":"integer",
                 "example":240
              }
           }
        },
        "DeviceCommand.Modbus.DaikinAlthermaHeatPump.SetColingTargetTemperature":{
           "description":"Command: `set_cooling_target_temperature`.<br>Changes `cooling_target_temperature` parameter.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_cooling_target_temperature"
           ],
           "properties":{
              "set_cooling_target_temperature":{
                 "description":"Target temperature in Celsius.",
                 "type":"integer",
                 "example":210
              }
           }
        },
        "DeviceCommand.Modbus.DaikinAlthermaHeatPump.SetHeatingWaterTargetTemperature":{
           "description":"Command: `set_heating_water_target_temperature`.<br>Changes `heating_water_target_temperature` parameter.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_heating_water_target_temperature"
           ],
           "properties":{
              "set_heating_water_target_temperature":{
                 "description":"Target temperature in Celsius.",
                 "type":"integer",
                 "example":35
              }
           }
        },
        "DeviceCommand.Modbus.DaikinAlthermaHeatPump.SetCoolingWaterTargetTemperature":{
           "description":"Command: `set_cooling_water_target_temperature`.<br>Changes `cooling_water_target_temperature` parameter.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_cooling_water_target_temperature"
           ],
           "properties":{
              "set_cooling_water_target_temperature":{
                 "description":"Target temperature in Celsius.",
                 "type":"integer",
                 "example":15
              }
           }
        },
        "DeviceCommand.Modbus.DaikinAlthermaHeatPump.SetWeatherDependentModeHeatingSlopeOffset":{
           "description":"Command: `set_weather_dependent_mode_heating_slope_offset`.<br>Changes `weather_dependent_mode_heating_slope_offset` parameter.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_weather_dependent_mode_heating_slope_offset"
           ],
           "properties":{
              "set_weather_dependent_mode_heating_slope_offset":{
                 "description":"Slope offset value.",
                 "type":"integer",
                 "example":5
              }
           }
        },
        "DeviceCommand.Modbus.DaikinAlthermaHeatPump.SetWeatherDependentModeCoolingSlopeOffset":{
           "description":"Command: `set_weather_dependent_mode_cooling_slope_offset`.<br>Changes `weather_dependent_mode_cooling_slope_offset` parameter.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_weather_dependent_mode_cooling_slope_offset"
           ],
           "properties":{
              "set_weather_dependent_mode_cooling_slope_offset":{
                 "description":"Slope offset value.",
                 "type":"integer",
                 "example":-2
              }
           }
        },
        "DeviceCommand.Modbus.DaikinAlthermaMainDHW.SetTargetTemperature":{
           "description":"Command: `set_target_temperature`.<br>Changes `target_temperature` parameter.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_target_temperature"
           ],
           "properties":{
              "set_target_temperature":{
                 "description":"Target temperature in Celsius.",
                 "type":"integer",
                 "example":350
              }
           }
        },
        "DeviceCommand.Modbus.EcoAirMainDHW.SetTargetTemperature":{
           "description":"Command: `set_target_temperature`.<br>Changes `target_temperature` parameter.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_target_temperature"
           ],
           "properties":{
              "set_target_temperature":{
                 "description":"Target temperature in Celsius.",
                 "type":"integer",
                 "example":240
              }
           }
        },
        "DeviceCommand.Modbus.EcoGeoHeatPump.SetFixedHeatingTargetTemperature":{
           "description":"Command: `set_fixed_heating_target_temperature`.<br>Changes `fixed_heating_target_temperature` parameter.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_fixed_heating_target_temperature"
           ],
           "properties":{
              "set_fixed_heating_target_temperature":{
                 "description":"Target temperature in Celsius.",
                 "type":"integer",
                 "example":440
              }
           }
        },
        "DeviceCommand.Modbus.EcoGeoHeatPump.SetFixedCoolingTargetTemperature":{
           "description":"Command: `set_fixed_cooling_target_temperature`.<br>Changes `set_fixed_cooling_target_temperaturefixed_cooling_target_temperature` parameter.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_fixed_cooling_target_temperature"
           ],
           "properties":{
              "set_fixed_cooling_target_temperature":{
                 "description":"Target temperature in Celsius.",
                 "type":"integer",
                 "example":220
              }
           }
        },
        "DeviceCommand.Modbus.EcoGeoHeatPump.SetHeatCurveBasePoint":{
           "description":"Command: `set_heat_curve_base_point`.<br>Changes `heat_curve_base_point` parameter.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_heat_curve_base_point"
           ],
           "properties":{
              "set_heat_curve_base_point":{
                 "description":"Base point value.",
                 "type":"integer",
                 "example":30
              }
           }
        },
        "DeviceCommand.Modbus.EcoGeoHeatPump.SetHeatCurveEndPoint":{
           "description":"Command: `set_heat_curve_end_point`.<br>Changes `heat_curve_end_point` parameter.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_heat_curve_end_point"
           ],
           "properties":{
              "set_heat_curve_end_point":{
                 "description":"End point value.",
                 "type":"integer",
                 "example":11
              }
           }
        },
        "DeviceCommand.Modbus.EcoGeoHeatPump.SetHeatCurveEndPointOutside":{
           "description":"Command: `set_heat_curve_end_point_outside`.<br>Changes `heat_curve_end_point_outside` parameter.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_heat_curve_end_point_outside"
           ],
           "properties":{
              "set_heat_curve_end_point_outside":{
                 "description":"End point outside value.",
                 "type":"integer",
                 "example":-4
              }
           }
        },
        "DeviceCommand.Modbus.EcoGeoMainDHW.SetTargetTemperature":{
           "description":"Command: `set_target_temperature`.<br>Changes `target_temperature` parameter.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_target_temperature"
           ],
           "properties":{
              "set_target_temperature":{
                 "description":"Target temperature in Celsius.",
                 "type":"integer",
                 "example":350
              }
           }
        },
        "DeviceCommand.Modbus.EcoGeoHighPowerHeatPump.SetFixedHeatingTargetTemperature":{
           "description":"Command: `set_fixed_heating_target_temperature`.<br>Changes `fixed_heating_target_temperature` parameter.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_fixed_heating_target_temperature"
           ],
           "properties":{
              "set_fixed_heating_target_temperature":{
                 "description":"Target temperature in Celsius.",
                 "type":"integer",
                 "example":440
              }
           }
        },
        "DeviceCommand.Modbus.EcoGeoHighPowerHeatPump.SetFixedCoolingTargetTemperature":{
           "description":"Command: `set_fixed_cooling_target_temperature`.<br>Changes `fixed_cooling_target_temperature` parameter.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_fixed_cooling_target_temperature"
           ],
           "properties":{
              "set_fixed_cooling_target_temperature":{
                 "description":"Target temperature in Celsius.",
                 "type":"integer",
                 "example":220
              }
           }
        },
        "DeviceCommand.Modbus.EcoGeoHighPowerHeatPump.SetHeatCurveBasePoint":{
           "description":"Command: `set_heat_curve_base_point`.<br>Changes `heat_curve_base_point` parameter.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_heat_curve_base_point"
           ],
           "properties":{
              "set_heat_curve_base_point":{
                 "description":"Base point value.",
                 "type":"integer",
                 "example":30
              }
           }
        },
        "DeviceCommand.Modbus.EcoGeoHighPowerHeatPump.SetHeatCurveEndPoint":{
           "description":"Command: `set_heat_curve_end_point`.<br>Changes `heat_curve_end_point` parameter.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_heat_curve_end_point"
           ],
           "properties":{
              "set_heat_curve_end_point":{
                 "description":"End point value.",
                 "type":"integer",
                 "example":11
              }
           }
        },
        "DeviceCommand.Modbus.EcoGeoHighPowerHeatPump.SetHeatCurveEndPointOutside":{
           "description":"Command: `set_heat_curve_end_point_outside`.<br>Changes `heat_curve_end_point_outside` parameter.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_heat_curve_end_point_outside"
           ],
           "properties":{
              "set_heat_curve_end_point_outside":{
                 "description":"End point outside value.",
                 "type":"integer",
                 "example":-4
              }
           }
        },
        "DeviceCommand.Modbus.EcoGeoHighPowerMainDHW.SetTargetTemperature":{
           "description":"Command: `set_target_temperature`.<br>Changes `target_temperature` parameter.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_target_temperature"
           ],
           "properties":{
              "set_target_temperature":{
                 "description":"Target temperature in Celsius.",
                 "type":"integer",
                 "example":350
              }
           }
        },
        "DeviceCommand.Modbus.HeatEcoHeatPump.SetFixedHeatingTargetTemperature":{
           "description":"Command: `set_fixed_heating_target_temperature`.<br>Changes `fixed_heating_target_temperature` parameter.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_fixed_heating_target_temperature"
           ],
           "properties":{
              "set_fixed_heating_target_temperature":{
                 "description":"Target temperature in Celsius.",
                 "type":"integer",
                 "example":700
              }
           }
        },
        "DeviceCommand.Modbus.HeatEcoHeatPump.SetFixedCoolingTargetTemperature":{
           "description":"Command: `set_fixed_cooling_target_temperature`.<br>Changes `fixed_cooling_target_temperature` parameter.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_fixed_cooling_target_temperature"
           ],
           "properties":{
              "set_fixed_cooling_target_temperature":{
                 "description":"Target temperature in Celsius.",
                 "type":"integer",
                 "example":200
              }
           }
        },
        "DeviceCommand.Modbus.HeatEcoHeatPump.SetBottomHisteresis":{
           "description":"Command: `set_bottom_hysteresis`.<br>Changes `bottom_hysteresis` parameter.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_bottom_hysteresis"
           ],
           "properties":{
              "set_bottom_hysteresis":{
                 "description":"Bottom hysteresis value.",
                 "type":"integer",
                 "example":10
              }
           }
        },
        "DeviceCommand.Modbus.HeatEcoHeatPump.SetTopHisteresis":{
           "description":"Command: `set_top_hysteresis`.<br>Changes `top_hysteresis` parameter.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_top_hysteresis"
           ],
           "properties":{
              "set_top_hysteresis":{
                 "description":"Top hysteresis value.",
                 "type":"integer",
                 "example":20
              }
           }
        },
        "DeviceCommand.Modbus.HeatEcoMainDHW.SetTargetTemperature":{
           "description":"Command: `set_target_temperature`.<br>Changes `target_temperature` parameter.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_target_temperature"
           ],
           "properties":{
              "set_target_temperature":{
                 "description":"Target temperature in Celsius.",
                 "type":"integer",
                 "example":450
              }
           }
        },
        "DeviceCommand.Modbus.HeatEcoMainDHW.SetBottomHisteresis":{
           "description":"Command: `set_bottom_hysteresis`.<br>Changes `bottom_hysteresis` parameter.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_bottom_hysteresis"
           ],
           "properties":{
              "set_bottom_hysteresis":{
                 "description":"Bottom hysteresis value.",
                 "type":"integer",
                 "example":10
              }
           }
        },
        "DeviceCommand.Modbus.HeatEcoMainDHW.SetTopHisteresis":{
           "description":"Command: `set_top_hysteresis`.<br>Changes `top_hysteresis` parameter.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_top_hysteresis"
           ],
           "properties":{
              "set_top_hysteresis":{
                 "description":"Top hysteresis value.",
                 "type":"integer",
                 "example":20
              }
           }
        },
        "DeviceCommand.Modbus.HeatcompHeatPump.SetFixedHeatingTargetTemperature":{
           "description":"Command: `set_fixed_heating_target_temperature`.<br>Changes `fixed_heating_target_temperature` parameter.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_fixed_heating_target_temperature"
           ],
           "properties":{
              "set_fixed_heating_target_temperature":{
                 "description":"Target temperature in Celsius.",
                 "type":"integer",
                 "example":100
              }
           }
        },
        "DeviceCommand.Modbus.HeatcompHeatPump.SetFixedCoolingTargetTemperature":{
           "description":"Command: `set_fixed_cooling_target_temperature`.<br>Changes `fixed_cooling_target_temperature` parameter.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_fixed_cooling_target_temperature"
           ],
           "properties":{
              "set_fixed_cooling_target_temperature":{
                 "description":"Target temperature in Celsius.",
                 "type":"integer",
                 "example":100
              }
           }
        },
        "DeviceCommand.Modbus.HeatcompHeatPump.SetHeatCurveSlope":{
           "description":"Command: `set_heat_curve_slope`.<br>Changes `heat_curve_slope` parameter.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_heat_curve_slope"
           ],
           "properties":{
              "set_heat_curve_slope":{
                 "description":"Slope value.",
                 "type":"integer",
                 "example":10
              }
           }
        },
        "DeviceCommand.Modbus.HeatcompHeatPump.SetHeatCurveOffset":{
           "description":"Command: `set_heat_curve_offset`.<br>Changes `heat_curve_offset` parameter.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_heat_curve_offset"
           ],
           "properties":{
              "set_heat_curve_offset":{
                 "description":"Offset value.",
                 "type":"integer",
                 "example":20
              }
           }
        },
        "DeviceCommand.Modbus.HeatcompMainDHW.SetTargetTemperature":{
           "description":"Command: `set_target_temperature`.<br>Changes `target_temperature` parameter.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_target_temperature"
           ],
           "properties":{
              "set_target_temperature":{
                 "description":"Target temperature in Celsius.",
                 "type":"integer",
                 "example":450
              }
           }
        },
        "DeviceCommand.Modbus.IthoHeatPump.SetFixedHeatingTargetTemperature":{
           "description":"Command: `set_fixed_heating_target_temperature`.<br>Changes `fixed_heating_target_temperature` parameter.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_fixed_heating_target_temperature"
           ],
           "properties":{
              "set_fixed_heating_target_temperature":{
                 "description":"Target temperature in Celsius.",
                 "type":"integer",
                 "example":50
              }
           }
        },
        "DeviceCommand.Modbus.IthoHeatPump.SetHeatCurveEndPoint":{
           "description":"Command: `set_heat_curve_end_point`.<br>Changes `heat_curve_end_point` parameter.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_heat_curve_end_point"
           ],
           "properties":{
              "set_heat_curve_end_point":{
                 "description":"End point value.",
                 "type":"integer",
                 "example":210
              }
           }
        },
        "DeviceCommand.Modbus.IthoHeatPump.SetHeatCurveBasePoint":{
           "description":"Command: `set_heat_curve_base_point`.<br>Changes `heat_curve_base_point` parameter.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_heat_curve_base_point"
           ],
           "properties":{
              "set_heat_curve_base_point":{
                 "description":"Base point value.",
                 "type":"integer",
                 "example":30
              }
           }
        },
        "DeviceCommand.Modbus.IthoMainDHW.SetTargetTemperature":{
           "description":"Command: `set_target_temperature`.<br>Changes `target_temperature` parameter.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_target_temperature"
           ],
           "properties":{
              "set_target_temperature":{
                 "description":"Target temperature in Celsius.",
                 "type":"integer",
                 "example":350
              }
           }
        },
        "DeviceCommand.Modbus.IthoMainDHW.SetHysteresis":{
           "description":"Command: `set_hysteresis`.<br>Changes `hysteresis` parameter.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_hysteresis"
           ],
           "properties":{
              "set_hysteresis":{
                 "description":"Hysteresis value.",
                 "type":"integer",
                 "example":90
              }
           }
        },
        "DeviceCommand.Modbus.MitsubishiEcodanHeatPump.SetZoneTargetTemperature":{
           "description":"Command: `set_zone_target_temperature`.<br>Changes `target_temperature` parameter for requested zone.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_zone_target_temperature"
           ],
           "properties":{
              "set_zone_target_temperature":{
                 "description":"Parameters.",
                 "type":"object",
                 "required":[
                    "zone_1",
                    "zone_2"
                 ],
                 "properties":{
                    "zone_1":{
                       "description":"Zone 1 target temperature in Celsius.",
                       "type":"integer",
                       "example":240
                    },
                    "zone_2":{
                       "description":"Zone 2 target temperature in Celsius.",
                       "type":"integer",
                       "example":440
                    }
                 }
              }
           }
        },
        "DeviceCommand.Modbus.MitsubishiEcodanMainDHW.SetTargetTemperature":{
           "description":"Command: `set_target_temperature`.<br>Changes `target_temperature` parameter.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_target_temperature"
           ],
           "properties":{
              "set_target_temperature":{
                 "description":"Target temperature in Celsius.",
                 "type":"integer",
                 "example":350
              }
           }
        },
        "DeviceCommand.Modbus.RemehaElgaACEHeatPump.SetFixedHeatingTargetTemperature":{
           "description":"Command: `set_fixed_heating_target_temperature`.<br>Changes `fixed_heating_target_temperature` parameter.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_fixed_heating_target_temperature"
           ],
           "properties":{
              "set_fixed_heating_target_temperature":{
                 "description":"Target temperature in Celsius.",
                 "type":"integer",
                 "example":250
              }
           }
        },
        "DeviceCommand.Modbus.AmpowrAmpihomeBattery.Charge":{
           "description":"Command: `charge`.<br>Sends request to force charge the battery.<br>Body is <b>ignored</b>. **NOTE** Can only be changed when `inverter_working_mode` is `peak_shift`. Device has label `battery_charge_support` when available."
        },
        "DeviceCommand.Modbus.AmpowrAmpihomeBattery.Discharge":{
           "description":"Command: `discharge`.<br>Sends request to force discharge the battery.<br>Body is <b>ignored</b>. **NOTE** Can only be changed when `inverter_working_mode` is `peak_shift`. Device has label `battery_charge_support` when available."
        },
        "DeviceCommand.Modbus.AmpowrAmpihomeBattery.StopForcedState":{
           "description":"Command: `stop_forced_state`.<br>Sends request to stop any forced state of the battery.<br>Body is <b>ignored</b>. **NOTE** Can only be changed when `inverter_working_mode` is `peak_shift`. Device has label `battery_charge_support` when available."
        },
        "DeviceCommand.Modbus.AmpowrAmpihomeBattery.Stop":{
           "description":"Command: `stop`.<br>Sends request to stop any forced state of the battery.<br>Body is <b>ignored</b>. **NOTE** Can only be changed when `inverter_working_mode` is `peak_shift`. Device has label `battery_charge_support` when available."
        },
        "DeviceCommand.Modbus.HeatcompHCEV01.StartCharge":{
           "description":"Command: `start_charge`.<br>Sends request to car charger to start charge.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.Modbus.HeatcompHCEV01.StopCharge":{
           "description":"Command: `stop_charge`.<br>Sends request to car charger to stop charge.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.Modbus.RemehaElgaACEHeatPump.EnableSmartGrid":{
           "description":"Command: `enable_smart_grid`.<br>Sends request to heat pump device to enable smart grid work mode. Adds the label `smart_grid_support`.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.Modbus.HeatcompBattery.SetChargeCurrentLimit":{
           "description":"Command: `set_charge_current_limit`.<br>Calls battery to set charging current limit.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_charge_current_limit"
           ],
           "properties":{
              "set_charge_current_limit":{
                 "description":"Charging current limit in milliamperes.",
                 "type":"integer",
                 "minimum":0,
                 "maximum":150000,
                 "example":1500
              }
           }
        },
        "DeviceCommand.Modbus.HeatcompBattery.Charge":{
           "description":"Command: `charge`.<br>Calls battery to charge with given power.<br>Body is <b>required</b>.<br>First parameter is `active_power` in mW (minimum is 0 (0W), maximum is 65535000 (65535W)).<br>**NOTE** Can only be changed when `charge_work_mode` is `manual`. Device has label `battery_charge_support` when available.",
           "type":"object",
           "required":[
              "charge"
           ],
           "properties":{
              "charge":{
                 "description":"Array of values: active power.",
                 "type":"array",
                 "items":{
                    "type":"number"
                 },
                 "example":[
                    10000
                 ]
              }
           }
        },
        "DeviceCommand.Modbus.HeatcompBattery.Discharge":{
           "description":"Command: `discharge`.<br>Calls battery to discharge with given power.<br>Body is <b>required</b>.<br>First parameter is `active_power` in mW (minimum is 0 (0W), maximum is 65535000 (65535W)).<br>**NOTE** Can only be changed when `charge_work_mode` is `manual`. Device has label `battery_charge_support` when available.",
           "type":"object",
           "required":[
              "discharge"
           ],
           "properties":{
              "discharge":{
                 "description":"Array of values: active power.",
                 "type":"array",
                 "items":{
                    "type":"number"
                 },
                 "example":[
                    10000
                 ]
              }
           }
        },
        "DeviceCommand.Modbus.HeatcompBattery.Stop":{
           "description":"Command: `stop`.<br>Stops the forced charging/discharging of the device.<br>Body is <b>ignored</b>. **NOTE** Can only be changed when `charge_work_mode` is `manual`. Device has label `battery_charge_support` when available."
        },
        "DeviceCommand.Modbus.HuaweiSUN2000Battery.Charge":{
           "description":"Command: `charge`.<br>Calls battery to charge during given period of time.<br>Body is <b>required</b>.<br>First parameter is `active_power` in mW (minimum is 10000 (10W), maximum value from `maximum_charging_power` parameter), second is `duration_time` in seconds, maximum 86400. **NOTE** Available when device has label `battery_charge_support`",
           "type":"object",
           "required":[
              "charge"
           ],
           "properties":{
              "charge":{
                 "description":"Array of two values: active power and duration time.",
                 "type":"array",
                 "items":{
                    "type":"number"
                 },
                 "example":[
                    10000,
                    3600
                 ]
              }
           }
        },
        "DeviceCommand.Modbus.HuaweiSUN2000Battery.Discharge":{
           "description":"Command: `discharge`.<br>Calls battery to discharge during given period of time.<br>Body is <b>required</b>.<br>First parameter is `active_power` in mW (minimum is 10000 (10W), maximum value from `maximum_discharging_power` parameter), second is `duration_time` in seconds, maximum 86400. **NOTE** Available when device has label `battery_charge_support`",
           "type":"object",
           "required":[
              "discharge"
           ],
           "properties":{
              "discharge":{
                 "description":"Array of two values: active power and duration time.",
                 "type":"array",
                 "items":{
                    "type":"number"
                 },
                 "example":[
                    10000,
                    3600
                 ]
              }
           }
        },
        "DeviceCommand.Modbus.HuaweiSUN2000Battery.Stop":{
           "description":"Command: `stop`.<br>Stops the forced charging/discharging of the device.<br>Body is <b>ignored</b>. **NOTE** Available when device has label `battery_charge_support`."
        },
        "DeviceCommand.Modbus.SolaxX1Battery.Stop":{
           "description":"Command: `stop`.<br>Disables the remote control of battery.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.Modbus.SolaxX3Battery.Stop":{
           "description":"Command: `stop`.<br>Disables the remote control of battery.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.Modbus.OneOf":{
           "oneOf":[
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Any.EnqueueAction"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Any.CancelAction"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Any.ClearActions"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.EcoAirHeatPump.ResetAlarms"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.EcoGeoHeatPump.ResetAlarms"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.RemehaElgaACEHeatPump.ResetAlarms"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.SolaxX1Battery.Charge"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.SolaxX1Battery.Discharge"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.SolaxX1Battery.Stop"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.SolaxX3Battery.Charge"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.SolaxX3Battery.Discharge"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.SolaxX3Battery.Stop"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.GoodWeMtSmtInverter.TurnOn"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.GoodWeMtSmtInverter.TurnOff"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.GoodWeMtSmtInverter.LimitActivePower"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.GoodWeSdtMsDnsXsInverter.TurnOn"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.GoodWeSdtMsDnsXsInverter.TurnOff"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.GoodWeSdtMsDnsXsInverter.LimitActivePower"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.HuaweiSUN2000Inverter.TurnOn"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.HuaweiSUN2000Inverter.TurnOff"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.HuaweiSUN2000Inverter.LimitActivePower"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.HuaweiSUN2000Inverter.SetPowerControlMode"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.HuaweiSUN2000Battery.Charge"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.HuaweiSUN2000Battery.Discharge"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.HuaweiSUN2000Battery.Stop"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.AlphaInnotecHeatPump.ResetAlarms"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.AmpowrAmpiHomeInverter.LimitActivePower"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.HeatcompHCEV01CarCharger.SetCurrentLimit"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.HeatcompHCEV01CarCharger.SetPostponeTime"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.HeatcompHCEV01CarCharger.SetChargeTimeLeft"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.GalmetPrimaHeatPump.SetWorkMode"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.GalmetPrimaHeatPump.SetFixedTargetTemperature"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.GalmetPrimaHeatPump.SetHeatDemand"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.GalmetPrimaHeatPump.SetCoolDemand"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.GalmetPrimaHeatPump.SetHeatCurve"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.GalmetPrimaHeatPump.SetHeatCurveEnabled"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.GalmetPrimaHeatPump.SetElectricHeaterActive"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.GalmetPrimaMainDhw.SetTargetTemperature"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.GalmetPrimaMainDhw.SetDhwDemand"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.GalmetPrimaMainDhw.SetElectricHeaterActive"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.GalmetPrimaMainDhw.SetCirculationPumpEnabled"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.KaisaiKHCHeatPump.SetWorkMode"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.KaisaiKHCHeatPump.SetFixedTargetTemperature"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.KaisaiKHCHeatPump.SetHeatDemand"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.KaisaiKHCHeatPump.SetCoolDemand"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.KaisaiKHCHeatPump.SetHeatCurve"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.KaisaiKHCHeatPump.SetHeatCurveEnabled"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.KaisaiKHCHeatPump.SetElectricHeaterActive"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.KaisaiKHCMainDhw.SetTargetTemperature"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.KaisaiKHCMainDhw.SetDhwDemand"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.KaisaiKHCMainDhw.SetElectricHeaterActive"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.KaisaiKHCMainDhw.SetCirculationPumpEnabled"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.SolarEdgeInverter.TurnOn"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.SolarEdgeInverter.TurnOff"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.SolisInverter.TurnOn"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.SolisInverter.TurnOff"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.SolaxInverter.TurnOn"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.SolaxInverter.TurnOff"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.AlphaInnotecHeatPump.SetFixedHeatingTargetTemperature"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.AlphaInnotecHeatPump.SetHeatCurveEndpoint"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.AlphaInnotecHeatPump.SetHeatCurveParallelShift"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.AlphaInnotecMainDHW.SetTargetTemperature"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.DaikinAlthermaHeatPump.SetHeatingTargetTemperature"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.DaikinAlthermaHeatPump.SetColingTargetTemperature"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.DaikinAlthermaHeatPump.SetHeatingWaterTargetTemperature"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.DaikinAlthermaHeatPump.SetCoolingWaterTargetTemperature"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.DaikinAlthermaHeatPump.SetWeatherDependentModeHeatingSlopeOffset"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.DaikinAlthermaHeatPump.SetWeatherDependentModeCoolingSlopeOffset"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.DaikinAlthermaMainDHW.SetTargetTemperature"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.EcoAirMainDHW.SetTargetTemperature"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.EcoGeoHeatPump.SetFixedHeatingTargetTemperature"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.EcoGeoHeatPump.SetFixedCoolingTargetTemperature"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.EcoGeoHeatPump.SetHeatCurveBasePoint"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.EcoGeoHeatPump.SetHeatCurveEndPoint"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.EcoGeoHeatPump.SetHeatCurveEndPointOutside"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.EcoGeoMainDHW.SetTargetTemperature"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.EcoGeoHighPowerHeatPump.SetFixedHeatingTargetTemperature"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.EcoGeoHighPowerHeatPump.SetFixedCoolingTargetTemperature"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.EcoGeoHighPowerHeatPump.SetHeatCurveBasePoint"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.EcoGeoHighPowerHeatPump.SetHeatCurveEndPoint"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.EcoGeoHighPowerHeatPump.SetHeatCurveEndPointOutside"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.EcoGeoHighPowerMainDHW.SetTargetTemperature"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.HeatEcoHeatPump.SetFixedHeatingTargetTemperature"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.HeatEcoHeatPump.SetFixedCoolingTargetTemperature"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.HeatEcoHeatPump.SetBottomHisteresis"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.HeatEcoHeatPump.SetTopHisteresis"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.HeatEcoMainDHW.SetTargetTemperature"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.HeatEcoMainDHW.SetBottomHisteresis"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.HeatEcoMainDHW.SetTopHisteresis"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.HeatcompHeatPump.SetFixedHeatingTargetTemperature"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.HeatcompHeatPump.SetFixedCoolingTargetTemperature"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.HeatcompHeatPump.SetHeatCurveSlope"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.HeatcompHeatPump.SetHeatCurveOffset"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.HeatcompMainDHW.SetTargetTemperature"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.IthoHeatPump.SetFixedHeatingTargetTemperature"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.IthoHeatPump.SetHeatCurveEndPoint"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.IthoHeatPump.SetHeatCurveBasePoint"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.IthoMainDHW.SetTargetTemperature"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.IthoMainDHW.SetHysteresis"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.MitsubishiEcodanHeatPump.SetZoneTargetTemperature"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.MitsubishiEcodanMainDHW.SetTargetTemperature"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.RemehaElgaACEHeatPump.SetFixedHeatingTargetTemperature"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.AmpowrAmpihomeBattery.Charge"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.AmpowrAmpihomeBattery.Discharge"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.AmpowrAmpihomeBattery.StopForcedState"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.AmpowrAmpihomeBattery.Stop"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.HeatcompHCEV01.StartCharge"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.HeatcompHCEV01.StopCharge"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.RemehaElgaACEHeatPump.EnableSmartGrid"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.HeatcompBattery.SetChargeCurrentLimit"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.HeatcompBattery.Charge"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.HeatcompBattery.Discharge"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Modbus.HeatcompBattery.Stop"
              }
           ]
        },
        "DeviceCommand.CustomDeviceModule.RGBController.TurnOn":{
           "description":"Command: `turn_on`.<br>Calls RGBController to turn on output.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.CustomDeviceModule.RGBController.TurnOff":{
           "description":"Command: `turn_off`.<br>Calls RGBController to turn off output.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.CustomDeviceModule.RGBController.Toggle":{
           "description":"Command: `toggle`.<br>Calls RGBController to toggle output.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.CustomDeviceModule.Inverter.TurnOn":{
           "description":"Command: `turn_on`.<br>Turn on the inverter - performs a command callback call in containing custom device.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.CustomDeviceModule.Inverter.TurnOff":{
           "description":"Command: `turn_off`.<br>Turn off the inverter - performs a command callback call in containing custom device.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.CustomDeviceModule.Inverter.LimitActivePower":{
           "description":"Command: `limit_active_power`.<br>Sends request to limit current active power of inverter - performs a command callback call in containing custom device.<br>Body is <b>required</b>.<br>Parameter is limit in user defined unit, depending on implementation.",
           "type":"object",
           "required":[
              "limit_active_power"
           ],
           "properties":{
              "limit_active_power":{
                 "description":"Limit in user defined unit.",
                 "type":"integer",
                 "example":750
              }
           }
        },
        "DeviceCommand.CustomDeviceModule.BlindController.Stop":{
           "description":"Command: `stop`.<br>Calls Blind Controller to stop immediately at current position - performs a command callback call in containing custom device.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.CustomDeviceModule.BlindController.Calibration":{
           "description":"Command: `calibration`.<br>Calls Blind Controller to start calibration cycle - performs a command callback call in containing custom device.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.CustomDeviceModule.RadiatorActuator.Open":{
           "description":"Command: `open`.<br>Calls Radiator Actuator to open to the desired value.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "open"
           ],
           "properties":{
              "open":{
                 "description":"Open value in %.",
                 "type":"integer",
                 "example":55
              }
           }
        },
        "DeviceCommand.CustomDeviceModule.RadiatorActuator.Calibration":{
           "description":"Command: `calibration`.<br>Calls Radiator Actuator to calibrate - performs a command callback call in containing custom device.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.CustomDeviceModule.SmokeSensor.Test":{
           "description":"Command: `test`.<br>Starts self-test of device - performs a command callback call in containing custom device.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.CustomDeviceModule.SmokeSensor.Reset":{
           "description":"Command: `reset`.<br>Resets current device alarms - performs a command callback call in containing custom device.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.CustomDeviceModule.Battery.Charge":{
           "description":"Command: `charge`.<br>Calls battery to charge during given period of time - performs a command callback call in containing custom device.<br>Body is <b>required</b>.<br>First parameter is `active_power` in mW (minimum is 0 (0W), maximum is 50000000 (50000W)), second is `duration_time` in seconds, maximum 86400. **NOTE** Available when device has label `battery_charge_support`",
           "type":"object",
           "required":[
              "charge"
           ],
           "properties":{
              "charge":{
                 "description":"Array of two values: active power and duration time.",
                 "type":"array",
                 "items":{
                    "type":"number"
                 },
                 "example":[
                    10000,
                    3600
                 ]
              }
           }
        },
        "DeviceCommand.CustomDeviceModule.Battery.Discharge":{
           "description":"Command: `discharge`.<br>Calls battery to discharge during given period of time - performs a command callback call in containing custom device.<br>Body is <b>required</b>.<br>First parameter is `active_power` in mW (minimum is 0 (0W), maximum is 50000000 (50000W)), second is `duration_time` in seconds, maximum 86400. **NOTE** Available when device has label `battery_charge_support`",
           "type":"object",
           "required":[
              "discharge"
           ],
           "properties":{
              "discharge":{
                 "description":"Array of two values: active power and duration time.",
                 "type":"array",
                 "items":{
                    "type":"number"
                 },
                 "example":[
                    10000,
                    3600
                 ]
              }
           }
        },
        "DeviceCommand.CustomDeviceModule.Battery.Stop":{
           "description":"Command: `stop`.<br>Stops the forced charging/discharging of the device. - performs a command callback call in containing custom device.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.CustomDeviceModule.CarCharger.StartCharge":{
           "description":"Command: `start_charge`.<br>Calls car charger to start chargin the EV - performs a command callback call in containing custom device.<br>Body is <b>optional</b>.<br>Parameter is `charge_power` in mW (minimum is 0 (0W), maximum is 350000000 (350kW))",
           "type":"object",
           "properties":{
              "start_charge":{
                 "description":"Charge power in mW.",
                 "type":"integer",
                 "example":150000000
              }
           }
        },
        "DeviceCommand.CustomDeviceModule.CarCharger.StopCharge":{
           "description":"Command: `stop_charge`.<br>Stops charging of the EV. - performs a command callback call in containing custom device.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.CustomDeviceModule.AirConditioner.TurnOn":{
           "description":"Command: `turn_on`.<br>Turn on the air conditioner.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.CustomDeviceModule.AirConditioner.TurnOff":{
           "description":"Command: `turn_on`.<br>Turn off the air conditioner.<br>Body is <b>ignored</b>."
        },
        "DeviceCommand.CustomDeviceModule.AirConditioner.SetMode":{
           "description":"Command: `set_mode`.<br>Changes mode of air conditioner.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_mode"
           ],
           "properties":{
              "set_mode":{
                 "description":"Air conditioner mode.<br>Possible values in `available_modes`.",
                 "type":"string",
                 "enum":[
                    "off",
                    "automatic",
                    "cooling",
                    "heating",
                    "fan",
                    "drying",
                    "ion",
                    "eco"
                 ],
                 "example":"cooling"
              }
           }
        },
        "DeviceCommand.CustomDeviceModule.AirConditioner.SetFanSpeed":{
           "description":"Command: `set_fan_speed`.<br>Changes fan speed of air conditioner.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_fan_speed"
           ],
           "properties":{
              "set_fan_speed":{
                 "description":"Air conditioner fan speed.<br>Possible values in `available_fan_speeds`.",
                 "type":"string",
                 "enum":[
                    "automatic",
                    "low",
                    "low_medium",
                    "medium",
                    "medium_high",
                    "high",
                    "turbo",
                    "silent"
                 ],
                 "example":"medium"
              }
           }
        },
        "DeviceCommand.CustomDeviceModule.AirConditioner.SetHorizontalSwing":{
           "description":"Command: `set_horizontal_swing`.<br>Changes horizontal swing of air conditioner.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_horizontal_swing"
           ],
           "properties":{
              "set_horizontal_swing":{
                 "description":"Air conditioner horizontal swing.<br>Possible values in `horizontal_swing_available_states`.",
                 "type":"string",
                 "enum":[
                    "stopped",
                    "full_swing",
                    "fixed_left",
                    "fixed_left_center",
                    "fixed_center",
                    "fixed_right_center",
                    "fixed_right"
                 ],
                 "example":"full_swing"
              }
           }
        },
        "DeviceCommand.CustomDeviceModule.AirConditioner.SetVerticalSwing":{
           "description":"Command: `set_vertical_swing`.<br>Changes vertical swing of air conditioner.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_vertical_swing"
           ],
           "properties":{
              "set_vertical_swing":{
                 "description":"Air conditioner vertical swing.<br>Possible values in `vertical_swing_available_states`.",
                 "type":"string",
                 "enum":[
                    "stopped",
                    "full_swing",
                    "fixed_top",
                    "fixed_top_center",
                    "fixed_center",
                    "fixed_bottom_center",
                    "fixed_bottom"
                 ],
                 "example":"full_swing"
              }
           }
        },
        "DeviceCommand.CustomDeviceModule.OneOf":{
           "oneOf":[
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Any.EnqueueAction"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Any.CancelAction"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Any.ClearActions"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Relay.TurnOn"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Relay.TurnOff"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Relay.Toggle"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.TemperatureRegulator.SetTargetTemperature"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.TemperatureRegulator.EnableConstantMode"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.TemperatureRegulator.EnableTimeLimitedMode"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.TemperatureRegulator.DisableTimeLimitedMode"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Dimmer.TurnOn"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Dimmer.TurnOff"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Dimmer.Toggle"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Dimmer.SetLevel"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.Dimmer.Stop"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.CustomDeviceModule.RGBController.TurnOn"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.CustomDeviceModule.RGBController.TurnOff"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.CustomDeviceModule.RGBController.Toggle"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.RGBController.SetLevel"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.RGBController.SetColor"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.RGBController.SetTemperature"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.CustomDeviceModule.Inverter.TurnOn"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.CustomDeviceModule.Inverter.TurnOff"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.CustomDeviceModule.Inverter.LimitActivePower"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.BlindController.Open"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.BlindController.Tilt"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.BlindController.Up"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.BlindController.Down"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.CustomDeviceModule.BlindController.Stop"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.CustomDeviceModule.BlindController.Calibration"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.MotionSensor.Enable"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.MotionSensor.Disable"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.Common.MotionSensor.AddTimeSinceMotionEvent"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.CustomDeviceModule.RadiatorActuator.Open"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.CustomDeviceModule.RadiatorActuator.Calibration"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.CustomDeviceModule.SmokeSensor.Test"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.CustomDeviceModule.SmokeSensor.Reset"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.CustomDeviceModule.Battery.Charge"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.CustomDeviceModule.Battery.Discharge"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.CustomDeviceModule.Battery.Stop"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.CustomDeviceModule.CarCharger.StartCharge"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.CustomDeviceModule.CarCharger.StopCharge"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.CustomDeviceModule.AirConditioner.TurnOn"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.CustomDeviceModule.AirConditioner.TurnOff"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.CustomDeviceModule.AirConditioner.SetMode"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.CustomDeviceModule.AirConditioner.SetFanSpeed"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.CustomDeviceModule.AirConditioner.SetHorizontalSwing"
              },
              {
                 "$ref":"#/components/schemas/DeviceCommand.CustomDeviceModule.AirConditioner.SetVerticalSwing"
              }
           ]
        },
        "ParentCommand.Common.SetColor":{
           "description":"Command: `set_color`.<br>Set provided widget color for all devices in parent device.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_color"
           ],
           "properties":{
              "set_color":{
                 "description":"Color in HEX format. Example: `#ff0000`",
                 "type":"string",
                 "example":"#ff0000"
              }
           }
        },
        "ParentCommand.WTP.OneOf":{
           "oneOf":[
              {
                 "$ref":"#/components/schemas/ParentCommand.Common.SetColor"
              }
           ]
        },
        "ParentCommand.TECH.OneOf":{
           "oneOf":[
              {
                 "$ref":"#/components/schemas/ParentCommand.Common.SetColor"
              }
           ]
        },
        "ParentCommand.SBus.SceneControlPanel.AssignMomentaryButton":{
           "description":"Command: `assign_button`.<br>Add momentary button to specified page if button available.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "assign_button"
           ],
           "properties":{
              "assign_button":{
                 "description":"Button to be assigned.",
                 "type":"object",
                 "required":[
                    "page_id",
                    "button"
                 ],
                 "properties":{
                    "page_id":{
                       "description":"Page id.",
                       "type":"integer",
                       "example":6
                    },
                    "button":{
                       "description":"Button to be assigned.",
                       "type":"object",
                       "required":[
                          "text",
                          "scene_id",
                          "icon",
                          "mode"
                       ],
                       "properties":{
                          "text":{
                             "description":"Button text.",
                             "type":"string",
                             "example":"Lights in living room"
                          },
                          "scene_id":{
                             "description":"Scene id.",
                             "type":"integer",
                             "example":3
                          },
                          "icon":{
                             "description":"Icon name.",
                             "type":"string",
                             "example":"lamp"
                          },
                          "mode":{
                             "description":"Button mode. Can be `momentary` or `bistable`.",
                             "type":"string",
                             "enum":[
                                "momentary",
                                "bistable"
                             ],
                             "example":"momentary"
                          }
                       }
                    }
                 }
              }
           }
        },
        "ParentCommand.SBus.SceneControlPanel.AssignBistableButton":{
           "description":"Command: `assign_button`.<br>Add bistable button to specified page if button available.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "assign_button"
           ],
           "properties":{
              "assign_button":{
                 "description":"Button to be assigned.",
                 "type":"object",
                 "required":[
                    "page_id",
                    "button"
                 ],
                 "properties":{
                    "page_id":{
                       "description":"Page id.",
                       "type":"integer",
                       "example":6
                    },
                    "button":{
                       "description":"Button to be assigned.",
                       "type":"object",
                       "required":[
                          "text",
                          "icon",
                          "mode",
                          "associations"
                       ],
                       "properties":{
                          "text":{
                             "description":"Button text.",
                             "type":"string",
                             "example":"Lights in living room"
                          },
                          "icon":{
                             "description":"Icon name.",
                             "type":"string",
                             "example":"lamp"
                          },
                          "mode":{
                             "description":"Button mode. Can be `momentary` or `bistable`.",
                             "type":"string",
                             "enum":[
                                "momentary",
                                "bistable"
                             ],
                             "example":"momentary"
                          },
                          "associations":{
                             "description":"Associations for button.",
                             "type":"object",
                             "required":[
                                "output"
                             ],
                             "properties":{
                                "output":{
                                   "description":"Output to be assigned to button.",
                                   "allOf":[
                                      {
                                         "$ref":"#/components/schemas/Device.AssociationInfo"
                                      }
                                   ]
                                }
                             }
                          }
                       }
                    }
                 }
              }
           }
        },
        "ParentCommand.SBus.SceneControlPanel.AddPage":{
           "description":"Command: `add_page`.<br>Add page with specified id to `page_order`.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "add_page"
           ],
           "properties":{
              "add_page":{
                 "description":"Page id.",
                 "type":"integer",
                 "example":6
              }
           }
        },
        "ParentCommand.SBus.SceneControlPanel.RemovePage":{
           "description":"Command: `remove_page`.<br>Remove page with specified id from `page_order`.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "remove_page"
           ],
           "properties":{
              "remove_page":{
                 "description":"Page id.",
                 "type":"integer",
                 "example":6
              }
           }
        },
        "ParentCommand.SBus.SceneControlPanel.SetPageOrder":{
           "description":"Command: `set_page_order`.<br>Sets page_order specified in parameter.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_page_order"
           ],
           "properties":{
              "set_page_order":{
                 "description":"Page order.",
                 "type":"array",
                 "items":{
                    "type":"integer"
                 },
                 "example":[
                    0,
                    5,
                    6
                 ]
              }
           }
        },
        "ParentCommand.SBus.SceneControlPanel.EnableQuickPage":{
           "description":"Command: `enable_quick_page`.<br>Sets page with specified id as `quick_page`.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "enable_quick_page"
           ],
           "properties":{
              "enable_quick_page":{
                 "description":"Page id.",
                 "type":"integer",
                 "example":7
              }
           }
        },
        "ParentCommand.SBus.SceneControlPanel.DisableQuickPage":{
           "description":"Command: `disable_quick_page`.<br>Remove quick_page. Sets null to `quick_page`.<br>Body is ignored."
        },
        "ParentCommand.SBus.SceneControlPanel.AddQuickPageButton":{
           "description":"Command: `add_quick_page_button`.<br>Add button with specified id to quick page buttons. Button must be added to other regular page.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "add_quick_page_button"
           ],
           "properties":{
              "add_quick_page_button":{
                 "description":"Button id.",
                 "type":"integer",
                 "example":3
              }
           }
        },
        "ParentCommand.SBus.SceneControlPanel.RemovePageButton":{
           "description":"Command: `remove_page_button`.<br>Remove button from page. When button is removed from regular page and the same button is added to quick page it is removed from quick page either. First parameter is `page_id`, second parameter is `button_id`.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "remove_page_button"
           ],
           "properties":{
              "remove_page_button":{
                 "description":"Page id and button id.",
                 "type":"array",
                 "items":{
                    "type":"integer"
                 },
                 "example":[
                    6,
                    3
                 ]
              }
           }
        },
        "ParentCommand.SBus.SceneControlPanel.CleanPage":{
           "description":"Command: `clean_page`.<br>Removes all buttons or widgets from page with specified id.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "clean_page"
           ],
           "properties":{
              "clean_page":{
                 "description":"Page id.",
                 "type":"integer",
                 "example":6
              }
           }
        },
        "ParentCommand.SBus.SceneControlPanel.AutolockEnable":{
           "description":"Command: `autolock_enable`.<br>Turn on autolock feature.<br>Body is <b>ignored</b>."
        },
        "ParentCommand.SBus.SceneControlPanel.AutolockDisable":{
           "description":"Command: `autolock_disable`.<br>Turn off autolock feature.<br>Body is <b>ignored</b>."
        },
        "ParentCommand.SBus.SceneControlPanel.SetAutolockPinCode":{
           "description":"Command: `set_autolock_pin_code`.<br>Turn on autolock feature and set specified string as pin code.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_autolock_pin_code"
           ],
           "properties":{
              "set_autolock_pin_code":{
                 "description":"Pin code in string format. Example: `1234`",
                 "type":"string",
                 "example":"1234"
              }
           }
        },
        "ParentCommand.SBus.SceneControlPanel.AssignSensorWidget":{
           "description":"Command: `assign_sensor_widget`.<br>Add sensor widget to specified page, if sensor widget available. If sensor has more than one parameter that can be displayed user can specify `sensor_type` which indicates which sensor parameter will be sent to widget in control panel. Parameter `sensor_type` is optional.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "assign_sensor_widget"
           ],
           "properties":{
              "assign_sensor_widget":{
                 "description":"Sensor widget to be assigned.",
                 "type":"object",
                 "required":[
                    "page_id",
                    "associations"
                 ],
                 "properties":{
                    "page_id":{
                       "description":"Page id.",
                       "type":"integer",
                       "example":6
                    },
                    "associations":{
                       "description":"Associations for sensor widget.",
                       "type":"object",
                       "required":[
                          "sensor"
                       ],
                       "properties":{
                          "sensor":{
                             "description":"Sensor to be assigned to widget.",
                             "allOf":[
                                {
                                   "$ref":"#/components/schemas/Device.AssociationInfo"
                                },
                                {
                                   "type":"object",
                                   "properties":{
                                      "sensor_type":{
                                         "description":"Sensor parameter type.<br>Parameter is <b>optional</b>.",
                                         "type":"string",
                                         "example":"temperatureSensor"
                                      }
                                   }
                                }
                             ]
                          }
                       }
                    }
                 }
              }
           }
        },
        "ParentCommand.SBus.SceneControlPanel.RemovePageSensor":{
           "description":"Command: `remove_page_sensor`.<br>Remove sensor widget from page.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "remove_page_sensor"
           ],
           "properties":{
              "remove_page_sensor":{
                 "description":"Page id and widget id.",
                 "type":"object",
                 "required":[
                    "page_id",
                    "widget_id"
                 ],
                 "properties":{
                    "page_id":{
                       "description":"Page id.",
                       "type":"integer",
                       "example":6
                    },
                    "widget_id":{
                       "description":"Widget id.",
                       "type":"integer",
                       "example":3
                    }
                 }
              }
           }
        },
        "ParentCommand.SBus.SceneControlPanel.AssignPageThermostat":{
           "description":"Command: `assign_page_thermostat`.<br> Assign thermostat to specified thermostat page. Page must exist in page order.<br>Body is <b>required</b>",
           "type":"object",
           "required":[
              "assign_page_thermostat"
           ],
           "properties":{
              "assign_page_thermostat":{
                 "description":"Thermostat widget to be assigned.",
                 "type":"object",
                 "required":[
                    "page_id",
                    "associations"
                 ],
                 "properties":{
                    "page_id":{
                       "description":"Page id.",
                       "type":"integer",
                       "example":6
                    },
                    "associations":{
                       "description":"Associations for thermostat widget.",
                       "type":"object",
                       "required":[
                          "thermostat"
                       ],
                       "properties":{
                          "thermostat":{
                             "description":"Thermostat to be assigned to widget.",
                             "allOf":[
                                {
                                   "$ref":"#/components/schemas/Device.AssociationInfo"
                                }
                             ]
                          }
                       }
                    }
                 }
              }
           }
        },
        "ParentCommand.SBus.SceneControlPanel.AssignAlarmZones":{
           "description":"Command: `assign_alarm_zones`.<br>Replace alarm zones assigned to specified page, if alarm zone widgets available.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "assign_alarm_zones"
           ],
           "properties":{
              "assign_alarm_zones":{
                 "description":"Alarm zone widget to be assigned.",
                 "type":"object",
                 "required":[
                    "page_id",
                    "associations"
                 ],
                 "properties":{
                    "page_id":{
                       "description":"Page id.",
                       "type":"integer",
                       "example":6
                    },
                    "associations":{
                       "description":"Associations for alarm zone widget.",
                       "type":"object",
                       "required":[
                          "alarm_zones"
                       ],
                       "properties":{
                          "alarm_zones":{
                             "description":"Alarm zones to be assigned to widget.",
                             "type":"array",
                             "items":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.AssociationInfo"
                                   }
                                ]
                             }
                          }
                       }
                    }
                 }
              }
           }
        },
        "ParentCommand.SBus.SceneControlPanel.SetBacklightMode":{
           "description":"Command: `set_backlight_mode`.<br>Set current backlight mode. <br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_backlight_mode"
           ],
           "properties":{
              "set_backlight_mode":{
                 "description":"Backlight mode. Can be `automatic`, `fixed` or `day_night`.",
                 "type":"string",
                 "enum":[
                    "automatic",
                    "fixed",
                    "day_night"
                 ],
                 "example":"fixed"
              }
           }
        },
        "ParentCommand.SBus.ParentDeviceWithMbus.RescanMbusMaster":{
           "description":"Command: `rescan_mbus_master`.<br>Calls the device to rescan MBus master devices.<br>Body is <b>ignored</b>."
        },
        "ParentCommand.SBus.OneOf":{
           "oneOf":[
              {
                 "$ref":"#/components/schemas/ParentCommand.Common.SetColor"
              },
              {
                 "$ref":"#/components/schemas/ParentCommand.SBus.SceneControlPanel.AssignMomentaryButton"
              },
              {
                 "$ref":"#/components/schemas/ParentCommand.SBus.SceneControlPanel.AssignBistableButton"
              },
              {
                 "$ref":"#/components/schemas/ParentCommand.SBus.SceneControlPanel.AddPage"
              },
              {
                 "$ref":"#/components/schemas/ParentCommand.SBus.SceneControlPanel.RemovePage"
              },
              {
                 "$ref":"#/components/schemas/ParentCommand.SBus.SceneControlPanel.SetPageOrder"
              },
              {
                 "$ref":"#/components/schemas/ParentCommand.SBus.SceneControlPanel.EnableQuickPage"
              },
              {
                 "$ref":"#/components/schemas/ParentCommand.SBus.SceneControlPanel.DisableQuickPage"
              },
              {
                 "$ref":"#/components/schemas/ParentCommand.SBus.SceneControlPanel.AddQuickPageButton"
              },
              {
                 "$ref":"#/components/schemas/ParentCommand.SBus.SceneControlPanel.RemovePageButton"
              },
              {
                 "$ref":"#/components/schemas/ParentCommand.SBus.SceneControlPanel.CleanPage"
              },
              {
                 "$ref":"#/components/schemas/ParentCommand.SBus.SceneControlPanel.AutolockEnable"
              },
              {
                 "$ref":"#/components/schemas/ParentCommand.SBus.SceneControlPanel.AutolockDisable"
              },
              {
                 "$ref":"#/components/schemas/ParentCommand.SBus.SceneControlPanel.SetAutolockPinCode"
              },
              {
                 "$ref":"#/components/schemas/ParentCommand.SBus.SceneControlPanel.AssignSensorWidget"
              },
              {
                 "$ref":"#/components/schemas/ParentCommand.SBus.SceneControlPanel.RemovePageSensor"
              },
              {
                 "$ref":"#/components/schemas/ParentCommand.SBus.SceneControlPanel.AssignPageThermostat"
              },
              {
                 "$ref":"#/components/schemas/ParentCommand.SBus.SceneControlPanel.AssignAlarmZones"
              },
              {
                 "$ref":"#/components/schemas/ParentCommand.SBus.SceneControlPanel.SetBacklightMode"
              }
           ]
        },
        "ParentCommand.SLink.OneOf":{
           "allOf":[
              {
                 "$ref":"#/components/schemas/ParentCommand.SBus.OneOf"
              }
           ]
        },
        "ParentCommand.Lora.OneOf":{
           "oneOf":[
              {
                 "$ref":"#/components/schemas/ParentCommand.Common.SetColor"
              }
           ]
        },
        "ParentCommand.SystemModule.OneOf":{
           "oneOf":[
              {
                 "$ref":"#/components/schemas/ParentCommand.Common.SetColor"
              }
           ]
        },
        "ParentCommand.AlarmSystem.Satel.ReadConfiguration":{
           "description":"Command: `read_configuration`.<br>Calls parent device to read zones, intputs and outputs configuration from Satel central unit. Devices will be added to parent according to configuration or removed from parent if they no longer exist in central unit.<br>**NOTE:** This may take a while (about 3 minutes with good network connection). Event `device_configuration_read_finished` will be send to websocket when read is finished."
        },
        "ParentCommand.AlarmSystem.OneOf":{
           "oneOf":[
              {
                 "$ref":"#/components/schemas/ParentCommand.Common.SetColor"
              },
              {
                 "$ref":"#/components/schemas/ParentCommand.AlarmSystem.Satel.ReadConfiguration"
              }
           ]
        },
        "ParentCommand.Modbus.OneOf":{
           "oneOf":[
              {
                 "$ref":"#/components/schemas/ParentCommand.Common.SetColor"
              }
           ]
        },
        "ParentCommand.Video.OneOf":{
           "oneOf":[
              {
                 "$ref":"#/components/schemas/ParentCommand.Common.SetColor"
              }
           ]
        },
        "SceneCommand.Activate":{
           "description":"Command: `activate`.<br>Calls Blind Controller to open to the desired value.<br>Body is <b>ignored</b>."
        },
        "SceneCommand.Enable":{
           "description":"Command: `enable`.<br>Enable scene.<br>Body is <b>ignored</b>."
        },
        "SceneCommand.Disable":{
           "description":"Command: `disable`.<br>Disable scene.<br>Body is <b>ignored</b>."
        },
        "SceneCommand.Toggle":{
           "description":"Command: `toggle`.<br>Togle \"enabled\" property<br>Body is <b>ignored</b>."
        },
        "SceneCommand.EnableLiveLog":{
           "description":"Command: `enable_live_log`.<br>Enable send live log from scene <br>Body is <b>ignored</b>."
        },
        "SceneCommand.DisableLiveLog":{
           "description":"Command: `disable_live_log`.<br>Disable send live log from scene <br>Body is <b>ignored</b>."
        },
        "SceneCommand.EnqueueAction":{
           "description":"Command: `enqueue_action`.<br>Schedules the action to execute for scene after a period of time.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "enqueue_action"
           ],
           "properties":{
              "enqueue_action":{
                 "type":"object",
                 "required":[
                    "type",
                    "param_or_command",
                    "argument",
                    "after"
                 ],
                 "properties":{
                    "type":{
                       "description":"Type of action to execute. Parameter change or command.",
                       "type":"string",
                       "enum":[
                          "parameter",
                          "command"
                       ]
                    },
                    "param_or_command":{
                       "description":"Name of parameter that will be changed or command that will be executed.",
                       "type":"string"
                    },
                    "argument":{
                       "description":"Value that will be set in the parameter when action type is `parameter` or argument to execute command when action type is `command`. Type varies depending on the parameter or command."
                    },
                    "after":{
                       "description":"Time in milliseconds after which the action should be executed.",
                       "type":"integer",
                       "minimum":1000,
                       "maximum":86400000
                    }
                 }
              }
           }
        },
        "SceneCommand.CancelAction":{
           "description":"Command: `cancel_action`.<br>Cancels the scheduled action of a scene.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "cancel_action"
           ],
           "properties":{
              "cancel_action":{
                 "description":"Id of action to cancel.",
                 "type":"string",
                 "minimum":1
              }
           }
        },
        "SceneCommand.ClearActions":{
           "description":"Command: `clear_actions`.<br>Remove all scheduled actions for the scene.<br>Body is <b>ignored</b>."
        },
        "SceneCommand.OneOf":{
           "oneOf":[
              {
                 "$ref":"#/components/schemas/SceneCommand.Activate"
              },
              {
                 "$ref":"#/components/schemas/SceneCommand.Enable"
              },
              {
                 "$ref":"#/components/schemas/SceneCommand.Disable"
              },
              {
                 "$ref":"#/components/schemas/SceneCommand.Toggle"
              },
              {
                 "$ref":"#/components/schemas/SceneCommand.EnableLiveLog"
              },
              {
                 "$ref":"#/components/schemas/SceneCommand.DisableLiveLog"
              },
              {
                 "$ref":"#/components/schemas/SceneCommand.EnqueueAction"
              },
              {
                 "$ref":"#/components/schemas/SceneCommand.CancelAction"
              },
              {
                 "$ref":"#/components/schemas/SceneCommand.ClearActions"
              }
           ]
        },
        "AutomationCommand.Enable":{
           "description":"Command: `enable`.<br>Enable automations.<br>Body is <b>ignored</b>."
        },
        "AutomationCommand.Disable":{
           "description":"Command: `disable`.<br>Disable automations.<br>Body is <b>ignored</b>."
        },
        "AutomationCommand.Toggle":{
           "description":"Command: `toggle`.<br>Togle \"enabled\" automations<br>Body is <b>ignored</b>."
        },
        "AutomationCommand.EnableLiveLog":{
           "description":"Command: `enable_live_log`.<br>Enable send live log from automations <br>Body is <b>ignored</b>."
        },
        "AutomationCommand.DisableLiveLog":{
           "description":"Command: `disable_live_log`.<br>Disable send live log from automations <br>Body is <b>ignored</b>."
        },
        "AutomationCommand.EnqueueAction":{
           "description":"Command: `enqueue_action`.<br>Schedules the action to execute for automation after a period of time.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "enqueue_action"
           ],
           "properties":{
              "enqueue_action":{
                 "type":"object",
                 "required":[
                    "type",
                    "param_or_command",
                    "argument",
                    "after"
                 ],
                 "properties":{
                    "type":{
                       "description":"Type of action to execute. Parameter change or command.",
                       "type":"string",
                       "enum":[
                          "parameter",
                          "command"
                       ]
                    },
                    "param_or_command":{
                       "description":"Name of parameter that will be changed or command that will be executed.",
                       "type":"string"
                    },
                    "argument":{
                       "description":"Value that will be set in the parameter when action type is `parameter` or argument to execute command when action type is `command`. Type varies depending on the parameter or command."
                    },
                    "after":{
                       "description":"Time in milliseconds after which the action should be executed.",
                       "type":"integer",
                       "minimum":1000,
                       "maximum":86400000
                    }
                 }
              }
           }
        },
        "AutomationCommand.CancelAction":{
           "description":"Command: `cancel_action`.<br>Cancels the scheduled action of a automation.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "cancel_action"
           ],
           "properties":{
              "cancel_action":{
                 "description":"Id of action to cancel.",
                 "type":"string",
                 "minimum":1
              }
           }
        },
        "AutomationCommand.ClearActions":{
           "description":"Command: `clear_actions`.<br>Remove all scheduled actions for the automation.<br>Body is <b>ignored</b>."
        },
        "AutomationCommand.OneOf":{
           "oneOf":[
              {
                 "$ref":"#/components/schemas/AutomationCommand.Enable"
              },
              {
                 "$ref":"#/components/schemas/AutomationCommand.Disable"
              },
              {
                 "$ref":"#/components/schemas/AutomationCommand.Toggle"
              },
              {
                 "$ref":"#/components/schemas/AutomationCommand.EnableLiveLog"
              },
              {
                 "$ref":"#/components/schemas/AutomationCommand.DisableLiveLog"
              },
              {
                 "$ref":"#/components/schemas/AutomationCommand.EnqueueAction"
              },
              {
                 "$ref":"#/components/schemas/AutomationCommand.CancelAction"
              },
              {
                 "$ref":"#/components/schemas/AutomationCommand.ClearActions"
              }
           ]
        },
        "Device.MonthlyEnergyData":{
           "type":"object",
           "required":[
              "year",
              "month",
              "value"
           ],
           "properties":{
              "year":{
                 "description":"Year of data.",
                 "type":"integer",
                 "readOnly":true
              },
              "month":{
                 "description":"Month of data.",
                 "type":"integer",
                 "readOnly":true
              },
              "value":{
                 "description":"Energy consumption/fed for the month. <br>Unit: kWh with three decimal numbers, multiplied by 1000 (Wh).",
                 "type":"integer",
                 "multipleOf":1000,
                 "readOnly":true
              }
           }
        },
        "Device.MonthlyWaterFlow":{
           "type":"object",
           "required":[
              "year",
              "month",
              "value"
           ],
           "properties":{
              "year":{
                 "description":"Year of data.",
                 "type":"integer",
                 "readOnly":true
              },
              "month":{
                 "description":"Month of data.",
                 "type":"integer",
                 "readOnly":true
              },
              "value":{
                 "description":"Water flow volume for the month. <br>Unit: m3 with two decimal numbers, multiplied by 100.",
                 "type":"integer",
                 "multipleOf":100,
                 "readOnly":true
              }
           }
        },
        "Device.WTP.Button":{
           "description":"Wireless Button Trigger representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ARadioDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "buttons_count",
                    "action",
                    "buzzer"
                 ],
                 "properties":{
                    "buttons_count":{
                       "description":"Count of physical buttons",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":1,
                       "maximum":4,
                       "example":1
                    },
                    "action":{
                       "description":"Last action performed by user.",
                       "type":"string",
                       "readOnly":true,
                       "example":"button_1_clicked_10_times"
                    },
                    "buzzer":{
                       "description":"Embedded buzzer (speaker) settings.",
                       "type":"string",
                       "enum":[
                          "on",
                          "off",
                          "unsupported"
                       ],
                       "example":"on"
                    },
                    "single_click_mode":{
                       "description":"Enables single click mode. If enabled, only single click and hold actions will be reported, but it wont have report delay.<br>Parameter is <b>optional</b>. Available when: check if `single_click_mode_support` label is provided.",
                       "type":"boolean",
                       "example":true
                    },
                    "button_set":{
                       "description":"Button sets info.<br>Parameter is <b>optional</b>. Available when: check if `single_click_mode_support` label is provided.",
                       "type":"object",
                       "required":[
                          "total_count",
                          "available_count",
                          "current"
                       ],
                       "properties":{
                          "total_count":{
                             "description":"Total count of button sets.",
                             "type":"integer",
                             "readOnly":true,
                             "minimum":1,
                             "example":2
                          },
                          "available_count":{
                             "description":"Available (configured as visible for user) count of button sets, cannot be larger than `total_count`.",
                             "type":"integer",
                             "minimum":1,
                             "example":2
                          },
                          "current":{
                             "description":"Indicates button set that is currently selected.",
                             "type":"integer",
                             "readOnly":true,
                             "minimum":1,
                             "example":1
                          }
                       }
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.WTP.Button/value"
           }
        },
        "Device.WTP.BlindController":{
           "description":"Wireless Roller Blind Controller representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ARadioDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "target_opening",
                    "current_opening",
                    "window_covering_type",
                    "allowed_window_covering_types",
                    "lift_control_mode",
                    "allowed_lift_control_modes"
                 ],
                 "properties":{
                    "target_opening":{
                       "description":"Desired setpoint opening, which device will try to achieve.<br> Unit: %.<br>**NOTE:** If device doesnt contain `percent_opening_control` label, target opening is limited to 0%, 50% or 100% (only these three).",
                       "type":"integer",
                       "minimum":0,
                       "maximum":100,
                       "example":50
                    },
                    "current_opening":{
                       "description":"Current opening value.<br> Unit: %",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":100,
                       "example":85
                    },
                    "window_covering_type":{
                       "description":"Defines the type of window covering the controller is connected to. Depending on the value of this parameter, the controller behavior will change and some parameters may be unavailable. Can be modified with values from `allowed_window_covering_types` property.",
                       "type":"string",
                       "enum":[
                          "roller_shade",
                          "tilt_blind",
                          "pergola"
                       ],
                       "example":"roller_shade"
                    },
                    "allowed_window_covering_types":{
                       "description":"List of available window covering types supported by the controller. Allowed values to set in `window_covering_type` property.",
                       "type":"array",
                       "readOnly":true,
                       "items":{
                          "type":"string",
                          "enum":[
                             "roller_shade",
                             "tilt_blind",
                             "pergola"
                          ]
                       },
                       "example":[
                          "roller_shade",
                          "tilt_blind"
                       ]
                    },
                    "lift_control_mode":{
                       "description":"Defines the control algorithm of lifting movement. Depending on the value of this parameter, the controller behavior will change and some parameters may be unavailable. Can be modified with values from `allowed_lift_control_modes` property.",
                       "type":"string",
                       "enum":[
                          "current_detection",
                          "fixed_duration"
                       ],
                       "example":"current_detection"
                    },
                    "allowed_lift_control_modes":{
                       "description":"List of available lift control modes supported by the controller. Allowed values to set in `lift_control_mode` property.",
                       "type":"array",
                       "readOnly":true,
                       "items":{
                          "type":"string",
                          "enum":[
                             "current_detection",
                             "fixed_duration"
                          ]
                       },
                       "example":[
                          "current_detection",
                          "fixed_duration"
                       ]
                    },
                    "target_tilt":{
                       "description":"Desired tilt position<br> Unit: %.<br>Parameter is <b>optional</b>. Available when: check if `percent_tilt_control` label is provided.",
                       "type":"integer",
                       "minimum":0,
                       "maximum":100,
                       "example":50
                    },
                    "current_tilt":{
                       "description":"Current tilt position<br> Unit: %.<br>Parameter is <b>optional</b>. Available when: check if `percent_tilt_control` label is provided.",
                       "type":"integer",
                       "minimum":0,
                       "maximum":100,
                       "example":50,
                       "readOnly":true
                    },
                    "tilt_range":{
                       "description":"Determines tilt range. <br> Unit: angle(degrees). <br>Parameter is <b>optional</b>. Available when: check if `percent_tilt_control` label is provided.<br>Can be modified when: check if `window_covering_type` is `tilt_blind` or `pergola`. When `window_covering_type` is `tilt_blind` ONLY 90 and 180 are valid values.",
                       "type":"integer",
                       "minimum":0,
                       "maximum":180,
                       "example":90
                    },
                    "full_cycle_duration":{
                       "description":"Time required by motor to do full lift cycle from 100% to 0% or 0% to 100% (select larger). Proper full open or full close action is based on this value.<br> Unit: seconds<br>Parameter is <b>optional</b>. Available when: check if `has_lift_duration` label is provided.<br>Can be modified when: check if `lift_control_mode` is `fixed_duration`. ",
                       "type":"integer",
                       "minimum":300,
                       "maximum":10000,
                       "example":750
                    },
                    "tilt_duration":{
                       "description":"Time required by motor to do full tilt cycle.<br> Unit: milliseconds<br>Parameter is <b>optional</b>. Available when: check if `has_tilt_duration` label is provided.",
                       "type":"integer",
                       "minimum":300,
                       "maximum":10000,
                       "example":750
                    },
                    "tilt_cycle_distance":{
                       "description":"Number of motor steps to do full tilt cycle. Available when: check if `has_tilt_cycle_distance` label is provided.",
                       "type":"integer",
                       "minimum":10,
                       "maximum":65535,
                       "example":1000
                    },
                    "motor_running_current_threshold":{
                       "description":"Current threshold that indicates motor is running. <br> Unit: mA. <br>Parameter is <b>optional</b>. Available when: check if `has_motor_running_current_threshold` label is provided.",
                       "type":"integer",
                       "minimum":30,
                       "maximum":500,
                       "example":150
                    },
                    "backlight_mode":{
                       "description":"Buttons backlight mode. Parameter is <b>optional</b>. Available when backlight is supported - check if `has_backlight` label is provided.",
                       "type":"string",
                       "enum":[
                          "auto",
                          "fixed",
                          "off"
                       ],
                       "example":"fixed"
                    },
                    "backlight_brightness":{
                       "description":"Buttons backlight brightness.<br> Paremeter <b>hidden</b> when backlight is <b>unsupported</b>.<br> Unit: %",
                       "type":"integer",
                       "minimum":0,
                       "maximum":100,
                       "example":95
                    },
                    "backlight_idle_color":{
                       "description":"HTML/Hex RGB representation of color when controller is in idle (inactive state).<br> Paremeter <b>hidden</b> when backlight is <b>unsupported</b>.",
                       "type":"string",
                       "pattern":"/^#[0-9a-f]{6}$/i",
                       "example":"#FF00FF"
                    },
                    "backlight_active_color":{
                       "description":"HTML/Hex RGB representation of color when controller is active eg. motor is working.<br> Paremeter <b>hidden</b> when backlight is <b>unsupported</b>.",
                       "type":"string",
                       "pattern":"/^#[0-9a-f]{6}$/i",
                       "example":"#FFFF00"
                    },
                    "buttons_inverted":{
                       "description":"Replace up and down buttons directions.<br>Parameter is <b>optional</b>. Available when: check if `button_inversion_support` label is provided.",
                       "type":"boolean",
                       "example":true
                    },
                    "outputs_inverted":{
                       "description":"Replace up and down outputs directions. <br>Parameter is <b>optional</b>. Available when: check if `output_inversion_support` label is provided.",
                       "type":"boolean",
                       "example":true
                    },
                    "button_signal_type":{
                       "description":"Selected button specific behavior. eg. impulse = on/off impulse is required to start action. <br>Parameter is <b>optional</b>. Available when: check if `percent_opening_control` label is *NOT* provided.",
                       "type":"string",
                       "enum":[
                          "impulse",
                          "state_change"
                       ],
                       "example":"state_change"
                    },
                    "output_signal_type":{
                       "description":"Selected output specific behavior. eg. impulse = on/off impulse is required to start motor. <br>Parameter is <b>optional</b>. Available when: check if `percent_opening_control` label is *NOT* provided.",
                       "type":"string",
                       "enum":[
                          "impulse",
                          "state_change"
                       ],
                       "example":"state_change"
                    },
                    "ambient_light_intensity":{
                       "description":"Measured ambient light intensity.<br> Unit: %.<br>Parameter is <b>optional</b>. Available when: check if `has_backlight_brightness_sensor` label is provided.",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":100,
                       "example":80
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.WTP.BlindController/value"
           }
        },
        "Device.WTP.TemperatureRegulator":{
           "description":"Wireless Temperature Regulator representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ARadioDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "target_temperature",
                    "target_temperature_mode",
                    "target_temperature_minimum",
                    "target_temperature_maximum",
                    "target_temperature_reached",
                    "keylock",
                    "confirm_time_mode"
                 ],
                 "properties":{
                    "target_temperature":{
                       "description":"Desired setpoint temperature, which device will try to achieve.<br> Unit: °C with one decimal number, multiplied by 10.<br>Minimum from parameter `target_temperature_minimum`, maximum from parameter `target_temperature_maximum`.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "minimum":50,
                       "maximum":350,
                       "example":235
                    },
                    "target_temperature_mode":{
                       "type":"object",
                       "required":[
                          "current",
                          "remaining_time"
                       ],
                       "properties":{
                          "current":{
                             "description":"Regulator target temperature mode. Specifies if regulator works in `constant` mode with one target temperature, `time_limited` mode with one temporary target temperature or according to schedule in `schedule` mode with many target temperatures in time, configured by user.<br> <b>NOTE:</b> Parameter is read only, use commands to change target temperature mode!<br> <b>NOTE:</b> Parameter cannot be `schedule` if thermostat doesnt have `has_schedule` label!<br> <b>NOTE:</b> When not associated with Virtual Thermostat it will always work in `constant` mode.",
                             "type":"string",
                             "readOnly":true,
                             "enum":[
                                "schedule",
                                "constant",
                                "time_limited"
                             ],
                             "example":"constant"
                          },
                          "remaining_time":{
                             "description":"Remaining time until `time_limited` mode ends. Cannot be modified directly - use commands.<br> Unit: minutes.",
                             "type":"integer",
                             "readOnly":true,
                             "minimum":1,
                             "maximum":1440,
                             "example":600
                          }
                       }
                    },
                    "target_temperature_minimum":{
                       "description":"Lower limit of the target temperature. Could not be greater than maximum. Setting minimum value above target value, will also change target value to minimum.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "minimum":50,
                       "maximum":350,
                       "multipleOf":0.1,
                       "example":50
                    },
                    "target_temperature_maximum":{
                       "description":"Upper limit of the target temperature. Could not be less than minimum. Setting maximum below target, will also change target value to minimum.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "minimum":50,
                       "maximum":350,
                       "multipleOf":0.1,
                       "example":350
                    },
                    "target_temperature_reached":{
                       "description":"Controls device`s algorithm state indicator. eg LED Diode. May be controlled by external algorithms or devices such as Thermostat (when thermostat is active, indicator will blink)",
                       "type":"boolean",
                       "readOnly":true
                    },
                    "keylock":{
                       "description":"Device keylock state.",
                       "type":"string",
                       "enum":[
                          "on",
                          "off",
                          "unsupported"
                       ],
                       "example":"off"
                    },
                    "confirm_time_mode":{
                       "description":"Mainly for Mobile/Web App purposes. Indicates if time mode modal should be displayed when changing thermostat temperature. Controlled by Virtual Thermostat.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":true
                    },
                    "user_menu_lock":{
                       "description":"Pin code information to lock regulators user menu. Parameter is <b>optional</b>. Available when user menu lock is supported - check if `user_menu_lock_support` label is provided.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.KeyLockInfo"
                          }
                       ]
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.WTP.TemperatureRegulator/value"
           }
        },
        "Device.WTP.Relay":{
           "description":"Wireless Relay representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ARadioDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "state",
                    "timeout",
                    "timeout_enabled",
                    "inverted",
                    "time_since_state_change",
                    "work_mode"
                 ],
                 "properties":{
                    "state":{
                       "description":"State of the output. On/Off",
                       "type":"boolean",
                       "example":true
                    },
                    "timeout":{
                       "description":"Protection functionality, that will set device state to off if there are communication problems.<br> Unit: minutes.",
                       "type":"integer",
                       "minimum":5,
                       "maximum":60,
                       "example":15
                    },
                    "timeout_enabled":{
                       "description":"Indicates that timeout functionality is enabled.",
                       "type":"boolean",
                       "example":true
                    },
                    "backlight_mode":{
                       "description":"Buttons backlight mode. Parameter is <b>optional</b>. Available when backlight is supported - check if `has_backlight` label is provided.",
                       "type":"string",
                       "enum":[
                          "auto",
                          "fixed",
                          "off"
                       ],
                       "example":"fixed"
                    },
                    "backlight_brightness":{
                       "description":"Buttons backlight brightness.<br> Paremeter <b>hidden</b> when backlight is <b>unsupported</b>.<br> Unit: %",
                       "type":"integer",
                       "minimum":0,
                       "maximum":100,
                       "example":95
                    },
                    "backlight_idle_color":{
                       "description":"HTML/Hex RGB representation of color when controller is in idle (inactive state).<br> Paremeter <b>hidden</b> when backlight is <b>unsupported</b>.",
                       "type":"string",
                       "pattern":"/^#[0-9a-f]{6}$/i",
                       "example":"#FF00FF"
                    },
                    "backlight_active_color":{
                       "description":"HTML/Hex RGB representation of color when controller is active eg. motor is working.<br> Paremeter <b>hidden</b> when backlight is <b>unsupported</b>.",
                       "type":"string",
                       "pattern":"/^#[0-9a-f]{6}$/i",
                       "example":"#FFFF00"
                    },
                    "inverted":{
                       "description":"Indicates if should invert physical state of relay compared to represented state in application.",
                       "type":"boolean",
                       "example":false
                    },
                    "time_since_state_change":{
                       "description":"Time since last relay state change.<br>Unit: seconds",
                       "type":"integer",
                       "readOnly":true,
                       "example":120
                    },
                    "startup_state":{
                       "description":"State of output that should be set on device after power restart. Parameter is <b>optional</b>. Available when function is supported - check if `relay_startup_state_support` label is provided.<br>*NOTE*: cannot be changed when `work_mode` is set to `alarm_siren`.",
                       "type":"string",
                       "enum":[
                          "off",
                          "on",
                          "previous"
                       ],
                       "example":"off"
                    },
                    "no_output_mode":{
                       "description":"Indicates that relay is in no output mode - it takes state update as usual but hardware output remains off. Parameter is <b>optional</b>. Available when function is supported - check if `no_output_mode_support` label is provided.",
                       "type":"boolean",
                       "example":true
                    },
                    "trigger_signal_type":{
                       "description":"Selected device hardware trigger behavior. Impulse = (monostable trigger) impulse signal toggles the output state, state_change = (bistable trigger) when trigger state changes, output will be set equal to trigger signal. <br>Parameter is <b>optional</b>. Available when: check if `trigger_signal_config_support` label is provided.",
                       "type":"string",
                       "enum":[
                          "impulse",
                          "state_change"
                       ],
                       "example":"impulse"
                    },
                    "allowed_trigger_signal_types":{
                       "description":"List of available trigger signal types supported by the device. Allowed values to set in `trigger_signal_type` property. <br>Parameter is <b>optional</b>. Available when: check if `trigger_signal_config_support` label is provided.",
                       "type":"array",
                       "readOnly":true,
                       "items":{
                          "type":"string",
                          "enum":[
                             "impulse",
                             "state_change"
                          ]
                       },
                       "example":[
                          "impulse",
                          "state_change"
                       ]
                    },
                    "ambient_light_intensity":{
                       "description":"Measured ambient light intensity.<br> Unit: %.<br>Parameter is <b>optional</b>. Available when: check if `has_backlight_brightness_sensor` label is provided.",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":100,
                       "example":80
                    },
                    "work_mode":{
                       "description":"Relay working mode.",
                       "type":"string",
                       "enum":[
                          "standard",
                          "alarm_siren"
                       ],
                       "example":"standard"
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.WTP.Relay/value"
           }
        },
        "Device.WTP.RadiatorActuator":{
           "description":"Wireless Radiator Actuator representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ARadioDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "opening",
                    "opening_minimum",
                    "opening_maximum"
                 ],
                 "properties":{
                    "opening":{
                       "description":"Current valve opening level.<br> Unit: %",
                       "type":"integer",
                       "minimum":0,
                       "maximum":100,
                       "example":75
                    },
                    "opening_minimum":{
                       "description":"Lower valve opening level. Could not be greater than maximum. Setting minimum value above current opening value, will also change current opening value to minimum.<br> Unit: %",
                       "type":"integer",
                       "minimum":0,
                       "maximum":100,
                       "example":0
                    },
                    "opening_maximum":{
                       "description":"Upper valve opening level. Could not be less than minimum. Setting maximum value below current opening value, will also change current opening value to maximum.<br> Unit: %",
                       "type":"integer",
                       "minimum":0,
                       "maximum":100,
                       "example":100
                    },
                    "valve_temperature":{
                       "description":"Measured valve temperature value.<br> Unit: °C with one decimal number, multiplied by 10.<br><br> Parameter is <b>optional</b>. Available when sensor is supported - check if `has_valve_temperature_sensor` label is provided.",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":-400,
                       "maximum":1000,
                       "multipleOf":0.1,
                       "example":250
                    },
                    "emergency_opening":{
                       "description":"Emergency opening level when communication with central device is lost.<br> Unit: %.<br><br> Parameter is <b>optional</b>. Check if `emergency_opening_support` label is provided.",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":100,
                       "example":50
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.WTP.RadiatorActuator/value"
           }
        },
        "Device.WTP.TemperatureSensor":{
           "description":"Wireless Temperature Sensor representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ARadioDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "temperature",
                    "calibration"
                 ],
                 "properties":{
                    "temperature":{
                       "description":"Measured temperature value.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":-400,
                       "maximum":1000,
                       "multipleOf":0.1,
                       "example":250
                    },
                    "calibration":{
                       "description":"Static point temperature calibration, used to adjust measurments.<br> Unit: °C with one decimal number, multiplied by 10. <br> **NOTE:** Parameter will be **read-only** if label `factory_calibrated` is present!",
                       "type":"integer",
                       "minimum":-100,
                       "maximum":100,
                       "multipleOf":0.1,
                       "example":0
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.WTP.TemperatureSensor/value"
           }
        },
        "Device.WTP.HumiditySensor":{
           "description":"Wireless Humidity Sensor representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ARadioDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "humidity"
                 ],
                 "properties":{
                    "humidity":{
                       "description":"Measured relative humidity value.<br> Unit: rH% with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":1000,
                       "multipleOf":0.1,
                       "example":578
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.WTP.HumiditySensor/value"
           }
        },
        "Device.WTP.PressureSensor":{
           "description":"Wireless Pressure Sensor representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ARadioDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "pressure",
                    "altitude"
                 ],
                 "properties":{
                    "pressure":{
                       "type":"integer",
                       "description":"Measured pressure value.<br> Unit: hPa with one decimal number, multiplied by 10.",
                       "readOnly":true,
                       "minimum":3000,
                       "maximum":11000,
                       "multipleOf":0.1,
                       "example":9899
                    },
                    "altitude":{
                       "type":"integer",
                       "description":"Setting the altitude compensates the atmospheric pressure reading to the pressure at mean sea level, that is normally given in weather reports.",
                       "minimum":0,
                       "maximum":8849,
                       "example":311
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.WTP.PressureSensor/value"
           }
        },
        "Device.WTP.CO2Sensor":{
           "description":"Wireless CO2 Sensor representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ARadioDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "co2"
                 ],
                 "properties":{
                    "co2":{
                       "description":"Measured co2 value.<br> Unit: ppm.",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":10000,
                       "example":350
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.WTP.CO2Sensor/value"
           }
        },
        "Device.WTP.IAQSensor":{
           "description":"Wireless Indexed Air Quality Sensor representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ARadioDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "iaq",
                    "iaq_accuracy",
                    "air_quality"
                 ],
                 "properties":{
                    "iaq":{
                       "description":"Calculated Index of Air Quality",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":500,
                       "example":50
                    },
                    "iaq_accuracy":{
                       "description":"Index of Air Quality calculation accuracy",
                       "type":"string",
                       "enum":[
                          "unreliable",
                          "low",
                          "medium",
                          "high"
                       ],
                       "readOnly":true,
                       "example":"high"
                    },
                    "air_quality":{
                       "$ref":"#/components/schemas/Device.DescriptiveAirQuality"
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.WTP.IAQSensor/value"
           }
        },
        "Device.WTP.OpeningSensor":{
           "description":"Wireless Opening (Window/Door) Sensor representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ARadioDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "open",
                    "acknowledgment"
                 ],
                 "properties":{
                    "open":{
                       "description":"Opening sensor state. Open/Closed",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    },
                    "acknowledgment":{
                       "description":"Newer sensors support communication protocol with acknowledgment. When enabled, sensor will try deliver state change message three times or until ack is received. May increase battery usage if communication is noisy, but data transfer is more reliable.",
                       "type":"string",
                       "enum":[
                          "on",
                          "off",
                          "unsupported"
                       ],
                       "example":"on"
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.WTP.OpeningSensor/value"
           }
        },
        "Device.WTP.MotionSensor":{
           "description":"Wireless Motion Sensor representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ARadioDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "enabled",
                    "blind_duration",
                    "motion_detected",
                    "time_since_motion",
                    "sensor_type"
                 ],
                 "properties":{
                    "enabled":{
                       "description":"Enable or disable sensor. eg. If you want sense only at night time, you can setup automation to enable/disable sensor.",
                       "type":"boolean",
                       "example":true
                    },
                    "blind_duration":{
                       "description":"Duration of sensor being off after detecting motion.<br> Unit: seconds",
                       "type":"integer",
                       "minimum":2,
                       "maximum":255,
                       "example":2
                    },
                    "pulses_threshold":{
                       "description":"Sensitivity factor. How many pulses from sensor are needed to treat action as motion.<br>*NOTE*: available when `sensor_type` is set to `pir`, i.e. device `variant` is `generic`.",
                       "type":"integer",
                       "minimum":1,
                       "maximum":255,
                       "example":2
                    },
                    "pulses_window":{
                       "description":"Sensitivity factor. Maximum time window in which {pulses_treshold} must occur to treat action as motion.<br> Unit: seconds<br>*NOTE*: available when `sensor_type` is set to `pir`, i.e. device `variant` is `generic`.",
                       "type":"integer",
                       "minimum":1,
                       "maximum":255,
                       "example":2
                    },
                    "motion_detected":{
                       "description":"Holds latest motion detection state. Remains `true` on motion detection and `false` when `blind_duration` time elapses.<br> **Notice**: the value will remain `true`` all the time when subsequent motion detections occur until motion stops.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":true
                    },
                    "time_since_motion":{
                       "description":"Time since last motion detected.<br> Unit: seconds<br> **Notice**: -1 means not detected so far (motion didnt happen since system start).<br> **Notice**: This value will show 0 for each detected move, even if the previous one has not yet finished.",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":43200,
                       "example":50
                    },
                    "sensor_type":{
                       "description":"Registered sensor type.",
                       "type":"string",
                       "readOnly":true,
                       "enum":[
                          "pir",
                          "radar"
                       ]
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.WTP.MotionSensor/value"
           }
        },
        "Device.WTP.AQSensor":{
           "description":"Wireless Air Quality Sensor representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ARadioDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "pm1p0",
                    "pm2p5",
                    "pm4p0",
                    "pm10p0",
                    "air_quality"
                 ],
                 "properties":{
                    "pm1p0":{
                       "description":"Measured concentration of PM1.0 value (particulate matter).<br> Unit: μg/m3.",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":1000,
                       "example":16,
                       "x-unit":"1 micro gram per metre cubed",
                       "x-notInLua":false
                    },
                    "pm2p5":{
                       "description":"Measured concentration of PM2.5 value (particulate matter).<br> Unit: μg/m3.",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":1000,
                       "example":16,
                       "x-unit":"1 micro gram per metre cubed",
                       "x-notInLua":false
                    },
                    "pm4p0":{
                       "description":"Measured concentration of PM4.0 value (particulate matter).<br> Unit: μg/m3.",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":1000,
                       "example":16,
                       "x-unit":"1 micro gram per metre cubed",
                       "x-notInLua":false
                    },
                    "pm10p0":{
                       "description":"Measured concentration of PM10.0 value (particulate matter).<br> Unit: μg/m3.",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":1000,
                       "example":16,
                       "x-unit":"1 micro gram per metre cubed",
                       "x-notInLua":false
                    },
                    "air_quality":{
                       "$ref":"#/components/schemas/Device.DescriptiveAirQuality"
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.WTP.AQSensor/value"
           }
        },
        "Device.WTP.LightSensor":{
           "description":"Wireless Light Sensor representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ARadioDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "illuminance"
                 ],
                 "properties":{
                    "illuminance":{
                       "description":"Measured light illuminance value.<br> Unit: lx.",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":65535,
                       "example":400
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.WTP.LightSensor/value"
           }
        },
        "Device.WTP.SmokeSensor":{
           "description":"Wireless Smoke Sensor representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ARadioDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "locked",
                    "dirt_level",
                    "smoke_detected",
                    "high_temperature_detected",
                    "tamper_detected",
                    "uptime"
                 ],
                 "properties":{
                    "locked":{
                       "description":"Sensing/detection lock status. If true it means sensor won`t report high temperature and smoke detection alarms.",
                       "type":"boolean",
                       "example":false
                    },
                    "dirt_level":{
                       "description":"The current dirt (contamination) level of the optical sensor.<br> Unit: %.",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":100,
                       "example":55
                    },
                    "smoke_detected":{
                       "description":"A flag representing the detection of smoke by the sensor.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    },
                    "high_temperature_detected":{
                       "description":"A flag representing the detection of high temperature (eg. fire) by the sensor.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    },
                    "tamper_detected":{
                       "description":"A flag representing the detection of tamper (eg. the sensor is not in the correct position or someone is trying to take it off).",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    },
                    "uptime":{
                       "description":"Time since sensor start.<br> Unit: seconds.",
                       "type":"integer",
                       "minimum":0,
                       "maximum":2147483647,
                       "readOnly":true,
                       "example":600
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.WTP.SmokeSensor/value"
           }
        },
        "Device.WTP.FloodSensor":{
           "description":"Wireless Flood Sensor representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ARadioDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "flood_detected"
                 ],
                 "properties":{
                    "flood_detected":{
                       "description":"A flag representing the detection of flood / water leak by the sensor.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.WTP.FloodSensor/value"
           }
        },
        "Device.WTP.Throttle":{
           "description":"Wireless Throttle representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ARadioDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "opening",
                    "impulses",
                    "flow",
                    "formula"
                 ],
                 "properties":{
                    "opening":{
                       "description":"Current opening level. Unit: %.",
                       "type":"integer",
                       "minimum":0,
                       "maximum":100,
                       "example":50
                    },
                    "impulses":{
                       "description":"Current fan speed-o-meter impulses reading. Unit: %.",
                       "type":"integer",
                       "example":1200
                    },
                    "flow":{
                       "description":"Calculated throttle flow based on opening and impulses. Flow is calculated using formula in the *formula* parameter.",
                       "type":"number",
                       "format":"double",
                       "readOnly":true,
                       "example":76.281
                    },
                    "formula":{
                       "description":"Formula used to calculate flow. In formula you can access all object parameters by calling *object.parameter_name*. <br> Should contain only calculations returning number (excl. utils.ternary). Should not contain any condition statements, loops and more complicated code.",
                       "type":"string",
                       "example":"8+(object.impulses*((1.32-object.opening/100)^2*-0.35+1.9))*0.055"
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.WTP.Throttle/value"
           }
        },
        "Device.WTP.TwoStateInputSensor":{
           "description":"Wireless Boolean Input Sensor representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ARadioDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "state",
                    "inverted"
                 ],
                 "properties":{
                    "state":{
                       "description":"Measured input value. On/Off",
                       "type":"boolean",
                       "readOnly":true,
                       "example":true
                    },
                    "inverted":{
                       "description":"Indicates if physical state of input compared to represented state in application should be inverted.",
                       "type":"boolean",
                       "example":false
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.WTP.TwoStateInputSensor/value"
           }
        },
        "Device.WTP.Dimmer":{
           "description":"Wireless Led Dimmer representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ARadioDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "state",
                    "target_level"
                 ],
                 "properties":{
                    "state":{
                       "description":"State of the output. On/Off",
                       "type":"boolean",
                       "example":true
                    },
                    "target_level":{
                       "description":"Desired light intensity level on which device is set or level on which device will be set when turned on. (depending on state) <br> Unit: %.",
                       "type":"integer",
                       "minimum":1,
                       "maximum":100,
                       "example":75
                    },
                    "backlight_mode":{
                       "description":"Buttons backlight mode. Parameter is <b>optional</b>. Available when backlight is supported - check if `has_backlight` label is provided.",
                       "type":"string",
                       "enum":[
                          "auto",
                          "fixed",
                          "off"
                       ],
                       "example":"fixed"
                    },
                    "backlight_brightness":{
                       "description":"Buttons backlight brightness.<br> Paremeter <b>hidden</b> when backlight is <b>unsupported</b>.<br> Unit: %",
                       "type":"integer",
                       "minimum":0,
                       "maximum":100,
                       "example":95
                    },
                    "backlight_idle_color":{
                       "description":"HTML/Hex RGB representation of color when controller is in idle.<br> Paremeter <b>hidden</b> when backlight is <b>unsupported</b>.",
                       "type":"string",
                       "pattern":"/^#[0-9a-f]{6}$/i",
                       "example":"#FF00FF"
                    },
                    "backlight_active_color":{
                       "description":"HTML/Hex RGB representation of color when controller is active eg. motor is working.<br> Paremeter <b>hidden</b> when backlight is <b>unsupported</b>.",
                       "type":"string",
                       "pattern":"/^#[0-9a-f]{6}$/i",
                       "example":"#FFFF00"
                    },
                    "ambient_light_intensity":{
                       "description":"Measured ambient light intensity.<br> Unit: %.<br>Parameter is <b>optional</b>. Available when: check if `has_backlight_brightness_sensor` label is provided.",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":100,
                       "example":80
                    },
                    "output_temperature":{
                       "description":"Measured temperature value of hardware output circuit.<br> Unit: \\xB0C with one decimal number, multiplied by 10.<br>Parameter is <b>optional</b>. Available when: check if `has_output_temperature_sensor` label is provided.",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":-400,
                       "maximum":1500,
                       "multipleOf":0.1,
                       "example":250
                    },
                    "level_calibration":{
                       "type":"object",
                       "required":[
                          "minimum",
                          "maximum"
                       ],
                       "properties":{
                          "minimum":{
                             "description":"Absolute minimum level that can be set on the device. Could not be larger than maximum. <br>Parameter is <b>optional</b>. Available when: check if `level_calibration_support` label is provided.",
                             "type":"integer",
                             "minimum":0,
                             "maximum":255,
                             "example":0
                          },
                          "maximum":{
                             "description":"Absolute maximum level that can be set on the device. Could not be less than minimum. <br>Parameter is <b>optional</b>. Available when: check if `level_calibration_support` label is provided.",
                             "type":"integer",
                             "minimum":0,
                             "maximum":255,
                             "example":255
                          }
                       }
                    },
                    "switch_mode":{
                       "description":"Depending on the value of this parameter, the swiches behavior will change. Can be modified with values from `allowed_switch_modes` property. <br> Parameter is <b>optional</b>. Available when: check if `switch_mode_support` label is provided.",
                       "type":"string",
                       "enum":[
                          "single_monostable",
                          "single_bistable",
                          "up_and_down",
                          "single_monostable_dim_hotkey",
                          "single_monostable_dim_saved_hotkey"
                       ],
                       "example":"single_bistable"
                    },
                    "allowed_switch_modes":{
                       "description":"List of available switch modes supported by the device. Allowed values to set in `switch_mode` property.",
                       "type":"array",
                       "readOnly":true,
                       "items":{
                          "type":"string",
                          "enum":[
                             "single_monostable",
                             "single_bistable",
                             "up_and_down",
                             "single_monostable_dim_hotkey",
                             "single_monostable_dim_saved_hotkey"
                          ]
                       },
                       "example":[
                          "single_monostable",
                          "single_bistable"
                       ]
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.WTP.Dimmer/value"
           }
        },
        "Device.WTP.EnergyMeter":{
           "description":"Wireless Energy Meter representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ARadioDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "active_power",
                    "energy_consumed_today",
                    "energy_consumed_yesterday",
                    "energy_consumed_total"
                 ],
                 "properties":{
                    "current":{
                       "description":"Recent AC current measument.<br> Parameter is <b>optional</b>. Available when sensor is supported - check if `has_current_sensor` label is provided.<br> Unit: A with three decimal number, multiplied by 1000 (mA).",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":15000,
                       "multipleOf":0.001,
                       "example":120
                    },
                    "voltage":{
                       "description":"Recent AC voltage measument.<br> Parameter is <b>optional</b>. Available when sensoris supported - check if `has_voltage_sensor` label is provided.<br> Unit: V with three decimal number, multiplied by 1000 (mV).",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":260000,
                       "multipleOf":0.001,
                       "example":230000
                    },
                    "active_power":{
                       "description":"Recent AC active power measument.<br> Unit: W with three decimal number, multiplied by 1000 (mW).",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":4500000,
                       "multipleOf":0.001,
                       "example":7000
                    },
                    "energy_consumed_today":{
                       "description":"Sum of energy used today.<br> Unit: kWh with three decimal number, multiplied by 1000 (Wh).",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":100000,
                       "multipleOf":0.001,
                       "example":600
                    },
                    "energy_consumed_yesterday":{
                       "description":"Sum of energy used yesterday.<br> Unit: kWh with three decimal number, multiplied by 1000 (Wh).",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":100000,
                       "multipleOf":0.001,
                       "example":500
                    },
                    "energy_consumed_total":{
                       "description":"Total sum of energy used.<br> Unit: kWh with three decimal number, multiplied by 1000 (Wh).",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":2147483647,
                       "multipleOf":0.001,
                       "example":3000000
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.WTP.EnergyMeter/value"
           }
        },
        "Device.WTP.FanControl":{
           "description":"Wireles Fan Control representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ARadioDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "state",
                    "state_configuration",
                    "computed_flow"
                 ],
                 "properties":{
                    "state":{
                       "description":"Device state information.",
                       "readOnly":true,
                       "type":"object",
                       "required":[
                          "current",
                          "previous",
                          "remaining_time"
                       ],
                       "properties":{
                          "current":{
                             "description":"Current state.",
                             "readOnly":true,
                             "type":"string",
                             "enum":[
                                "off",
                                "automatic",
                                "holiday",
                                "hurricane",
                                "party",
                                "hearth",
                                "flaccid"
                             ]
                          },
                          "previous":{
                             "description":"Previous state.",
                             "readOnly":true,
                             "type":"string",
                             "enum":[
                                "off",
                                "automatic",
                                "holiday",
                                "hurricane",
                                "party",
                                "hearth",
                                "flaccid"
                             ]
                          },
                          "remaining_time":{
                             "description":"Remaining time of current state. Zero if current state is permament.",
                             "readOnly":true,
                             "type":"integer",
                             "minimum":0,
                             "maximum":2147483647
                          }
                       }
                    },
                    "state_configuration":{
                       "description":"Configurations for states.",
                       "type":"object",
                       "required":[
                          "auto",
                          "holiday",
                          "hurricane",
                          "party",
                          "hearth",
                          "flaccid"
                       ],
                       "properties":{
                          "auto":{
                             "description":"Configuration for automatic state.",
                             "type":"object",
                             "required":[
                                "co2_thresholds"
                             ],
                             "properties":{
                                "co2_thresholds":{
                                   "description":"CO2 thresholds to specify the way automatic state is working. Unit: ppm",
                                   "type":"array",
                                   "minimum":3,
                                   "maximum":3,
                                   "items":{
                                      "type":"integer",
                                      "minimum":0,
                                      "maximum":10000
                                   }
                                }
                             }
                          },
                          "holiday":{
                             "description":"Configuration for holiday state.",
                             "type":"object",
                             "required":[
                                "air_out_interval"
                             ],
                             "properties":{
                                "air_out_interval":{
                                   "description":"Interval at which airing is done in holiday state. Unit: days",
                                   "type":"integer",
                                   "minimum":0,
                                   "maximum":30
                                }
                             }
                          },
                          "hurricane":{
                             "description":"Configuration for hurricane state.",
                             "type":"object",
                             "required":[
                                "default_duration"
                             ],
                             "properties":{
                                "default_duration":{
                                   "description":"Default duration of hurricane state. Unit: seconds",
                                   "type":"integer",
                                   "minimum":0,
                                   "maximum":86400
                                }
                             }
                          },
                          "party":{
                             "description":"Configuration for party state.",
                             "type":"object",
                             "required":[
                                "default_duration"
                             ],
                             "properties":{
                                "default_duration":{
                                   "description":"Default duration of party state. Unit: seconds",
                                   "type":"integer",
                                   "minimum":0,
                                   "maximum":86400
                                }
                             }
                          },
                          "hearth":{
                             "description":"Configuration for hearth state.",
                             "type":"object",
                             "required":[
                                "default_duration"
                             ],
                             "properties":{
                                "default_duration":{
                                   "description":"Default duration of hearth state. Unit: seconds",
                                   "type":"integer",
                                   "minimum":0,
                                   "maximum":86400
                                }
                             }
                          },
                          "flaccid":{
                             "description":"Configuration for flaccid state.",
                             "type":"object",
                             "required":[
                                "default_duration"
                             ],
                             "properties":{
                                "default_duration":{
                                   "description":"Default duration of flaccid state. Unit: seconds",
                                   "type":"integer",
                                   "minimum":0,
                                   "maximum":86400
                                }
                             }
                          }
                       }
                    },
                    "computed_flow":{
                       "description":"Computed flow to display in device. May only be changed if *managed_by_ventilation_manager* label is not present.",
                       "type":"integer",
                       "minimum":0,
                       "multipleOf":0.1,
                       "example":5000
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.WTP.FanControl/value"
           }
        },
        "Device.WTP.RGBController":{
           "description":"Wireless RGB controller representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ARadioDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "state",
                    "brightness",
                    "led_color",
                    "white_temperature",
                    "color_mode",
                    "led_strip_type",
                    "white_temperature_correction",
                    "cool_white_temperature_correction",
                    "warm_white_temperature_correction",
                    "available_animations",
                    "animations",
                    "active_animation"
                 ],
                 "properties":{
                    "state":{
                       "description":"State of the output. On/Off",
                       "type":"boolean",
                       "example":true
                    },
                    "brightness":{
                       "description":"Desired brightness level on which device is set or level on which device will be set when turned on. (depending on state) Unit: %.",
                       "type":"integer",
                       "minimum":1,
                       "maximum":100,
                       "example":75,
                       "readOnly":true
                    },
                    "led_color":{
                       "description":"HTML/Hex RGB color that device will set on its output led strip.",
                       "type":"string",
                       "pattern":"/^#[0-9a-f]{6}$/i",
                       "example":"#ff00ff",
                       "readOnly":true
                    },
                    "white_temperature":{
                       "description":"Color temperature that device will set on its output led strip. Unit: Kelvins",
                       "type":"integer",
                       "minimum":1000,
                       "maximum":40000,
                       "example":3000,
                       "readOnly":true
                    },
                    "color_mode":{
                       "description":"Color mode that device is set on.",
                       "type":"string",
                       "enum":[
                          "rgb",
                          "temperature",
                          "animation"
                       ],
                       "example":"animation",
                       "readOnly":true
                    },
                    "led_strip_type":{
                       "description":"Led strip type that is connected with device. Needs to be set in order for device to display colors properly.",
                       "type":"string",
                       "enum":[
                          "rgb",
                          "rgbw",
                          "rgbww"
                       ]
                    },
                    "white_temperature_correction":{
                       "description":"White color temperature correction. Should be set on the value provided by led strip manufacturer. Available when led_strip_type set to rgbw.",
                       "type":"integer",
                       "minimum":1000,
                       "maximum":40000,
                       "example":3000
                    },
                    "cool_white_temperature_correction":{
                       "description":"Cool white color temperature correction. Should be set on the value provided by led strip manufacturer. Available when led_strip_type set to rgbww.",
                       "type":"integer",
                       "minimum":1000,
                       "maximum":40000,
                       "example":6000
                    },
                    "warm_white_temperature_correction":{
                       "description":"Warm white color temperature correction. Should be set on the value provided by led strip manufacturer. Available when led_strip_type set to rgbww.",
                       "type":"integer",
                       "minimum":1000,
                       "maximum":40000,
                       "example":3000
                    },
                    "available_animations":{
                       "description":"Animations styles that are available for device.",
                       "readOnly":true,
                       "type":"array",
                       "items":{
                          "allOf":[
                             {
                                "$ref":"#/components/schemas/Device.SBus.RGBController.Animation"
                             }
                          ]
                       }
                    },
                    "animations":{
                       "description":"Animations created by user that are available to run by device.",
                       "type":"array",
                       "items":{
                          "allOf":[
                             {
                                "$ref":"#/components/schemas/Device.SBus.RGBController.CustomAnimation"
                             }
                          ]
                       }
                    },
                    "active_animation":{
                       "description":"Active animation id if animation was activated.",
                       "type":"integer",
                       "readOnly":true,
                       "nullable":true,
                       "example":1
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.WTP.RGBController/value"
           }
        },
        "Device.WTP.FanCoilGearProperties":{
           "description":"Fan Coil gear properties.",
           "type":"object",
           "required":[
              "state",
              "hysteresis"
           ],
           "properties":{
              "state":{
                 "description":"State of the output relay for gear.",
                 "type":"boolean",
                 "readOnly":true
              },
              "hysteresis":{
                 "description":"Hysteresis from target temperature for the gear output to turn on.<br> Unit: °C with one decimal number, multiplied by 10.",
                 "type":"integer",
                 "minimum":1,
                 "maximum":50,
                 "multipleOf":0.1
              }
           }
        },
        "Device.WTP.FanCoil":{
           "description":"Wireless Fan Coil controller representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ARadioDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "gear_1",
                    "gear_2",
                    "gear_3",
                    "factory_reset_timestamp",
                    "valve_state"
                 ],
                 "properties":{
                    "gear_1":{
                       "description":"Gear 1 properties.",
                       "type":"object",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.WTP.FanCoilGearProperties"
                          }
                       ]
                    },
                    "gear_2":{
                       "description":"Gear 2 properties.",
                       "type":"object",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.WTP.FanCoilGearProperties"
                          }
                       ]
                    },
                    "gear_3":{
                       "description":"Gear 3 properties.",
                       "type":"object",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.WTP.FanCoilGearProperties"
                          }
                       ]
                    },
                    "factory_reset_timestamp":{
                       "description":"Timestamp of last factory reset of the device.",
                       "type":"integer",
                       "nullable":true,
                       "readOnly":true
                    },
                    "valve_state":{
                       "description":"State of the valve output.",
                       "type":"boolean",
                       "readOnly":true
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.WTP.FanCoil/value"
           }
        },
        "Device.WTP.IRHeater":{
           "description":"Wireless IR heater controller representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ARadioDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "state",
                    "foil_working_temperature",
                    "foil_current_temperature",
                    "triac_current_temperature",
                    "pwm_duty",
                    "device_state"
                 ],
                 "properties":{
                    "state":{
                       "description":"State of the output.",
                       "type":"boolean"
                    },
                    "foil_working_temperature":{
                       "description":"Working temperature of the IR foil.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "minimum":1100,
                       "maximum":1350,
                       "example":1100
                    },
                    "foil_current_temperature":{
                       "description":"Current IR foil temperature.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":800
                    },
                    "triac_current_temperature":{
                       "description":"Current triac temperature.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":800
                    },
                    "pwm_duty":{
                       "description":"PWM duty of the IR foil controller.<br> Unit: % with two decimal numbers, multiplied by 100.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.01,
                       "example":5000
                    },
                    "device_state":{
                       "description":"IR heater controller state.",
                       "type":"string",
                       "enum":[
                          "idle",
                          "heating_full_power",
                          "heating_temp_rampe_up",
                          "heating_keep_temp",
                          "cooling_temp_rampe_down",
                          "alarm",
                          "test",
                          "manual",
                          "waiting_for_signal",
                          "calibration"
                       ],
                       "readOnly":true
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.WTP.IRHeater/value"
           }
        },
        "Device.TECH.TwoStateInputSensor":{
           "description":"Wired Boolean Input Sensor representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AWiredDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "sub_id",
                    "state",
                    "inverted"
                 ],
                 "properties":{
                    "sub_id":{
                       "description":"Unique (per device container) identifier that helps to distinguish same device types in one container.",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":10,
                       "example":5
                    },
                    "state":{
                       "description":"Measured input value. On/Off",
                       "type":"boolean",
                       "readOnly":true,
                       "example":true
                    },
                    "inverted":{
                       "description":"Indicates if physical state of input compared to represented state in application should be inverted.",
                       "type":"boolean",
                       "example":false
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.TECH.TwoStateInputSensor/value"
           }
        },
        "Device.TECH.TemperatureSensor":{
           "description":"Wired Temperature Sensor representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AWiredDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "sub_id",
                    "temperature",
                    "calibration"
                 ],
                 "properties":{
                    "sub_id":{
                       "description":"Unique (per device container) identifier that helps to distinguish same device types in one container.",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":10,
                       "example":5
                    },
                    "temperature":{
                       "description":"Measured temperature value.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":-400,
                       "maximum":1000,
                       "multipleOf":0.1,
                       "example":250
                    },
                    "calibration":{
                       "description":"Static point temperature calibration, used to adjust measurments.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "minimum":-100,
                       "maximum":100,
                       "multipleOf":0.1,
                       "example":0
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.TECH.TemperatureSensor/value"
           }
        },
        "Device.TECH.TemperatureRegulator":{
           "description":"Wired Temperature Regulator representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AWiredDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "sub_id",
                    "target_temperature",
                    "target_temperature_mode",
                    "target_temperature_minimum",
                    "target_temperature_maximum",
                    "target_temperature_reached",
                    "confirm_time_mode"
                 ],
                 "properties":{
                    "sub_id":{
                       "description":"Unique (per device container) identifier that helps to distinguish same device types in one container.",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":10,
                       "example":5
                    },
                    "target_temperature":{
                       "description":"Desired setpoint temperature, which device will try to achieve.<br> Unit: °C with one decimal number, multiplied by 10.<br>Minimum from parameter `target_temperature_minimum`, maximum from parameter `target_temperature_maximum`.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "minimum":50,
                       "maximum":350,
                       "example":235
                    },
                    "target_temperature_mode":{
                       "type":"object",
                       "required":[
                          "current",
                          "remaining_time"
                       ],
                       "properties":{
                          "current":{
                             "description":"Regulator target temperature mode. Specifies if regulator works in `constant` mode with one target temperature, `time_limited` mode with one temporary target temperature or according to schedule in `schedule` mode with many target temperatures in time, configured by user.<br> <b>NOTE:</b> Parameter is read only, use commands to change target temperature mode!<br> <b>NOTE:</b> Parameter cannot be `schedule` if thermostat doesnt have `has_schedule` label!<br> <b>NOTE:</b> When not associated with Virtual Thermostat it will always work in `constant` mode.",
                             "type":"string",
                             "readOnly":true,
                             "enum":[
                                "schedule",
                                "constant",
                                "time_limited"
                             ],
                             "example":"constant"
                          },
                          "remaining_time":{
                             "description":"Remaining time until `time_limited` mode ends. Cannot be modified directly - use commands.<br> Unit: minutes.",
                             "type":"integer",
                             "readOnly":true,
                             "minimum":1,
                             "maximum":1440,
                             "example":600
                          }
                       }
                    },
                    "target_temperature_minimum":{
                       "description":"Lower limit of the target temperature. Could not be greater than maximum. Setting minimum value above target value, will also change target value to minimum.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "minimum":50,
                       "maximum":350,
                       "multipleOf":0.1,
                       "example":50
                    },
                    "target_temperature_maximum":{
                       "description":"Upper limit of the target temperature. Could not be less than minimum. Setting maximum below target, will also change target value to minimum.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "minimum":50,
                       "maximum":350,
                       "multipleOf":0.1,
                       "example":350
                    },
                    "target_temperature_reached":{
                       "description":"Controls device`s algorithm working state indicator. eg LED Diode. May be controlled by external algorithms or devices such as Thermostat.",
                       "type":"boolean",
                       "readOnly":true
                    },
                    "confirm_time_mode":{
                       "description":"Mainly for Mobile/Web App purposes. Indicates if time mode modal should be displayed when changing thermostat temperature. Controlled by Virtual Thermostat.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":true
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.TECH.TemperatureRegulator/value"
           }
        },
        "Device.TECH.HumiditySensor":{
           "description":"Wired Humidity Sensor representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AWiredDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "sub_id",
                    "humidity"
                 ],
                 "properties":{
                    "sub_id":{
                       "description":"Unique (per device container) identifier that helps to distinguish same device types in one container.",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":10,
                       "example":5
                    },
                    "humidity":{
                       "description":"Measured relative humidity value.<br> Unit: rH% with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":1000,
                       "multipleOf":0.1,
                       "example":578
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.TECH.HumiditySensor/value"
           }
        },
        "Device.TECH.Relay":{
           "description":"Wired Relay representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AWiredDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "sub_id",
                    "state",
                    "timeout",
                    "timeout_enabled",
                    "inverted",
                    "time_since_state_change",
                    "work_mode"
                 ],
                 "properties":{
                    "sub_id":{
                       "description":"Unique (per device container) identifier that helps to distinguish same device types in one container.",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":10,
                       "example":5
                    },
                    "state":{
                       "description":"State of the output. On/Off",
                       "type":"boolean",
                       "example":true
                    },
                    "timeout":{
                       "description":"Protection functionality, that will set device state to off if there are communication problems.<br> Unit: minutes.",
                       "type":"integer",
                       "minimum":5,
                       "maximum":60,
                       "example":15
                    },
                    "timeout_enabled":{
                       "description":"Indicates that timeout functionality is enabled.",
                       "type":"boolean",
                       "example":true
                    },
                    "inverted":{
                       "description":"Indicates if should invert physical state of relay compared to represented state in application.",
                       "type":"boolean",
                       "example":false
                    },
                    "time_since_state_change":{
                       "description":"Time since last relay state change.<br>Unit: seconds",
                       "type":"integer",
                       "readOnly":true,
                       "example":120
                    },
                    "work_mode":{
                       "description":"Relay working mode.",
                       "type":"string",
                       "enum":[
                          "standard",
                          "alarm_siren"
                       ],
                       "example":"standard"
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.TECH.Relay/value"
           }
        },
        "Device.TECH.HeatPump":{
           "description":"Wired Heat Pump representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AWiredDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "work_mode",
                    "work_mode_list",
                    "fan",
                    "pump_state",
                    "compressor_state",
                    "cop",
                    "cop_text",
                    "temperature_outdoor",
                    "actual_power",
                    "actual_power_text",
                    "upper_source_in_temp",
                    "electrical_power",
                    "valve_buffer_state_text",
                    "ehome_work_mode",
                    "compressor_oil_temperature",
                    "current_flow",
                    "current_power_consumption",
                    "evd_valve_opening",
                    "upper_source_pump_state",
                    "evd_condensing_pressure",
                    "compressor_last_work_time",
                    "temperature_return"
                 ],
                 "properties":{
                    "work_mode":{
                       "description":"Heat pump set working mode idt text",
                       "type":"integer"
                    },
                    "work_mode_list":{
                       "description":"list available work mode idt text",
                       "readOnly":true,
                       "type":"array",
                       "items":{
                          "type":"integer"
                       },
                       "example":[
                          1,
                          2,
                          3
                       ]
                    },
                    "fan":{
                       "description":"fan gear  Unit: %",
                       "type":"integer",
                       "readOnly":true,
                       "example":7,
                       "minimum":0,
                       "maximum":100
                    },
                    "pump_state":{
                       "description":"Current pump state idt text.",
                       "type":"integer",
                       "readOnly":true,
                       "example":924
                    },
                    "compressor_state":{
                       "description":"compresor state",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    },
                    "cop":{
                       "description":"cop value.<br> Unit: int with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":7,
                       "minimum":0,
                       "maximum":500
                    },
                    "cop_text":{
                       "description":"label ID  text (ENG) to cop",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":2147483647
                    },
                    "temperature_outdoor":{
                       "description":"Current outdoor temperature.<br>Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "example":450,
                       "readOnly":true,
                       "minimum":-500,
                       "maximum":1000
                    },
                    "actual_power":{
                       "description":"total energy consumed.<br> Unit: kw with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":578,
                       "minimum":0,
                       "maximum":1000
                    },
                    "actual_power_text":{
                       "description":"label ID  text (ENG) to actual_power",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":2147483647
                    },
                    "upper_source_in_temp":{
                       "description":"Current upper source temperature.<br>Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "example":450,
                       "multipleOf":0.1,
                       "readOnly":true,
                       "minimum":-500,
                       "maximum":1000
                    },
                    "electrical_power":{
                       "description":"Sumary electrical power.<br>Unit: kWh with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "example":450,
                       "multipleOf":0.1,
                       "readOnly":true,
                       "minimum":0,
                       "maximum":1000
                    },
                    "valve_buffer_state_text":{
                       "description":"actual state text ID of valve",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":2147483647
                    },
                    "ehome_work_mode":{
                       "description":"Heat pump set ehome work mode.",
                       "type":"string",
                       "enum":[
                          "auto",
                          "cooling",
                          "heating"
                       ],
                       "example":"auto"
                    },
                    "compressor_oil_temperature":{
                       "description":"Current compressor_oil_temperature.<br>Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "example":450,
                       "multipleOf":0.1,
                       "readOnly":true,
                       "minimum":-500,
                       "maximum":1000
                    },
                    "current_flow":{
                       "description":"Current flow.<br>Unit: l/h.",
                       "type":"integer",
                       "example":450,
                       "readOnly":true,
                       "minimum":0,
                       "maximum":20000
                    },
                    "current_power_consumption":{
                       "description":"Current current_power_consumption.<br>Unit: watt.",
                       "type":"integer",
                       "example":450,
                       "readOnly":true,
                       "minimum":0,
                       "maximum":100000
                    },
                    "evd_valve_opening":{
                       "description":"Current evd_valve_opening.<br>Unit: % with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "example":100,
                       "multipleOf":0.1,
                       "readOnly":true,
                       "minimum":0,
                       "maximum":1000
                    },
                    "upper_source_pump_state":{
                       "description":"Current upper_source_pump_state.<br>Unit: % with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "example":100,
                       "multipleOf":0.1,
                       "readOnly":true,
                       "minimum":0,
                       "maximum":1000
                    },
                    "evd_condensing_pressure":{
                       "description":"Current evd_condensing_pressure.<br>Unit: pascal.",
                       "type":"integer",
                       "example":100,
                       "readOnly":true,
                       "minimum":0,
                       "maximum":100
                    },
                    "compressor_last_work_time":{
                       "description":"Current compressor_last_work_time.<br>Unit: second.",
                       "type":"integer",
                       "example":100,
                       "readOnly":true,
                       "minimum":0,
                       "maximum":1000000
                    },
                    "temperature_return":{
                       "description":"Current return temperature.<br>Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "example":500,
                       "minimum":-500,
                       "maximum":1500,
                       "readOnly":true
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.TECH.HeatPump/value"
           }
        },
        "Device.TECH.ParamContainer":{
           "description":"Wired parameters container representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AWiredDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "container_name",
                    "container_parameters",
                    "parameters"
                 ],
                 "properties":{
                    "container_name":{
                       "description":"buffer ID name.",
                       "type":"integer",
                       "readOnly":true
                    },
                    "container_parameters":{
                       "description":"container of 30 items",
                       "type":"array",
                       "items":{
                          "type":"object",
                          "required":[
                             "name_text",
                             "unit",
                             "value"
                          ],
                          "properties":{
                             "name_text":{
                                "type":"integer",
                                "description":"name text ID"
                             },
                             "unit":{
                                "type":"integer",
                                "description":"unit of value,<br>0 - °C with one decimal,<br>1 - humidity with one decimal,<br>2 - hecto pascal with one decimal,<br>3 - Indoor Air Quality,4 - percent,<br>5 - bool,<br>6 - ppm"
                             },
                             "value":{
                                "type":"integer"
                             }
                          }
                       }
                    },
                    "parameters":{
                       "description":"container of 30 items, each item is a parameter, name is text id",
                       "type":"object",
                       "properties":{
                          "123":{
                             "type":"object",
                             "required":[
                                "name_text",
                                "unit",
                                "value",
                                "editable",
                                "min",
                                "max"
                             ],
                             "properties":{
                                "name_text":{
                                   "type":"integer",
                                   "description":"name text ID"
                                },
                                "unit":{
                                   "type":"integer",
                                   "description":"unit of value,<br>0 - °C with one decimal,<br>1 - humidity with one decimal,<br>2 - hecto pascal with one decimal,<br>3 - Indoor Air Quality,4 - percent,<br>5 - bool,<br>6 - ppm"
                                },
                                "value":{
                                   "type":"integer"
                                },
                                "editable":{
                                   "type":"boolean",
                                   "description":"if true - value can be changed"
                                },
                                "min":{
                                   "type":"integer",
                                   "description":"min value"
                                },
                                "max":{
                                   "type":"integer",
                                   "description":"max value"
                                }
                             }
                          }
                       }
                    }
                 }
              }
           ]
        },
        "Device.TECH.Ventilation":{
           "description":"Wired recuperator - mechanical ventilation representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AWiredDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "cooling",
                    "pre_heating",
                    "post_heating",
                    "gwc",
                    "humidifier",
                    "bypass",
                    "intake_temperature",
                    "exhaust_temperature",
                    "extract_temperature",
                    "supply_temperature",
                    "additional_temperature_supply",
                    "additional_temperature_outside",
                    "co2ppm",
                    "humidity",
                    "supply_fan_gear",
                    "extract_fan_gear",
                    "supply_fan_flow",
                    "extract_fan_flow",
                    "is_flow",
                    "min_flow",
                    "max_flow",
                    "target_temperature",
                    "target_temperature_minimum",
                    "target_temperature_maximum",
                    "work_mode",
                    "state",
                    "state_text",
                    "target_flow_supply",
                    "target_flow_extract",
                    "target_gear_supply",
                    "target_gear_extract",
                    "bypass_work_mode",
                    "bypass_work_mode_list",
                    "gwc_work_mode",
                    "gwc_work_mode_list"
                 ],
                 "properties":{
                    "cooling":{
                       "description":"cooling working state on/off.",
                       "type":"boolean",
                       "readOnly":true
                    },
                    "pre_heating":{
                       "description":"pre heating working state on/off.",
                       "type":"boolean",
                       "readOnly":true
                    },
                    "post_heating":{
                       "description":"post heating working state on/off.",
                       "type":"boolean",
                       "readOnly":true
                    },
                    "gwc":{
                       "description":"gwc working state on/off.",
                       "type":"boolean",
                       "readOnly":true
                    },
                    "humidifier":{
                       "description":"humidifier working state on/off.",
                       "type":"boolean",
                       "readOnly":true
                    },
                    "bypass":{
                       "description":"bypass working state on/off.",
                       "type":"boolean",
                       "readOnly":true
                    },
                    "intake_temperature":{
                       "description":"Measured intake temperature value.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "minimum":-700,
                       "maximum":850,
                       "multipleOf":0.1,
                       "example":250,
                       "readOnly":true
                    },
                    "exhaust_temperature":{
                       "description":"Measured exhaust temperature value.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "minimum":-700,
                       "maximum":850,
                       "multipleOf":0.1,
                       "example":250,
                       "readOnly":true
                    },
                    "extract_temperature":{
                       "description":"Measured extract air temperature value.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "minimum":-700,
                       "maximum":850,
                       "multipleOf":0.1,
                       "example":250,
                       "readOnly":true
                    },
                    "supply_temperature":{
                       "description":"Measured supply air temperature value.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "minimum":-700,
                       "maximum":850,
                       "multipleOf":0.1,
                       "example":250,
                       "readOnly":true
                    },
                    "additional_temperature_supply":{
                       "description":"Measured additional supply air temperature value.<br> Unit: °C with one decimal number, multiplied by 10.  Available when: check if `additional_temperature_supply_available` label is provided.",
                       "type":"integer",
                       "minimum":-700,
                       "maximum":850,
                       "multipleOf":0.1,
                       "example":250,
                       "readOnly":true
                    },
                    "additional_temperature_outside":{
                       "description":"Measured additional outside air temperature value.<br> Unit: °C with one decimal number, multiplied by 10. Available when: check if `additional_temperature_outside_available` label is provided.",
                       "type":"integer",
                       "minimum":-700,
                       "maximum":850,
                       "multipleOf":0.1,
                       "example":250,
                       "readOnly":true
                    },
                    "co2ppm":{
                       "description":"Measured co2ppm value.<br> Unit: ppm.",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":10000,
                       "example":350
                    },
                    "humidity":{
                       "description":"Measured relative humidity value.<br> Unit: rH% with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "readOnly":true,
                       "minimum":0,
                       "maximum":1000,
                       "example":578
                    },
                    "supply_fan_gear":{
                       "description":"Gear on which supply fan works. Unit: %",
                       "type":"integer",
                       "minimum":0,
                       "maximum":100,
                       "example":35
                    },
                    "extract_fan_gear":{
                       "description":"Gear on which extract fan works. Unit: %",
                       "type":"integer",
                       "minimum":0,
                       "maximum":100,
                       "example":35
                    },
                    "supply_fan_flow":{
                       "description":"current supply fan flow. Unit: m3/h",
                       "type":"integer",
                       "minimum":0,
                       "maximum":10000,
                       "example":35
                    },
                    "extract_fan_flow":{
                       "description":"extract supply fan flow. Unit: m3/h",
                       "type":"integer",
                       "minimum":0,
                       "maximum":10000,
                       "example":35
                    },
                    "is_flow":{
                       "description":"informs about working with flow or gears. on/off. true-> flow",
                       "type":"boolean",
                       "readOnly":true
                    },
                    "min_flow":{
                       "description":"Lower limit of the fan flow. Unit: m3/h",
                       "type":"integer",
                       "minimum":0,
                       "maximum":10000,
                       "example":35
                    },
                    "max_flow":{
                       "description":"Upper limit of the fan flow. Unit: m3/h",
                       "type":"integer",
                       "minimum":0,
                       "maximum":10000,
                       "example":35
                    },
                    "target_temperature":{
                       "description":"Desired setpoint temperature, which device will try to achieve.",
                       "type":"integer",
                       "minimum":10,
                       "maximum":35,
                       "example":50
                    },
                    "target_temperature_minimum":{
                       "description":"Lower limit of the target temperature. Could not be greater than maximum. Setting minimum value above target value, will also change target value to minimum.<br> Unit: °C",
                       "type":"integer",
                       "minimum":0,
                       "maximum":100,
                       "example":30,
                       "readOnly":true
                    },
                    "target_temperature_maximum":{
                       "description":"Upper limit of the target temperature. Could not be less than minimum. Setting maximum below target, will also change target value to minimum.<br> Unit: °C",
                       "type":"integer",
                       "example":99,
                       "minimum":0,
                       "maximum":100,
                       "readOnly":true
                    },
                    "work_mode":{
                       "description":"Ventilation  working mode AUTO = 0,SINUM = 1",
                       "type":"string",
                       "enum":[
                          "auto",
                          "sinum"
                       ]
                    },
                    "state":{
                       "description":"Ventilation working state.",
                       "minimum":0,
                       "maximum":40,
                       "type":"integer",
                       "readOnly":true
                    },
                    "state_text":{
                       "description":"Pellet boiler working state ID name.",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":2147483647
                    },
                    "target_flow_supply":{
                       "description":"Desired setpoint fan flow suply. Unit: m3/h",
                       "type":"integer",
                       "minimum":0,
                       "maximum":10000,
                       "example":35
                    },
                    "target_flow_extract":{
                       "description":"Desired setpoint fan flow extract. Unit: m3/h",
                       "type":"integer",
                       "minimum":0,
                       "maximum":10000,
                       "example":35
                    },
                    "target_gear_supply":{
                       "description":"Desired setpoint fan gear supply. Unit: %",
                       "type":"integer",
                       "minimum":0,
                       "maximum":100,
                       "example":35
                    },
                    "target_gear_extract":{
                       "description":"Desired setpoint fan gear extract. Unit: %",
                       "type":"integer",
                       "minimum":0,
                       "maximum":100,
                       "example":35
                    },
                    "bypass_work_mode":{
                       "description":"Bypass set working mode idt. <br>Parameter is <b>optional</b>. Available when: check if `bypass_available` label is provided.",
                       "type":"integer"
                    },
                    "bypass_work_mode_list":{
                       "description":"List available bybapss work mode idt text. <br>Parameter is <b>optional</b>. Available when: check if `bypass_available` label is provided.",
                       "readOnly":true,
                       "type":"array",
                       "items":{
                          "type":"integer"
                       },
                       "example":[
                          1,
                          2,
                          3
                       ]
                    },
                    "gwc_work_mode":{
                       "description":"Gwc set working mode idt.",
                       "type":"integer"
                    },
                    "gwc_work_mode_list":{
                       "description":"List available gwc work mode idt text.",
                       "readOnly":true,
                       "type":"array",
                       "items":{
                          "type":"integer"
                       },
                       "example":[
                          1,
                          2,
                          3
                       ]
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.TECH.Ventilation/value"
           }
        },
        "Device.TECH.PelletBoiler":{
           "description":"Wired pellet boiler representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AWiredDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "feeder",
                    "stocker",
                    "fan",
                    "grid",
                    "heater",
                    "state",
                    "state_text",
                    "temperature_central_heating",
                    "temperature_exhaust",
                    "temperature_return",
                    "temperature_feeder",
                    "fire",
                    "target_temperature",
                    "target_temperature_mode",
                    "target_temperature_minimum",
                    "target_temperature_maximum",
                    "correction",
                    "firing_up",
                    "blockade",
                    "tray_calibrate",
                    "tray_percent",
                    "cause_of_damping"
                 ],
                 "properties":{
                    "feeder":{
                       "description":"Feeder working state on/off.",
                       "type":"boolean",
                       "readOnly":true
                    },
                    "stocker":{
                       "description":"Secondary feeder working state on/off.",
                       "type":"boolean",
                       "readOnly":true
                    },
                    "fan":{
                       "description":"Current fan speed 0 - 100.<br>Unit: %",
                       "type":"integer",
                       "minimum":0,
                       "maximum":100,
                       "example":50,
                       "readOnly":true
                    },
                    "grid":{
                       "description":"Current grid working state.",
                       "type":"boolean",
                       "example":false,
                       "readOnly":true
                    },
                    "heater":{
                       "description":"Heater working state on/off.",
                       "type":"boolean",
                       "readOnly":true
                    },
                    "state":{
                       "description":"Pellet boiler working state.",
                       "minimum":0,
                       "maximum":40,
                       "type":"integer",
                       "readOnly":true
                    },
                    "state_text":{
                       "description":"Pellet boiler working state ID name.",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":2147483647
                    },
                    "temperature_central_heating":{
                       "description":"Current central heating temperature.<br>Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "example":450,
                       "minimum":-500,
                       "maximum":1500,
                       "multipleOf":0.1,
                       "readOnly":true
                    },
                    "temperature_exhaust":{
                       "description":"Current exhaust temperature.<br>Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "example":500,
                       "minimum":0,
                       "maximum":5000,
                       "multipleOf":0.1,
                       "readOnly":true
                    },
                    "temperature_return":{
                       "description":"Current return temperature.<br>Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "example":500,
                       "minimum":-500,
                       "maximum":1500,
                       "multipleOf":0.1,
                       "readOnly":true
                    },
                    "temperature_feeder":{
                       "description":"Current feeder temperature.<br>Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "example":500,
                       "minimum":0,
                       "maximum":1500,
                       "multipleOf":0.1,
                       "readOnly":true
                    },
                    "fire":{
                       "description":"Fire state.",
                       "type":"boolean",
                       "example":true,
                       "readOnly":true
                    },
                    "target_temperature":{
                       "description":"Desired target (setpoint) temperature, which device will try to achieve.<br> Unit: °C<br><b>NOTE:</b> Can be changed only if device is in `fixed` target temperature mode.",
                       "type":"integer",
                       "example":50,
                       "minimum":0,
                       "maximum":100
                    },
                    "target_temperature_mode":{
                       "description":"Defines whether target temperature is fixed or dynamic eg. computed by heat curve.<br><b>NOTE:</b> Can be changed only if device has associated temperature curve.",
                       "type":"string",
                       "enum":[
                          "fixed",
                          "heat_curve"
                       ],
                       "example":"fixed"
                    },
                    "target_temperature_minimum":{
                       "description":"Lower limit of the target temperature. Could not be greater than maximum. Setting minimum value above target value, will also change target value to minimum.<br> Unit: °C",
                       "type":"integer",
                       "minimum":0,
                       "maximum":100,
                       "example":30,
                       "readOnly":true
                    },
                    "target_temperature_maximum":{
                       "description":"Upper limit of the target temperature. Could not be less than minimum. Setting maximum below target, will also change target value to minimum.<br> Unit: °C",
                       "type":"integer",
                       "example":99,
                       "minimum":0,
                       "maximum":100,
                       "readOnly":true
                    },
                    "correction":{
                       "description":"Target temperature correction.<br>Unit: °C",
                       "type":"integer",
                       "minimum":0,
                       "maximum":20,
                       "example":5,
                       "readOnly":true
                    },
                    "firing_up":{
                       "description":"Firing up command set by user.",
                       "type":"boolean",
                       "example":true
                    },
                    "blockade":{
                       "description":"Firing up blockade.",
                       "type":"boolean",
                       "example":true
                    },
                    "tray_calibrate":{
                       "description":"Is tray calibrated.",
                       "type":"boolean",
                       "example":"true",
                       "readOnly":true
                    },
                    "tray_percent":{
                       "description":"Percentage of tray filling.<br>Unit: %",
                       "type":"integer",
                       "example":100,
                       "minimum":0,
                       "maximum":100,
                       "readOnly":true
                    },
                    "cause_of_damping":{
                       "description":"cause of damping array,Id text from tech translation db",
                       "items":{
                          "type":"integer"
                       },
                       "example":[
                          100
                       ],
                       "readOnly":true
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.TECH.PelletBoiler/value"
           }
        },
        "Device.TECH.CommonDHWMain":{
           "description":"Main dhw representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AWiredDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "target_temperature",
                    "target_temperature_mode",
                    "target_temperature_minimum",
                    "target_temperature_maximum",
                    "correction",
                    "temperature_central_heating",
                    "temperature_domestic_hot_water",
                    "pump_work"
                 ],
                 "properties":{
                    "target_temperature":{
                       "description":"Desired target (setpoint) temperature, which device will try to achieve.<br> Unit: °C<br><b>NOTE:</b> Can be changed only if device is in `fixed` target temperature mode.",
                       "type":"integer",
                       "example":50
                    },
                    "target_temperature_mode":{
                       "description":"Defines whether target temperature is fixed or dynamic eg. computed by heat curve.<br><b>NOTE:</b> Can be changed only if device has associated temperature curve.",
                       "type":"string",
                       "enum":[
                          "fixed",
                          "heat_curve"
                       ],
                       "example":"fixed"
                    },
                    "target_temperature_minimum":{
                       "description":"Lower limit of the target temperature. Could not be greater than maximum. Setting minimum value above target value, will also change target value to minimum.<br> Unit: °C",
                       "type":"integer",
                       "example":30,
                       "minimum":0,
                       "maximum":100,
                       "readOnly":true
                    },
                    "target_temperature_maximum":{
                       "description":"Upper limit of the target temperature. Could not be less than minimum. Setting maximum below target, will also change target value to minimum.<br> Unit: °C",
                       "type":"integer",
                       "example":99,
                       "minimum":0,
                       "maximum":100,
                       "readOnly":true
                    },
                    "correction":{
                       "description":"Target temperature correction.<br>Unit: °C",
                       "type":"integer",
                       "example":5,
                       "minimum":0,
                       "maximum":100,
                       "readOnly":true
                    },
                    "temperature_central_heating":{
                       "description":"Current central heating temperature.<br>Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "example":450,
                       "minimum":-500,
                       "maximum":1500,
                       "readOnly":true
                    },
                    "temperature_domestic_hot_water":{
                       "description":"Current domestic hot water temperature.<br>Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "example":450,
                       "minimum":-500,
                       "maximum":1500,
                       "readOnly":true
                    },
                    "pump_work":{
                       "description":"Current pump working state on/off.",
                       "type":"boolean",
                       "example":true
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.TECH.CommonDHWMain/value"
           }
        },
        "Device.TECH.CommonValve":{
           "description":"Valve representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AWiredDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "target_temperature",
                    "target_temperature_mode",
                    "target_temperature_minimum",
                    "target_temperature_maximum",
                    "correction",
                    "temperature_valve",
                    "open_percent",
                    "state",
                    "state_text",
                    "temperature_return",
                    "temperature_central_heating",
                    "room_regulator",
                    "pump_work",
                    "blockade",
                    "weather_control",
                    "temperature_outdoor",
                    "enabled",
                    "sub_id",
                    "work_mode"
                 ],
                 "properties":{
                    "target_temperature":{
                       "description":"Desired target (setpoint) temperature, which device will try to achieve.<br> Unit: °C<br><b>NOTE:</b> Can be changed only if device is in `fixed` target temperature mode.",
                       "type":"integer",
                       "example":50
                    },
                    "target_temperature_mode":{
                       "description":"Defines whether target temperature is fixed or dynamic eg. computed by heat curve.<br><b>NOTE:</b> Can be changed only if device has associated temperature curve.",
                       "type":"string",
                       "enum":[
                          "fixed",
                          "heat_curve"
                       ],
                       "example":"fixed"
                    },
                    "target_temperature_minimum":{
                       "description":"Lower limit of the target temperature. Could not be greater than maximum. Setting minimum value above target value, will also change target value to minimum.<br> Unit: °C",
                       "type":"integer",
                       "example":30,
                       "minimum":0,
                       "maximum":100,
                       "readOnly":true
                    },
                    "target_temperature_maximum":{
                       "description":"Upper limit of the target temperature. Could not be less than minimum. Setting maximum below target, will also change target value to minimum.<br> Unit: °C",
                       "type":"integer",
                       "example":99,
                       "minimum":0,
                       "maximum":100,
                       "readOnly":true
                    },
                    "correction":{
                       "description":"Target temperature correction.<br>Unit: °C",
                       "type":"integer",
                       "example":5,
                       "minimum":0,
                       "maximum":100,
                       "readOnly":true
                    },
                    "temperature_valve":{
                       "description":"Current valve temperature.<br>Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "example":450,
                       "minimum":-500,
                       "maximum":1500,
                       "readOnly":true
                    },
                    "open_percent":{
                       "description":"Current open percentage.<br>Unit: %",
                       "type":"integer",
                       "example":30,
                       "minimum":0,
                       "maximum":100,
                       "readOnly":true
                    },
                    "state":{
                       "description":"Valve working state.",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":20
                    },
                    "state_text":{
                       "description":"Valve working state ID name.",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":2147483647
                    },
                    "temperature_return":{
                       "description":"Current return temperature.<br>Unit: °C with one decimal number, multiplied by 10. Available when sensor is supported - check if `temperature_return_available` label is provided.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "example":500,
                       "minimum":-500,
                       "maximum":1500,
                       "readOnly":true
                    },
                    "temperature_central_heating":{
                       "description":"Current central heating temperature.<br>Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "example":450,
                       "minimum":-500,
                       "maximum":1500,
                       "readOnly":true
                    },
                    "room_regulator":{
                       "description":"Room regulator state (target temperature reached)",
                       "type":"boolean",
                       "example":true,
                       "readOnly":true
                    },
                    "pump_work":{
                       "description":"Current pump working state on/off.",
                       "type":"boolean",
                       "example":true,
                       "readOnly":true
                    },
                    "blockade":{
                       "description":"Valve work blockade.",
                       "type":"boolean",
                       "example":false
                    },
                    "weather_control":{
                       "description":"Is weather control enabled.",
                       "type":"boolean",
                       "example":true,
                       "readOnly":true
                    },
                    "temperature_outdoor":{
                       "description":"Current outdoor temperature.<br>Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "example":450,
                       "minimum":-500,
                       "maximum":1500,
                       "readOnly":true
                    },
                    "enabled":{
                       "description":"Is devicel enabled",
                       "type":"boolean",
                       "example":true,
                       "readOnly":true
                    },
                    "sub_id":{
                       "description":"Device number",
                       "type":"integer",
                       "example":5,
                       "minimum":0,
                       "maximum":100,
                       "readOnly":true
                    },
                    "work_mode":{
                       "description":"Current heating mode.",
                       "type":"string",
                       "enum":[
                          "heating",
                          "cooling"
                       ],
                       "example":"cooling"
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.TECH.CommonValve/value"
           }
        },
        "Device.TECH.CommonHeatBuffer":{
           "description":"Wired buffer representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AWiredDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "target_temperature",
                    "target_temperature_mode",
                    "temperature_down",
                    "temperature_up",
                    "temperature_reached",
                    "name_text",
                    "target_temperature_minimum",
                    "target_temperature_maximum",
                    "correction"
                 ],
                 "properties":{
                    "target_temperature":{
                       "description":"Desired target (setpoint) temperature, which device will try to achieve.<br> Unit: °C<br><b>NOTE:</b> Can be changed only if device is in `fixed` target temperature mode.",
                       "type":"integer",
                       "minimum":10,
                       "maximum":80,
                       "example":50
                    },
                    "target_temperature_mode":{
                       "description":"Defines whether target temperature is fixed or dynamic eg. computed by heat curve.<br><b>NOTE:</b> Can be changed only if device has associated temperature curve.",
                       "type":"string",
                       "enum":[
                          "fixed",
                          "heat_curve"
                       ],
                       "example":"fixed"
                    },
                    "temperature_down":{
                       "description":"Measured temperature in lower part of buffer.<br> Unit: °C with one decimal number, multiplied by 10.<br>Parameter is <b>optional</b>. Available when: check if `temperature_down_available` label is provided.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "example":40,
                       "minimum":-500,
                       "maximum":1500,
                       "readOnly":true
                    },
                    "temperature_up":{
                       "description":"Measured temperature in upper part of buffer.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "example":45,
                       "minimum":-500,
                       "maximum":1500,
                       "readOnly":true
                    },
                    "temperature_reached":{
                       "description":"Is target temperature reached.",
                       "type":"boolean",
                       "example":true,
                       "readOnly":true
                    },
                    "name_text":{
                       "description":"buffer ID name.",
                       "type":"integer",
                       "readOnly":true,
                       "example":45,
                       "minimum":0,
                       "maximum":2147483647
                    },
                    "target_temperature_minimum":{
                       "description":"Lower limit of the target temperature. Could not be greater than maximum. Setting minimum value above target value, will also change target value to minimum.<br> Unit: °C",
                       "type":"integer",
                       "example":30,
                       "minimum":0,
                       "maximum":100,
                       "readOnly":true
                    },
                    "target_temperature_maximum":{
                       "description":"Upper limit of the target temperature. Could not be less than minimum. Setting maximum below target, will also change target value to minimum.<br> Unit: °C",
                       "type":"integer",
                       "example":99,
                       "minimum":0,
                       "maximum":100,
                       "readOnly":true
                    },
                    "correction":{
                       "description":"Target temperature correction.<br>Unit: °C",
                       "type":"integer",
                       "example":5,
                       "minimum":0,
                       "maximum":100,
                       "readOnly":true
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.TECH.CommonHeatBuffer/value"
           }
        },
        "Device.TECH.PelletChMain":{
           "description":"Wired co representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AWiredDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "pump_work",
                    "operations_mode"
                 ],
                 "properties":{
                    "pump_work":{
                       "description":"Current pump working state on/off.",
                       "type":"boolean",
                       "example":true,
                       "readOnly":true
                    },
                    "operations_mode":{
                       "description":"Current pump mode.",
                       "type":"string",
                       "enum":[
                          "house_heating",
                          "boiler_priority",
                          "parallel_pumps",
                          "summer_mode"
                       ],
                       "example":"house_heating"
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.TECH.PelletChMain/value"
           }
        },
        "Device.TECH.CommonCoAdditional":{
           "description":"Wired co representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AWiredDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "pump_work",
                    "algorithm_type",
                    "sub_id",
                    "temperature_central_heating",
                    "temperature_hysteresis",
                    "temperature_threshold"
                 ],
                 "properties":{
                    "pump_work":{
                       "description":"Current pump working state on/off.",
                       "type":"boolean",
                       "example":true,
                       "readOnly":true
                    },
                    "algorithm_type":{
                       "description":"Device name,Id text from tech translation db",
                       "type":"integer",
                       "example":45,
                       "minimum":0,
                       "maximum":2147483647,
                       "readOnly":true
                    },
                    "sub_id":{
                       "description":"Device number",
                       "type":"integer",
                       "example":5,
                       "minimum":0,
                       "maximum":100,
                       "readOnly":true
                    },
                    "temperature_central_heating":{
                       "description":"Current central heating temperature.<br>Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "example":400,
                       "minimum":-500,
                       "maximum":1500,
                       "readOnly":true
                    },
                    "temperature_hysteresis":{
                       "description":"Current hysteresis temperature.<br>Unit: °C .",
                       "type":"integer",
                       "example":45,
                       "minimum":-50,
                       "maximum":150,
                       "readOnly":true
                    },
                    "temperature_threshold":{
                       "description":"Current treshold temperature.<br>Unit: °C",
                       "type":"integer",
                       "example":45,
                       "minimum":-50,
                       "maximum":150,
                       "readOnly":true
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.TECH.CommonCoAdditional/value"
           }
        },
        "Device.TECH.CommonDHWAdditional":{
           "description":"Wired additional dhw representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AWiredDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "pump_work",
                    "algorithm_type",
                    "sub_id",
                    "target_temperature",
                    "target_temperature_maximum",
                    "temperature_threshold",
                    "temperature_domestic_hot_water"
                 ],
                 "properties":{
                    "pump_work":{
                       "description":"Current pump working state on/off.",
                       "type":"boolean",
                       "example":true,
                       "readOnly":true
                    },
                    "algorithm_type":{
                       "description":"Device name,Id text from tech translation db",
                       "type":"integer",
                       "example":1,
                       "minimum":0,
                       "maximum":2147483647,
                       "readOnly":true
                    },
                    "sub_id":{
                       "description":"Device number",
                       "type":"integer",
                       "example":1,
                       "minimum":0,
                       "maximum":100,
                       "readOnly":true
                    },
                    "target_temperature":{
                       "description":"Desired setpoint temperature, which device will try to achieve.<br> Unit: °C",
                       "type":"integer",
                       "example":50
                    },
                    "target_temperature_maximum":{
                       "description":"Upper limit of the target temperature. Setting maximum below target, will also change target value to maximum.<br> Unit: °C",
                       "type":"integer",
                       "example":99,
                       "minimum":0,
                       "maximum":100,
                       "readOnly":true
                    },
                    "temperature_threshold":{
                       "description":"Current treshold temperature.<br>Unit: °C ",
                       "type":"integer",
                       "example":45,
                       "minimum":-50,
                       "maximum":150,
                       "readOnly":true
                    },
                    "temperature_domestic_hot_water":{
                       "description":"Current domestic hot water temperature.<br>Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "example":450,
                       "minimum":-500,
                       "maximum":1500,
                       "readOnly":true
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.TECH.CommonDHWAdditional/value"
           }
        },
        "Device.TECH.CommonFloorPumpAdditional":{
           "description":"Wired additional floor representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AWiredDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "pump_work",
                    "algorithm_type",
                    "sub_id",
                    "temperature_floor",
                    "minimum_temperature",
                    "maximum_temperature"
                 ],
                 "properties":{
                    "pump_work":{
                       "description":"Current pump working state on/off.",
                       "type":"boolean",
                       "example":true,
                       "readOnly":true
                    },
                    "algorithm_type":{
                       "description":"Device name,Id text from tech translation db",
                       "type":"integer",
                       "example":1,
                       "minimum":0,
                       "maximum":2147483647,
                       "readOnly":true
                    },
                    "sub_id":{
                       "description":"Device number",
                       "type":"integer",
                       "example":1,
                       "minimum":0,
                       "maximum":100,
                       "readOnly":true
                    },
                    "temperature_floor":{
                       "description":"Current floor temperature.<br>Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "example":450,
                       "minimum":-500,
                       "maximum":1500,
                       "readOnly":true
                    },
                    "minimum_temperature":{
                       "description":"Lower limit of the floor temperature. .<br> Unit: °C",
                       "type":"integer",
                       "example":30,
                       "minimum":0,
                       "maximum":100,
                       "readOnly":true
                    },
                    "maximum_temperature":{
                       "description":"Upper limit of the floor temperature.",
                       "type":"integer",
                       "example":99,
                       "minimum":0,
                       "maximum":100,
                       "readOnly":true
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.TECH.CommonFloorPumpAdditional/value"
           }
        },
        "Device.TECH.CommonRelayAdditional":{
           "description":"Wired additional on/off representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AWiredDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "pump_work",
                    "algorithm_type",
                    "sub_id"
                 ],
                 "properties":{
                    "pump_work":{
                       "description":"Current pump working state on/off.",
                       "type":"boolean",
                       "example":true,
                       "readOnly":true
                    },
                    "algorithm_type":{
                       "description":"Device name,Id text from tech translation db",
                       "type":"integer",
                       "example":1,
                       "minimum":0,
                       "maximum":2147483647,
                       "readOnly":true
                    },
                    "sub_id":{
                       "description":"Device number",
                       "type":"integer",
                       "example":1,
                       "minimum":0,
                       "maximum":100,
                       "readOnly":true
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.TECH.CommonRelayAdditional/value"
           }
        },
        "Device.TECH.CommonProtectPumpAdditional":{
           "description":"Wired additional protect pump representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AWiredDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "pump_work",
                    "algorithm_type",
                    "sub_id",
                    "temperature_central_heating",
                    "temperature_return"
                 ],
                 "properties":{
                    "pump_work":{
                       "description":"Current pump working state on/off.",
                       "type":"boolean",
                       "example":true,
                       "readOnly":true
                    },
                    "algorithm_type":{
                       "description":"Device name,Id text from tech translation db",
                       "type":"integer",
                       "example":1,
                       "minimum":0,
                       "maximum":2147483647,
                       "readOnly":true
                    },
                    "sub_id":{
                       "description":"Device number",
                       "type":"integer",
                       "example":1,
                       "minimum":0,
                       "maximum":100,
                       "readOnly":true
                    },
                    "temperature_central_heating":{
                       "description":"Current central heating temperature.<br>Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "example":450,
                       "minimum":-500,
                       "maximum":1500,
                       "readOnly":true
                    },
                    "temperature_return":{
                       "description":"Current return temperature.<br>Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "example":500,
                       "minimum":-500,
                       "maximum":1500,
                       "readOnly":true
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.TECH.CommonProtectPumpAdditional/value"
           }
        },
        "Device.TECH.Solar":{
           "description":"Wired solar controller representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AWiredDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "solar_pump",
                    "secondary_pump",
                    "peripheral_device",
                    "temperature_collector_1",
                    "temperature_collector_2",
                    "temperature_tank",
                    "temperature_additional",
                    "scheme",
                    "work_mode"
                 ],
                 "properties":{
                    "solar_pump":{
                       "description":"Solar pump working state on/off.",
                       "type":"boolean",
                       "example":true,
                       "readOnly":true
                    },
                    "secondary_pump":{
                       "description":"Secondary pump working state on/off.",
                       "type":"boolean",
                       "example":true,
                       "readOnly":true
                    },
                    "peripheral_device":{
                       "description":"Peripheral device working state on/off.",
                       "type":"boolean",
                       "example":true,
                       "readOnly":true
                    },
                    "temperature_collector_1":{
                       "description":"Current collector 1 temperature.<br>Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "example":55,
                       "multipleOf":0.1,
                       "readOnly":true
                    },
                    "temperature_collector_2":{
                       "description":"Current collector 2 temperature.<br>Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "example":44,
                       "multipleOf":0.1,
                       "readOnly":true
                    },
                    "temperature_tank":{
                       "description":"Current tank temperature.<br>Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "example":450,
                       "multipleOf":0.1,
                       "readOnly":true
                    },
                    "temperature_additional":{
                       "description":"Current additional temperature.<br>Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "example":24,
                       "multipleOf":0.1,
                       "readOnly":true
                    },
                    "scheme":{
                       "description":"Solar installation scheme ID.",
                       "type":"integer",
                       "example":1,
                       "readOnly":true
                    },
                    "work_mode":{
                       "description":"Solar work mode ID.",
                       "type":"integer",
                       "example":1
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.TECH.Solar/value"
           }
        },
        "Device.VIRTUAL.Thermostat":{
           "description":"Virtual Thermostat representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AGenericDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "state",
                    "temperature",
                    "floor_temperature",
                    "humidity",
                    "target_temperature",
                    "target_temperature_mode",
                    "target_temperature_minimum",
                    "target_temperature_maximum",
                    "target_temperature_heating",
                    "target_temperature_heating_minimum",
                    "target_temperature_heating_maximum",
                    "target_temperature_cooling",
                    "target_temperature_cooling_minimum",
                    "target_temperature_cooling_maximum",
                    "hysteresis",
                    "mode",
                    "mode_mutable",
                    "schedule_id",
                    "overheat_protection",
                    "cooling_control",
                    "sigma_control",
                    "radiator_control",
                    "floor_control",
                    "associations",
                    "antifrost_protection",
                    "antifrost_protection_temperature",
                    "opening_sensors_delay",
                    "is_window_open",
                    "confirm_time_mode",
                    "dew_point",
                    "floor_dew_point"
                 ],
                 "properties":{
                    "state":{
                       "description":"Current working state (Working/Idle)",
                       "type":"boolean",
                       "readOnly":true,
                       "example":true
                    },
                    "temperature":{
                       "description":"Temperature value forwarded from associated sensor or 0 if no sensor associated.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "readOnly":true,
                       "minimum":-400,
                       "maximum":1000,
                       "example":250
                    },
                    "floor_temperature":{
                       "description":"Temperature value forwarded from associated floor sensor or 0 if no sensor associated.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "readOnly":true,
                       "minimum":-400,
                       "maximum":1000,
                       "example":250
                    },
                    "humidity":{
                       "description":"Relative humidity value forwarded from associated humidity sensor or 0 if no sensor associated.<br> Unit: rH% with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "readOnly":true,
                       "minimum":0,
                       "maximum":1000,
                       "example":578
                    },
                    "target_temperature":{
                       "description":"Current target temperature. Modification will result in change of `constant` or `time_limited` target temperature to the desired value. If thermostat works in `time_limited` mode it will change target temperature only, not affecting `remaining_time`. If thermostat works in `schedule` mode it will change target temperature mode to `constant`.<br> Unit: °C with one decimal number, multiplied by 10.<br>Minimum from parameter `target_temperature_minimum`, maximum from parameter `target_temperature_maximum`.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "minimum":50,
                       "maximum":350,
                       "example":250
                    },
                    "target_temperature_mode":{
                       "type":"object",
                       "required":[
                          "current",
                          "previous",
                          "remaining_time"
                       ],
                       "properties":{
                          "current":{
                             "description":"Thermostat target temperature mode. Specifies if thermostat is working in `constant` mode with one target temperature, `time_limited` mode with one temporary target temperature or according to schedule in `schedule` mode with many target temperatures in time, configured by user.<br> <b>NOTE:</b> Parameter is read only, use commands to change target temperature mode!<br> <b>NOTE:</b> Parameter cannot be `schedule` if thermostat doesnt have `has_schedule` label!",
                             "type":"string",
                             "readOnly":true,
                             "enum":[
                                "schedule",
                                "constant",
                                "time_limited"
                             ],
                             "example":"schedule"
                          },
                          "previous":{
                             "description":"Thermostat previous target temperature mode.",
                             "type":"string",
                             "readOnly":true,
                             "enum":[
                                "schedule",
                                "constant",
                                "time_limited"
                             ],
                             "example":"schedule"
                          },
                          "remaining_time":{
                             "description":"Remaining time until `time_limited` mode ends. Cannot be modified directly - use commands.<br> Unit: minutes.",
                             "type":"integer",
                             "readOnly":true,
                             "minimum":1,
                             "maximum":1440,
                             "example":600
                          }
                       }
                    },
                    "target_temperature_minimum":{
                       "description":"Lower limit of the target temperature. Could not be greater than maximum. Setting minimum value above target value, will also change all target values to minimum.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "minimum":50,
                       "maximum":350,
                       "example":50
                    },
                    "target_temperature_maximum":{
                       "description":"Upper limit of the target temperature. Could not be less than minimum. Setting maximum below target, will also change all target values to maximum.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "minimum":50,
                       "maximum":350,
                       "example":350
                    },
                    "target_temperature_heating":{
                       "description":"Target temperature for heating mode.<br> Unit: °C with one decimal number, multiplied by 10.<br>Minimum from parameter `target_temperature_heating_minimum`, maximum from parameter `target_temperature_heating_maximum`.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "minimum":50,
                       "maximum":350,
                       "example":250
                    },
                    "target_temperature_heating_minimum":{
                       "description":"Lower limit of the heating target temperature. Could not be greater than maximum. Setting minimum value above target value, will also change heating target value to minimum.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "minimum":50,
                       "maximum":350,
                       "example":50
                    },
                    "target_temperature_heating_maximum":{
                       "description":"Upper limit of the heating target temperature. Could not be less than minimum. Setting maximum below target, will also change heating target value to maximum.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "minimum":50,
                       "maximum":350,
                       "example":350
                    },
                    "target_temperature_cooling":{
                       "description":"Target temperature for cooling mode.<br> Unit: °C with one decimal number, multiplied by 10.<br>Minimum from parameter `target_temperature_cooling_minimum`, maximum from parameter `target_temperature_cooling_maximum`.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "minimum":50,
                       "maximum":350,
                       "example":250
                    },
                    "target_temperature_cooling_minimum":{
                       "description":"Lower limit of the cooling target temperature. Could not be greater than maximum. Setting minimum value above target value, will also change cooling target value to minimum.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "minimum":50,
                       "maximum":350,
                       "example":50
                    },
                    "target_temperature_cooling_maximum":{
                       "description":"Upper limit of the cooling target temperature. Could not be less than minimum. Setting maximum below target, will also change cooling target value to maximum.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "minimum":50,
                       "maximum":350,
                       "example":350
                    },
                    "hysteresis":{
                       "description":"Damper factor, which will protect from continuous on/off switching when current temperature is near target value.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "minimum":1,
                       "maximum":100,
                       "example":2
                    },
                    "mode":{
                       "description":"Current working mode.",
                       "type":"string",
                       "enum":[
                          "heating",
                          "cooling",
                          "off"
                       ],
                       "example":"heating"
                    },
                    "mode_mutable":{
                       "description":"Blocks `set_mode` command when set to `false`.",
                       "type":"boolean",
                       "example":true
                    },
                    "schedule_id":{
                       "description":"ID of schedule associated with thermostat or null if schedule is not associated.",
                       "type":"integer",
                       "readOnly":true,
                       "nullable":true,
                       "minimum":1,
                       "example":1
                    },
                    "overheat_protection":{
                       "description":"Algorithm that disables heating if temperature is higher than target.",
                       "type":"object",
                       "required":[
                          "active",
                          "enabled",
                          "range"
                       ],
                       "properties":{
                          "active":{
                             "description":"Overheat protection state.",
                             "type":"boolean",
                             "readOnly":true,
                             "example":true
                          },
                          "enabled":{
                             "description":"Enables or disables overheat protection algorithm.",
                             "type":"boolean",
                             "example":true
                          },
                          "range":{
                             "description":"A value above target temperature that triggers overheat protection.<br> Unit: °C with one decimal number, multiplied by 10.",
                             "type":"integer",
                             "multipleOf":0.1,
                             "minimum":5,
                             "maximum":250,
                             "example":30
                          }
                       }
                    },
                    "cooling_control":{
                       "description":"Cooling algorithm settings.",
                       "type":"object",
                       "required":[
                          "maximum_humidity",
                          "dew_point_control"
                       ],
                       "properties":{
                          "maximum_humidity":{
                             "description":"This parameter controls how high the relative humidity can be when cooling is active, once relative humidity exceeds this value cooling will stop to prevent condensation.<br> Unit: rH% with one decimal number, multiplied by 10.",
                             "type":"integer",
                             "minimum":500,
                             "maximum":1000,
                             "multipleOf":10,
                             "example":90
                          },
                          "dew_point_control":{
                             "description":"Dew point control related parameters.",
                             "type":"object",
                             "required":[
                                "enabled",
                                "offset",
                                "hysteresis"
                             ],
                             "properties":{
                                "enabled":{
                                   "description":"Indicates if dew point control in cooling is enabled. If enabled cooling will be stopped if supply temperature drops below calculated dew point temperature plus offset. Maximum humidity control works if dew point control is disabled.",
                                   "type":"boolean",
                                   "example":true
                                },
                                "offset":{
                                   "description":"Offset which is added to dew point temperature to set threshold for supply temperature below which cooling is disabled.<br> Unit: °C with one decimal number, multiplied by 10.",
                                   "multipleOf":0.1,
                                   "minimum":20,
                                   "maximum":100,
                                   "example":20
                                },
                                "hysteresis":{
                                   "description":"Hysteresis for dew point control threshold.<br> Unit: °C with one decimal number, multiplied by 10.",
                                   "multipleOf":0.1,
                                   "minimum":2,
                                   "maximum":30,
                                   "example":5
                                }
                             }
                          }
                       }
                    },
                    "sigma_control":{
                       "description":"Algorithm that smoothly controls radiator valve opening.",
                       "type":"object",
                       "required":[
                          "enabled",
                          "range",
                          "opening_factor"
                       ],
                       "properties":{
                          "enabled":{
                             "description":"Sigma smooth control state. If disabled, opening value of actuator will jump between min/max instead of smooth control.",
                             "type":"boolean",
                             "example":true
                          },
                          "range":{
                             "description":"Temperature range below target temperature that is used to scale opening from 100 ( or maximum opening) - 0 (or minimum opening) percent when current room temperature is equal to target temperature. Sigma causes actuators to open/close in small, smooth steps instead of full open/full close.<br> Unit: °C with one decimal number, multiplied by 10.",
                             "type":"integer",
                             "multipleOf":0.1,
                             "minimum":0,
                             "maximum":100,
                             "example":20
                          },
                          "opening_factor":{
                             "description":"Current calculated valve opening factor in percent used to scale desired opening between min and max.<br> Unit: %.",
                             "type":"integer",
                             "readOnly":true,
                             "minimum":0,
                             "maximum":100,
                             "example":50
                          }
                       }
                    },
                    "radiator_control":{
                       "description":"Radiactor actuator settings.",
                       "type":"object",
                       "required":[
                          "use_for_heating",
                          "use_for_cooling",
                          "emergency_opening"
                       ],
                       "properties":{
                          "use_for_heating":{
                             "description":"Configures whether radiator actuators should be controlled (opening and closing) while heating or not (always closed).",
                             "type":"boolean",
                             "example":true
                          },
                          "use_for_cooling":{
                             "description":"Configures whether radiator actuators should be controlled (opening and closing) while cooling or not (always closed).",
                             "type":"boolean",
                             "example":true
                          },
                          "emergency_opening":{
                             "description":"Configures emergency opening level while temperature sensor is broken or not available e.g offline.",
                             "type":"integer",
                             "minimum":0,
                             "maximum":100,
                             "example":50
                          }
                       }
                    },
                    "floor_control":{
                       "description":"Algorithm that controls floor heating processes.",
                       "type":"object",
                       "required":[
                          "enabled",
                          "lower_target_temperature",
                          "upper_target_temperature",
                          "hysteresis",
                          "condition"
                       ],
                       "properties":{
                          "enabled":{
                             "description":"Floor control state.",
                             "type":"boolean",
                             "example":true
                          },
                          "lower_target_temperature":{
                             "description":"Lower limit of floor temperature fluctuation (due to material inertia). Could not be greater than upper value.<br> Unit: °C with one decimal number, multiplied by 10.",
                             "type":"integer",
                             "multipleOf":0.1,
                             "minimum":50,
                             "maximum":500,
                             "example":50
                          },
                          "upper_target_temperature":{
                             "description":"Upper limit of floor temperature fluctuation (due to material inertia). Could not be less than lower value.<br> Unit: °C with one decimal number, multiplied by 10.",
                             "type":"integer",
                             "multipleOf":0.1,
                             "minimum":50,
                             "maximum":500,
                             "example":400
                          },
                          "hysteresis":{
                             "description":"Damper factor, which will protect from continuous on/off switching when current temperature is near target value.<br> Unit: °C with one decimal number, multiplied by 10.",
                             "type":"integer",
                             "multipleOf":0.1,
                             "minimum":1,
                             "maximum":100,
                             "example":2
                          },
                          "condition":{
                             "description":"Floor control condition. Informs whether floor temperature is in min-max range or not.",
                             "type":"string",
                             "readOnly":true,
                             "enum":[
                                "optimal",
                                "overheated",
                                "underheated"
                             ],
                             "example":"optimal"
                          }
                       }
                    },
                    "associations":{
                       "description":"Physical device associated to thermostat.",
                       "type":"object",
                       "required":[
                          "room_temperature_sensor",
                          "floor_temperature_sensor",
                          "humidity_sensor",
                          "temperature_regulator",
                          "radiator_actuators",
                          "relays",
                          "heating_relays",
                          "cooling_relays",
                          "opening_sensors",
                          "two_state_input_sensors",
                          "supply_temperature_sensor",
                          "ir_heaters"
                       ],
                       "properties":{
                          "room_temperature_sensor":{
                             "description":"Required. Temperature sensor used by thermostats basic algorithm.",
                             "allOf":[
                                {
                                   "$ref":"#/components/schemas/Device.AssociationInfo"
                                }
                             ]
                          },
                          "floor_temperature_sensor":{
                             "description":"Optional. Temperature sensor used by thermostats floor heating control algorithm.",
                             "allOf":[
                                {
                                   "$ref":"#/components/schemas/Device.AssociationInfo"
                                }
                             ]
                          },
                          "humidity_sensor":{
                             "description":"Optional. Humidity sensor used by thermostats cooling algorithm.",
                             "allOf":[
                                {
                                   "$ref":"#/components/schemas/Device.AssociationInfo"
                                }
                             ]
                          },
                          "temperature_regulator":{
                             "description":"Optional. Temperature regulator used to control target temperature.",
                             "allOf":[
                                {
                                   "$ref":"#/components/schemas/Device.AssociationInfo"
                                }
                             ]
                          },
                          "radiator_actuators":{
                             "description":"Optional. Radiator actuators used by thermostat sigmal control algorithm.",
                             "type":"array",
                             "items":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.AssociationInfo"
                                   }
                                ]
                             }
                          },
                          "relays":{
                             "description":"Optional. Relay actuators used by thermostat basic algorithm.",
                             "type":"array",
                             "items":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.AssociationInfo"
                                   }
                                ]
                             }
                          },
                          "heating_relays":{
                             "description":"Optional. Relay actuators used by thermostat basic algorithm when mode is heating.",
                             "type":"array",
                             "items":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.AssociationInfo"
                                   }
                                ]
                             }
                          },
                          "cooling_relays":{
                             "description":"Optional. Relay actuators used by thermostat basic algorithm when mode is cooling.",
                             "type":"array",
                             "items":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.AssociationInfo"
                                   }
                                ]
                             }
                          },
                          "opening_sensors":{
                             "description":"Optional. If there is atleast one window sensor (opening sensor) associated, thermostat will stop heating/cooling as soon as window gets opened.",
                             "type":"array",
                             "items":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.AssociationInfo"
                                   }
                                ]
                             }
                          },
                          "two_state_input_sensors":{
                             "description":"Optional. If there is atleast one two state input sensor associated, thermostat will stop heating/cooling as soon as any sensor state is set to false.",
                             "type":"array",
                             "items":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.AssociationInfo"
                                   }
                                ]
                             }
                          },
                          "supply_temperature_sensor":{
                             "description":"Optional. Supply temperature sensor used by dew point control algorithm.",
                             "allOf":[
                                {
                                   "$ref":"#/components/schemas/Device.AssociationInfo"
                                }
                             ]
                          },
                          "ir_heaters":{
                             "description":"Optional. IR heaters used by thermostat basic algorithm when mode is heating.",
                             "type":"array",
                             "items":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.AssociationInfo"
                                   }
                                ]
                             }
                          }
                       }
                    },
                    "antifrost_protection":{
                       "description":"State of algorithm that turns on heating if temperature drops under antifrost_protection_temperature.",
                       "type":"boolean",
                       "example":false
                    },
                    "antifrost_protection_temperature":{
                       "description":"Threshold for antifrost protection algorithm.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "minimum":10,
                       "maximum":180,
                       "example":60
                    },
                    "opening_sensors_delay":{
                       "description":"Delay after which thermsotat will react when opening sensor detects window openned.<br> Unit: seconds",
                       "type":"integer",
                       "minimum":0,
                       "maximum":1800,
                       "example":0
                    },
                    "is_window_open":{
                       "description":"Informs whether there is window opened.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    },
                    "confirm_time_mode":{
                       "description":"Mainly for Mobile/Web App purposes. Indicates if time mode modal should be displayed when changing thermostat temperature.",
                       "type":"boolean",
                       "example":true
                    },
                    "dew_point":{
                       "description":"Dew point calculated based on room temperature sensor and humidity. Available when room temperature sensor and humidity sensor assigned and online with valid values.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "readOnly":true,
                       "nullable":true
                    },
                    "floor_dew_point":{
                       "description":"Dew point calculated based on floor temperature sensor and humidity. Available when floor temperature sensor and humidity sensor assigned and online with valid values.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "readOnly":true,
                       "nullable":true
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.VIRTUAL.Thermostat/value"
           }
        },
        "Device.VIRTUAL.ThermostatOutputGroup":{
           "description":"Virtual Thermostat output group representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AGenericDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "enabled",
                    "state",
                    "mode",
                    "propagation_delay",
                    "associations",
                    "pump_antistop"
                 ],
                 "properties":{
                    "enabled":{
                       "description":"Enable or disable device.",
                       "type":"boolean",
                       "example":true
                    },
                    "state":{
                       "description":"Current working state (Working/Idle)",
                       "type":"boolean",
                       "readOnly":true,
                       "example":true
                    },
                    "mode":{
                       "description":"Current computed working mode (Cooling/Heating).",
                       "type":"string",
                       "enum":[
                          "heating",
                          "cooling"
                       ],
                       "readOnly":true,
                       "example":"heating"
                    },
                    "propagation_delay":{
                       "description":"Delays active state propagation for output devices eg. delays switching from off to on for relays/pellet boiler when heat is requested. Useful for setup with gas boiler (quick achieve of heating setpoint) and radiator actuators (long response, up to several minutes) where boiler can go into alarm status when there is no heat extraction.<br> Unit: seconds.",
                       "type":"integer",
                       "minimum":0,
                       "maximum":600,
                       "example":5
                    },
                    "associations":{
                       "description":"Physical/Virtual devices associated to thermostat output group.",
                       "type":"object",
                       "required":[
                          "thermostats",
                          "relays",
                          "heating_relays",
                          "cooling_relays",
                          "pellet_boilers",
                          "heat_pumps",
                          "two_state_input_sensor",
                          "circuit_pumps",
                          "valves"
                       ],
                       "properties":{
                          "thermostats":{
                             "description":"Required. Thermostat devices used by output group as input device.",
                             "type":"array",
                             "items":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.AssociationInfo"
                                   }
                                ]
                             }
                          },
                          "relays":{
                             "description":"Optional. Relay actuators used by thermostat output group as output devices for heating/cooling sources or valve actuators. Will be turned on whenever there is heating or cooling required.",
                             "type":"array",
                             "items":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.AssociationInfo"
                                   }
                                ]
                             }
                          },
                          "heating_relays":{
                             "description":"Optional. Relay actuators used by thermostat output group as output devices for heating sources or valve actuators. Will be turned on only if there is heating required.",
                             "type":"array",
                             "items":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.AssociationInfo"
                                   }
                                ]
                             }
                          },
                          "cooling_relays":{
                             "description":"Optional. Relay actuators used by thermostat output group as output devices for cooling sources or valve actuators. Will be turned on only if there is cooling required.",
                             "type":"array",
                             "items":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.AssociationInfo"
                                   }
                                ]
                             }
                          },
                          "pellet_boilers":{
                             "description":"Optional. Pellet boilers used by thermostat output group as output devices.",
                             "type":"array",
                             "items":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.AssociationInfo"
                                   }
                                ]
                             }
                          },
                          "heat_pumps":{
                             "description":"Optional. Heat pumps used by thermostat output group as output devices.",
                             "type":"array",
                             "items":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.AssociationInfo"
                                   }
                                ]
                             }
                          },
                          "two_state_input_sensor":{
                             "description":"Optional. Two State Input Sensor which will control associated Thermostat heating/cooling modes automatically.",
                             "allOf":[
                                {
                                   "$ref":"#/components/schemas/Device.AssociationInfo"
                                }
                             ]
                          },
                          "circuit_pumps":{
                             "description":"Optional. Relay actuators used by thermostat output group as output devices for heating/cooling sources or circuit pumps actuators. Will be turned on whenever there is heating or cooling required. Use antistop function from Thermostat Output Group.",
                             "type":"array",
                             "items":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.AssociationInfo"
                                   }
                                ]
                             }
                          },
                          "valves":{
                             "description":"Optional. Valves used by thermostat output group as output devices.",
                             "type":"array",
                             "items":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.AssociationInfo"
                                   }
                                ]
                             }
                          }
                       }
                    },
                    "pump_antistop":{
                       "description":"Antistop settings. Function to automatically turn on circuit pump when it was not turned on for a long time.",
                       "type":"object",
                       "required":[
                          "enabled",
                          "work_time",
                          "pause_time"
                       ],
                       "properties":{
                          "enabled":{
                             "description":"Indicates if antistop function is turned on.",
                             "type":"boolean",
                             "example":true
                          },
                          "work_time":{
                             "description":"Turn on time for pump if antistop active.<br>Unit: seconds.",
                             "type":"integer",
                             "minimum":30,
                             "maximum":600,
                             "example":60
                          },
                          "pause_time":{
                             "description":"Tells how long pump should be turned off before turned on by antistop.<br>Unit: hours",
                             "type":"integer",
                             "minimum":6,
                             "maximum":480,
                             "example":240
                          }
                       }
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.VIRTUAL.ThermostatOutputGroup/value"
           }
        },
        "Device.VIRTUAL.CustomDevice":{
           "description":"Virtual custom device representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AGenericDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "enabled",
                    "blocked",
                    "uuid",
                    "version",
                    "elements",
                    "components",
                    "dialog",
                    "widget",
                    "config",
                    "blockade_pin_code_enabled",
                    "blockade_pin_code",
                    "integration_model",
                    "integration_version",
                    "integration_uid",
                    "logo",
                    "bannable",
                    "banned",
                    "ban_reason",
                    "error_counter",
                    "max_errors",
                    "max_execution_time",
                    "software_status",
                    "update_details",
                    "associations"
                 ],
                 "properties":{
                    "enabled":{
                       "description":"Enable or disable device. Lua code wont be executed when disabled.",
                       "type":"boolean",
                       "example":true
                    },
                    "blocked":{
                       "description":"Indicates whether device is blocked by its author.<br>**NOTE:** Blocked device cannot be modified and returns empty lua code via REST api.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    },
                    "uuid":{
                       "description":"Unique identifier of custom device in the marketplace.",
                       "type":"string",
                       "readOnly":true,
                       "example":"550e8400-e29b-41d4-a716-446655440000"
                    },
                    "version":{
                       "description":"Defined by author version of custom device.<br>**NOTE**: Has to fulfill regex: `^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$`",
                       "type":"string",
                       "pattern":"^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$",
                       "example":"1.0.0"
                    },
                    "lua":{
                       "description":"Device logic representation in lua language. (script used to perform actions, catch events etc)",
                       "type":"string",
                       "format":"lua",
                       "example":"function CustomDevice:onMyButtonPress(element) print(\"HELLO\") end\\nfunction CustomDevice:onMySwitcherChange(newValue, element) print(\"HELLO\") end\\nfunction CustomDevice:onMyTextChange(newValue, element) print(\"HELLO\") end\\nfunction CustomDevice:onMyProgressBarChange(newValue, element) print(\"HELLO\") end\\nfunction CustomDevice:onMySliderChange(newValue, element) print(\"HELLO\") end\\n"
                    },
                    "elements":{
                       "description":"Custom device elements (controls) collection",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.ElementCollection"
                          }
                       ]
                    },
                    "components":{
                       "description":"Custom device components (internal http, mqtt, ws and modbus clients, variables & timers) collection",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.ComponentCollection"
                          }
                       ]
                    },
                    "dialog":{
                       "description":"Dialog grid configuration.",
                       "type":"object",
                       "required":[
                          "version",
                          "content"
                       ],
                       "properties":{
                          "version":{
                             "description":"Configuration schema version.",
                             "type":"integer",
                             "readOnly":true,
                             "minimum":1,
                             "maximum":2,
                             "example":1
                          },
                          "content":{
                             "description":"Configuration data.",
                             "type":"array",
                             "items":{
                                "anyOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.Row"
                                   },
                                   {
                                      "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.Section"
                                   }
                                ]
                             }
                          }
                       }
                    },
                    "widget":{
                       "description":"Widget grid configuration.",
                       "type":"object",
                       "required":[
                          "version",
                          "content"
                       ],
                       "properties":{
                          "version":{
                             "description":"Configuration schema version.",
                             "type":"integer",
                             "readOnly":true,
                             "minimum":1,
                             "maximum":2,
                             "example":1
                          },
                          "content":{
                             "description":"Configuration data.",
                             "type":"array",
                             "items":{
                                "anyOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.Row"
                                   },
                                   {
                                      "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.Section"
                                   }
                                ]
                             }
                          }
                       }
                    },
                    "config":{
                       "description":"Config grid configuration.",
                       "type":"object",
                       "required":[
                          "version",
                          "content"
                       ],
                       "properties":{
                          "version":{
                             "description":"Configuration schema version.",
                             "type":"integer",
                             "readOnly":true,
                             "minimum":1,
                             "maximum":2,
                             "example":1
                          },
                          "content":{
                             "description":"Configuration data.",
                             "type":"array",
                             "items":{
                                "anyOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.Row"
                                   },
                                   {
                                      "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.Section"
                                   }
                                ]
                             }
                          }
                       }
                    },
                    "blockade_pin_code_enabled":{
                       "description":"Indicates whether device is blocked with pin by its author.<br>**NOTE:** Blocked device can be modified and deleted only using assigned pin code provided in URL parameters when sending request for `pin_code` parameter.",
                       "type":"boolean",
                       "example":false
                    },
                    "blockade_pin_code":{
                       "description":"Pin code used to modify or delete device when pin blockade enabled.",
                       "type":"string",
                       "minimum":4,
                       "maximum":8,
                       "pattern":"^[0-9]{4,8}$"
                    },
                    "variant_device":{
                       "description":"Variant properties when non generic variant.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.VariantDevice"
                          }
                       ]
                    },
                    "integration_model":{
                       "description":"User defined model of custom device integration.",
                       "type":"string"
                    },
                    "integration_version":{
                       "description":"User defined version of custom device integration.",
                       "type":"string"
                    },
                    "integration_uid":{
                       "description":"User defined unique identifier of custom device integration.",
                       "type":"string"
                    },
                    "logo":{
                       "description":"Custom Device logo.",
                       "type":"string",
                       "enum":[
                          "blank",
                          "four_eco",
                          "galmet",
                          "econtro",
                          "kaisai",
                          "hymon",
                          "kolton",
                          "eplucon",
                          "wanas",
                          "surma",
                          "defro"
                       ],
                       "example":"blank"
                    },
                    "bannable":{
                       "description":"Indicates if the custom device can be set as banned.",
                       "type":"boolean",
                       "example":true
                    },
                    "banned":{
                       "description":"Ban flag.",
                       "readOnly":true,
                       "type":"boolean",
                       "example":false
                    },
                    "ban_reason":{
                       "description":"Contains error message which resulted in ban.",
                       "readOnly":true,
                       "type":"string",
                       "example":"Syntax error on line 4."
                    },
                    "error_counter":{
                       "description":"Current error counter value. (incremented on execute fail until less than max_error)",
                       "readOnly":true,
                       "type":"integer",
                       "example":0
                    },
                    "max_errors":{
                       "description":"Maximum error_counter value. Exceeding this value by error_counter will result in ban.",
                       "type":"integer",
                       "minimum":1,
                       "maximum":10,
                       "example":3
                    },
                    "max_execution_time":{
                       "description":"Maximum script execution time before terminate with error message.<br> Unit: seconds",
                       "type":"integer",
                       "minimum":1,
                       "maximum":120,
                       "example":30
                    },
                    "software_status":{
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.SoftwareStatus"
                          }
                       ]
                    },
                    "update_details":{
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.SoftwareUpdateDetails"
                          }
                       ]
                    },
                    "associations":{
                       "description":"Physical device associated to thermostat.",
                       "type":"object",
                       "required":[
                          "module_devices"
                       ],
                       "properties":{
                          "module_devices":{
                             "description":"Optional. Custom device modules.",
                             "type":"array",
                             "items":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.AssociationInfo"
                                   }
                                ]
                             }
                          }
                       }
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.VIRTUAL.CustomDevice/value"
           }
        },
        "Device.VIRTUAL.CustomDevice.Alignment":{
           "description":"Custom device alignment enum.",
           "type":"string",
           "enum":[
              "start",
              "center",
              "end"
           ],
           "example":"start"
        },
        "Device.VIRTUAL.CustomDevice.Row":{
           "description":"Custom device row representation.",
           "allOf":[
              {
                 "type":"object",
                 "required":[
                    "id",
                    "cells",
                    "type"
                 ],
                 "properties":{
                    "id":{
                       "description":"Row uuid",
                       "type":"string",
                       "maxLength":64,
                       "example":"e7b96819-e7dd-43cb-9060-c578f598aee3"
                    },
                    "cells":{
                       "description":"Collection of cells in row",
                       "type":"array",
                       "items":{
                          "type":"object",
                          "required":[
                             "id",
                             "elements",
                             "vertical_alignment",
                             "horizontal_alignment",
                             "orientation"
                          ],
                          "properties":{
                             "id":{
                                "description":"Cell uuid",
                                "type":"string",
                                "maxLength":64,
                                "example":"e7b96819-e7dd-43cb-9060-c578f598aee3"
                             },
                             "type":{
                                "description":"Grid element type.",
                                "type":"string",
                                "enum":[
                                   "row"
                                ],
                                "readOnly":true
                             },
                             "elements":{
                                "description":"Collection of elements in cell",
                                "type":"array",
                                "items":{
                                   "type":"object",
                                   "required":[
                                      "uuid",
                                      "variant"
                                   ],
                                   "properties":{
                                      "uuid":{
                                         "description":"Element uuid",
                                         "type":"string",
                                         "maxLength":64,
                                         "example":"e7b96819-e7dd-43cb-9060-c578f598aee3"
                                      },
                                      "variant":{
                                         "description":"Element variant - implies frontend representation",
                                         "type":"string",
                                         "enum":[
                                            "button-default",
                                            "divider",
                                            "separator",
                                            "slider-default",
                                            "slider-with-plus-minus-buttons",
                                            "text-default",
                                            "text-input",
                                            "progress-bar-default",
                                            "switch-default",
                                            "combo-box-default",
                                            "device-selector-default",
                                            "color-picker-both",
                                            "color-picker-switch",
                                            "color-picker-slider",
                                            "color-picker-bare",
                                            "schedule-selector-default",
                                            "time-picker-default",
                                            "slider-with-label",
                                            "date-picker-default"
                                         ]
                                      }
                                   }
                                }
                             },
                             "vertical_alignment":{
                                "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.Alignment"
                             },
                             "horizontal_alignment":{
                                "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.Alignment"
                             },
                             "orientation":{
                                "description":"Cell elements arrangement",
                                "type":"string",
                                "enum":[
                                   "row",
                                   "column"
                                ]
                             }
                          }
                       }
                    }
                 }
              }
           ]
        },
        "Device.VIRTUAL.CustomDevice.Section":{
           "description":"Custom device section representation.",
           "type":"object",
           "required":[
              "id",
              "type",
              "cells",
              "rows",
              "text",
              "text_id",
              "collapsible",
              "collapsed_default",
              "has_background"
           ],
           "properties":{
              "id":{
                 "description":"Row uuid",
                 "type":"string",
                 "maxLength":64,
                 "example":"e7b96819-e7dd-43cb-9060-c578f598aee3"
              },
              "type":{
                 "description":"Grid element type.",
                 "type":"string",
                 "enum":[
                    "section"
                 ],
                 "readOnly":true
              },
              "cells":{
                 "description":"Cells in section. Not used. Empty array.",
                 "type":"array",
                 "items":{
                    "type":"object"
                 },
                 "readOnly":true
              },
              "rows":{
                 "description":"Rows associated with the section.",
                 "type":"array",
                 "items":{
                    "allOf":[
                       {
                          "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.Row"
                       }
                    ]
                 }
              },
              "text":{
                 "description":"Text displayed as a section name.",
                 "type":"string",
                 "maxLength":64,
                 "example":"My text value"
              },
              "text_id":{
                 "description":"Text identifier used to reference text from translation database.",
                 "type":"number",
                 "minimum":0,
                 "example":1774
              },
              "collapsible":{
                 "description":"Indicates if the section should be collapsible.",
                 "type":"boolean"
              },
              "collapsed_default":{
                 "description":"Indicates if the section should be collapsed by default. **NOTE:** Set to `true` indicates that the section is visible by default, set to `false` indicates that the section is hidden.",
                 "type":"boolean"
              },
              "has_background":{
                 "description":"Indicates if the section should have a background displayed.",
                 "type":"boolean"
              }
           }
        },
        "Device.VIRTUAL.CustomDevice.AElement":{
           "description":"Custom device abstract element representation.",
           "type":"object",
           "required":[
              "type",
              "name",
              "uuid",
              "enabled",
              "visibility"
           ],
           "properties":{
              "type":{
                 "description":"Element type description, based on role and functionality.",
                 "type":"string",
                 "readOnly":true,
                 "enum":[
                    "text",
                    "switcher",
                    "progress_bar",
                    "slider",
                    "button",
                    "combo_box",
                    "device_selector",
                    "color_picker",
                    "schedule_selector",
                    "time_picker",
                    "date_picker"
                 ]
              },
              "name":{
                 "description":"Element name used to reference element at lua side. Cannot contain special characters except `_`",
                 "type":"string",
                 "minLength":1,
                 "maxLength":32,
                 "example":"my_element_name"
              },
              "uuid":{
                 "description":"Universal Unique Identifier of element used by frontend app to properly render and position element. Cannot contain special characters except `_`",
                 "type":"string",
                 "minLength":1,
                 "maxLength":64,
                 "example":"5ddb051e-b158-49b2-bcdc-73a8f60d0c0a"
              },
              "enabled":{
                 "description":"Enable or disable element.",
                 "type":"boolean",
                 "example":true
              },
              "visibility":{
                 "description":"Elements visibility state. Can has one of values:<br><ul><li>`visible` - element is visible</li><li>`hidden_gap` - element is hidden and theres empty space at element position</li><li>`hidden_adjust` - element is hidden and other elements are adjusted as theres no element at all</li></ul>",
                 "type":"string",
                 "enum":[
                    "visible",
                    "hidden_gap",
                    "hidden_adjust"
                 ],
                 "example":"visible"
              },
              "device_id":{
                 "description":"Element`s parent device ID.",
                 "type":"integer",
                 "readOnly":true,
                 "minimum":1,
                 "example":1
              }
           }
        },
        "Device.VIRTUAL.CustomDevice.ElementOneOf":{
           "oneOf":[
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.Text"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.Button"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.ProgressBar"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.Slider"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.Switcher"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.ComboBox"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.DeviceSelector"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.ColorPicker"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.ScheduleSelector"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.TimePicker"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.DatePicker"
              }
           ]
        },
        "Device.VIRTUAL.CustomDevice.ElementCollection":{
           "type":"array",
           "items":{
              "anyOf":[
                 {
                    "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.Text"
                 },
                 {
                    "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.Button"
                 },
                 {
                    "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.ProgressBar"
                 },
                 {
                    "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.Slider"
                 },
                 {
                    "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.Switcher"
                 },
                 {
                    "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.ComboBox"
                 },
                 {
                    "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.DeviceSelector"
                 },
                 {
                    "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.ColorPicker"
                 },
                 {
                    "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.ScheduleSelector"
                 },
                 {
                    "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.TimePicker"
                 },
                 {
                    "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.DatePicker"
                 }
              ]
           }
        },
        "Device.VIRTUAL.CustomDevice.Text":{
           "description":"Custom device text representation.t",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.AElement"
              },
              {
                 "type":"object",
                 "required":[
                    "value",
                    "text_id",
                    "icon",
                    "font_weight",
                    "font_size",
                    "on_change"
                 ],
                 "properties":{
                    "value":{
                       "description":"Text displayed by element.",
                       "type":"string",
                       "maxLength":64,
                       "example":"My text value"
                    },
                    "text_id":{
                       "description":"Text identifier used to reference text from translation database.",
                       "type":"number",
                       "minimum":0,
                       "example":1774
                    },
                    "icon":{
                       "description":"Icon displayed by text.",
                       "type":"string",
                       "maxLength":64,
                       "example":"icon-name"
                    },
                    "font_weight":{
                       "description":"Displayed text font weight",
                       "type":"string",
                       "enum":[
                          "normal",
                          "bold"
                       ],
                       "example":"normal"
                    },
                    "font_size":{
                       "description":"Displayed text font size",
                       "type":"string",
                       "enum":[
                          "small",
                          "normal",
                          "large"
                       ],
                       "example":"small"
                    },
                    "on_change":{
                       "description":"Function name which will be triggered when value changes. Cannot contain special characters.",
                       "type":"string",
                       "maxLength":64,
                       "pattern":"/^[a-zA-Z_][a-zA-Z0-9_]*$/",
                       "example":"onMyTextChange"
                    }
                 }
              }
           ]
        },
        "Device.VIRTUAL.CustomDevice.Switcher":{
           "description":"Custom device switcher representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.AElement"
              },
              {
                 "type":"object",
                 "required":[
                    "value",
                    "on_change"
                 ],
                 "properties":{
                    "value":{
                       "description":"Current switcher state/value.",
                       "type":"boolean",
                       "example":false
                    },
                    "on_change":{
                       "description":"Function name which will be triggered when value changes. Cannot contain special characters.",
                       "type":"string",
                       "maxLength":64,
                       "pattern":"/^[a-zA-Z_][a-zA-Z0-9_]*$/",
                       "example":"onMySwitcherChange"
                    }
                 }
              }
           ]
        },
        "Device.VIRTUAL.CustomDevice.Button":{
           "description":"Custom device button representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.AElement"
              },
              {
                 "type":"object",
                 "required":[
                    "text",
                    "text_id",
                    "icon",
                    "on_press"
                 ],
                 "properties":{
                    "text":{
                       "description":"Text displayed by button.",
                       "type":"string",
                       "maxLength":32,
                       "example":"My button"
                    },
                    "text_id":{
                       "description":"Text identifier used to reference text from translation database.",
                       "type":"number",
                       "minimum":0,
                       "example":1774
                    },
                    "icon":{
                       "description":"Icon displayed by button.",
                       "type":"string",
                       "maxLength":64,
                       "example":"icon-name"
                    },
                    "on_press":{
                       "description":"Function name which will be triggered when button pressed. Cannot contain special characters.",
                       "type":"string",
                       "maxLength":64,
                       "pattern":"/^[a-zA-Z_][a-zA-Z0-9_]*$/",
                       "example":"onMyButtonPress"
                    }
                 }
              }
           ]
        },
        "Device.VIRTUAL.CustomDevice.ProgressBar":{
           "description":"Custom device progress bar representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.AElement"
              },
              {
                 "type":"object",
                 "required":[
                    "value",
                    "on_change"
                 ],
                 "properties":{
                    "value":{
                       "description":"Current value.",
                       "type":"number",
                       "minimum":0,
                       "maximum":100,
                       "example":50
                    },
                    "on_change":{
                       "description":"Function name which will be triggered when value changes. Cannot contain special characters.",
                       "type":"string",
                       "maxLength":64,
                       "pattern":"/^[a-zA-Z_][a-zA-Z0-9_]*$/",
                       "example":"onMyProgressBarChange"
                    }
                 }
              }
           ]
        },
        "Device.VIRTUAL.CustomDevice.Slider":{
           "description":"Custom device slider representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.AElement"
              },
              {
                 "type":"object",
                 "required":[
                    "minimum",
                    "maximum",
                    "value",
                    "step",
                    "on_change",
                    "label_text",
                    "label_text_id",
                    "unit"
                 ],
                 "properties":{
                    "minimum":{
                       "description":"Minimum value.",
                       "type":"number",
                       "example":0
                    },
                    "maximum":{
                       "description":"Maximum value.",
                       "type":"number",
                       "example":100
                    },
                    "value":{
                       "description":"Current value.",
                       "type":"number",
                       "example":50
                    },
                    "step":{
                       "description":"Current step.<br>**NOTE:** Cannot exceed (maximum - minimum)",
                       "type":"number",
                       "example":1
                    },
                    "on_change":{
                       "description":"Function name which will be triggered when value changes. Cannot contain special characters.",
                       "type":"string",
                       "maxLength":64,
                       "pattern":"/^[a-zA-Z_][a-zA-Z0-9_]*$/",
                       "example":"onMySliderChange"
                    },
                    "label_text":{
                       "description":"Text that will be displayed as slider label.<br>Used for slider type `slider-with-label`.",
                       "type":"string",
                       "maxLength":32,
                       "example":"Target temperature"
                    },
                    "label_text_id":{
                       "description":"Text identifier from translation database of text that will be displayed as slider label.<br>Used for slider type `slider-with-label`.",
                       "type":"number",
                       "minimum":0,
                       "example":1774
                    },
                    "unit":{
                       "description":"Unit text that will be displayed for slider value.<br>Used for slider type `slider-with-label`.",
                       "type":"string",
                       "maxLength":16,
                       "example":"°C"
                    }
                 }
              }
           ]
        },
        "Device.VIRTUAL.CustomDevice.ComboBox":{
           "description":"Custom device combo box representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.AElement"
              },
              {
                 "type":"object",
                 "required":[
                    "options",
                    "value",
                    "on_change"
                 ],
                 "properties":{
                    "options":{
                       "type":"array",
                       "items":{
                          "type":"object",
                          "required":[
                             "label",
                             "value",
                             "text_id"
                          ],
                          "properties":{
                             "label":{
                                "description":"Option label to display to user.",
                                "type":"string",
                                "maxLength":64,
                                "example":"Option 1"
                             },
                             "value":{
                                "description":"Option value stored in combobox `value` field. Hidden to user.",
                                "type":"string",
                                "maxLength":64,
                                "example":"one"
                             },
                             "text_id":{
                                "description":"Text identifier used to reference text from translation database.",
                                "type":"number",
                                "minimum":0,
                                "example":1774
                             }
                          }
                       }
                    },
                    "value":{
                       "description":"Currently selected option value. Has to be empty or one of values stored in options field.",
                       "type":"string",
                       "maxLength":64,
                       "example":"one"
                    },
                    "on_change":{
                       "description":"Function name which will be triggered when value changes. Cannot contain special characters.",
                       "type":"string",
                       "maxLength":64,
                       "pattern":"/^[a-zA-Z_][a-zA-Z0-9_]*$/",
                       "example":"onMyComboBoxChange"
                    }
                 }
              }
           ]
        },
        "Device.VIRTUAL.CustomDevice.DeviceSelector":{
           "description":"Custom device device selector representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.AElement"
              },
              {
                 "type":"object",
                 "required":[
                    "accepted_classes",
                    "accepted_types",
                    "allow_multiple",
                    "associations",
                    "on_change"
                 ],
                 "properties":{
                    "accepted_classes":{
                       "description":"Devices classes accepted by selector.<br>**NOTE:** Empty array means all classes are accepted.",
                       "type":"array",
                       "items":{
                          "allOf":[
                             {
                                "$ref":"#/components/schemas/Device.Class"
                             }
                          ]
                       },
                       "example":[
                          "wtp",
                          "sbus"
                       ]
                    },
                    "accepted_types":{
                       "description":"Devices types accepted by selector.<br>**NOTE:** Empty array means all types are accepted.",
                       "type":"array",
                       "items":{
                          "allOf":[
                             {
                                "$ref":"#/components/schemas/Device.Type"
                             }
                          ]
                       },
                       "example":[
                          "relay"
                       ]
                    },
                    "allow_multiple":{
                       "description":"Indicates if selector accepts multiple devices.",
                       "type":"boolean",
                       "example":true
                    },
                    "associations":{
                       "description":"Associated device information.",
                       "type":"object",
                       "required":[
                          "selected"
                       ],
                       "properties":{
                          "selected":{
                             "description":"Selected devices.",
                             "type":"array",
                             "items":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.AssociationInfo"
                                   }
                                ]
                             }
                          }
                       }
                    },
                    "on_change":{
                       "description":"Function name which will be triggered when device changes. Cannot contain special characters.",
                       "type":"string",
                       "maxLength":64,
                       "pattern":"/^[a-zA-Z_][a-zA-Z0-9_]*$/",
                       "example":"onMyDeviceSelectorChange"
                    }
                 }
              }
           ]
        },
        "Device.VIRTUAL.CustomDevice.ColorPicker":{
           "description":"Custom device color picker representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.AElement"
              },
              {
                 "type":"object",
                 "required":[
                    "state",
                    "available_color_modes",
                    "gradient_size_maximum",
                    "color_mode",
                    "brightness",
                    "temperature",
                    "color",
                    "gradient",
                    "on_state_change",
                    "on_brightness_change",
                    "on_color_change"
                 ],
                 "properties":{
                    "state":{
                       "description":"Current switcher state/value.",
                       "type":"boolean",
                       "example":true
                    },
                    "available_color_modes":{
                       "description":"Available color modes.",
                       "type":"array",
                       "minLength":1,
                       "maxLength":3,
                       "items":{
                          "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.ColorPicker.ColorMode"
                       },
                       "example":[
                          "rgb"
                       ]
                    },
                    "gradient_size_maximum":{
                       "description":"Maximum amount of colors which can be used for gradient. Required if `gradient` is in `available_color_modes`.",
                       "type":"integer",
                       "minimum":2,
                       "maximum":32,
                       "example":4
                    },
                    "color_mode":{
                       "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.ColorPicker.ColorMode"
                    },
                    "brightness":{
                       "description":"Brightness in percent.<br/>Unit: %",
                       "type":"integer",
                       "minimum":1,
                       "maximum":100,
                       "example":80
                    },
                    "temperature":{
                       "description":"Selected white color temperature. <br>**NOTE:** Available only when `color_mode` is `temperature`.",
                       "type":"integer",
                       "minimum":1000,
                       "maximum":40000,
                       "example":7000
                    },
                    "color":{
                       "description":"Selected HTML/Hex RGB color. <br>**NOTE:** Available only when `color_mode` is `rgb`.",
                       "type":"string",
                       "pattern":"/^#[0-9a-f]{6}$/i",
                       "example":"#ff00ff"
                    },
                    "gradient":{
                       "description":"Selected list of HTML/Hex RGB colors. <br>**NOTE:** Available only when `color_mode` is `gradient`.",
                       "type":"array",
                       "items":{
                          "type":"string",
                          "pattern":"/^#[0-9a-f]{6}$/i"
                       },
                       "example":[
                          "#ff00ff",
                          "#00ff00"
                       ]
                    },
                    "on_state_change":{
                       "description":"Function name which will be triggered when state changes. Cannot contain special characters.",
                       "type":"string",
                       "maxLength":64,
                       "pattern":"/^[a-zA-Z_][a-zA-Z0-9_]*$/",
                       "example":"onMyColorPickerStateChange"
                    },
                    "on_brightness_change":{
                       "description":"Function name which will be triggered when brightness changes. Cannot contain special characters.",
                       "type":"string",
                       "maxLength":64,
                       "pattern":"/^[a-zA-Z_][a-zA-Z0-9_]*$/",
                       "example":"onMyColorPickerBrightnessChange"
                    },
                    "on_color_change":{
                       "description":"Function name which will be triggered when color changes. Cannot contain special characters.",
                       "type":"string",
                       "maxLength":64,
                       "pattern":"/^[a-zA-Z_][a-zA-Z0-9_]*$/",
                       "example":"onMyColorPickerColorChange"
                    }
                 }
              }
           ]
        },
        "Device.VIRTUAL.CustomDevice.ColorPicker.ColorMode":{
           "description":"Color mode.",
           "type":"string",
           "enum":[
              "rgb",
              "temperature",
              "gradient"
           ]
        },
        "Device.VIRTUAL.CustomDevice.ScheduleSelector":{
           "description":"Custom device schedule selector representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.AElement"
              },
              {
                 "type":"object",
                 "required":[
                    "accepted_types",
                    "schedule_id",
                    "on_change"
                 ],
                 "properties":{
                    "accepted_types":{
                       "description":"Schedule types accepted by selector.<br>**NOTE:** Empty array means all types are accepted.",
                       "type":"array",
                       "items":{
                          "allOf":[
                             {
                                "$ref":"#/components/schemas/Schedule.Type"
                             }
                          ]
                       },
                       "example":[
                          "thermal",
                          "temperature_curve"
                       ]
                    },
                    "schedule_id":{
                       "description":"Selected schedule identifier.<br>**NOTE:** `0` means there is no schedule selected.",
                       "type":"integer",
                       "example":0
                    },
                    "on_change":{
                       "description":"Function name which will be triggered when schedule ID changes. Cannot contain special characters.",
                       "type":"string",
                       "maxLength":64,
                       "pattern":"/^[a-zA-Z_][a-zA-Z0-9_]*$/",
                       "example":"onMyScheduleSelectorChange"
                    }
                 }
              }
           ]
        },
        "Device.VIRTUAL.CustomDevice.TimePicker":{
           "description":"Custom device time picker representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.AElement"
              },
              {
                 "type":"object",
                 "required":[
                    "minimum",
                    "maximum",
                    "units",
                    "time",
                    "on_changge"
                 ],
                 "properties":{
                    "minimum":{
                       "description":"Minimum value for time count. Has to be less than `maximum`.",
                       "type":"integer",
                       "minimum":0,
                       "example":0
                    },
                    "maximum":{
                       "description":"Maximum value for time count. Has to be greater than `minimum`.",
                       "type":"integer",
                       "maximum":3932100,
                       "example":23
                    },
                    "units":{
                       "description":"Available units.",
                       "type":"array",
                       "items":{
                          "type":"string",
                          "enum":[
                             "days",
                             "hours",
                             "minutes",
                             "seconds"
                          ]
                       },
                       "example":[
                          "hours",
                          "minutes"
                       ]
                    },
                    "time":{
                       "description":"Selected time.",
                       "type":"object",
                       "required":[
                          "days",
                          "hours",
                          "minutes",
                          "seconds"
                       ],
                       "properties":{
                          "days":{
                             "description":"Selected days. Has to apply to `minimum` and `maximum` values.<br>**NOTE:** Available only when `days` is in `units`.",
                             "type":"integer",
                             "minimum":0,
                             "example":0
                          },
                          "hours":{
                             "description":"Selected hours. Has to apply to `minimum` and `maximum` values.<br>**NOTE:** Available only when `hours` is in `units`.",
                             "type":"integer",
                             "minimum":0,
                             "example":12
                          },
                          "minutes":{
                             "description":"Selected minutes. Has to apply to `minimum` and `maximum` values.<br>**NOTE:** Available only when `minutes` is in `units`.",
                             "type":"integer",
                             "minimum":0,
                             "example":30
                          },
                          "seconds":{
                             "description":"Selected seconds. Has to apply to `minimum` and `maximum` values.<br>**NOTE:** Available only when `seconds` is in `units`.",
                             "type":"integer",
                             "minimum":0,
                             "example":45
                          },
                          "count":{
                             "description":"Time count in lowest available unit. E.g. when units are `minutes` and `seconds` count will be in seconds and when units are `hours` and `minutes` count will be in minutes.",
                             "type":"integer",
                             "readOnly":true,
                             "example":750
                          }
                       }
                    },
                    "on_change":{
                       "description":"Function name which will be triggered when time changes. Cannot contain special characters.",
                       "type":"string",
                       "maxLength":64,
                       "pattern":"/^[a-zA-Z_][a-zA-Z0-9_]*$/",
                       "example":"onMyTimePickerChange"
                    }
                 }
              }
           ]
        },
        "Device.VIRTUAL.CustomDevice.DatePicker.Date":{
           "description":"Single date representation in date picker.",
           "type":"object",
           "required":[
              "year",
              "month",
              "day"
           ],
           "properties":{
              "year":{
                 "description":"Selected year.",
                 "type":"integer",
                 "minimum":1970,
                 "maximum":2070
              },
              "month":{
                 "description":"Selected month.",
                 "type":"integer",
                 "minimum":1,
                 "maximum":12
              },
              "day":{
                 "description":"Selected day of month.",
                 "type":"integer",
                 "minimum":1,
                 "maximum":31
              }
           }
        },
        "Device.VIRTUAL.CustomDevice.DatePicker":{
           "description":"Custom device date picker representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.AElement"
              },
              {
                 "type":"object",
                 "required":[
                    "date_type",
                    "date",
                    "range",
                    "on_change"
                 ],
                 "properties":{
                    "date_type":{
                       "description":"Indicates if picker holds single and range of dates.",
                       "type":"string",
                       "enum":[
                          "single",
                          "range"
                       ],
                       "example":"single"
                    },
                    "date":{
                       "description":"Picked date. **NOTE:** Available only when `date_type` is `single`.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.DatePicker.Date"
                          }
                       ]
                    },
                    "range":{
                       "description":"Picked range of dates. **NOTE:** Available only when `date_type` is `range`.",
                       "type":"object",
                       "required":[
                          "from",
                          "to"
                       ],
                       "properties":{
                          "from":{
                             "description":"Start date. Has to be lower or equal to `to` date.",
                             "allOf":[
                                {
                                   "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.DatePicker.Date"
                                }
                             ]
                          },
                          "to":{
                             "description":"End date. Has to be higher or equal to `from` date.",
                             "allOf":[
                                {
                                   "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.DatePicker.Date"
                                }
                             ]
                          }
                       }
                    },
                    "on_change":{
                       "description":"Function name which will be triggered when time changes. Cannot contain special characters.",
                       "type":"string",
                       "maxLength":64,
                       "pattern":"/^[a-zA-Z_][a-zA-Z0-9_]*$/",
                       "example":"onMyDatePickerChange"
                    }
                 }
              }
           ]
        },
        "Device.VIRTUAL.CustomDevice.ElementCommand.Button.Press":{
           "description":"Command: `press`.<br>Triggers button press event.<br>Body is <b>ignored</b>."
        },
        "Device.VIRTUAL.CustomDevice.ElementCommand.Button.SetText":{
           "description":"Command: `set_text`.<br>Calls Element to change text to the desired value.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_text"
           ],
           "properties":{
              "set_text":{
                 "description":"Text to be set.",
                 "type":"string",
                 "example":"My new text"
              }
           }
        },
        "Device.VIRTUAL.CustomDevice.ElementCommand.Button.SetTextId":{
           "description":"Command: `set_text_id`.<br>Calls Element to change text_id to the desired value.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_text_id"
           ],
           "properties":{
              "set_text_id":{
                 "description":"Text identifier used to reference text from translation database.",
                 "type":"integer",
                 "minimum":0,
                 "example":1774
              }
           }
        },
        "Device.VIRTUAL.CustomDevice.ElementCommand.Button.SetIcon":{
           "description":"Command: `set_icon`.<br>Calls Element to change icon to the desired value.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_icon"
           ],
           "properties":{
              "set_icon":{
                 "description":"Icon to be set.",
                 "type":"string",
                 "example":"home"
              }
           }
        },
        "Device.VIRTUAL.CustomDevice.ElementCommand.ProgressBar.SetValue":{
           "description":"Command: `set_value`.<br>Calls Element to change value.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_value"
           ],
           "properties":{
              "set_value":{
                 "description":"Value to be set.",
                 "type":"number",
                 "minimum":0,
                 "maximum":100,
                 "example":50
              }
           }
        },
        "Device.VIRTUAL.CustomDevice.ElementCommand.ProgressBar.Increment":{
           "description":"Command: `increment`.<br>Calls Element to increment value by 1.<br>Body is <b>ignored</b>."
        },
        "Device.VIRTUAL.CustomDevice.ElementCommand.ProgressBar.Decrement":{
           "description":"Command: `decrement`.<br>Calls Element to decrement value by 1.<br>Body is <b>ignored</b>."
        },
        "Device.VIRTUAL.CustomDevice.ElementCommand.Slider.SetValue":{
           "description":"Command: `set_value`.<br>Calls Element to change value.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_value"
           ],
           "properties":{
              "set_value":{
                 "description":"Value to be set.",
                 "type":"number",
                 "example":123.4
              }
           }
        },
        "Device.VIRTUAL.CustomDevice.ElementCommand.Slider.Increment":{
           "description":"Command: `increment`.<br>Calls Element to increment value by single step value.<br>Body is <b>ignored</b>."
        },
        "Device.VIRTUAL.CustomDevice.ElementCommand.Slider.Decrement":{
           "description":"Command: `decrement`.<br>Calls Element to decrement value by single step value.<br>Body is <b>ignored</b>."
        },
        "Device.VIRTUAL.CustomDevice.ElementCommand.Switcher.SetValue":{
           "description":"Command: `set_value`.<br>Calls Element to change value.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_value"
           ],
           "properties":{
              "set_value":{
                 "description":"Value to be set.",
                 "type":"boolean",
                 "example":true
              }
           }
        },
        "Device.VIRTUAL.CustomDevice.ElementCommand.Switcher.Toggle":{
           "description":"Command: `toggle`.<br>Calls Element to toggle value.<br>Body is <b>ignored</b>."
        },
        "Device.VIRTUAL.CustomDevice.ElementCommand.Text.SetValue":{
           "description":"Command: `set_value`.<br>Calls Element to change value.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_value"
           ],
           "properties":{
              "set_value":{
                 "description":"Text to be set.",
                 "type":"string",
                 "example":"My new text"
              }
           }
        },
        "Device.VIRTUAL.CustomDevice.ElementCommand.Text.SetTextId":{
           "description":"Command: `set_text_id`.<br>Calls Element to change text_id to the desired value.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_text_id"
           ],
           "properties":{
              "set_text_id":{
                 "description":"Text identifier used to reference text from translation database.",
                 "type":"integer",
                 "minimum":0,
                 "example":1774
              }
           }
        },
        "Device.VIRTUAL.CustomDevice.ElementCommand.Text.SetFontSize":{
           "description":"Command: `set_font_size`.<br>Calls Element to change font_size value.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_font_size"
           ],
           "properties":{
              "set_font_size":{
                 "description":"Font size to be set.",
                 "type":"string",
                 "enum":[
                    "small",
                    "normal",
                    "large"
                 ],
                 "example":"small"
              }
           }
        },
        "Device.VIRTUAL.CustomDevice.ElementCommand.Text.SetFontWeight":{
           "description":"Command: `set_font_weight`.<br>Calls Element to change font_weight value.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_font_weight"
           ],
           "properties":{
              "set_font_weight":{
                 "description":"Font weight to be set.",
                 "type":"string",
                 "enum":[
                    "normal",
                    "bold"
                 ],
                 "example":"normal"
              }
           }
        },
        "Device.VIRTUAL.CustomDevice.ElementCommand.Text.SetIcon":{
           "description":"Command: `set_icon`.<br>Calls Element to change icon to the desired value.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_icon"
           ],
           "properties":{
              "set_icon":{
                 "description":"Icon to be set.",
                 "type":"string",
                 "example":"home"
              }
           }
        },
        "Device.VIRTUAL.CustomDevice.ElementCommand.ComboBox.SetValue":{
           "description":"Command: `set_value`.<br>Calls Element to change value to one of available options.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_value"
           ],
           "properties":{
              "set_value":{
                 "description":"Value to be set.",
                 "type":"string",
                 "example":"available_option_value"
              }
           }
        },
        "Device.VIRTUAL.CustomDevice.ElementCommand.ComboBox.AddOption":{
           "description":"Command: `add_option`.<br>Calls Element to add new available option.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "add_option"
           ],
           "properties":{
              "add_option":{
                 "description":"New option to be added.",
                 "type":"array",
                 "items":{
                    "type":"string",
                    "example":[
                       "new_option_label",
                       "new_option_value"
                    ]
                 }
              }
           }
        },
        "Device.VIRTUAL.CustomDevice.ElementCommand.ComboBox.AddOption_WithTextId":{
           "description":"Command: `add_option`.<br>Calls Element to add new available option.<br>Body is <b>required</b>.<br><b>NOTE:</b> Third argument (text_id) is optional! If not provided it will be set to 0.",
           "type":"object",
           "required":[
              "add_option"
           ],
           "properties":{
              "add_option":{
                 "description":"New option to be added.",
                 "type":"array",
                 "items":{
                    "anyOf":[
                       {
                          "type":"number"
                       },
                       {
                          "type":"string"
                       }
                    ],
                    "example":[
                       "new_option_label",
                       "new_option_value",
                       1245
                    ]
                 }
              }
           }
        },
        "Device.VIRTUAL.CustomDevice.ElementCommand.ComboBox.RemoveOptionByValue":{
           "description":"Command: `remove_option_by_value`.<br>Calls Element to remove one of available options by value. If selected value is removed it changes to empty.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "remove_option_by_value"
           ],
           "properties":{
              "remove_option_by_value":{
                 "description":"Value of option to be removed.",
                 "type":"string",
                 "example":"option_value"
              }
           }
        },
        "Device.VIRTUAL.CustomDevice.ElementCommand.ComboBox.RemoveOptionByLabel":{
           "description":"Command: `remove_option_by_label`.<br>Calls Element to remove one of available options by label. If selected value is removed it changes to empty.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "remove_option_by_label"
           ],
           "properties":{
              "remove_option_by_label":{
                 "description":"Label of option to be removed.",
                 "type":"string",
                 "example":"option_label"
              }
           }
        },
        "Device.VIRTUAL.CustomDevice.ElementCommand.ComboBox.RemoveOptionByTextId":{
           "description":"Command: `remove_option_by_text_id`.<br>Calls Element to remove one of available options by text id. If selected value is removed it changes to empty.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "remove_option_by_text_id"
           ],
           "properties":{
              "remove_option_by_text_id":{
                 "description":"Text identifier used to reference text from translation database.",
                 "type":"integer",
                 "minimum":0,
                 "example":3124
              }
           }
        },
        "Device.VIRTUAL.CustomDevice.ElementCommand.ComboBox.ClearOptions":{
           "description":"Command `clear_options`.<br>Calls Element to remove all available options. Changes current value to empty.<br> Body is <b>ignored</b>."
        },
        "Device.VIRTUAL.CustomDevice.ElementCommand.DeviceSelector.SetAcceptedClasses":{
           "description":"Command: `set_accepted_classes`.<br>Calls Element to set devices accepted classes. Values has to be unique.<br>Empty array means all classes are accepted.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_accepted_classes"
           ],
           "properties":{
              "set_accepted_classes":{
                 "description":"Classes to be accepted.",
                 "type":"array",
                 "items":{
                    "allOf":[
                       {
                          "$ref":"#/components/schemas/Device.Class"
                       }
                    ]
                 },
                 "example":[
                    "wtp",
                    "sbus"
                 ]
              }
           }
        },
        "Device.VIRTUAL.CustomDevice.ElementCommand.DeviceSelector.SetAcceptedTypes":{
           "description":"Command: `set_accepted_types`.<br>Calls Element to set devices accepted types. Values has to be unique.<br>Empty array means all types are accepted.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_accepted_types"
           ],
           "properties":{
              "set_accepted_types":{
                 "description":"Types to be accepted.",
                 "type":"array",
                 "items":{
                    "allOf":[
                       {
                          "$ref":"#/components/schemas/Device.Type"
                       }
                    ]
                 },
                 "example":[
                    "relay",
                    "sensor"
                 ]
              }
           }
        },
        "Device.VIRTUAL.CustomDevice.ElementCommand.DeviceSelector.SelectDevice":{
           "description":"Command `select_device`.<br>Calls Element to select current device. It has to has class and type accepted by selector.<br>**NOTE:** If selector accepts multiple devices this command adds passed device to array of selected ones instead of replacing.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "select_device"
           ],
           "properties":{
              "select_device":{
                 "description":"Device to be selected.",
                 "allOf":[
                    {
                       "$ref":"#/components/schemas/Device.AssociationInfo"
                    }
                 ]
              }
           }
        },
        "Device.VIRTUAL.CustomDevice.ElementCommand.DeviceSelector.SelectDevices":{
           "description":"Command `select_devices`.<br>Calls Element to select current devices. They have to has class and type accepted by selector.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "select_devices"
           ],
           "properties":{
              "select_devices":{
                 "description":"Devices to be selected.",
                 "type":"array",
                 "items":{
                    "allOf":[
                       {
                          "$ref":"#/components/schemas/Device.AssociationInfo"
                       }
                    ]
                 },
                 "example":[
                    {
                       "class":"wtp",
                       "id":10
                    },
                    {
                       "class":"wtp",
                       "id":11
                    }
                 ]
              }
           }
        },
        "Device.VIRTUAL.CustomDevice.ElementCommand.ColorPicker.Toggle":{
           "description":"Command: `toggle`.<br>Calls Element to toggle value of `state` property.<br>Body is <b>ignored</b>."
        },
        "Device.VIRTUAL.CustomDevice.ElementCommand.ColorPicker.SetState":{
           "description":"Command `set_state`.<br>Calls Element to set its current state.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_state"
           ],
           "properties":{
              "set_state":{
                 "description":"State to be set.",
                 "type":"boolean",
                 "example":true
              }
           }
        },
        "Device.VIRTUAL.CustomDevice.ElementCommand.ColorPicker.SetBrightness":{
           "description":"Command `set_brightness`.<br>Calls Element to set its current brightness.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_brightness"
           ],
           "properties":{
              "set_brightness":{
                 "description":"Brightness to be set.",
                 "type":"integer",
                 "minimum":1,
                 "maximum":100,
                 "example":80
              }
           }
        },
        "Device.VIRTUAL.CustomDevice.ElementCommand.ColorPicker.SetTemperature":{
           "description":"Command `set_temperature`.<br>Calls Element to set its current temperature.<br>**NOTE:** Available only when `temperature` is one of `available_color_modes`.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_temperature"
           ],
           "properties":{
              "set_temperature":{
                 "description":"Temperature to be set.",
                 "type":"integer",
                 "example":7000
              }
           }
        },
        "Device.VIRTUAL.CustomDevice.ElementCommand.ColorPicker.SetColor":{
           "description":"Command `set_color`.<br>Calls Element to set its current color.<br>**NOTE:** Available only when `rgb` is one of `available_color_modes`.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_color"
           ],
           "properties":{
              "set_color":{
                 "description":"Color to be set.",
                 "type":"string",
                 "pattern":"/^#[0-9a-f]{6}$/i",
                 "example":"#ff00ff"
              }
           }
        },
        "Device.VIRTUAL.CustomDevice.ElementCommand.ColorPicker.SetGradient":{
           "description":"Command `set_gradient`.<br>Calls Element to set its current gradient colors.<br>**NOTE:** Available only when `gradient` is one of `available_color_modes`.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_gradient"
           ],
           "properties":{
              "set_gradient":{
                 "description":"Gradient colors to be set.",
                 "type":"array",
                 "items":{
                    "type":"string",
                    "pattern":"/^#[0-9a-f]{6}$/i"
                 },
                 "example":[
                    "#ff00ff",
                    "#00ff00"
                 ]
              }
           }
        },
        "Device.VIRTUAL.CustomDevice.ElementCommand.ScheduleSelector.SelectScheduleId":{
           "description":"Command `select_schedule_id`.<br>Calls Element to select current schedule by its ID. It has to be of type accepted by selector.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "select_schedule_id"
           ],
           "properties":{
              "select_schedule_id":{
                 "description":"Schedule ID to be selected.",
                 "type":"integer",
                 "minimum":0,
                 "example":10
              }
           }
        },
        "Device.VIRTUAL.CustomDevice.ElementCommand.ScheduleSelector.SetAcceptedTypes":{
           "description":"Command: `set_accepted_types`.<br>Calls Element to set schedules accepted types. Values has to be unique.<br>Empty array means all types are accepted.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_accepted_types"
           ],
           "properties":{
              "set_accepted_types":{
                 "description":"Types to be accepted.",
                 "type":"array",
                 "items":{
                    "allOf":[
                       {
                          "$ref":"#/components/schemas/Schedule.Type"
                       }
                    ]
                 },
                 "example":[
                    "thermal",
                    "temperature_curve"
                 ]
              }
           }
        },
        "Device.VIRTUAL.CustomDevice.ElementCommand.TimePicker.SetTime":{
           "description":"Command `set_time`.<br>Calls Element to set its current time.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_time"
           ],
           "properties":{
              "set_time":{
                 "description":"Time to be set.",
                 "type":"array",
                 "items":{
                    "type":"integer",
                    "minimum":0,
                    "maximum":59
                 },
                 "example":[
                    10,
                    30
                 ]
              }
           }
        },
        "Device.VIRTUAL.CustomDevice.ElementCommand.TimePicker.SetCount":{
           "description":"Command `set_count`.<br>Calls Element to set its current time count.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_count"
           ],
           "properties":{
              "set_count":{
                 "description":"Time count to be set.",
                 "type":"integer",
                 "minimum":0,
                 "example":90
              }
           }
        },
        "Device.VIRTUAL.CustomDevice.ElementCommand.DatePicker.SetDate":{
           "description":"Command `set_date`.<br>Calls Element to set its current date.<br>**NOTE:** Available only when `date_type` is `single`.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_date"
           ],
           "properties":{
              "set_date":{
                 "description":"Date to be set.",
                 "allOf":[
                    {
                       "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.DatePicker.Date"
                    }
                 ],
                 "example":{
                    "year":2021,
                    "month":5,
                    "day":15
                 }
              }
           }
        },
        "Device.VIRTUAL.CustomDevice.ElementCommand.DatePicker.SetRange":{
           "description":"Command `set_range`.<br>Calls Element to set its current date range.<br>**NOTE:** Available only when `date_type` is `range`.<br>Body is <b>required</b>.",
           "type":"object",
           "required":[
              "set_range"
           ],
           "properties":{
              "set_range":{
                 "description":"Range to be set.",
                 "type":"object",
                 "required":[
                    "from",
                    "to"
                 ],
                 "properties":{
                    "from":{
                       "description":"Start date. Has to be lower or equal to `to` date.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.DatePicker.Date"
                          }
                       ]
                    },
                    "to":{
                       "description":"End date. Has to be higher or equal to `from` date.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.DatePicker.Date"
                          }
                       ]
                    }
                 },
                 "example":{
                    "from":{
                       "year":2021,
                       "month":5,
                       "day":15
                    },
                    "to":{
                       "year":2021,
                       "month":5,
                       "day":20
                    }
                 }
              }
           }
        },
        "Device.VIRTUAL.CustomDevice.ElementCommand.OneOf":{
           "oneOf":[
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.ElementCommand.Button.Press"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.ElementCommand.Button.SetText"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.ElementCommand.Button.SetTextId"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.ElementCommand.Button.SetIcon"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.ElementCommand.ProgressBar.SetValue"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.ElementCommand.ProgressBar.Increment"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.ElementCommand.ProgressBar.Decrement"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.ElementCommand.Slider.SetValue"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.ElementCommand.Slider.Increment"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.ElementCommand.Slider.Decrement"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.ElementCommand.Switcher.SetValue"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.ElementCommand.Switcher.Toggle"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.ElementCommand.Text.SetValue"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.ElementCommand.Text.SetTextId"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.ElementCommand.Text.SetFontSize"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.ElementCommand.Text.SetFontWeight"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.ElementCommand.Text.SetIcon"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.ElementCommand.ComboBox.SetValue"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.ElementCommand.ComboBox.AddOption"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.ElementCommand.ComboBox.AddOption_WithTextId"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.ElementCommand.ComboBox.RemoveOptionByValue"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.ElementCommand.ComboBox.RemoveOptionByLabel"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.ElementCommand.ComboBox.RemoveOptionByTextId"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.ElementCommand.ComboBox.ClearOptions"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.ElementCommand.DeviceSelector.SetAcceptedClasses"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.ElementCommand.DeviceSelector.SetAcceptedTypes"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.ElementCommand.DeviceSelector.SelectDevice"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.ElementCommand.DeviceSelector.SelectDevices"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.ElementCommand.ColorPicker.Toggle"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.ElementCommand.ColorPicker.SetState"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.ElementCommand.ColorPicker.SetBrightness"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.ElementCommand.ColorPicker.SetTemperature"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.ElementCommand.ColorPicker.SetColor"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.ElementCommand.ColorPicker.SetGradient"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.ElementCommand.ScheduleSelector.SelectScheduleId"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.ElementCommand.ScheduleSelector.SetAcceptedTypes"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.ElementCommand.TimePicker.SetTime"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.ElementCommand.TimePicker.SetCount"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.ElementCommand.DatePicker.SetDate"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.ElementCommand.DatePicker.SetRange"
              }
           ]
        },
        "Device.VIRTUAL.CustomDevice.AComponent":{
           "description":"Custom device abstract component representation.",
           "type":"object",
           "required":[
              "name",
              "type",
              "custom_device_id"
           ],
           "properties":{
              "name":{
                 "description":"Component name used to reference element at lua side. Cannot contain special characters except `_`",
                 "type":"string",
                 "minLength":1,
                 "maxLength":32,
                 "example":"my_component_name"
              },
              "type":{
                 "description":"Component type.",
                 "type":"string",
                 "enum":[
                    "http_client",
                    "mqtt_client",
                    "ws_client",
                    "modbus_rtu_client",
                    "modbus_tcp_client",
                    "variable_boolean",
                    "variable_integer",
                    "variable_string",
                    "variable_table",
                    "timer"
                 ],
                 "example":"timer"
              },
              "custom_device_id":{
                 "description":"Component`s parent device ID.",
                 "type":"integer",
                 "readOnly":true,
                 "minimum":1,
                 "example":1
              }
           }
        },
        "Device.VIRTUAL.CustomDevice.ComponentOneOf":{
           "oneOf":[
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.HttpClientComponent"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.MqttClientComponent"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.WsClientComponent"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.ModbusRTUClientComponent"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.ModbusTCPClientComponent"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.VariableBooleanComponent"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.VariableIntegerComponent"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.VariableStringComponent"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.VariableTableComponent"
              },
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.TimerComponent"
              }
           ]
        },
        "Device.VIRTUAL.CustomDevice.ComponentCollection":{
           "type":"array",
           "items":{
              "anyOf":[
                 {
                    "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.HttpClientComponent"
                 },
                 {
                    "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.MqttClientComponent"
                 },
                 {
                    "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.WsClientComponent"
                 },
                 {
                    "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.ModbusRTUClientComponent"
                 },
                 {
                    "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.ModbusTCPClientComponent"
                 },
                 {
                    "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.VariableBooleanComponent"
                 },
                 {
                    "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.VariableIntegerComponent"
                 },
                 {
                    "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.VariableStringComponent"
                 },
                 {
                    "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.VariableTableComponent"
                 },
                 {
                    "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.TimerComponent"
                 }
              ]
           }
        },
        "Device.VIRTUAL.CustomDevice.HttpClientComponent":{
           "description":"Custom device HttpClient component representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.AComponent"
              },
              {
                 "type":"object",
                 "required":[
                    "url",
                    "body",
                    "headers",
                    "query_params"
                 ],
                 "properties":{
                    "url":{
                       "description":"Default URL that will be used if not specified in lua script.",
                       "type":"string",
                       "example":"https://myserver.com"
                    },
                    "body":{
                       "description":"Default body that will be used if not specified in lua script.",
                       "type":"string",
                       "example":"{\"update\":\"name\"}"
                    },
                    "headers":{
                       "description":"Hash Map of default headers used for every request. {Header: Value} (compliant with the HTTP specification)",
                       "type":"object",
                       "additionalProperties":{
                          "type":"string"
                       },
                       "example":{
                          "Content-Type":"application/json",
                          "Authorization":"Bearer SuperSecretTokenGoesHere"
                       }
                    },
                    "query_params":{
                       "description":"Hash Map of default Query Parameters which are appended to every request.",
                       "type":"object",
                       "additionalProperties":{
                          "type":"string"
                       },
                       "example":{
                          "parameter1":"Value-1",
                          "parameter2":"Value-2"
                       }
                    }
                 }
              }
           ]
        },
        "Device.VIRTUAL.CustomDevice.MqttClientComponent":{
           "description":"Custom device MqttClient component representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.AComponent"
              },
              {
                 "type":"object",
                 "required":[
                    "broker",
                    "port",
                    "client_id",
                    "username",
                    "password",
                    "subscriptions"
                 ],
                 "properties":{
                    "broker":{
                       "description":"Broker hostname or ip.",
                       "type":"string",
                       "example":"myserver.com"
                    },
                    "port":{
                       "description":"Broker.",
                       "type":"integer",
                       "minimum":1,
                       "maximum":65535,
                       "example":1883
                    },
                    "client_id":{
                       "description":"Mqtt client identifier. Cannot contain special characters except `-` `_`",
                       "type":"string",
                       "maxLength":64,
                       "example":"my-mqtt_client"
                    },
                    "username":{
                       "description":"Mqtt broker authorization username (optional, may be empty)",
                       "type":"string",
                       "example":"user"
                    },
                    "password":{
                       "description":"Mqtt broker authorization password (optional, may be empty). Will always be masked when retrieving client data eg. `*******`",
                       "type":"string",
                       "example":"p@$$w0rd"
                    },
                    "subscriptions":{
                       "description":"List of topics to subscribe.",
                       "type":"array",
                       "items":{
                          "type":"object",
                          "required":[
                             "topic",
                             "qos"
                          ],
                          "properties":{
                             "topic":{
                                "description":"Topic to subscribe. Wildcard allowed.",
                                "type":"string"
                             },
                             "qos":{
                                "description":"Subscription qos level.",
                                "type":"integer",
                                "minimum":0,
                                "maximum":2
                             }
                          }
                       }
                    }
                 }
              }
           ]
        },
        "Device.VIRTUAL.CustomDevice.WsClientComponent":{
           "description":"Custom device WsClient component representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.AComponent"
              },
              {
                 "type":"object",
                 "required":[
                    "url",
                    "headers",
                    "query_params"
                 ],
                 "properties":{
                    "url":{
                       "description":"URL that will be to connect to server.",
                       "type":"string",
                       "example":"ws://myserver.com"
                    },
                    "headers":{
                       "description":"List of key-value pairs with headers used while connecting to server.",
                       "type":"object",
                       "additionalProperties":{
                          "type":"string"
                       },
                       "example":{
                          "Content-Type":"application/json",
                          "Authorization":"Bearer SuperSecretTokenGoesHere"
                       }
                    },
                    "query_params":{
                       "description":"Hash Map of Query Parameters which are appended to every request.",
                       "type":"object",
                       "additionalProperties":{
                          "type":"string"
                       },
                       "example":{
                          "parameter1":"Value-1",
                          "parameter2":"Value-2"
                       }
                    }
                 }
              }
           ]
        },
        "Device.VIRTUAL.CustomDevice.ModbusRTUClientComponent":{
           "description":"Custom device Modbus RTU Client component representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.AComponent"
              },
              {
                 "type":"object",
                 "required":[
                    "slave_address",
                    "baud_rate",
                    "parity",
                    "stop_bits",
                    "transceiver_uuid",
                    "associations"
                 ],
                 "properties":{
                    "slave_address":{
                       "description":"Address of slave device to which client will communicate.",
                       "type":"integer",
                       "minimum":1,
                       "maximum":255,
                       "example":1
                    },
                    "baud_rate":{
                       "description":"Baud rate on which the slave device works.",
                       "type":"integer",
                       "example":115200
                    },
                    "parity":{
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Modbus.Config.Parity"
                          }
                       ]
                    },
                    "stop_bits":{
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Modbus.Config.StopBit"
                          }
                       ]
                    },
                    "transceiver_uuid":{
                       "description":"UUID of transceiver which client is using for communication.",
                       "type":"string",
                       "readOnly":true,
                       "example":"FFFFFFFFFFFFFFFFFFFFFF03"
                    },
                    "associations":{
                       "description":"Associated devices information.",
                       "type":"object",
                       "required":[
                          "transceiver"
                       ],
                       "properties":{
                          "transceiver":{
                             "description":"Transceiver associated to client which will be used for communication.",
                             "allOf":[
                                {
                                   "$ref":"#/components/schemas/Device.AssociationInfo"
                                }
                             ]
                          }
                       }
                    }
                 }
              }
           ]
        },
        "Device.VIRTUAL.CustomDevice.ModbusTCPClientComponent":{
           "description":"Custom device Modbus TCP Client component representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.AComponent"
              },
              {
                 "type":"object",
                 "required":[
                    "ip_address",
                    "port",
                    "device_id"
                 ],
                 "properties":{
                    "ip_address":{
                       "description":"IP address of the device the client communicates with.",
                       "type":"string",
                       "example":"192.168.0.100"
                    },
                    "port":{
                       "description":"TCP port the device communicate on.",
                       "type":"integer",
                       "minimum":0,
                       "maximum":65535,
                       "example":502
                    },
                    "device_id":{
                       "description":"Slave Device ID. Used if target device is gateway.",
                       "type":"integer",
                       "minimum":0,
                       "maximum":255,
                       "example":0
                    }
                 }
              }
           ]
        },
        "Device.VIRTUAL.CustomDevice.VariableBooleanComponent":{
           "description":"Custom device Boolean Variable component representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.AComponent"
              },
              {
                 "type":"object",
                 "required":[
                    "value",
                    "default_value"
                 ],
                 "properties":{
                    "value":{
                       "description":"Current value of variable.",
                       "type":"boolean",
                       "example":false
                    },
                    "default_value":{
                       "description":"Default value which will be set on application load.",
                       "type":"boolean",
                       "example":false
                    }
                 }
              }
           ]
        },
        "Device.VIRTUAL.CustomDevice.VariableIntegerComponent":{
           "description":"Custom device Integer Variable component representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.AComponent"
              },
              {
                 "type":"object",
                 "required":[
                    "value",
                    "default_value"
                 ],
                 "properties":{
                    "value":{
                       "description":"Current value of variable.",
                       "type":"integer",
                       "example":-12315552
                    },
                    "default_value":{
                       "description":"Default value which will be set on application load.",
                       "type":"integer",
                       "example":0
                    }
                 }
              }
           ]
        },
        "Device.VIRTUAL.CustomDevice.VariableStringComponent":{
           "description":"Custom device String Variable component representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.AComponent"
              },
              {
                 "type":"object",
                 "required":[
                    "value",
                    "default_value"
                 ],
                 "properties":{
                    "value":{
                       "description":"Current value of variable.",
                       "type":"string",
                       "example":"working"
                    },
                    "default_value":{
                       "description":"Default value which will be set on application load.",
                       "type":"string",
                       "example":""
                    }
                 }
              }
           ]
        },
        "Device.VIRTUAL.CustomDevice.VariableTableComponent":{
           "description":"Custom device Table Variable component representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.AComponent"
              },
              {
                 "type":"object",
                 "required":[
                    "value",
                    "default_value"
                 ],
                 "properties":{
                    "value":{
                       "description":"Current value of variable.",
                       "type":"object",
                       "example":{
                          "key":"value",
                          "another_key":"another_value",
                          "collection":[
                             "value1",
                             "value2"
                          ],
                          "nested":{
                             "deep":{
                                "deeper":{
                                   "key":"value",
                                   "another_key":false,
                                   "collection":[
                                      "value1",
                                      "value2"
                                   ]
                                }
                             }
                          },
                          "true_or_false":true,
                          "numeric_value":12345.5
                       }
                    },
                    "default_value":{
                       "description":"Default value which will be set on application load.",
                       "type":"object",
                       "example":{
                          "key":"value",
                          "another_key":"another_value",
                          "collection":[
                             "value1",
                             "value2"
                          ],
                          "nested":{
                             "deep":{
                                "deeper":{
                                   "key":"value",
                                   "another_key":false,
                                   "collection":[
                                      "value1",
                                      "value2"
                                   ]
                                }
                             }
                          },
                          "true_or_false":true,
                          "numeric_value":12345.5
                       }
                    }
                 }
              }
           ]
        },
        "Device.VIRTUAL.CustomDevice.TimerComponent":{
           "description":"Custom device Timer component representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.VIRTUAL.CustomDevice.AComponent"
              },
              {
                 "type":"object",
                 "required":[
                    "unit"
                 ],
                 "properties":{
                    "unit":{
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/LuaTimer.Unit"
                          }
                       ]
                    }
                 }
              }
           ]
        },
        "Device.VIRTUAL.CustomDevice.Export":{
           "description":"Exported custom device.",
           "type":"object",
           "required":[
              "meta",
              "data",
              "hash"
           ],
           "properties":{
              "meta":{
                 "description":"Meta information about exported custom device.",
                 "type":"object",
                 "required":[
                    "version",
                    "blocked",
                    "central_version"
                 ],
                 "properties":{
                    "version":{
                       "description":"User defined version of custom device.",
                       "type":"string",
                       "example":"1.0.0"
                    },
                    "blocked":{
                       "description":"Indicates whether custom device can be modified after import.",
                       "type":"boolean",
                       "example":false
                    },
                    "central_version":{
                       "description":"Version of Sinum central which custom device was created in.",
                       "type":"string",
                       "example":"1.10.0"
                    }
                 }
              },
              "data":{
                 "description":"Custom device payload in base64. Encrypted when device is blocked.",
                 "type":"string",
                 "example":"eyJjb21wb25lbnRzIjpbXSwiY29uZmlnIjp7ImNvbnRlbnQiOltdLCJ2ZXJzaW9uIjoyfSwiZGlhbG9nIjp7ImNvbnRlbnQiOltdLCJ2ZXJzaW9uIjoyfSwiZWxlbWVudHMiOltdLCJsdWEiOiIiLCJ3aWRnZXQiOnsiY29udGVudCI6W10sInZlcnNpb24iOjJ9fQ=="
              },
              "hash":{
                 "description":"Hashes of meta and data.",
                 "type":"object",
                 "required":[
                    "meta",
                    "data"
                 ],
                 "properties":{
                    "meta":{
                       "description":"Meta object MD5 hash.",
                       "type":"string",
                       "example":"3a2fdcdcab2f7132d70d8dfb38f4e8bd"
                    },
                    "data":{
                       "description":"Data object MD5 hash.",
                       "type":"string",
                       "example":"5b174bf190683efb6c74ff1a8c1e9e8d"
                    }
                 }
              }
           }
        },
        "Device.VIRTUAL.CustomDevice.VariantDevice":{
           "description":"Custom device variant properties.",
           "type":"object",
           "properties":{
              "charge_power":{
                 "description":"Current charge power.<br>Unit: W, multiplied by 1000 (mW).<br>Parameter available when custom device `variant` is set to `battery` or `car_charger`.",
                 "type":"integer",
                 "multipleOf":0.001,
                 "example":2500000,
                 "minimum":-2147483647,
                 "maximum":2147483647
              },
              "soc":{
                 "description":"Current state of charge.<br>Unit: %<br>Parameter available when custom device `variant` is set to `battery`.",
                 "type":"integer",
                 "example":50,
                 "minimum":0,
                 "maximum":100
              },
              "energy_charged_today":{
                 "description":"Amount of energy charged to the battery today.<br>Unit: kwh with one decimal number, multiplied by 1000 (Wh)<br>Parameter available when custom device `variant` is set to `battery`.",
                 "type":"integer",
                 "multipleOf":0.001,
                 "example":500,
                 "minimum":0,
                 "maximum":4294967295
              },
              "energy_discharged_today":{
                 "description":"Amount of energy consumed from the battery today.<br>Unit: kwh with one decimal number, multiplied by 1000 (Wh)<br>Parameter available when custom device `variant` is set to `battery`.",
                 "type":"integer",
                 "multipleOf":0.001,
                 "example":500,
                 "minimum":0,
                 "maximum":4294967295
              },
              "current_temperature":{
                 "description":"Current domestic hot water temperature. <br> Unit: °C with one decimal number, multiplied by 10.<br>Parameter available when custom device `variant` is set to `common_dhw_main`.",
                 "type":"integer",
                 "multipleOf":0.1,
                 "example":450,
                 "minimum":-400,
                 "maximum":1500
              },
              "target_temperature":{
                 "description":"Target hot water temperature for DHW or target temperature for temperature regulator. <br> Unit: °C with one decimal number, multiplied by 10.<br>Parameter available when custom device `variant` is set to `common_dhw_main` or `temperature_regulator`.",
                 "type":"integer",
                 "minimum":0,
                 "maximum":1000,
                 "multipleOf":0.1,
                 "example":500
              },
              "hysteresis":{
                 "description":"Target hot water temperature hysteresis. <br> Unit: °C with one decimal number, multiplied by 10.<br>Parameter available when custom device `variant` is set to `common_dhw_main`.",
                 "type":"integer",
                 "minimum":0,
                 "maximum":200,
                 "multipleOf":0.1,
                 "example":100
              },
              "heat_demand":{
                 "description":"Domestic Hot Water heat demand.<br>Parameter available when custom device `variant` is set to `common_dhw_main`.",
                 "type":"boolean",
                 "example":true
              },
              "total_active_power":{
                 "description":"Active power measured by energy meter.<br>Unit: W, multiplied by 1000 (mW).<br>Parameter available when custom device `variant` is set to `energy_meter`.",
                 "type":"integer",
                 "multipleOf":0.001,
                 "example":6000000,
                 "minimum":-2147483647,
                 "maximum":2147483647
              },
              "energy_sum_total":{
                 "description":"Energy sum (consumed + fed) of all phases lifetime.<br>Unit: kWh, multiplied by 1000 (Wh).<br>Parameter available when custom device `variant` is set to `energy_meter`.",
                 "type":"integer",
                 "multipleOf":0.001,
                 "example":400000,
                 "minimum":0,
                 "maximum":4294967295
              },
              "uses_energy_of_building":{
                 "description":"Indicates if energy meter is used to measure energy of device inside the building. (Not main energy meter).<br>Parameter available when custom device `variant` is set to `energy_meter`.",
                 "type":"boolean",
                 "example":false
              },
              "enabled":{
                 "description":"Indicates if heat pump is enabled.<br>Parameter available when custom device `variant` is set to `heat_pump`.",
                 "type":"boolean",
                 "example":false
              },
              "thermal_demand":{
                 "description":"Heat pump thermal demand.<br>Parameter available when custom device `variant` is set to `heat_pump`.",
                 "type":"string",
                 "enum":[
                    "none",
                    "heat",
                    "cool"
                 ],
                 "example":"heat"
              },
              "electric_heater_active":{
                 "description":"Indicates electric heater activation state in heat pump.<br>Parameter available when custom device `variant` is set to `heat_pump`.",
                 "type":"boolean",
                 "example":false
              },
              "pv_total_active_power":{
                 "description":"Current total power produced by all photovoltaic panels. <br> Unit: W with three decimal number, multiplied by 1000 (mW)<br>Parameter available when custom device `variant` is set to `inverter`.",
                 "type":"integer",
                 "multipleOf":0.001,
                 "minimum":0,
                 "maximum":4294967295,
                 "example":500
              },
              "energy_produced_total":{
                 "description":"Total amount of energy produced by PV over a lifetime.<br>Unit: kWh with one decimal number, multiplied by 1000 (Wh).<br>Parameter available when custom device `variant` is set to `inverter`.",
                 "type":"integer",
                 "multipleOf":0.001,
                 "minimum":0,
                 "maximum":4294967295,
                 "example":10000
              },
              "power_to_grid":{
                 "description":"Current power fed to (positive number) or consumed from (negative number) the power grid.<br>Unit: W with three decimal number, multiplied by 1000 (mW)<br>Parameter available when custom device `variant` is set to `inverter`.",
                 "type":"integer",
                 "multipleOf":0.001,
                 "minimum":-2147483647,
                 "maximum":2147483647,
                 "example":-500
              },
              "temperature":{
                 "description":"Measured temperature sensor value.<br> Unit: °C with one decimal number, multiplied by 10.<br>Parameter available when custom device `variant` is set to `temperature_sensor`.",
                 "type":"integer",
                 "multipleOf":0.1,
                 "minimum":-1000,
                 "maximum":3000,
                 "example":250
              },
              "state":{
                 "description":"State of the output for relay or state of input for two state input sensor. On/Off.<br>Parameter available when custom device `variant` is set to `relay` or `two_state_input_sensor`.",
                 "type":"boolean",
                 "example":true
              },
              "time_since_state_change":{
                 "description":"Time since last relay state change.<br>Unit: seconds.<br>Parameter available when custom device `variant` is set to `relay`.",
                 "type":"integer",
                 "readOnly":true,
                 "example":120
              },
              "target_temperature_mode":{
                 "description":"Regulator target temperature mode.<br>Parameter available when custom device `variant` is set to `temperature_regulator`.",
                 "type":"object",
                 "required":[
                    "current",
                    "remaining_time"
                 ],
                 "properties":{
                    "current":{
                       "description":"Regulator target temperature mode. Specifies if regulator works in `constant` mode with one target temperature, `time_limited` mode with one temporary target temperature or according to schedule in `schedule` mode with many target temperatures in time, configured by user.<br> <b>NOTE:</b> Parameter is read only, use commands to change target temperature mode!<br> <b>NOTE:</b> Parameter cannot be `schedule` if thermostat doesnt have `has_schedule` label!<br> <b>NOTE:</b> When not associated with Virtual Thermostat it will always work in `constant` mode.",
                       "type":"string",
                       "readOnly":true,
                       "enum":[
                          "schedule",
                          "constant",
                          "time_limited"
                       ],
                       "example":"constant"
                    },
                    "remaining_time":{
                       "description":"Remaining time until `time_limited` mode ends. Cannot be modified directly - use commands.<br> Unit: minutes.",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":1,
                       "maximum":1440,
                       "example":600
                    }
                 }
              },
              "target_temperature_minimum":{
                 "description":"Lower limit of the target temperature. Could not be greater than maximum. Setting minimum value above target value, will also change target value to minimum.<br> Unit: °C with one decimal number, multiplied by 10.<br>Parameter available when custom device `variant` is set to `temperature_regulator`.",
                 "type":"integer",
                 "multipleOf":0.1,
                 "minimum":50,
                 "maximum":350,
                 "example":50
              },
              "target_temperature_maximum":{
                 "description":"Upper limit of the target temperature. Could not be less than minimum. Setting maximum below target, will also change target value to minimum.<br> Unit: °C with one decimal number, multiplied by 10.<br>Parameter available when custom device `variant` is set to `temperature_regulator`.",
                 "type":"integer",
                 "multipleOf":0.1,
                 "minimum":50,
                 "maximum":350,
                 "example":350
              },
              "target_temperature_reached":{
                 "description":"Controls device`s algorithm working state indicator. eg LED Diode. May be controlled by external algorithms or devices such as Thermostat.<br>Parameter available when custom device `variant` is set to `temperature_regulator`.",
                 "type":"boolean",
                 "readOnly":true
              },
              "confirm_time_mode":{
                 "description":"Mainly for Mobile/Web App purposes. Indicates if time mode modal should be displayed when changing thermostat temperature. Controlled by Virtual Thermostat.<br>Parameter available when custom device `variant` is set to `temperature_regulator`.",
                 "type":"boolean",
                 "readOnly":true,
                 "example":true
              },
              "system_mode":{
                 "description":"Current temperature regulator working mode.<br>Parameter available when custom device `variant` is set to `temperature_regulator`.",
                 "type":"string",
                 "enum":[
                    "heating",
                    "cooling",
                    "off"
                 ],
                 "example":"heating"
              },
              "energy_charged_total":{
                 "description":"Total energy charged during device lifetime.<br>Unit: kWh, multiplied by 1000 (Wh).<br>Parameter available when custom device `variant` is set to `car_charger`.",
                 "type":"integer",
                 "multipleOf":0.001,
                 "example":400000,
                 "minimum":0,
                 "maximum":4294967295
              }
           }
        },
        "Device.VIRTUAL.RelayIntegrator":{
           "description":"Virtual relay integrator. Sets all associated relays in the same state when one changes state.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AGenericDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "state",
                    "associations"
                 ],
                 "properties":{
                    "state":{
                       "description":"Current relays state.",
                       "type":"boolean",
                       "example":true
                    },
                    "blind_duration":{
                       "description":"Duration when integrator ignores consecutive relay state changes. Unit: ms.",
                       "type":"integer",
                       "minimum":0,
                       "maximum":10000
                    },
                    "associations":{
                       "description":"Devices associated to virtual integrator.",
                       "type":"object",
                       "required":[
                          "relays"
                       ],
                       "properties":{
                          "relays":{
                             "description":"Optional. Relay states will synchronize.",
                             "type":"array",
                             "items":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.AssociationInfo"
                                   }
                                ]
                             }
                          }
                       }
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.VIRTUAL.RelayIntegrator/value"
           }
        },
        "Device.VIRTUAL.BlindControllerIntegrator":{
           "description":"The virtual blind controller intergrator allows setting the same target opening to all associated blind controllers. Control logic is one-way - If one of assigned blind controllers changes target opening, integrator will not affect target opening of the rest associated blind controllers.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AGenericDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "associations"
                 ],
                 "properties":{
                    "last_set_target_opening":{
                       "description":"Contains last set target opening via integrator.<br>Parameter is <b>optional</b>. Available when: check if `percent_opening_control` label is provided.",
                       "type":"integer",
                       "minimum":0,
                       "maximum":100,
                       "readOnly":true,
                       "example":100
                    },
                    "action_in_progress":{
                       "description":"Indicates if control action requested via integrator is in progress.<br>Parameter is <b>optional</b>. Available when: check if `percent_opening_control` label is provided.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    },
                    "lift_position_description":{
                       "description":"Describes lift position summary of associated blind controllers.<br>Parameter is <b>optional</b>. Available when: check if `percent_opening_control` label is provided.",
                       "type":"string",
                       "enum":[
                          "unknown",
                          "all_closed",
                          "all_open_at_different_positions",
                          "all_open_at_same_position",
                          "mixed"
                       ],
                       "example":"all_open_at_different_positions"
                    },
                    "associations":{
                       "description":"Devices associated to virtual integrator.",
                       "type":"object",
                       "required":[
                          "blind_controllers"
                       ],
                       "properties":{
                          "blind_controllers":{
                             "description":"Optional. Blind Controllers that can be simultaneously controlled via integrator.",
                             "type":"array",
                             "items":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.AssociationInfo"
                                   }
                                ]
                             }
                          }
                       }
                    },
                    "last_set_target_tilt":{
                       "description":"Contains last set target tilt via integrator.<br>Parameter is <b>optional</b>. Available when: check if `percent_tilt_control` label is provided.",
                       "type":"integer",
                       "minimum":0,
                       "maximum":100,
                       "readOnly":true,
                       "example":100
                    },
                    "tilt_in_progress":{
                       "description":"Indicates if tilt action requested via integrator is in progress.<br>Parameter is <b>optional</b>. Available when: check if `percent_tilt_control` label is provided.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    },
                    "tilt_position_description":{
                       "description":"Describes tilt position summary of associated blind controllers.<br>Parameter is <b>optional</b>. Available when: check if `percent_tilt_control` label is provided.",
                       "type":"string",
                       "enum":[
                          "unknown",
                          "all_closed",
                          "all_open_at_different_positions",
                          "all_open_at_same_position",
                          "mixed"
                       ],
                       "example":"all_open_at_different_positions"
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.VIRTUAL.BlindControllerIntegrator/value"
           }
        },
        "Device.VIRTUAL.DimmerRgbIntegrator":{
           "description":"The virtual dimmer/RGB controller intergrator allows setting the same state, brightness and color and all associated devices.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AGenericDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "state",
                    "brightness",
                    "color_mode",
                    "led_color",
                    "white_temperature",
                    "associations"
                 ],
                 "properties":{
                    "state":{
                       "description":"Current dimmers and RGB controllers state.",
                       "type":"boolean",
                       "example":true
                    },
                    "brightness":{
                       "description":"Current brightness of dimmers and RGB controllers.<br>Range: 0-100",
                       "type":"integer",
                       "minimum":1,
                       "maximum":100,
                       "example":80
                    },
                    "color_mode":{
                       "description":"Current color mode of RGB controllers. <br/>**NOTE:** Available only when device has label `rgb_support`",
                       "type":"string",
                       "enum":[
                          "rgb",
                          "temperature"
                       ],
                       "readOnly":true,
                       "example":"rgb"
                    },
                    "led_color":{
                       "description":"Current LED color of RGB controllers. <br/>**NOTE:** Available only when device has label `rgb_support`",
                       "type":"string",
                       "readOnly":true,
                       "example":"#FF0000"
                    },
                    "white_temperature":{
                       "description":"Current white temperature of RGB controllers. Unit: Kelvins <br/>**NOTE:** Available only when device has label `rgb_support`",
                       "type":"integer",
                       "minimum":1000,
                       "maximum":40000,
                       "readOnly":true,
                       "example":8000
                    },
                    "associations":{
                       "description":"Devices associated to virtual integrator.",
                       "type":"object",
                       "required":[
                          "dimmers",
                          "rgb_controllers"
                       ],
                       "properties":{
                          "dimmers":{
                             "description":"Optional. Dimmers that can be simultaneously controlled via integrator.",
                             "type":"array",
                             "items":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.AssociationInfo"
                                   }
                                ]
                             }
                          },
                          "rgb_controllers":{
                             "description":"Optional. RGB controllers that can be simultaneously controlled via integrator.",
                             "type":"array",
                             "items":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.AssociationInfo"
                                   }
                                ]
                             }
                          }
                       }
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.VIRTUAL.DimmerRgbIntegrator/value"
           }
        },
        "Device.VIRTUAL.HeatPumpManager":{
           "description":"The virtual heat pump manager controls modbus heat pumps and domestic hot water devices. Reads temperature from associated temperature sensors and calculates heat or cool demand.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AGenericDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "temperature",
                    "enabled",
                    "work_mode",
                    "state",
                    "target_temperature",
                    "schedule_id",
                    "hysteresis",
                    "dhw_control",
                    "associations",
                    "electric_heater_active",
                    "target_temperature_mode"
                 ],
                 "properties":{
                    "temperature":{
                       "description":"Temperature value forwarded from associated sensor or 0 if no sensor associated or computed average temperature if more than one sensor associated.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "readOnly":true,
                       "minimum":-400,
                       "maximum":1000,
                       "example":250
                    },
                    "enabled":{
                       "description":"Enable or disable device.",
                       "type":"boolean",
                       "example":true
                    },
                    "work_mode":{
                       "description":"Current work mode algorithm.",
                       "type":"string",
                       "enum":[
                          "heating",
                          "cooling",
                          "automatic",
                          "fireplace"
                       ],
                       "example":"cooling"
                    },
                    "state":{
                       "description":"Current working state (Working/Idle)",
                       "type":"boolean",
                       "readOnly":true,
                       "example":true
                    },
                    "target_temperature":{
                       "description":"Target temperature configuration.",
                       "type":"object",
                       "required":[
                          "current",
                          "heating",
                          "cooling",
                          "automatic"
                       ],
                       "properties":{
                          "current":{
                             "description":"Current target temperature. This is read-only value. Use other target temperature properties to change value for specific work mode.<br> Unit: °C with one decimal number, multiplied by 10.",
                             "type":"integer",
                             "multipleOf":0.1,
                             "readOnly":true,
                             "minimum":100,
                             "maximum":300,
                             "example":250
                          },
                          "heating":{
                             "description":"Target temperature for heating work mode.<br> Unit: °C with one decimal number, multiplied by 10.",
                             "type":"integer",
                             "multipleOf":0.1,
                             "minimum":100,
                             "maximum":300,
                             "example":250
                          },
                          "cooling":{
                             "description":"Target temperature for cooling work mode.<br> Unit: °C with one decimal number, multiplied by 10.",
                             "type":"integer",
                             "multipleOf":0.1,
                             "minimum":100,
                             "maximum":300,
                             "example":250
                          },
                          "automatic":{
                             "description":"Target temperature for automatic work mode.<br> Unit: °C with one decimal number, multiplied by 10.",
                             "type":"integer",
                             "multipleOf":0.1,
                             "minimum":100,
                             "maximum":300,
                             "example":250
                          }
                       }
                    },
                    "schedule_id":{
                       "description":"ID of schedule associated with thermostat or null if schedule is not associated.",
                       "type":"integer",
                       "readOnly":true,
                       "nullable":true,
                       "minimum":1,
                       "example":1
                    },
                    "hysteresis":{
                       "description":"Hysteresis configuration.",
                       "type":"object",
                       "required":[
                          "heating",
                          "cooling",
                          "automatic"
                       ],
                       "properties":{
                          "heating":{
                             "description":"Hysteresis for heating work mode.<br> Unit: °C with one decimal number, multiplied by 10.",
                             "type":"integer",
                             "multipleOf":0.1,
                             "minimum":2,
                             "maximum":20,
                             "example":5
                          },
                          "cooling":{
                             "description":"Hysteresis for cooling work mode.<br> Unit: °C with one decimal number, multiplied by 10.",
                             "type":"integer",
                             "multipleOf":0.1,
                             "minimum":2,
                             "maximum":20,
                             "example":5
                          },
                          "automatic":{
                             "description":"Hysteresis for automatic work mode.<br> Unit: °C with one decimal number, multiplied by 10.",
                             "type":"integer",
                             "multipleOf":0.1,
                             "minimum":2,
                             "maximum":100,
                             "example":5
                          }
                       }
                    },
                    "dhw_control":{
                       "description":"Domestic Hot Water control configuration.",
                       "type":"object",
                       "required":[
                          "enabled",
                          "temperature",
                          "target_temperature",
                          "hysteresis",
                          "state"
                       ],
                       "properties":{
                          "enabled":{
                             "description":"Enable or disable domestic hot water control.",
                             "type":"boolean",
                             "example":true
                          },
                          "temperature":{
                             "description":"Temperature value forwarded from DHW device built-in sensor.<br> Unit: °C with one decimal number, multiplied by 10.",
                             "type":"integer",
                             "multipleOf":0.1,
                             "readOnly":true,
                             "minimum":-400,
                             "maximum":1000,
                             "example":250
                          },
                          "target_temperature":{
                             "description":"Target temperature for DHW control.<br> Unit: °C with one decimal number, multiplied by 10.",
                             "type":"integer",
                             "multipleOf":0.1,
                             "minimum":300,
                             "maximum":750,
                             "example":400
                          },
                          "hysteresis":{
                             "description":"Hysteresis for DHW control.<br> Unit: °C with one decimal number, multiplied by 10.",
                             "type":"integer",
                             "multipleOf":0.1,
                             "minimum":10,
                             "maximum":200,
                             "example":40
                          },
                          "state":{
                             "description":"Current working state of DHW control (Working/Idle)",
                             "type":"boolean",
                             "readOnly":true,
                             "example":true
                          }
                       }
                    },
                    "associations":{
                       "description":"Devices associated to virtual integrator.",
                       "type":"object",
                       "required":[
                          "heat_pump",
                          "domestic_hot_water",
                          "temperature_sensors",
                          "temperature_regulator"
                       ],
                       "properties":{
                          "heat_pump":{
                             "description":"Heat Pump that will be managed by this device.",
                             "allOf":[
                                {
                                   "$ref":"#/components/schemas/Device.AssociationInfo"
                                }
                             ]
                          },
                          "domestic_hot_water":{
                             "description":"Optional. Domestic Hot Water that can be simultaneously controlled by Heat Pump Manager.",
                             "allOf":[
                                {
                                   "$ref":"#/components/schemas/Device.AssociationInfo"
                                }
                             ]
                          },
                          "temperature_sensors":{
                             "description":"Atleast one required. Room temperature sensors used to control heat pump.",
                             "type":"array",
                             "items":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.AssociationInfo"
                                   }
                                ]
                             }
                          },
                          "temperature_regulator":{
                             "description":"Temperature regulator associated with this device.",
                             "allOf":[
                                {
                                   "$ref":"#/components/schemas/Device.AssociationInfo"
                                }
                             ]
                          }
                       }
                    },
                    "electric_heater_active":{
                       "description":"Indicates electric heater activation state in associated heat pump.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    },
                    "target_temperature_mode":{
                       "description":"Device target temperature mode. Specifies if manager is working in `constant` mode with mode dependent temperature or according to schedule in `schedule` mode with many target temperatures in time, configured by user.<br> <b>NOTE:</b> Parameter cannot be `schedule` if device does not have `has_schedule` label!",
                       "type":"string",
                       "readOnly":true,
                       "enum":[
                          "schedule",
                          "constant"
                       ],
                       "example":"schedule"
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.VIRTUAL.HeatPumpManager/value"
           }
        },
        "Device.VIRTUAL.Gate":{
           "description":"The virtual gate controls the sliding gate, swing gate or garage gate depending on configured variant (`sliding_gate`, `swing_gate`, `garage_gate`), using associated devices.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AGenericDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "state",
                    "stopped_state",
                    "partial_movement",
                    "operating_logic",
                    "full_move_duration",
                    "partial_move_duration",
                    "associations"
                 ],
                 "properties":{
                    "state":{
                       "description":"Current state of gate. No move and moving states are present only when there is no close status sensor associated, as device cannot determine physical state of the gate.",
                       "type":"string",
                       "readOnly":true,
                       "enum":[
                          "no_move",
                          "moving",
                          "closed",
                          "closing",
                          "open",
                          "opening"
                       ],
                       "example":"no_move"
                    },
                    "stopped_state":{
                       "description":"The state in which the gate was stopped.",
                       "type":"string",
                       "readOnly":true,
                       "nullable":true,
                       "enum":[
                          "closing",
                          "opening"
                       ],
                       "example":"closing"
                    },
                    "partial_movement":{
                       "description":"Indicates if the current `state` is the result of partial move/open command",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    },
                    "operating_logic":{
                       "description":"Defines the operating logic of the gate controller with close status sensor.<br> **NOTE**: Cannot be changed if close status sensor is not associated.<br> `full_step_by_step` sequence: `opening` -> `stop (open)` -> `closing` -> `stop (open)` -> `opening`<br> `half_step_by_step` sequence: `opening` -> `stop (open)` -> `closing` -> `opening`",
                       "type":"string",
                       "enum":[
                          "full_step_by_step",
                          "half_step_by_step"
                       ],
                       "example":"full_step_by_step"
                    },
                    "full_move_duration":{
                       "description":"Maximum time in seconds required to fully close or fully open (select greater) the gate.<br> Unit: seconds",
                       "type":"integer",
                       "minimum":1,
                       "maximum":120,
                       "example":30
                    },
                    "partial_move_duration":{
                       "description":"Maximum time in seconds required to partial close or partial open (select greater) the gate.<br>**NOTE:** `partial_move_duration` cannot be greater than `full_move_duration`! <br> Unit: seconds",
                       "type":"integer",
                       "minimum":1,
                       "maximum":120,
                       "example":15
                    },
                    "associations":{
                       "description":"Devices associated to virtual gate.",
                       "type":"object",
                       "required":[
                          "full_open_close_output",
                          "partial_open_close_output",
                          "close_status_sensor",
                          "trigger_sensors",
                          "buttons"
                       ],
                       "properties":{
                          "full_open_close_output":{
                             "description":"Commands the gate controller device to fully open or close gate depe1nding on current `state` by sending on/off impulse for 500ms.",
                             "allOf":[
                                {
                                   "$ref":"#/components/schemas/Device.AssociationInfo"
                                }
                             ]
                          },
                          "partial_open_close_output":{
                             "description":"Optional. Commands the gate controller device to partially open or close gate depending on current `state` by sending on/off impulse for 500ms.",
                             "allOf":[
                                {
                                   "$ref":"#/components/schemas/Device.AssociationInfo"
                                }
                             ]
                          },
                          "close_status_sensor":{
                             "description":"Optional. This is feedback device, detects physical gate `state` between open (open circuit = false) / closed (closed circuit = true)",
                             "allOf":[
                                {
                                   "$ref":"#/components/schemas/Device.AssociationInfo"
                                }
                             ]
                          },
                          "trigger_sensors":{
                             "description":"Optional. This device can be used to catch external signal (eg. wall switch impulse, or RC remote output impulse) and trigger `full_move` action",
                             "type":"array",
                             "items":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.AssociationInfo"
                                   }
                                ]
                             }
                          },
                          "buttons":{
                             "description":"Optional. This device can be used to catch button action events and trigger `full_move`/`partial_move` action",
                             "type":"array",
                             "items":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.VIRTUAL.Gate.ButtonAssociation"
                                   }
                                ]
                             }
                          }
                       }
                    }
                 }
              }
           ]
        },
        "Device.VIRTUAL.Gate.ButtonAssociation":{
           "description":"The virtual gate button association info with triggers configuration",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AssociationInfo"
              },
              {
                 "type":"object",
                 "required":[
                    "trigger"
                 ],
                 "properties":{
                    "trigger":{
                       "description":"Gate command triggers configuration",
                       "type":"object",
                       "required":[
                          "full_open_close",
                          "partial_open_close"
                       ],
                       "properties":{
                          "full_open_close":{
                             "description":"Full open or full close command trigger configuration",
                             "allOf":[
                                {
                                   "$ref":"#/components/schemas/Device.Misc.ButtonAssociation.TriggerConfiguration"
                                }
                             ]
                          },
                          "partial_open_close":{
                             "allOf":[
                                {
                                   "$ref":"#/components/schemas/Device.Misc.ButtonAssociation.TriggerConfiguration"
                                }
                             ]
                          }
                       }
                    }
                 }
              }
           ]
        },
        "Device.VIRTUAL.Wicket":{
           "description":"The virtual wicket controls the electric strike of wicket or gate, using associated devices.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AGenericDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "state",
                    "unlock_duration",
                    "associations"
                 ],
                 "properties":{
                    "state":{
                       "description":"Current state of wicket. Open state is present only when there is close status sensor associated, as device can determine physical state of the wicket.",
                       "type":"string",
                       "readOnly":true,
                       "enum":[
                          "locked",
                          "unlocked",
                          "closed",
                          "open"
                       ],
                       "example":"closed"
                    },
                    "unlock_duration":{
                       "description":"Time in seconds of electric strike output being active (buzzing).<br> Unit: seconds",
                       "type":"integer",
                       "minimum":1,
                       "maximum":45,
                       "example":10
                    },
                    "associations":{
                       "description":"Devices associated to virtual wicket.",
                       "type":"object",
                       "required":[
                          "electric_strike_output",
                          "close_status_sensor",
                          "trigger_sensors",
                          "buttons"
                       ],
                       "properties":{
                          "electric_strike_output":{
                             "description":"Controls the electric strike locking and unlocking. This should be device of type `relay`, any class.",
                             "allOf":[
                                {
                                   "$ref":"#/components/schemas/Device.AssociationInfo"
                                }
                             ]
                          },
                          "close_status_sensor":{
                             "description":"Optional. This is feedback device, detects physical wicket `state` between open (open circuit = false) / closed (closed circuit = true). This should be device of type `opening_sensor` or `two_state_input_sensor`, any class.",
                             "allOf":[
                                {
                                   "$ref":"#/components/schemas/Device.AssociationInfo"
                                }
                             ]
                          },
                          "trigger_sensors":{
                             "description":"Optional. This device can be used to catch external signal (eg. wall switch impulse, or RC remote output impulse) and trigger `unlock` action. This should be device of type `oepning_sensor` or `two_state_input_sensor`, any class.",
                             "type":"array",
                             "items":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.AssociationInfo"
                                   }
                                ]
                             }
                          },
                          "buttons":{
                             "description":"Optional. This device can be used to catch button action events and trigger `unlock` action",
                             "type":"array",
                             "items":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.VIRTUAL.Wicket.ButtonAssociation"
                                   }
                                ]
                             }
                          }
                       }
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.VIRTUAL.Wicket/value"
           }
        },
        "Device.VIRTUAL.Wicket.ButtonAssociation":{
           "description":"The virtual wicket button association info with trigger configuration",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AssociationInfo"
              },
              {
                 "type":"object",
                 "required":[
                    "trigger"
                 ],
                 "properties":{
                    "trigger":{
                       "description":"Wicket command triggers configuration",
                       "type":"object",
                       "required":[
                          "unlock"
                       ],
                       "properties":{
                          "unlock":{
                             "description":"Unlock command trigger configuration",
                             "allOf":[
                                {
                                   "$ref":"#/components/schemas/Device.Misc.ButtonAssociation.TriggerConfiguration"
                                }
                             ]
                          }
                       }
                    }
                 }
              }
           ]
        },
        "Device.Modbus.MainDhw":{
           "description":"Abstract Modbus Domestic Heat Water device respresentation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AGenericDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "temperature_domestic_hot_water"
                 ],
                 "properties":{
                    "temperature_domestic_hot_water":{
                       "description":"Current water temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":450
                    }
                 }
              }
           ]
        },
        "Device.Modbus.TemperatureSensor":{
           "description":"Modbus Temperature sensor representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AGenericDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "temperature"
                 ],
                 "properties":{
                    "temperature":{
                       "description":"Measured temperature value.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "readOnly":true,
                       "minimum":-400,
                       "maximum":1000,
                       "example":250
                    }
                 }
              }
           ]
        },
        "Device.Modbus.EnergyMeter":{
           "description":"Abstract Modbus Energy Meter device representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AGenericDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "total_active_power",
                    "total_apparent_power",
                    "total_reactive_power"
                 ],
                 "properties":{
                    "total_active_power":{
                       "description":"Active power (sum of all phases).<br>Unit: W, multiplied by 1000 (mW).",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":6000000
                    },
                    "total_apparent_power":{
                       "description":"Apparent power (sum of all phases).<br>Unit: VA, multiplied by 1000 (mVA).",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":100000
                    },
                    "total_reactive_power":{
                       "description":"Reactive power (sum of all phases).<br>Unit: VAr, multiplied by 1000 (mVAr).",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":40000
                    }
                 }
              }
           ]
        },
        "Device.Modbus.CarCharger":{
           "description":"Abstract Modbus Car Charger device representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AGenericDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "voltage",
                    "current",
                    "charge_power",
                    "energy_charged_total",
                    "energy_charged_today"
                 ],
                 "properties":{
                    "voltage":{
                       "description":"Charger voltage.<br>Unit: V, multiplied by 1000 (mV).",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":230000
                    },
                    "current":{
                       "description":"Charger current.<br>Unit: A, multiplied by 1000 (mA).",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":15000
                    },
                    "charge_power":{
                       "description":"Charger current charge power.<br>Unit: W, multiplied by 1000 (mW).",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":2500000
                    },
                    "energy_charged_total":{
                       "description":"Energy charged by charger over the lifetime.<br>Unit: kWh, multiplied of 1000 (Wh).",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":250000
                    },
                    "energy_charged_today":{
                       "description":"Energy charged by charger today.<br>Unit: kWh, multiplied of 1000 (Wh).",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":1000
                    }
                 }
              }
           ]
        },
        "Device.Modbus.EcoAirHeatPump":{
           "description":"Modbus EcoAir Heat Pump representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AGenericDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "state",
                    "work_mode",
                    "temperature_outdoor",
                    "heating_supply",
                    "heating_return",
                    "heating_system_pressure",
                    "condensation_temperature",
                    "evaporation_temperature",
                    "running_hours",
                    "number_of_starts",
                    "electric_heater_emergency",
                    "electric_heater_active",
                    "heat_demand",
                    "cool_demand"
                 ],
                 "properties":{
                    "state":{
                       "description":"State of the heat pump.",
                       "type":"string",
                       "enum":[
                          "on",
                          "off",
                          "emergency"
                       ],
                       "example":"on"
                    },
                    "work_mode":{
                       "description":"Current work mode of the heat pump.",
                       "type":"string",
                       "enum":[
                          "heating",
                          "cooling",
                          "automatic"
                       ],
                       "example":"heating"
                    },
                    "temperature_outdoor":{
                       "description":"Outdoor temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":100
                    },
                    "heating_supply":{
                       "description":"Heating supply. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":300
                    },
                    "heating_return":{
                       "description":"Heating return. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":150
                    },
                    "heating_system_pressure":{
                       "description":"Heating System pressure. <br> Unit: Bar with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":30
                    },
                    "condensation_temperature":{
                       "description":"Condensation temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":300
                    },
                    "evaporation_temperature":{
                       "description":"Evaporation temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":500
                    },
                    "running_hours":{
                       "description":"Hours heat pump is working.",
                       "type":"integer",
                       "readOnly":true,
                       "example":100
                    },
                    "number_of_starts":{
                       "description":"Number of heat pump starts.",
                       "type":"integer",
                       "readOnly":true,
                       "example":1
                    },
                    "electric_heater_emergency":{
                       "description":"Indicates electric heater emergency state.",
                       "type":"boolean",
                       "example":false
                    },
                    "electric_heater_active":{
                       "description":"Indicates electric heater activation state.",
                       "type":"boolean",
                       "example":false
                    },
                    "heat_demand":{
                       "description":"Informs device that heat is demanded or not.",
                       "type":"boolean",
                       "example":false
                    },
                    "cool_demand":{
                       "description":"Informs device that cool is demanded or not.",
                       "type":"boolean",
                       "example":false
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Modbus.EcoAirHeatPump/value"
           }
        },
        "Device.Modbus.EcoAirMainDhw":{
           "description":"Modbus EcoAir MainDhw representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.Modbus.MainDhw"
              },
              {
                 "type":"object",
                 "required":[
                    "target_temperature",
                    "dhw_demand"
                 ],
                 "properties":{
                    "target_temperature":{
                       "description":"Target water temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "minimum":100,
                       "maximum":990,
                       "multipleOf":0.1,
                       "example":500
                    },
                    "dhw_demand":{
                       "description":"Domestic Hot Water demand.",
                       "type":"boolean",
                       "example":true
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Modbus.EcoAirMainDhw/value"
           }
        },
        "Device.Modbus.EcoGeoHeatPump":{
           "description":"Modbus EcoGeo Heat Pump representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AGenericDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "state",
                    "work_mode",
                    "temperature_outdoor",
                    "brine_out_temperature",
                    "brine_in_temperature",
                    "brine_pressure",
                    "heating_supply",
                    "heating_return",
                    "heating_system_pressure",
                    "hot_gas_temperature",
                    "condensation_temperature",
                    "evaporation_temperature",
                    "running_hours",
                    "number_of_starts",
                    "electric_heater_emergency",
                    "electric_heater_active",
                    "heat_demand",
                    "cool_demand",
                    "fixed_heating_target_temperature",
                    "fixed_cooling_target_temperature",
                    "target_temperature_mode",
                    "heat_curve_base_point",
                    "heat_curve_end_point",
                    "heat_curve_end_point_outside"
                 ],
                 "properties":{
                    "state":{
                       "description":"State of the heat pump.",
                       "type":"string",
                       "enum":[
                          "on",
                          "off",
                          "emergency"
                       ],
                       "example":"on"
                    },
                    "work_mode":{
                       "description":"Current work mode of the heat pump.",
                       "type":"string",
                       "enum":[
                          "heating",
                          "cooling",
                          "automatic"
                       ],
                       "example":"heating"
                    },
                    "temperature_outdoor":{
                       "description":"Outdoor temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":100
                    },
                    "brine_out_temperature":{
                       "description":"Brine out temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":300
                    },
                    "brine_in_temperature":{
                       "description":"Brine in temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":400
                    },
                    "brine_pressure":{
                       "description":"Brine pressure. <br> Unit: Bar with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":30
                    },
                    "heating_supply":{
                       "description":"Heating supply. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":300
                    },
                    "heating_return":{
                       "description":"Heating return. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":150
                    },
                    "heating_system_pressure":{
                       "description":"Heating System pressure. <br> Unit: Bar with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":30
                    },
                    "hot_gas_temperature":{
                       "description":"Hot Gas temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":500
                    },
                    "condensation_temperature":{
                       "description":"Condensation temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":300
                    },
                    "evaporation_temperature":{
                       "description":"Evaporation temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":500
                    },
                    "running_hours":{
                       "description":"Hours heat pump is working.",
                       "type":"integer",
                       "readOnly":true,
                       "example":100
                    },
                    "number_of_starts":{
                       "description":"Number of heat pump starts.",
                       "type":"integer",
                       "readOnly":true,
                       "example":1
                    },
                    "electric_heater_emergency":{
                       "description":"Indicates electric heater emergency state.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    },
                    "electric_heater_active":{
                       "description":"Indicates electric heater activation state.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    },
                    "heat_demand":{
                       "description":"Informs device that heat is demanded or not.",
                       "type":"boolean",
                       "example":false
                    },
                    "cool_demand":{
                       "description":"Informs device that cool is demanded or not.",
                       "type":"boolean",
                       "example":false
                    },
                    "fixed_heating_target_temperature":{
                       "description":"Fixed heating target temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "minimum":250,
                       "maximum":750,
                       "example":500
                    },
                    "fixed_cooling_target_temperature":{
                       "description":"Fixed cooling target temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "minimum":60,
                       "maximum":350,
                       "example":200
                    },
                    "target_temperature_mode":{
                       "description":"Target temperature mode.",
                       "type":"string",
                       "enum":[
                          "fixed",
                          "heat_curve"
                       ],
                       "example":"fixed"
                    },
                    "heat_curve_base_point":{
                       "description":"Heat curve base point. <br> Unit: °C.",
                       "type":"integer",
                       "minimum":0,
                       "maximum":40,
                       "example":10
                    },
                    "heat_curve_end_point":{
                       "description":"Heat curve end point. <br> Unit: °C.",
                       "type":"integer",
                       "minimum":0,
                       "maximum":75,
                       "example":10
                    },
                    "heat_curve_end_point_outside":{
                       "description":"Heat curve end point outside temperature. <br> Unit: °C.",
                       "type":"integer",
                       "minimum":-15,
                       "maximum":0,
                       "example":-5
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Modbus.EcoGeoHeatPump/value"
           }
        },
        "Device.Modbus.EcoGeoMainDhw":{
           "description":"Modbus EcoGeo MainDhw representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.Modbus.MainDhw"
              },
              {
                 "type":"object",
                 "required":[
                    "target_temperature",
                    "dhw_demand"
                 ],
                 "properties":{
                    "target_temperature":{
                       "description":"Target water temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "minimum":100,
                       "maximum":990,
                       "multipleOf":0.1,
                       "example":500
                    },
                    "dhw_demand":{
                       "description":"Domestic Hot Water demand.",
                       "type":"boolean",
                       "example":true
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Modbus.EcoGeoMainDhw/value"
           }
        },
        "Device.Modbus.HeatcompHeatPump":{
           "description":"Modbus Heatcomp Heat Pump representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AGenericDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "state",
                    "work_mode",
                    "temperature_outdoor",
                    "heating_supply",
                    "heating_return",
                    "hot_gas_temperature",
                    "condensation_temperature",
                    "evaporation_temperature",
                    "running_hours",
                    "compressor_percentage",
                    "heat_demand",
                    "cool_demand",
                    "fixed_heating_target_temperature",
                    "fixed_cooling_target_temperature",
                    "target_temperature_mode",
                    "heat_curve_slope",
                    "heat_curve_offset",
                    "min_compressor_frequency",
                    "max_compressor_frequency",
                    "buffer_temperature",
                    "installation_base_temperature"
                 ],
                 "properties":{
                    "state":{
                       "description":"State of the heat pump.",
                       "type":"string",
                       "enum":[
                          "on",
                          "off"
                       ],
                       "example":"on"
                    },
                    "work_mode":{
                       "description":"Current work mode of the heat pump.",
                       "type":"string",
                       "enum":[
                          "heating",
                          "cooling"
                       ],
                       "example":"heating"
                    },
                    "temperature_outdoor":{
                       "description":"Outdoor temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":100
                    },
                    "heating_supply":{
                       "description":"Heating supply. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":300
                    },
                    "heating_return":{
                       "description":"Heating return. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":150
                    },
                    "hot_gas_temperature":{
                       "description":"Hot Gas temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":500
                    },
                    "condensation_temperature":{
                       "description":"Condensation temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":300
                    },
                    "evaporation_temperature":{
                       "description":"Evaporation temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":500
                    },
                    "running_hours":{
                       "description":"Hours heat pump is working.",
                       "type":"integer",
                       "readOnly":true,
                       "example":100
                    },
                    "compressor_percentage":{
                       "description":"Compresor percentage. <br> Unit: Hz.<br>**NOTE**: Parameter deprecated, replaced with `max_compressor_frequency`.",
                       "type":"integer",
                       "readOnly":true,
                       "example":50
                    },
                    "heat_demand":{
                       "description":"Informs device that heat is demanded or not.",
                       "type":"boolean",
                       "example":false
                    },
                    "cool_demand":{
                       "description":"Informs device that cool is demanded or not.",
                       "type":"boolean",
                       "example":false
                    },
                    "fixed_heating_target_temperature":{
                       "description":"Fixed heating target temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "minimum":250,
                       "maximum":750,
                       "example":500
                    },
                    "fixed_cooling_target_temperature":{
                       "description":"Fixed cooling target temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "minimum":60,
                       "maximum":350,
                       "example":200
                    },
                    "target_temperature_mode":{
                       "description":"Target temperature mode.",
                       "type":"string",
                       "enum":[
                          "fixed",
                          "heat_curve"
                       ],
                       "example":"fixed"
                    },
                    "heat_curve_slope":{
                       "description":"Heat curve slope. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "minimum":0,
                       "maximum":35,
                       "example":10
                    },
                    "heat_curve_offset":{
                       "description":"Heat curve offset. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "minimum":0,
                       "maximum":850,
                       "example":20
                    },
                    "min_compressor_frequency":{
                       "description":"Minimum compressor operating frequency.<br> Unit: Hz",
                       "type":"integer",
                       "minimum":20,
                       "maximum":60,
                       "example":20
                    },
                    "max_compressor_frequency":{
                       "description":"Maximum compressor operating frequency.<br> Unit: Hz",
                       "type":"integer",
                       "minimum":30,
                       "maximum":90,
                       "example":90
                    },
                    "buffer_temperature":{
                       "description":"Current buffer temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "readOnly":true,
                       "example":400
                    },
                    "installation_base_temperature":{
                       "description":"Selected installation source sensor for heat pump work. `unknown` cannot be set, value only indicates not recognized type.",
                       "type":"string",
                       "enum":[
                          "supply_temperature",
                          "room_temperature",
                          "buffer_temperature",
                          "return_temperature",
                          "unknown"
                       ],
                       "example":"room_temperature"
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Modbus.HeatcompHeatPump/value"
           }
        },
        "Device.Modbus.HeatcompMainDhw":{
           "description":"Modbus Heatcomp MainDhw representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.Modbus.MainDhw"
              },
              {
                 "type":"object",
                 "required":[
                    "target_temperature",
                    "dhw_demand"
                 ],
                 "properties":{
                    "target_temperature":{
                       "description":"Target water temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "minimum":100,
                       "maximum":990,
                       "multipleOf":0.1,
                       "example":500
                    },
                    "dhw_demand":{
                       "description":"Domestic Hot Water demand.",
                       "type":"boolean",
                       "example":true
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Modbus.HeatcompMainDhw/value"
           }
        },
        "Device.Modbus.RemehaElgaACEHeatPump":{
           "description":"Modbus Remeha Elga ACE Heat Pump representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AGenericDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "work_mode",
                    "temperature_indoor",
                    "target_temperature_indoor",
                    "central_heating_target_temperature",
                    "fixed_heating_target_temperature",
                    "temperature_outdoor",
                    "heating_supply",
                    "heating_return",
                    "heating_system_pressure",
                    "energy_used_for_heating",
                    "current_power",
                    "alarm_code",
                    "alarm_description",
                    "running_hours",
                    "operating_hours_heating",
                    "heat_demand",
                    "cool_demand",
                    "smart_grid_state"
                 ],
                 "properties":{
                    "work_mode":{
                       "description":"Current work mode of the heat pump.",
                       "type":"string",
                       "enum":[
                          "heating",
                          "cooling"
                       ],
                       "example":"heating"
                    },
                    "temperature_indoor":{
                       "description":"Indoor temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":200
                    },
                    "target_temperature_indoor":{
                       "description":"Set indoor temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":200
                    },
                    "central_heating_target_temperature":{
                       "description":"Central heating set temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":400
                    },
                    "fixed_heating_target_temperature":{
                       "description":"Set temperature for heating in fixed temperature mode. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "minimum":100,
                       "maximum":800,
                       "multipleOf":0.1,
                       "example":400
                    },
                    "temperature_outdoor":{
                       "description":"Outdoor temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":100
                    },
                    "heating_supply":{
                       "description":"Heating supply temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":300
                    },
                    "heating_return":{
                       "description":"Heating return temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":150
                    },
                    "heating_system_pressure":{
                       "description":"Heating system pressure. <br> Unit: Bar with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":21
                    },
                    "energy_used_for_heating":{
                       "description":"Energy used for heating. <br> Unit: kW/h with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":500
                    },
                    "current_power":{
                       "description":"Current relative power produced. <br> Unit: kW with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":500
                    },
                    "alarm_code":{
                       "description":"Device flow alarm code.",
                       "type":"integer",
                       "readOnly":true,
                       "example":0
                    },
                    "alarm_description":{
                       "description":"Alarm code description id.",
                       "type":"integer",
                       "readOnly":true,
                       "example":0
                    },
                    "running_hours":{
                       "description":"Hours heat pump is working.",
                       "type":"integer",
                       "readOnly":true,
                       "example":100
                    },
                    "operating_hours_heating":{
                       "description":"Operating hours for central heating.",
                       "type":"integer",
                       "readOnly":true,
                       "example":100
                    },
                    "heat_demand":{
                       "description":"Informs device that heat is demanded or not.",
                       "type":"boolean",
                       "example":false
                    },
                    "cool_demand":{
                       "description":"Informs device that cool is demanded or not.",
                       "type":"boolean",
                       "example":false
                    },
                    "smart_grid_state":{
                       "description":"Smart grid work mode state.<br>Cannot be changed if label `smart_grid_support` is not set.",
                       "type":"string",
                       "enum":[
                          "no_set",
                          "standard_work",
                          "heat_pump_blocked",
                          "preheating"
                       ],
                       "example":"standard_work"
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Modbus.RemehaElgaACEHeatPump/value"
           }
        },
        "Device.Modbus.RemehaElgaACETemperatureSensor":{
           "description":"Modbus Remeha Elga ACE Temperature sensor representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.Modbus.TemperatureSensor"
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Modbus.RemehaElgaACETemperatureSensor"
           }
        },
        "Device.Modbus.AlphaInnotecHeatPump":{
           "description":"Modbus Alpha-Innotec Heat Pump representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AGenericDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "temperature_indoor",
                    "target_temperature_indoor",
                    "fixed_heating_target_temperature",
                    "temperature_outdoor",
                    "heating_supply",
                    "heating_return",
                    "hot_gas_temperature",
                    "condensation_temperature",
                    "evaporation_temperature",
                    "overheating",
                    "lower_source_out_temperature",
                    "lower_source_in_temperature",
                    "heat_quantity_hot_water",
                    "heat_quantity_heating",
                    "heat_quantity_total",
                    "electric_heater_active",
                    "running_hours",
                    "operating_hours_heating",
                    "operating_hours_hot_water",
                    "heat_curve_end_point",
                    "heat_curve_parallel_shift",
                    "heat_demand",
                    "cool_demand"
                 ],
                 "properties":{
                    "temperature_indoor":{
                       "description":"Indoor temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":200
                    },
                    "target_temperature_indoor":{
                       "description":"Set indoor temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":200
                    },
                    "fixed_heating_target_temperature":{
                       "description":"Set temperature for heating in fixed temperature mode. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "minimum":150,
                       "maximum":800,
                       "multipleOf":0.1,
                       "example":400
                    },
                    "temperature_outdoor":{
                       "description":"Outdoor temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":100
                    },
                    "heating_supply":{
                       "description":"Heating supply temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":300
                    },
                    "heating_return":{
                       "description":"Heating return temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":150
                    },
                    "hot_gas_temperature":{
                       "description":"Hot gas temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":850
                    },
                    "condensation_temperature":{
                       "description":"Condensation temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":500
                    },
                    "evaporation_temperature":{
                       "description":"Evaporation temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":500
                    },
                    "overheating":{
                       "description":"Overheating. <br> Unit: K with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":850
                    },
                    "lower_source_out_temperature":{
                       "description":"Lower source out temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":500
                    },
                    "lower_source_in_temperature":{
                       "description":"Lower source in temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":500
                    },
                    "heat_quantity_hot_water":{
                       "description":"Heat quantity domestic hot water. <br> Unit: kW/h with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":500
                    },
                    "heat_quantity_heating":{
                       "description":"Heat quantity heating. <br> Unit: kW/h with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":500
                    },
                    "heat_quantity_total":{
                       "description":"Heat quantity total. <br> Unit: kW/h with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":500
                    },
                    "electric_heater_active":{
                       "description":"Indicates electric heater active state.",
                       "type":"boolean",
                       "example":false
                    },
                    "running_hours":{
                       "description":"Hours heat pump is working.",
                       "type":"integer",
                       "readOnly":true,
                       "example":100
                    },
                    "operating_hours_heating":{
                       "description":"Operating hours for central heating.",
                       "type":"integer",
                       "readOnly":true,
                       "example":100
                    },
                    "operating_hours_hot_water":{
                       "description":"Operating hours for domestic hot water.",
                       "type":"integer",
                       "readOnly":true,
                       "example":100
                    },
                    "heat_curve_end_point":{
                       "description":"Heat curve end point. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "minimum":200,
                       "maximum":700,
                       "multipleOf":0.1,
                       "example":200
                    },
                    "heat_curve_parallel_shift":{
                       "description":"Heat curve parallel shift. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "minimum":50,
                       "maximum":350,
                       "multipleOf":0.1,
                       "example":200
                    },
                    "heat_demand":{
                       "description":"Informs device that heat is demanded or not.",
                       "type":"boolean",
                       "example":false
                    },
                    "cool_demand":{
                       "description":"Informs device that cool is demanded or not.",
                       "type":"boolean",
                       "example":false
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Modbus.AlphaInnotecHeatPump/value"
           }
        },
        "Device.Modbus.AlphaInnotecMainDhw":{
           "description":"Modbus Alpha-Innotec MainDhw representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.Modbus.MainDhw"
              },
              {
                 "type":"object",
                 "required":[
                    "target_temperature",
                    "dhw_demand",
                    "emergency_electric_element_dhw_active"
                 ],
                 "properties":{
                    "target_temperature":{
                       "description":"Target water temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "minimum":150,
                       "maximum":800,
                       "multipleOf":0.1,
                       "example":500
                    },
                    "dhw_demand":{
                       "description":"Domestic Hot Water demand.",
                       "type":"boolean",
                       "example":true
                    },
                    "emergency_electric_element_dhw_active":{
                       "description":"Emergency heat generator active state.",
                       "type":"boolean",
                       "example":false
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Modbus.AlphaInnotecMainDhw/value"
           }
        },
        "Device.Modbus.AlphaInnotecTemperatureSensor":{
           "description":"Modbus Alpha Innotec Temperature sensor representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.Modbus.TemperatureSensor"
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Modbus.AlphaInnotecTemperatureSensor"
           }
        },
        "Device.Modbus.SolaxInverter":{
           "description":"Abstract Modbus Solax Inverter representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AGenericDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "run_mode",
                    "pv_total_active_power",
                    "energy_produced_total",
                    "energy_produced_today",
                    "power_to_grid",
                    "energy_fed_total",
                    "energy_fed_today",
                    "energy_consumed_total",
                    "energy_consumed_today",
                    "pv_1",
                    "pv_2",
                    "active_power_limit",
                    "unlock_password"
                 ],
                 "properties":{
                    "run_mode":{
                       "description":"Inverter current run mode.",
                       "type":"string",
                       "readOnly":true,
                       "enum":[
                          "waiting",
                          "checking",
                          "normal",
                          "fault",
                          "permanent_fault",
                          "update",
                          "off_grid_waiting",
                          "off_grid",
                          "self_testing",
                          "idle",
                          "standby"
                       ],
                       "example":"normal"
                    },
                    "pv_total_active_power":{
                       "description":"Current total power produced by all photovoltaic panels. <br> Unit: W with three decimal number, multiplied by 1000 (mW)",
                       "type":"integer",
                       "multipleOf":0.001,
                       "readOnly":true,
                       "example":500
                    },
                    "energy_produced_total":{
                       "description":"Total amount of energy produced by PV over a lifetime.<br>Unit: kWh with one decimal number, multiplied by 1000 (Wh).",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":10000
                    },
                    "energy_produced_today":{
                       "description":"Amount of energy produced by PV today.<br>Unit: kWh with one decimal number, multiplied by 1000 (Wh).",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":200
                    },
                    "pv_1":{
                       "description":"First group of photovoltaic panels current properties.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.CurrentProperties"
                          }
                       ]
                    },
                    "pv_2":{
                       "description":"Second group of photovoltaic panels current properties.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.CurrentProperties"
                          }
                       ]
                    },
                    "active_power_limit":{
                       "description":"Percent of max power at which inverter is going to work. Unit: percent.",
                       "type":"integer",
                       "minimum":0,
                       "maximum":100,
                       "example":100
                    },
                    "unlock_password":{
                       "description":"Password used to power limit control.",
                       "type":"string",
                       "minimum":4,
                       "maximum":4,
                       "pattern":"^[0-9]{4}$",
                       "example":"1234"
                    }
                 }
              }
           ]
        },
        "Device.Modbus.SolaxX1Inverter":{
           "description":"Modbus Solax X1 Inverter representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.Modbus.SolaxInverter"
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Modbus.SolaxX1Inverter/value"
           }
        },
        "Device.Modbus.SolaxX3Inverter":{
           "description":"Modbus Solax X3 Inverter representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.Modbus.SolaxInverter"
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Modbus.SolaxX3Inverter/value"
           }
        },
        "Device.Modbus.SolaxEnergyMeter":{
           "description":"Abstract Modbus Energy meter connected with Solax Inverter representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AGenericDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "meter_number",
                    "total_active_power",
                    "energy_fed_total",
                    "energy_fed_today",
                    "energy_consumed_total",
                    "energy_consumed_today",
                    "uses_energy_of_building"
                 ],
                 "properties":{
                    "meter_number":{
                       "description":"Connected meter number. Solax can have 2 meters connected which has different parameters.",
                       "type":"integer",
                       "readOnly":true,
                       "example":1
                    },
                    "total_active_power":{
                       "description":"Current power fed to (negative number) or consumed from (positive number) the power grid.<br>Unit: W with three decimal number, multiplied by 1000 (mW)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":-500
                    },
                    "energy_fed_total":{
                       "description":"Amount of energy fed to the power grid over a lifetime.<br>Unit: kWh with two decimal numbers, multiplied by 1000 (Wh)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":100000
                    },
                    "energy_fed_today":{
                       "description":"Amount of energy fed to the power grid today.<br>Unit: kWh with two decimal numbers, multiplied by 1000 (Wh)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":1000
                    },
                    "energy_consumed_total":{
                       "description":"Amount of energy consumed from the power grid over a lifetime.<br>Unit: kWh with two decimal numbers, multiplied by 1000 (Wh)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":100000
                    },
                    "energy_consumed_today":{
                       "description":"Amount of energy consumed from the power grid over today.<br>Unit: kWh with two decimal numbers, multiplied by 1000 (Wh)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":1000
                    },
                    "uses_energy_of_building":{
                       "description":"Indicates if energy meter is used to measure energy of device inside the building. (Not main energy meter).",
                       "type":"boolean",
                       "example":false
                    }
                 }
              }
           ]
        },
        "Device.Modbus.SolaxX1EnergyMeter":{
           "description":"Modbus Energy meter connected with Solax X1 Inverter representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.Modbus.SolaxEnergyMeter"
              },
              {
                 "type":"object",
                 "properties":{
                    "grid":{
                       "description":"Power grid current properties.<br> This parameter is <b>optional</b> and available only when `meter_number` is equal to 1.",
                       "type":"object",
                       "required":[
                          "active_power"
                       ],
                       "properties":{
                          "active_power":{
                             "description":"Current power.<br>Unit: W with three decimal number, multiplied by 1000 (mW)",
                             "type":"integer",
                             "readOnly":true,
                             "multipleOf":0.001,
                             "example":1000
                          },
                          "voltage":{
                             "description":"Current voltage.<br>Unit: V with three decimal number, multiplied by 1000 (mV)",
                             "type":"integer",
                             "readOnly":true,
                             "multipleOf":0.001,
                             "example":230
                          },
                          "current":{
                             "description":"Current current.<br>Unit: A with three decimal number, multiplied by 1000 (mA)",
                             "type":"integer",
                             "readOnly":true,
                             "multipleOf":0.001,
                             "example":10
                          },
                          "frequency":{
                             "description":"Current AC frequency.<br>Unit: Hz with two decimal numbers, multiplied by 100.",
                             "type":"integer",
                             "readOnly":true,
                             "multipleOf":0.01,
                             "example":23100
                          }
                       }
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Modbus.SolaxX1EnergyMeter/value"
           }
        },
        "Device.Modbus.SolaxX3EnergyMeter":{
           "description":"Modbus Energy meter connected with Solax X3 Inverter representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.Modbus.SolaxEnergyMeter"
              },
              {
                 "type":"object",
                 "required":[
                    "phase_1",
                    "phase_2",
                    "phase_3"
                 ],
                 "properties":{
                    "phase_1":{
                       "description":"First phase current properties.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.SolaxX3CurrentProperties"
                          }
                       ]
                    },
                    "phase_2":{
                       "description":"Second phase current properties.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.SolaxX3CurrentProperties"
                          }
                       ]
                    },
                    "phase_3":{
                       "description":"Third phase current properties.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.SolaxX3CurrentProperties"
                          }
                       ]
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Modbus.SolaxX3EnergyMeter/value"
           }
        },
        "Device.Modbus.Battery":{
           "description":"Abstract battery representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AGenericDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "energy_charged_today",
                    "energy_discharged_today"
                 ],
                 "properties":{
                    "energy_charged_today":{
                       "description":"Amount of energy charged to the battery today.<br>Unit: kwh with one decimal number, multiplied by 1000 (Wh)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":500
                    },
                    "energy_discharged_today":{
                       "description":"Amount of energy consumed from the battery today.<br>Unit: kwh with one decimal number, multiplied by 1000 (Wh)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":500
                    }
                 }
              }
           ]
        },
        "Device.Modbus.SolaxBattery":{
           "description":"Abstract Solax Battery representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.Modbus.Battery"
              },
              {
                 "type":"object",
                 "required":[
                    "soc",
                    "charge_power",
                    "unlock_password",
                    "energy_charged_total",
                    "energy_discharged_total",
                    "maximum_charge_power",
                    "maximum_discharge_power"
                 ],
                 "properties":{
                    "soc":{
                       "description":"Current state of charge.<br>Unit: %",
                       "type":"integer",
                       "readOnly":true,
                       "example":50
                    },
                    "charge_power":{
                       "description":"Current charing (positive number) or discharging (negative number) power.<br>Unit: W with three decimal number, multiplied by 1000 (mW)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":-500
                    },
                    "unlock_password":{
                       "description":"Password to unlock charge or discharge commands.",
                       "type":"string",
                       "minimum":4,
                       "maximum":4,
                       "pattern":"^[0-9]{4}$",
                       "example":"1234"
                    },
                    "energy_charged_total":{
                       "description":"Amount of energy charged to the battery over a lifetime.<br>Unit: kwh with one decimal number, multiplied by 1000 (Wh)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":50000
                    },
                    "energy_discharged_total":{
                       "description":"Amount of energy consumed from the battery over a lifetime.<br>Unit: kwh with one decimal number, multiplied by 1000 (Wh)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":50000
                    },
                    "maximum_charge_power":{
                       "description":"Parameter describing maximum value for charge power.<br>Unit: W with three decimal number, multiplied by 1000 (mW)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001
                    },
                    "maximum_discharge_power":{
                       "description":"Parameter describing maximum value for discharge power.<br>Unit: W with three decimal number, multiplied by 1000 (mW)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001
                    }
                 }
              }
           ]
        },
        "Device.Modbus.SolaxX1Battery":{
           "description":"Solax X1 Battery representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.Modbus.SolaxBattery"
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Modbus.SolaxX1Battery/value"
           }
        },
        "Device.Modbus.SolaxX3Battery":{
           "description":"Solax X3 Battery representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.Modbus.SolaxBattery"
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Modbus.SolaxX3Battery/value"
           }
        },
        "Device.Modbus.SolarEdgeInverter":{
           "description":"Abstract Solar Edge Inverter representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AGenericDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "run_mode",
                    "energy_produced_total",
                    "energy_produced_today",
                    "power_to_grid",
                    "advanced_power_control_enabled",
                    "reactive_power_config",
                    "active_power_limit",
                    "pv_total_active_power"
                 ],
                 "properties":{
                    "run_mode":{
                       "description":"Inverter current run mode.",
                       "type":"string",
                       "readOnly":true,
                       "enum":[
                          "off",
                          "sleeping",
                          "starting",
                          "working",
                          "throttled",
                          "shutting_down",
                          "fault",
                          "standby"
                       ],
                       "example":"normal"
                    },
                    "energy_produced_total":{
                       "description":"Total amount of energy produced by PV over a lifetime.<br>Unit: kWh with three decimal number, multiplied by 1000 (Wh).",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":10000
                    },
                    "energy_produced_today":{
                       "description":"Amount of energy produced by PV today.<br>Unit: kWh with three decimal number, multiplied by 1000 (Wh).",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":200
                    },
                    "power_to_grid":{
                       "description":"Current power fed to (positive number) or consumed from (negative number) the power grid.<br>Unit: W with three decimal number, multiplied by 1000 (mW)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":-500
                    },
                    "advanced_power_control_enabled":{
                       "description":"Allows to set advanced power control settings.<br/> **NOTE:** It is allowed to change only when device has label `power_control_support`.",
                       "type":"boolean",
                       "example":true
                    },
                    "reactive_power_config":{
                       "description":"Reactive power config.<br/> **NOTE:** It is allowed to change only when device has label `power_control_support`.",
                       "type":"string",
                       "enum":[
                          "fixed_cosphi",
                          "fixed_q",
                          "cosphi",
                          "q",
                          "rrcr"
                       ],
                       "example":"fixed_cosphi"
                    },
                    "active_power_limit":{
                       "description":"Percent of max power at which inverter is going to work. Unit: percent.<br/> **NOTE:** It is allowed to change only when `advanced_power_control_enabled` is set to `true` and `reactive_power_config` to `rrcr` and  device has label `power_control_support`.",
                       "type":"integer",
                       "minimum":0,
                       "maximum":100,
                       "example":100
                    },
                    "pv_total_active_power":{
                       "description":"Current total power produced by all photovoltaic panels. <br> Unit: W with three decimal number, multiplied by 1000 (mW)",
                       "type":"integer",
                       "multipleOf":0.001,
                       "readOnly":true,
                       "example":500
                    }
                 }
              }
           ]
        },
        "Device.Modbus.SolarEdgeSingleInverter":{
           "description":"SolarEdge Inverter without MPPT Extension Model attached",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.Modbus.SolarEdgeInverter"
              },
              {
                 "type":"object",
                 "required":[
                    "pv"
                 ],
                 "properties":{
                    "pv":{
                       "description":"Photovoltaic panels current properties.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.CurrentProperties"
                          }
                       ]
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Modbus.SolarEdgeSingleInverter/value"
           }
        },
        "Device.Modbus.SolarEdgeMultipleInverter":{
           "description":"SolarEdge Inverter WITH MPPT Extension Model attached",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.Modbus.SolarEdgeInverter"
              },
              {
                 "type":"object",
                 "required":[
                    "pv_1",
                    "pv_2",
                    "pv_3"
                 ],
                 "properties":{
                    "pv_1":{
                       "description":"First group of photovoltaic panels current properties.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.CurrentProperties"
                          }
                       ]
                    },
                    "pv_2":{
                       "description":"Second group of photovoltaic panels current properties.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.CurrentProperties"
                          }
                       ]
                    },
                    "pv_3":{
                       "description":"Third group of photovoltaic panels current properties.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.CurrentProperties"
                          }
                       ]
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Modbus.SolarEdgeMultipleInverter/value"
           }
        },
        "Device.Modbus.IthoHeatPump":{
           "description":"Modbus Itho Heat Pump representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AGenericDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "state",
                    "fixed_heating_target_temperature",
                    "temperature_outdoor",
                    "temperature_indoor",
                    "target_temperature_indoor",
                    "heating_supply",
                    "heating_return",
                    "heating_system_pressure",
                    "hot_gas_temperature",
                    "condensation_temperature",
                    "evaporation_temperature",
                    "brine_out_temperature",
                    "brine_in_temperature",
                    "energy_used_for_hot_water",
                    "energy_used_for_heating",
                    "energy_used_for_cooling",
                    "energy_used_in_stand_by",
                    "energy_used_total",
                    "source_supply_energy",
                    "source_return_energy",
                    "electric_heater_active",
                    "running_hours",
                    "operating_hours_heating",
                    "operating_hours_hot_water",
                    "number_of_starts",
                    "heat_curve_end_point",
                    "heat_curve_base_point",
                    "heat_demand",
                    "cool_demand"
                 ],
                 "properties":{
                    "state":{
                       "description":"State of the heat pump.",
                       "type":"string",
                       "enum":[
                          "on",
                          "off"
                       ],
                       "readOnly":true,
                       "example":"on"
                    },
                    "fixed_heating_target_temperature":{
                       "description":"Set temperature for heating in fixed temperature mode. <br> Unit: °C.",
                       "type":"integer",
                       "minimum":10,
                       "maximum":70,
                       "example":40
                    },
                    "temperature_outdoor":{
                       "description":"Outdoor temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":100
                    },
                    "temperature_indoor":{
                       "description":"Indoor temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":200
                    },
                    "target_temperature_indoor":{
                       "description":"Set indoor temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":200
                    },
                    "heating_supply":{
                       "description":"Heating supply temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":300
                    },
                    "heating_return":{
                       "description":"Heating return temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":150
                    },
                    "heating_system_pressure":{
                       "description":"Heating System pressure. <br> Unit: Bar with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":30
                    },
                    "hot_gas_temperature":{
                       "description":"Hot gas temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":850
                    },
                    "condensation_temperature":{
                       "description":"Condensation temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":500
                    },
                    "evaporation_temperature":{
                       "description":"Evaporation temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":500
                    },
                    "brine_out_temperature":{
                       "description":"Brine out temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":500
                    },
                    "brine_in_temperature":{
                       "description":"Brine in temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":500
                    },
                    "energy_used_for_hot_water":{
                       "description":"Energy used for hot water. <br> Unit: kW/h.",
                       "type":"integer",
                       "readOnly":true,
                       "example":500
                    },
                    "energy_used_for_heating":{
                       "description":"Energy used for heating. <br> Unit: kW/h.",
                       "type":"integer",
                       "readOnly":true,
                       "example":500
                    },
                    "energy_used_for_cooling":{
                       "description":"Energy used for cooling. <br> Unit: kW/h.",
                       "type":"integer",
                       "readOnly":true,
                       "example":500
                    },
                    "energy_used_in_stand_by":{
                       "description":"Energy used in stand by. <br> Unit: kW/h.",
                       "type":"integer",
                       "readOnly":true,
                       "example":500
                    },
                    "energy_used_total":{
                       "description":"Energy used total. <br> Unit: kW/h.",
                       "type":"integer",
                       "readOnly":true,
                       "example":500
                    },
                    "source_supply_energy":{
                       "description":"Energy in source supply. <br> Unit: MWh with two decimal numbers, multiplied by 100.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.01,
                       "example":123
                    },
                    "source_return_energy":{
                       "description":"Energy in source return. <br> Unit: MWh with two decimal numbers, multiplied by 100.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.01,
                       "example":123
                    },
                    "electric_heater_active":{
                       "description":"Indicates electric heater active state.",
                       "type":"boolean",
                       "example":false
                    },
                    "running_hours":{
                       "description":"Hours heat pump is working.",
                       "type":"integer",
                       "readOnly":true,
                       "example":100
                    },
                    "operating_hours_heating":{
                       "description":"Operating hours for central heating.",
                       "type":"integer",
                       "readOnly":true,
                       "example":100
                    },
                    "operating_hours_hot_water":{
                       "description":"Operating hours for domestic hot water.",
                       "type":"integer",
                       "readOnly":true,
                       "example":100
                    },
                    "number_of_starts":{
                       "description":"Number of compressor starts.",
                       "type":"integer",
                       "readOnly":true,
                       "example":100
                    },
                    "heat_curve_end_point":{
                       "description":"Heat curve end point. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "minimum":150,
                       "maximum":350,
                       "multipleOf":0.1,
                       "example":200
                    },
                    "heat_curve_base_point":{
                       "description":"Heat curve base point. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "minimum":200,
                       "maximum":500,
                       "multipleOf":0.1,
                       "example":500
                    },
                    "heat_demand":{
                       "description":"Informs device that heat is demanded or not.",
                       "type":"boolean",
                       "example":false
                    },
                    "cool_demand":{
                       "description":"Informs device that cool is demanded or not.",
                       "type":"boolean",
                       "example":false
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Modbus.IthoHeatPump/value"
           }
        },
        "Device.Modbus.IthoMainDhw":{
           "description":"Modbus Itho MainDhw representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.Modbus.MainDhw"
              },
              {
                 "type":"object",
                 "required":[
                    "target_temperature",
                    "dhw_demand",
                    "hysteresis",
                    "temperature_domestic_hot_water_lower_tank"
                 ],
                 "properties":{
                    "target_temperature":{
                       "description":"Target water temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "minimum":450,
                       "maximum":620,
                       "multipleOf":0.1,
                       "example":500
                    },
                    "dhw_demand":{
                       "description":"Domestic Hot Water demand.",
                       "type":"boolean",
                       "example":true
                    },
                    "hysteresis":{
                       "description":"Damper factor, which will protect from continuous on/off switching when current temperature is near target value.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "minimum":10,
                       "maximum":150,
                       "multipleOf":0.1,
                       "example":20
                    },
                    "temperature_domestic_hot_water_lower_tank":{
                       "description":"Current water temperature of lower tank sensor. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":450
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Modbus.IthoMainDhw/value"
           }
        },
        "Device.Modbus.IthoTemperatureSensor":{
           "description":"Modbus Itho Temperature sensor representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.Modbus.TemperatureSensor"
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Modbus.IthoTemperatureSensor"
           }
        },
        "Device.Modbus.MitsubishiEcodanZoneData":{
           "description":"Modbus Mitsubishi Ecodan Zone information",
           "type":"object",
           "required":[
              "target_temperature",
              "current_temperature",
              "work_mode",
              "heating_supply",
              "heating_return"
           ],
           "properties":{
              "target_temperature":{
                 "description":"Target temperature at current zone.<br>Unit: °C with one decimal number, multiplied by 10.",
                 "type":"integer",
                 "minimum":100,
                 "maximum":700,
                 "multipleOf":0.1,
                 "example":210
              },
              "current_temperature":{
                 "description":"Current temperature at current zone.<br>Unit: °C with one decimal number, multiplied by 10.",
                 "type":"integer",
                 "readOnly":true,
                 "multipleOf":0.1,
                 "example":200
              },
              "work_mode":{
                 "description":"Mode which is used to reach target temperature. **NOTE:** Cannot be modified when device is associated with Heat Pump Manager.",
                 "type":"string",
                 "enum":[
                    "heating_room_temp",
                    "heating_flow_temp",
                    "heating_heat_curve",
                    "cooling_flow_temp"
                 ],
                 "example":"heating_room_temp"
              },
              "heating_supply":{
                 "description":"Current heating supply temperature at current zone.<br>Unit: °C with one decimal number, multiplied by 10.",
                 "type":"integer",
                 "readOnly":true,
                 "multipleOf":0.1,
                 "example":550
              },
              "heating_return":{
                 "description":"Current heating return temperature at current zone.<br>Unit: °C with one decimal number, multiplied by 10.",
                 "type":"integer",
                 "readOnly":true,
                 "multipleOf":0.1,
                 "example":400
              }
           }
        },
        "Device.Modbus.MitsubishiEcodanHeatPump":{
           "description":"Modbus Mitsubishi Ecodan Heat Pump representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AGenericDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "state",
                    "work_mode",
                    "temperature_outdoor",
                    "heating_supply",
                    "heating_return",
                    "running_hours",
                    "zone_1",
                    "zone_2",
                    "heat_demand",
                    "cool_demand",
                    "defrost_mode",
                    "residual_heat_removal",
                    "frequency_master",
                    "refrigerant_temperature",
                    "energy_used_for_heating",
                    "energy_used_for_cooling",
                    "energy_used_for_hot_water",
                    "energy_produced_heating",
                    "energy_produced_cooling",
                    "energy_produced_hot_water",
                    "flow_rate"
                 ],
                 "properties":{
                    "state":{
                       "description":"State of the heat pump. **NOTE:** Cannot be modified when device is associated with Heat Pump Manager.",
                       "type":"string",
                       "enum":[
                          "on",
                          "off"
                       ],
                       "example":"on"
                    },
                    "work_mode":{
                       "description":"Work mode of the heat pump.",
                       "type":"string",
                       "enum":[
                          "off",
                          "dhw",
                          "heating",
                          "cooling",
                          "buffer",
                          "freeze_stat",
                          "legionella",
                          "heating_eco",
                          "mode_1",
                          "mode_2",
                          "mode_3",
                          "heating_up"
                       ],
                       "example":"heating"
                    },
                    "temperature_outdoor":{
                       "description":"Outdoor temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":100
                    },
                    "heating_supply":{
                       "description":"Heating supply temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":300
                    },
                    "heating_return":{
                       "description":"Heating return temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":150
                    },
                    "running_hours":{
                       "description":"Hours heat pump is working.",
                       "type":"integer",
                       "readOnly":true,
                       "example":100
                    },
                    "zone_1":{
                       "$ref":"#/components/schemas/Device.Modbus.MitsubishiEcodanZoneData"
                    },
                    "zone_2":{
                       "$ref":"#/components/schemas/Device.Modbus.MitsubishiEcodanZoneData"
                    },
                    "heat_demand":{
                       "description":"Informs device that heat is demanded or not.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    },
                    "cool_demand":{
                       "description":"Informs device that cool is demanded or not.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    },
                    "defrost_mode":{
                       "description":"Current deforst mode.",
                       "type":"string",
                       "enum":[
                          "normal",
                          "standby",
                          "defrost",
                          "waiting_restart"
                       ],
                       "readOnly":true,
                       "example":"normal"
                    },
                    "residual_heat_removal":{
                       "description":"Residual Heat Removal.",
                       "type":"string",
                       "enum":[
                          "normal",
                          "prepared",
                          "residual_heat_removal"
                       ],
                       "readOnly":true,
                       "example":"normal"
                    },
                    "frequency_master":{
                       "description":"Frequency of master device. <br> Unit: Hz",
                       "type":"integer",
                       "readOnly":true,
                       "example":45
                    },
                    "refrigerant_temperature":{
                       "description":"Refrigerant liquid temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":500
                    },
                    "energy_used_for_heating":{
                       "description":"Energy used for heating. <br> Unit: kWh multiplied by 1000.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":5000
                    },
                    "energy_used_for_cooling":{
                       "description":"Energy used for cooling. <br> Unit: kWh multiplied by 1000.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":5000
                    },
                    "energy_used_for_hot_water":{
                       "description":"Energy used for domestic hot water. <br> Unit: kWh multiplied by 1000.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":5000
                    },
                    "energy_produced_heating":{
                       "description":"Energy produced for heating. <br> Unit: kWh multiplied by 1000.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":5000
                    },
                    "energy_produced_cooling":{
                       "description":"Energy produced for cooling. <br> Unit: kWh multiplied by 1000.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":5000
                    },
                    "energy_produced_hot_water":{
                       "description":"Energy produced for domestic hot water. <br> Unit: kWh multiplied by 1000.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":5000
                    },
                    "flow_rate":{
                       "description":"Flow rate. <br> Unit: litres per minute multiplied by 100",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.01,
                       "example":1000
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Modbus.MitsubishiEcodanHeatPump"
           }
        },
        "Device.Modbus.MitsubishiEcodanMainDhw":{
           "description":"Modbus Mitsubishi Ecodan MainDhw representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.Modbus.MainDhw"
              },
              {
                 "type":"object",
                 "required":[
                    "target_temperature",
                    "dhw_demand",
                    "work_mode",
                    "temperature_drop",
                    "heating_supply",
                    "heating_return"
                 ],
                 "properties":{
                    "target_temperature":{
                       "description":"Target water temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "minimum":450,
                       "maximum":620,
                       "multipleOf":0.1,
                       "example":500
                    },
                    "dhw_demand":{
                       "description":"Domestic Hot Water demand.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":true
                    },
                    "work_mode":{
                       "description":"Domestic Hot Water work mode.",
                       "type":"string",
                       "enum":[
                          "normal",
                          "eco"
                       ],
                       "example":"normal"
                    },
                    "temperature_drop":{
                       "description":"Temperature drop. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":350
                    },
                    "heating_supply":{
                       "description":"Domestic Hot Water heating supply <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":350
                    },
                    "heating_return":{
                       "description":"Domestic Hot Water heating return <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":350
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Modbus.MitsubishiEcodanMainDhw"
           }
        },
        "Device.Modbus.MitsubishiEcodanTemperatureSensor":{
           "description":"Modbus Mitsubishi Ecodan Temperature sensor representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.Modbus.TemperatureSensor"
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Modbus.MitsubishiEcodanTemperatureSensor"
           }
        },
        "Device.Modbus.GalmetPrimaHeatPumpZoneInfo":{
           "description":"Zone information.",
           "type":"object",
           "required":[
              "heat_demand",
              "cool_demand",
              "fixed_target_temperature",
              "heat_curve",
              "heat_curve_target_temperature",
              "heat_curve_enabled"
           ],
           "properties":{
              "heat_demand":{
                 "description":"Informs device that heat is demanded or not.",
                 "type":"boolean",
                 "example":false
              },
              "cool_demand":{
                 "description":"Informs device that cool is demanded or not.",
                 "type":"boolean",
                 "example":false
              },
              "fixed_target_temperature":{
                 "description":"Target water temperature. <br>Minumum from `fixed_target_temperature_minimum`. Maximum from `fixed_target_temperature_maximum`.<br> Unit: °C.",
                 "type":"integer",
                 "minimum":5,
                 "maximum":65,
                 "example":45
              },
              "heat_curve":{
                 "description":"Current set heat curve ID.",
                 "type":"integer",
                 "minimum":1,
                 "maximum":9,
                 "example":3
              },
              "heat_curve_target_temperature":{
                 "description":"Current target temperature set by heat curve.<br>Unit °C.",
                 "type":"integer",
                 "readOnly":true,
                 "example":35
              },
              "heat_curve_enabled":{
                 "description":"Indicator if heat curve mode is enabled.",
                 "type":"boolean",
                 "example":false
              }
           }
        },
        "Device.Modbus.GalmetPrimaHeatPump":{
           "description":"Modbus Galmet Prima Heat Pump representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AGenericDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "work_mode",
                    "fixed_target_temperature_minimum",
                    "fixed_target_temperature_maximum",
                    "temperature_outdoor",
                    "heating_system_pressure",
                    "hot_gas_temperature",
                    "condensation_temperature",
                    "water_inlet_temperature",
                    "water_outlet_temperature",
                    "running_hours",
                    "electric_heater_active",
                    "zone_1",
                    "zone_2",
                    "work_frequency",
                    "outdoor_unit_work_mode",
                    "fan_speed",
                    "t1_water_outlet_temperature",
                    "t2_temperature",
                    "device_power",
                    "energy_used_total",
                    "energy_generated_total",
                    "outdoor_unit_capacity",
                    "water_flow",
                    "buffer_up_temperature",
                    "buffer_down_temperature",
                    "pump_i_state",
                    "pump_o_state",
                    "pump_d_state",
                    "pump_s_state",
                    "pump_c_state",
                    "electric_heater_state",
                    "sv_1_state",
                    "sv_2_state",
                    "defrost_state"
                 ],
                 "properties":{
                    "work_mode":{
                       "description":"Current work mode of the heat pump.",
                       "type":"string",
                       "enum":[
                          "heating",
                          "cooling",
                          "automatic"
                       ],
                       "example":"heating"
                    },
                    "fixed_target_temperature_minimum":{
                       "description":"Minimum value of fixed_target_temperature parameter. <br> Unit: °C.",
                       "type":"integer",
                       "readOnly":true,
                       "example":35
                    },
                    "fixed_target_temperature_maximum":{
                       "description":"Maximum value of fixed_target_temperature parameter. <br> Unit: °C.",
                       "type":"integer",
                       "readOnly":true,
                       "example":65
                    },
                    "temperature_outdoor":{
                       "description":"Outdoor temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":100
                    },
                    "heating_system_pressure":{
                       "description":"Heating System pressure. <br> Unit: Bar with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":30
                    },
                    "hot_gas_temperature":{
                       "description":"Hot gas temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":850
                    },
                    "condensation_temperature":{
                       "description":"Condensation temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":500
                    },
                    "water_inlet_temperature":{
                       "description":"Water inlet temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":500
                    },
                    "water_outlet_temperature":{
                       "description":"Water outlet temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":500
                    },
                    "running_hours":{
                       "description":"Hours heat pump is working.",
                       "type":"integer",
                       "readOnly":true,
                       "example":100
                    },
                    "electric_heater_active":{
                       "description":"Indicates electric heater desired state.",
                       "type":"boolean",
                       "example":false
                    },
                    "zone_1":{
                       "description":"Zone 1 related parameters.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.Modbus.GalmetPrimaHeatPumpZoneInfo"
                          }
                       ]
                    },
                    "zone_2":{
                       "description":"Zone 2 related parameters.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.Modbus.GalmetPrimaHeatPumpZoneInfo"
                          }
                       ]
                    },
                    "work_frequency":{
                       "description":"Compressor operating frequency. <br> Unit: Hz",
                       "type":"integer",
                       "readOnly":true,
                       "example":400
                    },
                    "outdoor_unit_work_mode":{
                       "description":"Actual work mode of the heat pump outdoor unit.",
                       "type":"string",
                       "enum":[
                          "heating",
                          "cooling",
                          "off"
                       ],
                       "example":"heating"
                    },
                    "fan_speed":{
                       "description":"Fan speed.<br>Unit: revolutions per minute.",
                       "type":"integer",
                       "readOnly":true,
                       "example":123
                    },
                    "t1_water_outlet_temperature":{
                       "description":"T1 temperature. Total water outlet temperature.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":554
                    },
                    "t2_temperature":{
                       "description":"T2 temperature. Temperature on the liquid coolant side.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":354
                    },
                    "device_power":{
                       "description":"Heat pump max power.<br> Unit: kW with three decimal numbers, multiplied by 1000.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":4000
                    },
                    "energy_used_total":{
                       "description":"Total energy used by heat pump.<br> Unit: kWh with three decimal numbers, multiplied by 1000.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":354289
                    },
                    "energy_generated_total":{
                       "description":"Total energy generated by heat pump.<br> Unit: kWh with three decimal numbers, multiplied by 1000.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":235289
                    },
                    "outdoor_unit_capacity":{
                       "description":"Outdoor unit power capacity.<br> Unit: kW with three decimal numbers, multiplied by 1000.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":4500
                    },
                    "water_flow":{
                       "description":"Water flow in instalation.<br> Unit: m3/h with three decimal numbers, multiplied by 1000.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":13252
                    },
                    "buffer_up_temperature":{
                       "description":"Measured temperature in upper part of buffer.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":677
                    },
                    "buffer_down_temperature":{
                       "description":"Measured temperature in lower part of buffer.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":772
                    },
                    "pump_i_state":{
                       "description":"Water pump PUMP_I state.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    },
                    "pump_o_state":{
                       "description":"Outside water pump P_O state.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    },
                    "pump_d_state":{
                       "description":"Return water pump P_D state.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    },
                    "pump_s_state":{
                       "description":"Water pump of the solar collector system state.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    },
                    "pump_c_state":{
                       "description":"Mixed water pump state.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    },
                    "electric_heater_state":{
                       "description":"Actual electric heater state.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    },
                    "sv_1_state":{
                       "description":"SV1 state.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    },
                    "sv_2_state":{
                       "description":"SV2 state.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    },
                    "defrost_state":{
                       "description":"Indicator if is defrost activated.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Modbus.GalmetPrimaHeatPump"
           }
        },
        "Device.Modbus.GalmetPrimaMainDhw":{
           "description":"Modbus Galmet Prima MainDhw representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.Modbus.MainDhw"
              },
              {
                 "type":"object",
                 "required":[
                    "target_temperature",
                    "dhw_demand",
                    "circulation_pump_enabled",
                    "electric_heater_state"
                 ],
                 "properties":{
                    "target_temperature":{
                       "description":"Target water temperature. <br> Unit: °C.",
                       "type":"integer",
                       "minimum":20,
                       "maximum":60,
                       "example":50
                    },
                    "dhw_demand":{
                       "description":"Domestic Hot Water demand.",
                       "type":"boolean",
                       "example":true
                    },
                    "electric_heater_active":{
                       "description":"Indicates electric heater active state.",
                       "type":"boolean",
                       "example":false
                    },
                    "circulation_pump_enabled":{
                       "description":"Indicates if curculation pump work is enabled.",
                       "type":"boolean",
                       "example":false
                    },
                    "electric_heater_state":{
                       "description":"Actual electric heater state.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Modbus.GalmetPrimaMainDhw"
           }
        },
        "Device.Modbus.GalmetPrimaTemperatureSensor":{
           "description":"Modbus Galmet Prima Temperature sensor representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.Modbus.TemperatureSensor"
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Modbus.GalmetPrimaTemperatureSensor"
           }
        },
        "Device.Modbus.EastronSDM630EnergyMeter":{
           "description":"Modbus Eastron SDM630 Energy Meter representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.Modbus.EnergyMeter"
              },
              {
                 "type":"object",
                 "required":[
                    "energy_sum_total",
                    "energy_sum_today",
                    "reactive_energy_sum_total",
                    "reactive_energy_sum_today",
                    "phase_1",
                    "phase_2",
                    "phase_3",
                    "uses_energy_of_building"
                 ],
                 "properties":{
                    "energy_sum_total":{
                       "description":"Energy sum (consumed + fed) of all phases lifetime.<br>Unit: kWh, multiplied by 1000 (Wh).",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":400000
                    },
                    "energy_sum_today":{
                       "description":"Energy sum (consumed + fed) of all phases today.<br>Unit: kWh, multiplied of 1000 (Wh).",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":50000
                    },
                    "reactive_energy_sum_total":{
                       "description":"Reactive energy sum (consumed + fed) of all phases lifetime.<br>Unit: kVArh, multiplied of 1000 (VArh).",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":100000
                    },
                    "reactive_energy_sum_today":{
                       "description":"Reactive energy sum (consumed + fed) of all phases today.<br>Unit: kVArh, multiplied of 1000 (VArh).",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":5000
                    },
                    "phase_1":{
                       "description":"First phase current properties.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.PhasePropertiesWithEnergy"
                          }
                       ]
                    },
                    "phase_2":{
                       "description":"Second phase current properties.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.PhasePropertiesWithEnergy"
                          }
                       ]
                    },
                    "phase_3":{
                       "description":"Third phase current properties.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.PhasePropertiesWithEnergy"
                          }
                       ]
                    },
                    "uses_energy_of_building":{
                       "description":"Indicates if energy meter is used to measure energy of device inside the building. (Not main energy meter).",
                       "type":"boolean",
                       "example":false
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Modbus.EastronSDM630EnergyMeter/value"
           }
        },
        "Device.Modbus.KaisaiKHCHeatPump":{
           "description":"Modbus Kaisai KHC Heat Pump representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AGenericDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "work_mode",
                    "fixed_target_temperature_minimum",
                    "fixed_target_temperature_maximum",
                    "temperature_outdoor",
                    "heating_system_pressure",
                    "hot_gas_temperature",
                    "condensation_temperature",
                    "water_inlet_temperature",
                    "water_outlet_temperature",
                    "running_hours",
                    "electric_heater_active",
                    "zone_1",
                    "zone_2",
                    "work_frequency",
                    "outdoor_unit_work_mode",
                    "fan_speed",
                    "t1_water_outlet_temperature",
                    "t2_temperature",
                    "device_power",
                    "energy_used_total",
                    "energy_generated_total",
                    "outdoor_unit_capacity",
                    "water_flow",
                    "buffer_up_temperature",
                    "buffer_down_temperature",
                    "pump_i_state",
                    "pump_o_state",
                    "pump_d_state",
                    "pump_s_state",
                    "pump_c_state",
                    "electric_heater_state",
                    "sv_1_state",
                    "sv_2_state",
                    "defrost_state"
                 ],
                 "properties":{
                    "work_mode":{
                       "description":"Current work mode of the heat pump.",
                       "type":"string",
                       "enum":[
                          "heating",
                          "cooling",
                          "automatic"
                       ],
                       "example":"heating"
                    },
                    "fixed_target_temperature_minimum":{
                       "description":"Minimum value of fixed_target_temperature parameter. <br> Unit: °C.",
                       "type":"integer",
                       "readOnly":true,
                       "example":35
                    },
                    "fixed_target_temperature_maximum":{
                       "description":"Maximum value of fixed_target_temperature parameter. <br> Unit: °C.",
                       "type":"integer",
                       "readOnly":true,
                       "example":65
                    },
                    "temperature_outdoor":{
                       "description":"Outdoor temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":100
                    },
                    "heating_system_pressure":{
                       "description":"Heating System pressure. <br> Unit: Bar with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":30
                    },
                    "hot_gas_temperature":{
                       "description":"Hot gas temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":850
                    },
                    "condensation_temperature":{
                       "description":"Condensation temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":500
                    },
                    "water_inlet_temperature":{
                       "description":"Water inlet temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":500
                    },
                    "water_outlet_temperature":{
                       "description":"Water outlet temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":500
                    },
                    "running_hours":{
                       "description":"Hours heat pump is working.",
                       "type":"integer",
                       "readOnly":true,
                       "example":100
                    },
                    "electric_heater_active":{
                       "description":"Indicates electric heater active state.",
                       "type":"boolean",
                       "example":false
                    },
                    "zone_1":{
                       "description":"Zone 1 related parameters.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.Modbus.GalmetPrimaHeatPumpZoneInfo"
                          }
                       ]
                    },
                    "zone_2":{
                       "description":"Zone 2 related parameters.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.Modbus.GalmetPrimaHeatPumpZoneInfo"
                          }
                       ]
                    },
                    "work_frequency":{
                       "description":"Compressor operating frequency. <br> Unit: Hz",
                       "type":"integer",
                       "readOnly":true,
                       "example":400
                    },
                    "outdoor_unit_work_mode":{
                       "description":"Actual work mode of the heat pump outdoor unit.",
                       "type":"string",
                       "enum":[
                          "heating",
                          "cooling",
                          "off"
                       ],
                       "readOnly":true,
                       "example":"heating"
                    },
                    "fan_speed":{
                       "description":"Fan speed.<br>Unit: revolutions per minute.",
                       "type":"integer",
                       "readOnly":true,
                       "example":123
                    },
                    "t1_water_outlet_temperature":{
                       "description":"T1 temperature. Total water outlet temperature.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":554
                    },
                    "t2_temperature":{
                       "description":"T2 temperature. Temperature on the liquid coolant side.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":354
                    },
                    "device_power":{
                       "description":"Heat pump max power.<br> Unit: kW with three decimal numbers, multiplied by 1000.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":4000
                    },
                    "energy_used_total":{
                       "description":"Total energy used by heat pump.<br> Unit: kWh with three decimal numbers, multiplied by 1000.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":354289
                    },
                    "energy_generated_total":{
                       "description":"Total energy generated by heat pump.<br> Unit: kWh with three decimal numbers, multiplied by 1000.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":235289
                    },
                    "outdoor_unit_capacity":{
                       "description":"Outdoor unit power capacity.<br> Unit: kW with three decimal numbers, multiplied by 1000.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":4500
                    },
                    "water_flow":{
                       "description":"Water flow in instalation.<br> Unit: m3/h with three decimal numbers, multiplied by 1000.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":13252
                    },
                    "buffer_up_temperature":{
                       "description":"Measured temperature in upper part of buffer.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":677
                    },
                    "buffer_down_temperature":{
                       "description":"Measured temperature in lower part of buffer.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":772
                    },
                    "pump_i_state":{
                       "description":"Water pump PUMP_I state.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    },
                    "pump_o_state":{
                       "description":"Outside water pump P_O state.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    },
                    "pump_d_state":{
                       "description":"Return water pump P_D state.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    },
                    "pump_s_state":{
                       "description":"Water pump of the solar collector system state.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    },
                    "pump_c_state":{
                       "description":"Mixed water pump state.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    },
                    "electric_heater_state":{
                       "description":"Electric heater state.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    },
                    "sv_1_state":{
                       "description":"SV1 state.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    },
                    "sv_2_state":{
                       "description":"SV2 state.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    },
                    "defrost_state":{
                       "description":"Indicator if is defrost activated.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Modbus.KaisaiKHCHeatPump"
           }
        },
        "Device.Modbus.KaisaiKHCMainDhw":{
           "description":"Modbus Kaisai KHC MainDhw representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.Modbus.MainDhw"
              },
              {
                 "type":"object",
                 "required":[
                    "target_temperature",
                    "dhw_demand",
                    "circulation_pump_enabled",
                    "electric_heater_state"
                 ],
                 "properties":{
                    "target_temperature":{
                       "description":"Target water temperature. <br> Unit: °C.",
                       "type":"integer",
                       "minimum":20,
                       "maximum":60,
                       "example":500
                    },
                    "dhw_demand":{
                       "description":"Domestic Hot Water demand.",
                       "type":"boolean",
                       "example":true
                    },
                    "electric_heater_active":{
                       "description":"Indicates electric heater desired state.",
                       "type":"boolean",
                       "example":false
                    },
                    "circulation_pump_enabled":{
                       "description":"Indicates if curculation pump work is enabled.",
                       "type":"boolean",
                       "example":false
                    },
                    "electric_heater_state":{
                       "description":"Actual electric heater state.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Modbus.KaisaiKHCMainDhw"
           }
        },
        "Device.Modbus.KaisaiKHCTemperatureSensor":{
           "description":"Modbus Kaisai KHC Temperature sensor representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.Modbus.TemperatureSensor"
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Modbus.KaisaiKHCTemperatureSensor"
           }
        },
        "Device.Modbus.GoodWeInverter":{
           "description":"Abstract Modbus GoodWe Inverter representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AGenericDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "run_mode",
                    "pv_total_active_power",
                    "energy_fed_total",
                    "energy_fed_today",
                    "pv_1",
                    "pv_2",
                    "phase_1",
                    "phase_2",
                    "phase_3"
                 ],
                 "properties":{
                    "run_mode":{
                       "description":"Inverter current run mode.",
                       "type":"string",
                       "readOnly":true,
                       "enum":[
                          "waiting",
                          "normal",
                          "fault"
                       ],
                       "example":"normal"
                    },
                    "pv_total_active_power":{
                       "description":"Current total power produced by all photovoltaic panels. <br> Unit: W with three decimal number, multiplied by 1000 (mW)",
                       "type":"integer",
                       "multipleOf":0.001,
                       "readOnly":true,
                       "example":500
                    },
                    "energy_fed_total":{
                       "description":"Amount of energy fed to the power grid over a lifetime.<br>Unit: kWh with two decimal numbers, multiplied by 1000 (Wh)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":100000
                    },
                    "energy_fed_today":{
                       "description":"Amount of energy fed to the power grid today.<br>Unit: kWh with two decimal numbers, multiplied by 1000 (Wh)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":1000
                    },
                    "pv_1":{
                       "description":"First group of photovoltaic panels current properties.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.CurrentProperties"
                          }
                       ]
                    },
                    "pv_2":{
                       "description":"Second group of photovoltaic panels current properties.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.CurrentProperties"
                          }
                       ]
                    },
                    "phase_1":{
                       "description":"First phase current properties.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.CurrentNoPowerProperties"
                          }
                       ]
                    },
                    "phase_2":{
                       "description":"Second phase current properties.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.CurrentNoPowerProperties"
                          }
                       ]
                    },
                    "phase_3":{
                       "description":"Third phase current properties.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.CurrentNoPowerProperties"
                          }
                       ]
                    }
                 }
              }
           ]
        },
        "Device.Modbus.GoodWeSdtMsDnsXsInverter":{
           "description":"Modbus GoodWe Inverter series SDT/MS/DNS/XS representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.Modbus.GoodWeInverter"
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Modbus.GoodWeSdtMsDnsXsInverter"
           }
        },
        "Device.Modbus.GoodWeMtSmtInverter":{
           "description":"Modbus GoodWe Inverter series MT/SMT representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.Modbus.GoodWeInverter"
              },
              {
                 "type":"object",
                 "required":[
                    "power_to_grid",
                    "pv_3",
                    "pv_4"
                 ],
                 "properties":{
                    "power_to_grid":{
                       "description":"Current power fed to (positive number) or consumed from (negative number) the power grid.<br>Unit: W with three decimal number, multiplied by 1000 (mW)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":500
                    },
                    "pv_3":{
                       "description":"First group of photovoltaic panels current properties.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.CurrentProperties"
                          }
                       ]
                    },
                    "pv_4":{
                       "description":"First group of photovoltaic panels current properties.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.CurrentProperties"
                          }
                       ]
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Modbus.GoodWeMtSmtInverter"
           }
        },
        "Device.Modbus.HeatEcoHeatPump":{
           "description":"Modbus HeatEco Heat Pump representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AGenericDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "work_mode",
                    "fixed_heating_target_temperature",
                    "fixed_cooling_target_temperature",
                    "bottom_hysteresis",
                    "top_hysteresis",
                    "pid",
                    "water_inlet_temperature",
                    "water_outlet_temperature",
                    "temperature_outdoor",
                    "discharge_gas_temperature",
                    "suction_gas_temperature",
                    "discharge_pressure",
                    "suction_pressure",
                    "coil_temperature",
                    "evaporation_temperature",
                    "flow_switch_active",
                    "emergency_switch_active",
                    "terminal_signal_switch_active",
                    "sequential_protection_switch_active",
                    "fan_high_speed_active",
                    "fan_low_speed_active",
                    "four_way_valve_active",
                    "pump_active",
                    "three_way_valve_active",
                    "crankshaft_heater_active",
                    "chassis_heater_active",
                    "electric_heater_active",
                    "fan_output",
                    "pump_output",
                    "fan_mode",
                    "pump_mode",
                    "eev_opening",
                    "heat_demand",
                    "cool_demand"
                 ],
                 "properties":{
                    "work_mode":{
                       "description":"Current work mode of the heat pump.",
                       "type":"string",
                       "readOnly":true,
                       "enum":[
                          "cooling_only",
                          "heating_only",
                          "dhw_only",
                          "cooling_with_dhw",
                          "heating_with_dhw"
                       ],
                       "example":"heating"
                    },
                    "fixed_heating_target_temperature":{
                       "description":"Target heating temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "minimum":100,
                       "maximum":1000,
                       "example":300
                    },
                    "fixed_cooling_target_temperature":{
                       "description":"Target cooling temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "minimum":100,
                       "maximum":400,
                       "example":210
                    },
                    "bottom_hysteresis":{
                       "description":"Damper factor, which will protect from continuous on/off switching when current temperature is below target value.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "minimum":10,
                       "maximum":150,
                       "multipleOf":0.1,
                       "example":20
                    },
                    "top_hysteresis":{
                       "description":"Damper factor, which will protect from continuous on/off switching when current temperature is above target value.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "minimum":0,
                       "maximum":50,
                       "multipleOf":0.1,
                       "example":20
                    },
                    "pid":{
                       "description":"PID controller parameters.",
                       "type":"object",
                       "required":[
                          "proportional_gain",
                          "integral_time",
                          "differential_time"
                       ],
                       "properties":{
                          "proportional_gain":{
                             "description":"(Kp) Proportional gain factor of PID controller.",
                             "type":"integer",
                             "minimum":10,
                             "maximum":9990,
                             "multipleOf":0.1,
                             "example":20
                          },
                          "integral_time":{
                             "description":"(Ti) Integral time factor of PID controller.",
                             "type":"integer",
                             "minimum":0,
                             "maximum":9999,
                             "example":1
                          },
                          "differential_time":{
                             "description":"(Td) Differential time factor of PID controller.",
                             "type":"integer",
                             "minimum":0,
                             "maximum":9999,
                             "example":1
                          }
                       }
                    },
                    "water_inlet_temperature":{
                       "description":"Water inlet temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":500
                    },
                    "water_outlet_temperature":{
                       "description":"Water outlet temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":500
                    },
                    "temperature_outdoor":{
                       "description":"Outdoor temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":100
                    },
                    "discharge_gas_temperature":{
                       "description":"Discharge Gas temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":500
                    },
                    "suction_gas_temperature":{
                       "description":"Suction Gas temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":500
                    },
                    "discharge_pressure":{
                       "description":"Discharge pressure. <br> Unit: Pascals.",
                       "type":"integer",
                       "readOnly":true,
                       "example":30
                    },
                    "suction_pressure":{
                       "description":"Suction pressure. <br> Unit: Pascals.",
                       "type":"integer",
                       "readOnly":true,
                       "example":30
                    },
                    "coil_temperature":{
                       "description":"Coil temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":300
                    },
                    "evaporation_temperature":{
                       "description":"Evaporation temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":300
                    },
                    "flow_switch_active":{
                       "description":"Indicates flow switch state.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    },
                    "emergency_switch_active":{
                       "description":"Indicates emergency switch state.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    },
                    "terminal_signal_switch_active":{
                       "description":"Indicates terminal signal switch state.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    },
                    "sequential_protection_switch_active":{
                       "description":"Indicates sequential protection switch state.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    },
                    "fan_high_speed_active":{
                       "description":"Indicates whether fan high speed is active.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    },
                    "fan_low_speed_active":{
                       "description":"Indicates whether fan low speed is active.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    },
                    "four_way_valve_active":{
                       "description":"Indicates whether four way valve is active.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    },
                    "pump_active":{
                       "description":"Indicates whether pump is active.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    },
                    "three_way_valve_active":{
                       "description":"Indicates whether three way valve is active.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    },
                    "crankshaft_heater_active":{
                       "description":"Indicates electric heater of crankshaft is active.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    },
                    "chassis_heater_active":{
                       "description":"Indicates electric heater of chassis is active.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    },
                    "electric_heater_active":{
                       "description":"Indicates electric heater activation state.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    },
                    "fan_output":{
                       "description":"Current fan output value. <br> Unit: % with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":300
                    },
                    "pump_output":{
                       "description":"Current pump output value. <br> Unit: % with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":300
                    },
                    "fan_mode":{
                       "description":"Current fan mode.",
                       "type":"string",
                       "enum":[
                          "day",
                          "night",
                          "eco",
                          "pressure"
                       ],
                       "example":"eco"
                    },
                    "pump_mode":{
                       "description":"Current pump mode.",
                       "type":"string",
                       "enum":[
                          "normal",
                          "demand",
                          "interval"
                       ],
                       "example":"normal"
                    },
                    "eev_opening":{
                       "description":"Current opening of electrinc expansion valve. <br> Unit: %.",
                       "type":"integer",
                       "readOnly":true,
                       "example":30
                    },
                    "heat_demand":{
                       "description":"Informs device that heat is demanded or not. Indirectly controls the heat pump work mode.",
                       "type":"boolean",
                       "example":false
                    },
                    "cool_demand":{
                       "description":"Informs device that cool is demanded or not. Indirectly controls the heat pump work mode.",
                       "type":"boolean",
                       "example":false
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Modbus.HeatEcoHeatPump/value"
           }
        },
        "Device.Modbus.HeatEcoMainDhw":{
           "description":"Modbus HeatEco MainDhw representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.Modbus.MainDhw"
              },
              {
                 "type":"object",
                 "required":[
                    "target_temperature",
                    "bottom_hysteresis",
                    "top_hysteresis",
                    "dhw_demand"
                 ],
                 "properties":{
                    "target_temperature":{
                       "description":"Target water temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "minimum":100,
                       "maximum":1000,
                       "multipleOf":0.1,
                       "example":500
                    },
                    "bottom_hysteresis":{
                       "description":"Damper factor, which will protect from continuous on/off switching when current temperature is below target value.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "minimum":10,
                       "maximum":150,
                       "multipleOf":0.1,
                       "example":20
                    },
                    "top_hysteresis":{
                       "description":"Damper factor, which will protect from continuous on/off switching when current temperature is above target value.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "minimum":0,
                       "maximum":50,
                       "multipleOf":0.1,
                       "example":20
                    },
                    "dhw_demand":{
                       "description":"Domestic Hot Water demand.",
                       "type":"boolean",
                       "example":true
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Modbus.HeatEcoMainDhw/value"
           }
        },
        "Device.Modbus.SolisInverter":{
           "description":"Modbus Solis Inverter representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AGenericDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "run_mode",
                    "power_to_grid",
                    "energy_produced_total",
                    "energy_produced_today",
                    "pv_total_active_power",
                    "grid_total_active_power",
                    "pv_1",
                    "pv_2",
                    "pv_3",
                    "pv_4",
                    "phase_1",
                    "phase_2",
                    "phase_3",
                    "active_power_limit"
                 ],
                 "properties":{
                    "run_mode":{
                       "description":"Inverter current run mode.",
                       "type":"string",
                       "readOnly":true,
                       "enum":[
                          "unknown",
                          "normal",
                          "initializing",
                          "grid_off",
                          "fault_to_skip",
                          "standby",
                          "derating",
                          "limitating",
                          "backup_ov_load",
                          "grid_surge",
                          "fan_fault"
                       ],
                       "example":"normal"
                    },
                    "power_to_grid":{
                       "description":"Current power fed to (positive number) or consumed from (negative number) the power grid.<br>Unit: W with three decimal number, multiplied by 1000 (mW)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":-500
                    },
                    "energy_produced_total":{
                       "description":"Total amount of energy produced by PV over a lifetime.<br>Unit: kWh with one decimal number, multiplied by 1000 (Wh).",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":10000
                    },
                    "energy_produced_today":{
                       "description":"Amount of energy produced by PV today.<br>Unit: kWh with one decimal number, multiplied by 1000 (Wh).",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":200
                    },
                    "pv_total_active_power":{
                       "description":"Current total power produced by all photovoltaic panels. <br> Unit: W with three decimal number, multiplied by 1000 (mW)",
                       "type":"integer",
                       "multipleOf":0.001,
                       "readOnly":true,
                       "example":500
                    },
                    "grid_total_active_power":{
                       "description":"Current total power on the grid.<br>Unit: W with three decimal number, multiplied by 1000 (mW)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":5000
                    },
                    "pv_1":{
                       "description":"First group of photovoltaic panels current properties.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.CurrentProperties"
                          }
                       ]
                    },
                    "pv_2":{
                       "description":"Second group of photovoltaic panels current properties.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.CurrentProperties"
                          }
                       ]
                    },
                    "pv_3":{
                       "description":"Third group of photovoltaic panels current properties.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.CurrentProperties"
                          }
                       ]
                    },
                    "pv_4":{
                       "description":"Fourth group of photovoltaic panels current properties.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.CurrentProperties"
                          }
                       ]
                    },
                    "phase_1":{
                       "description":"First phase current properties.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.CurrentNoPowerProperties"
                          }
                       ]
                    },
                    "phase_2":{
                       "description":"Second phase current properties.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.CurrentNoPowerProperties"
                          }
                       ]
                    },
                    "phase_3":{
                       "description":"Third phase current properties.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.CurrentNoPowerProperties"
                          }
                       ]
                    },
                    "active_power_limit":{
                       "description":"Percent of max power at which inverter is going to work. Unit: percent.",
                       "type":"integer",
                       "minimum":0,
                       "maximum":100,
                       "example":100
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Modbus.SolisInverter/value"
           }
        },
        "Device.Modbus.HuaweiSUN2000Inverter":{
           "description":"Modbus Huawei SUN2000 Inverter representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AGenericDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "run_mode",
                    "pv_1",
                    "pv_2",
                    "pv_3",
                    "pv_4",
                    "pv_total_active_power",
                    "energy_produced_total",
                    "energy_produced_today",
                    "power_to_grid",
                    "phase_1",
                    "phase_2",
                    "phase_3",
                    "model_id",
                    "inverter_model"
                 ],
                 "properties":{
                    "run_mode":{
                       "description":"Inverter current run mode.",
                       "type":"string",
                       "readOnly":true,
                       "enum":[
                          "standby",
                          "starting",
                          "on_grid",
                          "grid_power_limited",
                          "grid_self_derating",
                          "shutdown_fault",
                          "shutdown_command",
                          "grid_scheduling",
                          "spot_check_ready",
                          "spot_checking",
                          "inspecting",
                          "afci_self_check",
                          "iv_scanning",
                          "dc_input_detection",
                          "running"
                       ],
                       "example":"running"
                    },
                    "pv_1":{
                       "description":"First group of photovoltaic panels current properties.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.CurrentProperties"
                          }
                       ]
                    },
                    "pv_2":{
                       "description":"Second group of photovoltaic panels current properties.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.CurrentProperties"
                          }
                       ]
                    },
                    "pv_3":{
                       "description":"Third group of photovoltaic panels current properties.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.CurrentProperties"
                          }
                       ]
                    },
                    "pv_4":{
                       "description":"Fourth group of photovoltaic panels current properties.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.CurrentProperties"
                          }
                       ]
                    },
                    "pv_total_active_power":{
                       "description":"Current total power produced by all photovoltaic panels. <br> Unit: W with three decimal numbers, multiplied by 1000 (mW)",
                       "type":"integer",
                       "multipleOf":0.001,
                       "readOnly":true,
                       "example":500
                    },
                    "energy_produced_total":{
                       "description":"Total amount of energy produced by PV over a lifetime.<br>Unit: kWh with three decimal numbers, multiplied by 1000 (Wh).",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":10000
                    },
                    "energy_produced_today":{
                       "description":"Amount of energy produced by PV today.<br>Unit: kWh with three decimal numbers, multiplied by 1000 (Wh).",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":200
                    },
                    "power_to_grid":{
                       "description":"Current power fed to (positive number) or consumed from (negative number) the power grid.<br>Unit: W with three decimal number, multiplied by 1000 (mW)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":-500
                    },
                    "phase_1":{
                       "description":"First phase current properties.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.CurrentNoPowerProperties"
                          }
                       ]
                    },
                    "phase_2":{
                       "description":"Second phase current properties.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.CurrentNoPowerProperties"
                          }
                       ]
                    },
                    "phase_3":{
                       "description":"Third phase current properties.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.CurrentNoPowerProperties"
                          }
                       ]
                    },
                    "model_id":{
                       "description":"Numeric model ID read from the device.",
                       "type":"integer",
                       "readOnly":true,
                       "example":55
                    },
                    "inverter_model":{
                       "description":"Descriptive model of the connected inverter.",
                       "type":"string",
                       "readOnly":true,
                       "example":"SUN2000-60KTL-M0"
                    },
                    "active_power_limit":{
                       "description":"Inverter output power limit. Parameter is <b>optional</b>. Available when function is supported - check if `power_control_support` label is provided.",
                       "type":"integer",
                       "minimum":0,
                       "maximum":100,
                       "example":100
                    },
                    "active_power_control_mode":{
                       "description":"Inverter output power control mode. Parameter is <b>optional</b>. Available when function is supported - check if `power_control_mode_support` label is provided.",
                       "type":"string",
                       "enum":[
                          "unknown",
                          "unlimited",
                          "di_active_scheduling",
                          "zero_power_grid_connection",
                          "power_limited_grid_connection_kw",
                          "power_limited_grid_connection_percent"
                       ],
                       "example":"unlimited"
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Modbus.HuaweiSUN2000Inverter/value"
           }
        },
        "Device.Modbus.HuaweiSUN2000Battery":{
           "description":"Huawei SUN2000 Battery representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.Modbus.Battery"
              },
              {
                 "type":"object",
                 "required":[
                    "state",
                    "charge_power",
                    "energy_charged_total",
                    "energy_discharged_total",
                    "maximum_charging_power",
                    "maximum_discharging_power",
                    "charging_cutoff_capacity",
                    "discharge_cutoff_capacity",
                    "soc"
                 ],
                 "properties":{
                    "state":{
                       "description":"Battery current state.",
                       "type":"string",
                       "readOnly":true,
                       "enum":[
                          "offline",
                          "standby",
                          "running",
                          "fault",
                          "sleep_mode"
                       ],
                       "example":"running"
                    },
                    "charge_power":{
                       "description":"Current charing (positive number) or discharging (negative number) power.<br>Unit: W with three decimal number, multiplied by 1000 (mW)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":-500
                    },
                    "energy_charged_total":{
                       "description":"Amount of energy charged to the battery over a lifetime.<br>Unit: kwh with one decimal number, multiplied by 1000 (Wh)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":50000
                    },
                    "energy_discharged_total":{
                       "description":"Amount of energy consumed from the battery over a lifetime.<br>Unit: kwh with one decimal number, multiplied by 1000 (Wh)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":50000
                    },
                    "maximum_charging_power":{
                       "description":"Maximum charging power.<br>Unit: W with three decimal number, multiplied by 1000 (mW).",
                       "type":"integer",
                       "minimum":100000,
                       "maximum":2500000,
                       "multipleOf":0.001,
                       "example":2500000
                    },
                    "maximum_discharging_power":{
                       "description":"Maximum discharging power.<br>Unit: W with three decimal number, multiplied by 1000 (mW).",
                       "type":"integer",
                       "minimum":100000,
                       "maximum":2500000,
                       "multipleOf":0.001,
                       "example":2500000
                    },
                    "charging_cutoff_capacity":{
                       "description":"Charging cutoff capacity.<br>Unit: % with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "minimum":900,
                       "maximum":1000,
                       "multipleOf":0.1,
                       "example":950
                    },
                    "discharge_cutoff_capacity":{
                       "description":"Discharge cutoff capacity.<br>Unit: % with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "minimum":120,
                       "maximum":200,
                       "multipleOf":0.1,
                       "example":150
                    },
                    "soc":{
                       "description":"Current state of charge.<br>Unit: %",
                       "type":"integer",
                       "readOnly":true,
                       "example":50
                    },
                    "forced_charging_duration":{
                       "description":"Forced charge/discharge duration.<br>Unit: minutes.<br>Parameter is <b>optional</b>. Available when function is supported - check if `battery_charge_support` label is provided.",
                       "type":"integer",
                       "readOnly":true,
                       "example":30
                    },
                    "forced_charging_power":{
                       "description":"Forced charge (positive) or discharge (negative) power.<br>Unit: Watt.<br>Parameter is <b>optional</b>. Available when function is supported - check if `battery_charge_support` label is provided.",
                       "type":"integer",
                       "readOnly":true,
                       "example":300
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Modbus.HuaweiSUN2000Battery/value"
           }
        },
        "Device.Modbus.HuaweiSUN2000EnergyMeter":{
           "description":"Huawei SUN2000 Energy meter representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AGenericDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "total_active_power"
                 ],
                 "properties":{
                    "total_active_power":{
                       "description":"Current power fed to (negative number) or consumed from (positive number) the power grid.<br>Unit: W with three decimal number, multiplied by 1000 (mW)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":5000
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Modbus.HuaweiSUN2000EnergyMeter/value"
           }
        },
        "Device.Modbus.KM1EnergyMeterConverter":{
           "description":"Converter KM1 Energy Meter representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AGenericDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "p1_version_id",
                    "tariff_1",
                    "tariff_2",
                    "tariff_indicator",
                    "power_to_grid",
                    "power_from_grid",
                    "number_of_power_failures",
                    "number_of_long_power_failures",
                    "total_active_power",
                    "phase_1",
                    "phase_2",
                    "phase_3",
                    "software_version",
                    "energy_consumed_total",
                    "energy_fed_total",
                    "p1_meter_no_communication_time",
                    "parsing_errors",
                    "uses_energy_of_building"
                 ],
                 "properties":{
                    "p1_version_id":{
                       "description":"P1 version information.",
                       "type":"integer",
                       "readOnly":true,
                       "example":50
                    },
                    "tariff_1":{
                       "description":"Tariff 1 related informations.",
                       "type":"object",
                       "required":[
                          "energy_fed_total",
                          "energy_consumed_total"
                       ],
                       "properties":{
                          "energy_fed_total":{
                             "description":"Total energy delivered by client.<br>Unit: kWh with three decimal numbers, multiplied by 1000 (Wh).",
                             "type":"integer",
                             "readOnly":true,
                             "multipleOf":0.001,
                             "example":1234569
                          },
                          "energy_consumed_total":{
                             "description":"Total energy delivered to client.<br>Unit: kWh with three decimal numbers, multiplied by 1000 (Wh).",
                             "type":"integer",
                             "readOnly":true,
                             "multipleOf":0.001,
                             "example":1234569
                          }
                       }
                    },
                    "tariff_2":{
                       "description":"Tariff 2 related informations.",
                       "type":"object",
                       "required":[
                          "energy_fed_total",
                          "energy_consumed_total"
                       ],
                       "properties":{
                          "energy_fed_total":{
                             "description":"Total energy delivered by client.<br>Unit: kWh with three decimal numbers, multiplied by 1000 (Wh).",
                             "type":"integer",
                             "readOnly":true,
                             "multipleOf":0.001,
                             "example":1234569
                          },
                          "energy_consumed_total":{
                             "description":"Total energy delivered to client.<br>Unit: kWh with three decimal numbers, multiplied by 1000 (Wh).",
                             "type":"integer",
                             "readOnly":true,
                             "multipleOf":0.001,
                             "example":1234569
                          }
                       }
                    },
                    "tariff_indicator":{
                       "description":"Electricity tariff indicator.",
                       "type":"integer",
                       "readOnly":true,
                       "example":1
                    },
                    "power_to_grid":{
                       "description":"Current power fed to the power grid.<br>Unit: W with three decimal number, multiplied by 1000 (mW)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":550000
                    },
                    "power_from_grid":{
                       "description":"Current power consumed from the power grid.<br>Unit: W with three decimal number, multiplied by 1000 (mW)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":340000
                    },
                    "number_of_power_failures":{
                       "description":"Number of power failures.",
                       "type":"integer",
                       "readOnly":true,
                       "example":0
                    },
                    "number_of_long_power_failures":{
                       "description":"Number of long power failures.",
                       "type":"integer",
                       "readOnly":true,
                       "example":0
                    },
                    "phase_1":{
                       "description":"First phase current properties.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.P1PhaseProperties"
                          }
                       ]
                    },
                    "phase_2":{
                       "description":"Second phase current properties.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.P1PhaseProperties"
                          }
                       ]
                    },
                    "phase_3":{
                       "description":"Third phase current properties.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.P1PhaseProperties"
                          }
                       ]
                    },
                    "software_version":{
                       "description":"KM1 Converter software version.",
                       "type":"string",
                       "readOnly":true,
                       "example":"Converter KM1 Energy Meter v1.2.3"
                    },
                    "energy_fed_total":{
                       "description":"Total energy delivered by client for meter without tariffs.<br>Unit: kWh with three decimal numbers, multiplied by 1000 (Wh).",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":1234569
                    },
                    "energy_consumed_total":{
                       "description":"Total energy delivered to client for meter without tariffs.<br>Unit: kWh with three decimal numbers, multiplied by 1000 (Wh).",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":1234569
                    },
                    "p1_meter_no_communication_time":{
                       "description":"Number of minutes without P1 communication. 0 if connection is good.",
                       "type":"integer",
                       "readOnly":true,
                       "example":0
                    },
                    "parsing_errors":{
                       "description":"Number of parsing errors the converter encountered.",
                       "type":"integer",
                       "readOnly":true,
                       "example":0
                    },
                    "uses_energy_of_building":{
                       "description":"Indicates if energy meter is used to measure energy of device inside the building. (Not main energy meter).",
                       "type":"boolean",
                       "example":false
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Modbus.KM1EnergyMeterConverter/value"
           }
        },
        "Device.Modbus.AmpowrAmpiHomeInverter":{
           "description":"Ampowr Ampi Home Inverter representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AGenericDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "pv_1",
                    "pv_2",
                    "pv_total_active_power",
                    "energy_produced_total",
                    "energy_produced_month",
                    "energy_produced_year",
                    "energy_produced_today",
                    "inverter_model",
                    "system_state",
                    "radiator_temperature",
                    "inverter_working_mode",
                    "pv_input_mode",
                    "power_control_enabled",
                    "active_power_limit"
                 ],
                 "properties":{
                    "pv_1":{
                       "description":"First group of photovoltaic panels current properties.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.CurrentProperties"
                          }
                       ]
                    },
                    "pv_2":{
                       "description":"Second group of photovoltaic panels current properties.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.CurrentProperties"
                          }
                       ]
                    },
                    "pv_total_active_power":{
                       "description":"Current total power produced by all photovoltaic panels. <br> Unit: W with three decimal numbers, multiplied by 1000 (mW)",
                       "type":"integer",
                       "multipleOf":0.001,
                       "readOnly":true,
                       "example":500
                    },
                    "energy_produced_total":{
                       "description":"Total amount of energy produced by PV over a lifetime.<br>Unit: kWh with three decimal numbers, multiplied by 1000 (Wh).",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":10000
                    },
                    "energy_produced_month":{
                       "description":"Amount of energy produced by PV this month.<br>Unit: kWh with three decimal numbers, multiplied by 1000 (Wh).",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":10000
                    },
                    "energy_produced_year":{
                       "description":"Amount of energy produced by PV this year.<br>Unit: kWh with three decimal numbers, multiplied by 1000 (Wh).",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":10000
                    },
                    "energy_produced_today":{
                       "description":"Amount of energy produced by PV today.<br>Unit: kWh with three decimal numbers, multiplied by 1000 (Wh).",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":200
                    },
                    "inverter_model":{
                       "description":"Inverter model.",
                       "type":"string",
                       "readOnly":true,
                       "example":"AH-KE-INV-3.68-I"
                    },
                    "system_state":{
                       "description":"State of the inverter.",
                       "type":"string",
                       "readOnly":true,
                       "enum":[
                          "initialization",
                          "standby",
                          "hybrid_grid",
                          "off_network",
                          "mains_charging",
                          "pv_charging",
                          "mains_bypass",
                          "fault",
                          "debug",
                          "forced_charge",
                          "power_on_device_separately",
                          "dsp_burn",
                          "mcu_burn",
                          "permanent_error"
                       ],
                       "example":"standby"
                    },
                    "radiator_temperature":{
                       "description":"Radiator temperature.<br>Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "readOnly":true,
                       "example":450
                    },
                    "inverter_working_mode":{
                       "description":"Inverter working mode.",
                       "type":"string",
                       "enum":[
                          "self_consumption",
                          "peak_shift",
                          "battery_priority"
                       ],
                       "example":"self_consumption"
                    },
                    "pv_input_mode":{
                       "description":"Input mode of photovoltaic.",
                       "type":"string",
                       "enum":[
                          "indenpendend",
                          "parallel",
                          "constant_voltage"
                       ],
                       "example":"indenpendend"
                    },
                    "power_control_enabled":{
                       "description":"Allows to set power control settings.",
                       "type":"boolean",
                       "example":true
                    },
                    "active_power_limit":{
                       "description":"Current power work limit.<br>Unit: %<br>**NOTE:** Can only be changed when `power_control_enabled` is set to `true`.",
                       "type":"integer",
                       "minimum":0,
                       "maximum":100,
                       "example":100
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Modbus.AmpowrAmpiHomeInverter/value"
           }
        },
        "Device.Modbus.AmpowrAmpiHomeEnergyMeter1Phase":{
           "description":"Ampowr Ampi Home 1 Phase Energy Meter representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AGenericDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "total_active_power",
                    "energy_consumed_today",
                    "energy_consumed_month",
                    "energy_consumed_year",
                    "energy_consumed_total",
                    "energy_fed_today",
                    "energy_fed_month",
                    "energy_fed_year",
                    "energy_fed_total",
                    "phase_1",
                    "uses_energy_of_building"
                 ],
                 "properties":{
                    "total_active_power":{
                       "description":"Current total power on the grid.<br>Unit: W with three decimal number, multiplied by 1000 (mW)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":5000
                    },
                    "energy_consumed_today":{
                       "description":"Energy consumption today.<br>Unit: kWh, multiplied by 1000 (Wh)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":10000
                    },
                    "energy_consumed_month":{
                       "description":"Energy consumption this month.<br>Unit: kWh, multiplied by 1000 (Wh)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":10000
                    },
                    "energy_consumed_year":{
                       "description":"Energy consumption this year.<br>Unit: kWh, multiplied by 1000 (Wh)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":10000
                    },
                    "energy_consumed_total":{
                       "description":"Energy consumption lifetime.<br>Unit: kWh, multiplied by 1000 (Wh)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":100000
                    },
                    "energy_fed_today":{
                       "description":"Energy feed today.<br>Unit: kWh, multiplied by 1000 (Wh)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":1000
                    },
                    "energy_fed_month":{
                       "description":"Energy feed this month.<br>Unit: kWh, multiplied by 1000 (Wh)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":1000
                    },
                    "energy_fed_year":{
                       "description":"Energy feed this year.<br>Unit: kWh, multiplied by 1000 (Wh)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":1000
                    },
                    "energy_fed_total":{
                       "description":"Energy feed lifetime.<br>Unit: kWh, multiplied by 1000 (Wh)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":10000
                    },
                    "phase_1":{
                       "description":"First phase current properties.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.CurrentProperties"
                          }
                       ]
                    },
                    "uses_energy_of_building":{
                       "description":"Indicates if energy meter is used to measure energy of device inside the building. (Not main energy meter).",
                       "type":"boolean",
                       "example":false
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Modbus.AmpowrAmpiHomeEnergyMeter1Phase/value"
           }
        },
        "Device.Modbus.AmpowrAmpiHomeEnergyMeter3Phase":{
           "description":"Ampowr Ampi Home 3 Phase Energy Meter representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.Modbus.AmpowrAmpiHomeEnergyMeter1Phase"
              },
              {
                 "type":"object",
                 "required":[
                    "phase_2",
                    "phase_3"
                 ],
                 "properties":{
                    "phase_2":{
                       "description":"Second phase current properties.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.CurrentProperties"
                          }
                       ]
                    },
                    "phase_3":{
                       "description":"Third phase current properties.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.CurrentProperties"
                          }
                       ]
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Modbus.AmpowrAmpiHomeEnergyMeter3Phase/value"
           }
        },
        "Device.Modbus.AmpowrAmpiHomeBattery":{
           "description":"Ampowr Ampi Home Battery representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.Modbus.Battery"
              },
              {
                 "type":"object",
                 "required":[
                    "energy_charged_total",
                    "energy_discharged_total",
                    "radiator_temperature",
                    "depth_of_discharge_enabled",
                    "depth_of_discharge_bms_enabled",
                    "off_grid_depth_of_discharge",
                    "on_grid_depth_of_discharge",
                    "voltage",
                    "current",
                    "charge_power",
                    "soc",
                    "temperature",
                    "charge_voltage",
                    "charge_current_limit",
                    "discharge_current_limit",
                    "maximum_discharge_power",
                    "maximum_charge_power",
                    "grid_max_soc_charge",
                    "forced_state",
                    "inverter_working_mode"
                 ],
                 "properties":{
                    "energy_charged_total":{
                       "description":"Amount of energy charged to the battery over a lifetime.<br>Unit: kwh with one decimal number, multiplied by 1000 (Wh)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":50000
                    },
                    "energy_discharged_total":{
                       "description":"Amount of energy consumed from the battery over a lifetime.<br>Unit: kwh with one decimal number, multiplied by 1000 (Wh)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":50000
                    },
                    "radiator_temperature":{
                       "description":"Radiator temperature.<br>Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "readOnly":true,
                       "example":450
                    },
                    "depth_of_discharge_enabled":{
                       "description":"Allows to set depth of discharge.",
                       "type":"boolean",
                       "example":true
                    },
                    "depth_of_discharge_bms_enabled":{
                       "description":"Allows to set depth of discharge BMS.",
                       "type":"boolean",
                       "example":true
                    },
                    "off_grid_depth_of_discharge":{
                       "description":"Off grid depth of discharge.<br> Unit: %.<br>**NOTE:** Can only be changed when `depth_of_discharge_enabled` and `depth_of_discharge_bms_enabled` is set to `true`.",
                       "type":"integer",
                       "minimum":5,
                       "maximum":90,
                       "example":90
                    },
                    "on_grid_depth_of_discharge":{
                       "description":"On grid depth of discharge.<br> Unit: %.<br>**NOTE:** Can only be changed when `depth_of_discharge_enabled` and `depth_of_discharge_bms_enabled` is set to `true`.",
                       "type":"integer",
                       "minimum":10,
                       "maximum":90,
                       "example":90
                    },
                    "voltage":{
                       "description":"Battery voltage.<br> Unit: V with three decimal number, multiplied by 1000 (mV).",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":150000
                    },
                    "current":{
                       "description":"Battery current.<br> Unit: A with three decimal number, multiplied by 1000 (mA).",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":10000
                    },
                    "charge_power":{
                       "description":"Current charing (positive number) or discharging (negative number) power.<br>Unit: W with three decimal number, multiplied by 1000 (mW)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":-500
                    },
                    "soc":{
                       "description":"Current state of charge.<br>Unit: %",
                       "type":"integer",
                       "readOnly":true,
                       "example":50
                    },
                    "temperature":{
                       "description":"Current battery temperature.<br>Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":350
                    },
                    "charge_voltage":{
                       "description":"Voltage of charging.<br> Unit: V with three decimal number, multiplied by 1000 (mV).",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":150000
                    },
                    "charge_current_limit":{
                       "description":"Charge current limit.<br> Unit: A with three decimal number, multiplied by 1000 (mA).",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":10000
                    },
                    "discharge_current_limit":{
                       "description":"Discharge current limit.<br> Unit: A with three decimal number, multiplied by 1000 (mA).",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":10000
                    },
                    "maximum_discharge_power":{
                       "description":"Maximum discharge power.<br>Unit:%",
                       "type":"integer",
                       "minimum":0,
                       "maximum":100,
                       "example":100
                    },
                    "maximum_charge_power":{
                       "description":"Maximum charge power.<br>Unit:%",
                       "type":"integer",
                       "minimum":0,
                       "maximum":100,
                       "example":100
                    },
                    "grid_max_soc_charge":{
                       "description":"Maximum SOC charge of the grid.<br>Unit:%",
                       "type":"integer",
                       "minimum":20,
                       "maximum":100,
                       "example":100
                    },
                    "forced_state":{
                       "description":"Forced state of the battery. Set by user.<br>Can only be changed if `inverter_working_mode` is `peak_shift`.",
                       "type":"string",
                       "enum":[
                          "charge",
                          "discharge",
                          "none"
                       ],
                       "example":"charge"
                    },
                    "inverter_working_mode":{
                       "description":"Related inverter working mode.",
                       "type":"string",
                       "enum":[
                          "self_consumption",
                          "peak_shift",
                          "battery_priority"
                       ],
                       "readOnly":true,
                       "example":"self_consumption"
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Modbus.AmpowrAmpiHomeBattery/value"
           }
        },
        "Device.Modbus.HeatcompHCEV01CarCharger":{
           "description":"Heatcomp HC EV-01 Car Charger implementation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.Modbus.CarCharger"
              },
              {
                 "type":"object",
                 "required":[
                    "state",
                    "error",
                    "temperature",
                    "charge_time",
                    "current_limit",
                    "postpone_time",
                    "charge_time_left"
                 ],
                 "properties":{
                    "state":{
                       "description":"Current car charger state.",
                       "type":"string",
                       "readOnly":true,
                       "enum":[
                          "initializing",
                          "standby",
                          "connection_status",
                          "charging",
                          "failure",
                          "end_charging",
                          "unknown"
                       ],
                       "example":"charging"
                    },
                    "error":{
                       "description":"Current car charger error.",
                       "type":"string",
                       "readOnly":true,
                       "enum":[
                          "leakage_error",
                          "communication_abnormality",
                          "too_high_temperature",
                          "under_voltage_l1",
                          "under_voltage_l2",
                          "under_voltage_l3",
                          "over_voltage_l1",
                          "over_voltage_l2",
                          "over_voltage_l3",
                          "over_current",
                          "emergency_stop",
                          "none"
                       ],
                       "example":"none"
                    },
                    "temperature":{
                       "description":"Current car charger temperature.<br>Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":450
                    },
                    "charge_time":{
                       "description":"Current car charger charging time.<br>Unit: minutes",
                       "type":"integer",
                       "readOnly":true,
                       "example":120
                    },
                    "current_limit":{
                       "description":"Limit of charging current.<br>Unit: A, multiplied by 1000 (mA).",
                       "type":"integer",
                       "minimum":0,
                       "maximum":32000,
                       "multipleOf":0.001,
                       "example":20000
                    },
                    "postpone_time":{
                       "description":"Time to postpone charging.<br>Unit: hours.",
                       "type":"integer",
                       "minimum":0,
                       "maximum":15,
                       "example":10
                    },
                    "charge_time_left":{
                       "description":"Time to stop charging in time.<br>Unit:hours.",
                       "type":"integer",
                       "minimum":0,
                       "maximum":15,
                       "example":7
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Modbus.HeatcompHCEV01CarCharger/value"
           }
        },
        "Device.Modbus.DaikinAlthermaHeatPump":{
           "description":"Modbus Daikin Altherma Heat Pump representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AGenericDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "work_mode",
                    "temperature_outdoor",
                    "heating_supply",
                    "heating_return",
                    "evaporation_temperature",
                    "compressor_running",
                    "circulation_pump_running",
                    "heating_target_temperature",
                    "cooling_target_temperature",
                    "heat_demand",
                    "cool_demand",
                    "heating_water_target_temperature",
                    "cooling_water_target_temperature",
                    "quiet_mode",
                    "weather_dependent_mode",
                    "weather_dependent_mode_heating_slope_offset",
                    "weather_dependent_mode_cooling_slope_offset",
                    "electric_heater_active",
                    "disinfection_active",
                    "defrost_startup_active",
                    "hot_start_active",
                    "three_way_valve_state",
                    "operation_mode",
                    "pre_heater_water_temperature",
                    "flow_rate"
                 ],
                 "properties":{
                    "work_mode":{
                       "description":"Current work mode of the heat pump.",
                       "type":"string",
                       "enum":[
                          "heating",
                          "cooling",
                          "automatic"
                       ],
                       "example":"heating"
                    },
                    "temperature_outdoor":{
                       "description":"Outdoor temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":100
                    },
                    "heating_supply":{
                       "description":"Heating supply temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":300
                    },
                    "heating_return":{
                       "description":"Heating return temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":150
                    },
                    "evaporation_temperature":{
                       "description":"Evaporation temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":300
                    },
                    "compressor_running":{
                       "description":"Indicates if compressor is running.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":true
                    },
                    "circulation_pump_running":{
                       "description":"Indicates if circulation pump is running.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":true
                    },
                    "heating_target_temperature":{
                       "description":"Heating room target temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "minimum":120,
                       "maximum":300,
                       "example":300
                    },
                    "cooling_target_temperature":{
                       "description":"Cooling room target temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "minimum":150,
                       "maximum":350,
                       "example":210
                    },
                    "heat_demand":{
                       "description":"Informs device that heat is demanded or not. Indirectly controls the heat pump work mode.",
                       "type":"boolean",
                       "example":false
                    },
                    "cool_demand":{
                       "description":"Informs device that cool is demanded or not. Indirectly controls the heat pump work mode.",
                       "type":"boolean",
                       "example":false
                    },
                    "heating_water_target_temperature":{
                       "description":"Heating water target temperature. <br> Unit °C.",
                       "type":"integer",
                       "minimum":25,
                       "maximum":55,
                       "example":30
                    },
                    "cooling_water_target_temperature":{
                       "description":"Cooling water target temperature. <br> Unit °C.",
                       "type":"integer",
                       "minimum":5,
                       "maximum":22,
                       "example":10
                    },
                    "quiet_mode":{
                       "description":"Indicates if quiet mode operation is enabled.",
                       "type":"boolean",
                       "example":false
                    },
                    "weather_dependent_mode":{
                       "description":"Current weather dependent mode.",
                       "type":"string",
                       "enum":[
                          "fixed",
                          "weather_dependent",
                          "fixed_scheduled",
                          "weather_dependent_scheduled"
                       ],
                       "example":"fixed"
                    },
                    "weather_dependent_mode_heating_slope_offset":{
                       "description":"Weather dependent mode leaving water temperature heating setpoint offset.<br>Unit: °C.",
                       "type":"integer",
                       "minimum":-10,
                       "maximum":10,
                       "example":4
                    },
                    "weather_dependent_mode_cooling_slope_offset":{
                       "description":"Weather dependent mode leaving water temperature cooling setpoint offset.<br>Unit: °C.",
                       "type":"integer",
                       "minimum":-10,
                       "maximum":10,
                       "example":0
                    },
                    "electric_heater_active":{
                       "description":"Indicates if electric booster heater is active.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    },
                    "disinfection_active":{
                       "description":"Indicates if desinfection operation is active.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    },
                    "defrost_startup_active":{
                       "description":"Indicates if defrost or startup operation in active.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    },
                    "hot_start_active":{
                       "description":"Indicates if hot start operation is active.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    },
                    "three_way_valve_state":{
                       "description":"State of 3-way valve.",
                       "type":"string",
                       "enum":[
                          "space_heating",
                          "dhw"
                       ],
                       "readOnly":true,
                       "example":"space_heating"
                    },
                    "operation_mode":{
                       "description":"Current operation mode.",
                       "type":"string",
                       "enum":[
                          "heating",
                          "cooling"
                       ],
                       "readOnly":true,
                       "example":"heating"
                    },
                    "pre_heater_water_temperature":{
                       "description":"Leaving water temperature pre backup heater.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "readOnly":true,
                       "example":255
                    },
                    "flow_rate":{
                       "description":"Water flow rate.<br>Unit: litres/minute multiplied by 100.",
                       "type":"integer",
                       "multipleOf":0.01,
                       "readOnly":true,
                       "example":123
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Modbus.DaikinAlthermaHeatPump/value"
           }
        },
        "Device.Modbus.DaikinAlthermaMainDhw":{
           "description":"Modbus Daikin Altherma MainDhw representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.Modbus.MainDhw"
              },
              {
                 "type":"object",
                 "required":[
                    "target_temperature",
                    "dhw_demand",
                    "booster_mode_active"
                 ],
                 "properties":{
                    "target_temperature":{
                       "description":"Target water temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "minimum":300,
                       "maximum":600,
                       "multipleOf":0.1,
                       "example":500
                    },
                    "dhw_demand":{
                       "description":"Domestic Hot Water demand.",
                       "type":"boolean",
                       "example":true
                    },
                    "booster_mode_active":{
                       "description":"Indicates if booster DHW booster mode is active.",
                       "type":"boolean",
                       "example":true
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Modbus.DaikinAlthermaMainDhw/value"
           }
        },
        "Device.Modbus.DaikinAlthermaTemperatureSensor":{
           "description":"Modbus Daikin Altherma Temperature sensor representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AGenericDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "temperature"
                 ],
                 "properties":{
                    "temperature":{
                       "description":"Measured temperature value. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "example":233
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Modbus.DaikinAlthermaTemperatureSensor/value"
           }
        },
        "Device.Modbus.EcoGeoHighPowerHeatPump":{
           "description":"Modbus EcoGeo HighPower HeatPump representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AGenericDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "state",
                    "work_mode",
                    "temperature_outdoor",
                    "brine_out_temperature",
                    "brine_in_temperature",
                    "brine_pressure",
                    "heating_supply",
                    "heating_return",
                    "heating_system_pressure",
                    "electric_heater_emergency",
                    "electric_heater_active",
                    "heat_demand",
                    "cool_demand",
                    "fixed_heating_target_temperature",
                    "fixed_cooling_target_temperature",
                    "target_temperature_mode",
                    "heat_curve_base_point",
                    "heat_curve_end_point",
                    "heat_curve_end_point_outside"
                 ],
                 "properties":{
                    "state":{
                       "description":"State of the heat pump.",
                       "type":"string",
                       "enum":[
                          "on",
                          "off",
                          "emergency"
                       ],
                       "example":"on"
                    },
                    "work_mode":{
                       "description":"Current work mode of the heat pump.",
                       "type":"string",
                       "enum":[
                          "heating",
                          "cooling",
                          "automatic"
                       ],
                       "example":"heating"
                    },
                    "temperature_outdoor":{
                       "description":"Outdoor temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":100
                    },
                    "brine_out_temperature":{
                       "description":"Brine out temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":300
                    },
                    "brine_in_temperature":{
                       "description":"Brine in temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":400
                    },
                    "brine_pressure":{
                       "description":"Brine pressure. <br> Unit: Bar with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":30
                    },
                    "heating_supply":{
                       "description":"Heating supply. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":300
                    },
                    "heating_return":{
                       "description":"Heating return. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":150
                    },
                    "heating_system_pressure":{
                       "description":"Heating System pressure. <br> Unit: Bar with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":30
                    },
                    "electric_heater_emergency":{
                       "description":"Indicates electric heater emergency state.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    },
                    "electric_heater_active":{
                       "description":"Indicates electric heater activation state.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    },
                    "heat_demand":{
                       "description":"Informs device that heat is demanded or not.",
                       "type":"boolean",
                       "example":false
                    },
                    "cool_demand":{
                       "description":"Informs device that cool is demanded or not.",
                       "type":"boolean",
                       "example":false
                    },
                    "fixed_heating_target_temperature":{
                       "description":"Fixed heating target temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "minimum":250,
                       "maximum":750,
                       "example":500
                    },
                    "fixed_cooling_target_temperature":{
                       "description":"Fixed cooling target temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "minimum":60,
                       "maximum":350,
                       "example":200
                    },
                    "target_temperature_mode":{
                       "description":"Target temperature mode.",
                       "type":"string",
                       "enum":[
                          "fixed",
                          "heat_curve"
                       ],
                       "example":"fixed"
                    },
                    "heat_curve_base_point":{
                       "description":"Heat curve base point. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "minimum":0,
                       "maximum":400,
                       "example":10
                    },
                    "heat_curve_end_point":{
                       "description":"Heat curve end point. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "minimum":0,
                       "maximum":750,
                       "example":10
                    },
                    "heat_curve_end_point_outside":{
                       "description":"Heat curve end point outside temperature. <br> Unit: °C.",
                       "type":"integer",
                       "minimum":-15,
                       "maximum":0,
                       "example":-5
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Modbus.EcoGeoHighPowerHeatPump/value"
           }
        },
        "Device.Modbus.EcoGeoHighPowerMainDhw":{
           "description":"Modbus EcoGeo HighPower MainDhw representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.Modbus.MainDhw"
              },
              {
                 "type":"object",
                 "required":[
                    "target_temperature",
                    "dhw_demand"
                 ],
                 "properties":{
                    "target_temperature":{
                       "description":"Target water temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "minimum":100,
                       "maximum":990,
                       "multipleOf":0.1,
                       "example":500
                    },
                    "dhw_demand":{
                       "description":"Domestic Hot Water demand.",
                       "type":"boolean",
                       "example":true
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Modbus.EcoGeoHighPowerMainDhw/value"
           }
        },
        "Device.Modbus.TechLE3x230mb":{
           "description":"Modbus Tech LE-3x230mb Energy Meter representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.Modbus.EnergyMeter"
              },
              {
                 "type":"object",
                 "required":[
                    "energy_consumed_total",
                    "energy_consumed_today",
                    "energy_fed_total",
                    "energy_fed_today",
                    "reactive_energy_consumed_total",
                    "reactive_energy_consumed_today",
                    "reactive_energy_fed_total",
                    "reactive_energy_fed_today",
                    "phase_1",
                    "phase_2",
                    "phase_3",
                    "monthly_energy_consumption",
                    "monthly_energy_fed",
                    "uses_energy_of_building"
                 ],
                 "properties":{
                    "energy_consumed_total":{
                       "description":"Energy consumption lifetime.<br>Unit: kWh, multiplied by 1000 (Wh)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":100000
                    },
                    "energy_consumed_today":{
                       "description":"Energy consumption today.<br>Unit: kWh, multiplied by 1000 (Wh)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":10000
                    },
                    "energy_fed_total":{
                       "description":"Energy feed lifetime.<br>Unit: kWh, multiplied by 1000 (Wh)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":10000
                    },
                    "energy_fed_today":{
                       "description":"Energy feed today.<br>Unit: kWh, multiplied by 1000 (Wh)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":1000
                    },
                    "reactive_energy_consumed_total":{
                       "description":"Reactive energy consumption lifetime.<br>Unit: kVArh, multiplied by 1000 (VArh)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":100000
                    },
                    "reactive_energy_consumed_today":{
                       "description":"Reactive energy consumption today.<br>Unit: kVArh, multiplied by 1000 (VArh)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":10000
                    },
                    "reactive_energy_fed_total":{
                       "description":"Reactive energy feed lifetime.<br>Unit: kVArh, multiplied by 1000 (VArh)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":10000
                    },
                    "reactive_energy_fed_today":{
                       "description":"Reactive energy feed today.<br>Unit: kVArh, multiplied by 1000 (VArh)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":1000
                    },
                    "phase_1":{
                       "description":"First phase current properties.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.PhaseProperties"
                          }
                       ]
                    },
                    "phase_2":{
                       "description":"Second phase current properties.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.PhaseProperties"
                          }
                       ]
                    },
                    "phase_3":{
                       "description":"Third phase current properties.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.PhaseProperties"
                          }
                       ]
                    },
                    "monthly_energy_consumption":{
                       "description":"Monthly total energy consumption data.",
                       "type":"array",
                       "readOnly":true,
                       "items":{
                          "type":"object",
                          "required":[
                             "year",
                             "month",
                             "value"
                          ],
                          "properties":{
                             "year":{
                                "description":"Year of total energy consumption save.",
                                "type":"integer",
                                "readOnly":true
                             },
                             "month":{
                                "description":"Month of total energy consumption save.",
                                "type":"integer",
                                "readOnly":true
                             },
                             "value":{
                                "description":"Total energy consumption for the time of saving the data. <br>Unit: kWh, multiplied by 1000 (Wh).<br>**NOTE:** this is a total energy consumption value, not month energy consumption.",
                                "type":"integer",
                                "multipleOf":1000,
                                "readOnly":true
                             }
                          }
                       }
                    },
                    "energy_consumed_current_month":{
                       "description":"Current month energy consumption data. Can be `null` when there is no monthly data saved yet and no total energy consumption data read.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.MonthlyEnergyData"
                          }
                       ]
                    },
                    "energy_consumed_last_month":{
                       "description":"Last month energy consumption data. Can be `null` when there is no monthly data saved for last month.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.MonthlyEnergyData"
                          }
                       ]
                    },
                    "energy_consumed_month_before_last_month":{
                       "description":"Month before the last month energy consumption data. Can be `null` when there is no monthly data saved for month before last month.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.MonthlyEnergyData"
                          }
                       ]
                    },
                    "monthly_energy_fed":{
                       "description":"Monthly total energy fed data.",
                       "type":"array",
                       "readOnly":true,
                       "items":{
                          "type":"object",
                          "required":[
                             "year",
                             "month",
                             "value"
                          ],
                          "properties":{
                             "year":{
                                "description":"Year of total energy fed save.",
                                "type":"integer",
                                "readOnly":true
                             },
                             "month":{
                                "description":"Month of total energy fed save.",
                                "type":"integer",
                                "readOnly":true
                             },
                             "value":{
                                "description":"Total energy fed for the time of saving the data. <br>Unit: kWh with one decimal number, multiplied by 1000 (Wh).<br>**NOTE:** this is a total energy fed value, not month energy fed.",
                                "type":"integer",
                                "multipleOf":1000,
                                "readOnly":true
                             }
                          }
                       }
                    },
                    "energy_fed_current_month":{
                       "description":"Current month energy fed data. Can be `null` when there is no monthly data saved yet and no total energy fed data read.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.MonthlyEnergyData"
                          }
                       ]
                    },
                    "energy_fed_last_month":{
                       "description":"Last month energy fed data. Can be `null` when there is no monthly data saved for last month.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.MonthlyEnergyData"
                          }
                       ]
                    },
                    "energy_fed_month_before_last_month":{
                       "description":"Month before the last month energy fed data. Can be `null` when there is no monthly data saved for month before last month.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.MonthlyEnergyData"
                          }
                       ]
                    },
                    "uses_energy_of_building":{
                       "description":"Indicates if energy meter is used to measure energy of device inside the building. (Not main energy meter).",
                       "type":"boolean",
                       "example":false
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Modbus.TechLE3x230mb/value"
           }
        },
        "Device.Modbus.HeatcompInverter":{
           "description":"Modbus Heatcomp Inverter representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AGenericDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "run_mode",
                    "power_to_grid",
                    "energy_produced_total",
                    "energy_produced_today",
                    "energy_fed_total",
                    "energy_fed_today",
                    "energy_consumed_total",
                    "energy_consumed_today",
                    "pv_total_active_power",
                    "pv_1",
                    "pv_2",
                    "grid_total_active_power",
                    "phase_1",
                    "phase_2",
                    "phase_3"
                 ],
                 "properties":{
                    "run_mode":{
                       "description":"Inverter current run mode.",
                       "type":"string",
                       "readOnly":true,
                       "enum":[
                          "standby",
                          "initialization",
                          "ac_power_operation",
                          "inverter_operation"
                       ],
                       "example":"standby"
                    },
                    "power_to_grid":{
                       "description":"Current power fed to (positive number) or consumed from (negative number) the power grid.<br>Unit: W with three decimal number, multiplied by 1000 (mW)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":-500
                    },
                    "energy_produced_total":{
                       "description":"Total amount of energy produced by PV over a lifetime.<br>Unit: kWh with one decimal number, multiplied by 1000 (Wh).",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":10000
                    },
                    "energy_produced_today":{
                       "description":"Amount of energy produced by PV today.<br>Unit: kWh with one decimal number, multiplied by 1000 (Wh).",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":200
                    },
                    "energy_fed_total":{
                       "description":"Amount of energy feed to the grid over a lifetime.<br>Unit: kWh with one decimal number, multiplied by 1000 (Wh).",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":5000
                    },
                    "energy_fed_today":{
                       "description":"Amount of energy feed to the grid today.<br>Unit: kWh with one decimal number, multiplied by 1000 (Wh).",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":100
                    },
                    "energy_consumed_total":{
                       "description":"Amount of energy consumed from the grid over a lifetime.<br>Unit: kWh with one decimal number, multiplied by 1000 (Wh).",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":5000
                    },
                    "energy_consumed_today":{
                       "description":"Amount of energy consumed from the grid today.<br>Unit: kWh with one decimal number, multiplied by 1000 (Wh).",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":100
                    },
                    "pv_total_active_power":{
                       "description":"Current total power produced by all photovoltaic panels. <br> Unit: W with three decimal number, multiplied by 1000 (mW)",
                       "type":"integer",
                       "multipleOf":0.001,
                       "readOnly":true,
                       "example":500
                    },
                    "pv_1":{
                       "description":"First group of photovoltaic panels current properties.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.CurrentProperties"
                          }
                       ]
                    },
                    "pv_2":{
                       "description":"Second group of photovoltaic panels current properties.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.CurrentProperties"
                          }
                       ]
                    },
                    "grid_total_active_power":{
                       "description":"Current total power on the grid.<br>Unit: W with three decimal number, multiplied by 1000 (mW)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":5000
                    },
                    "phase_1":{
                       "description":"First phase current properties.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.CurrentProperties"
                          }
                       ]
                    },
                    "phase_2":{
                       "description":"Second phase current properties.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.CurrentProperties"
                          }
                       ]
                    },
                    "phase_3":{
                       "description":"Third phase current properties.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.CurrentProperties"
                          }
                       ]
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Modbus.HeatcompInverter/value"
           }
        },
        "Device.Modbus.HeatcompBattery":{
           "description":"Ampowr Ampi Home Battery representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.Modbus.Battery"
              },
              {
                 "type":"object",
                 "required":[
                    "soc",
                    "charge_current",
                    "charge_power",
                    "charge_current_limit",
                    "voltage",
                    "energy_charged_total",
                    "energy_discharged_total",
                    "scheduled_charge",
                    "scheduled_discharge",
                    "max_grid_charge_power",
                    "grid_active_power_set",
                    "charge_work_mode"
                 ],
                 "properties":{
                    "soc":{
                       "description":"Current state of charge.<br>Unit: %",
                       "type":"integer",
                       "readOnly":true,
                       "example":50
                    },
                    "charge_current":{
                       "description":"Charging current.<br>Unit: A with three decimal number, multiplied by 1000 (mA)",
                       "type":"integer",
                       "readOnly":true,
                       "example":80000
                    },
                    "charge_power":{
                       "description":"Current charging (positive number) or discharging (negative number) power.<br>Unit: W with three decimal number, multiplied by 1000 (mW)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":-500
                    },
                    "charge_current_limit":{
                       "description":"Charging current limit.<br>Unit: A with three decimal number, multiplied by 1000 (mA)",
                       "type":"integer",
                       "multipleOf":0.001,
                       "minimum":0,
                       "maximum":150000,
                       "example":100000
                    },
                    "voltage":{
                       "description":"Battery voltage.<br>Unit: V with three decimal number, multiplied by 1000 (mV)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":48500
                    },
                    "energy_charged_total":{
                       "description":"Amount of energy charged to the battery over a lifetime.<br>Unit: kwh with one decimal number, multiplied by 1000 (Wh)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":50000
                    },
                    "energy_discharged_total":{
                       "description":"Amount of energy consumed from the battery over a lifetime.<br>Unit: kwh with one decimal number, multiplied by 1000 (Wh)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":50000
                    },
                    "scheduled_charge":{
                       "description":"Charge schedule related parameters.",
                       "type":"object",
                       "required":[
                          "active",
                          "enabled",
                          "start_time_1",
                          "end_time_1",
                          "start_time_2",
                          "end_time_2",
                          "start_time_3",
                          "end_time_3"
                       ],
                       "properties":{
                          "active":{
                             "description":"Indicates if scheduled charge is activated on the device.",
                             "type":"boolean",
                             "readOnly":true,
                             "example":true
                          },
                          "enabled":{
                             "description":"Indicates if scheduled charge is enabled. **NOTE** Can only be changed when `charge_work_mode` is set to `schedule`.",
                             "type":"boolean",
                             "example":true
                          },
                          "start_time_1":{
                             "description":"First period charge start time. In minutes of the day. **NOTE** Can only be changed when `charge_work_mode` is set to `schedule`.",
                             "type":"integer",
                             "minimum":0,
                             "maximum":1439
                          },
                          "end_time_1":{
                             "description":"First period charge end time. In minutes of the day. **NOTE** Can only be changed when `charge_work_mode` is set to `schedule`.",
                             "type":"integer",
                             "minimum":0,
                             "maximum":1439
                          },
                          "start_time_2":{
                             "description":"Second period charge start time. In minutes of the day. **NOTE** Can only be changed when `charge_work_mode` is set to `schedule`.",
                             "type":"integer",
                             "minimum":0,
                             "maximum":1439
                          },
                          "end_time_2":{
                             "description":"Second period charge end time. In minutes of the day. **NOTE** Can only be changed when `charge_work_mode` is set to `schedule`.",
                             "type":"integer",
                             "minimum":0,
                             "maximum":1439
                          },
                          "start_time_3":{
                             "description":"Third period charge start time. In minutes of the day. **NOTE** Can only be changed when `charge_work_mode` is set to `schedule`.",
                             "type":"integer",
                             "minimum":0,
                             "maximum":1439
                          },
                          "end_time_3":{
                             "description":"Third period charge end time. In minutes of the day. **NOTE** Can only be changed when `charge_work_mode` is set to `schedule`.",
                             "type":"integer",
                             "minimum":0,
                             "maximum":1439
                          }
                       }
                    },
                    "scheduled_discharge":{
                       "description":"Discharge schedule related parameters.",
                       "type":"object",
                       "required":[
                          "active",
                          "enabled",
                          "start_time_1",
                          "end_time_1",
                          "start_time_2",
                          "end_time_2",
                          "start_time_3",
                          "end_time_3"
                       ],
                       "properties":{
                          "active":{
                             "description":"Indicates if scheduled discharge is activated on the device.",
                             "type":"boolean",
                             "readOnly":true,
                             "example":true
                          },
                          "enabled":{
                             "description":"Indicates if scheduled discharge is enabled. **NOTE** Can only be changed when `charge_work_mode` is set to `schedule`.",
                             "type":"boolean",
                             "example":true
                          },
                          "start_time_1":{
                             "description":"First period discharge start time. In minutes of the day. **NOTE** Can only be changed when `charge_work_mode` is set to `schedule`.",
                             "type":"integer",
                             "minimum":0,
                             "maximum":1439
                          },
                          "end_time_1":{
                             "description":"First period discharge end time. In minutes of the day. **NOTE** Can only be changed when `charge_work_mode` is set to `schedule`.",
                             "type":"integer",
                             "minimum":0,
                             "maximum":1439
                          },
                          "start_time_2":{
                             "description":"Second period discharge start time. In minutes of the day. **NOTE** Can only be changed when `charge_work_mode` is set to `schedule`.",
                             "type":"integer",
                             "minimum":0,
                             "maximum":1439
                          },
                          "end_time_2":{
                             "description":"Second period discharge end time. In minutes of the day. **NOTE** Can only be changed when `charge_work_mode` is set to `schedule`.",
                             "type":"integer",
                             "minimum":0,
                             "maximum":1439
                          },
                          "start_time_3":{
                             "description":"Third period discharge start time. In minutes of the day. **NOTE** Can only be changed when `charge_work_mode` is set to `schedule`.",
                             "type":"integer",
                             "minimum":0,
                             "maximum":1439
                          },
                          "end_time_3":{
                             "description":"Third period discharge end time. In minutes of the day. **NOTE** Can only be changed when `charge_work_mode` is set to `schedule`.",
                             "type":"integer",
                             "minimum":0,
                             "maximum":1439
                          }
                       }
                    },
                    "max_grid_charge_power":{
                       "description":"Maximum charge power from the grid.<br>Unit: W",
                       "type":"integer",
                       "minimum":0,
                       "maximum":655350,
                       "example":2500
                    },
                    "grid_active_power_set":{
                       "description":"Maximum power that can be discharged to the grid.<br>Unit: W",
                       "type":"integer",
                       "minimum":0,
                       "maximum":65000,
                       "example":5000
                    },
                    "charge_work_mode":{
                       "description":"Defines if battery charges or discharges according to schedule or manual control.",
                       "type":"string",
                       "enum":[
                          "schedule",
                          "manual"
                       ],
                       "example":"schedule"
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Modbus.HeatcompBattery/value"
           }
        },
        "Device.SBus.Relay":{
           "description":"Wired SBUS Relay representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ASBusDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "state",
                    "timeout",
                    "timeout_enabled",
                    "inverted",
                    "time_since_state_change",
                    "work_mode"
                 ],
                 "properties":{
                    "state":{
                       "description":"State of the output. On/Off",
                       "type":"boolean",
                       "example":true
                    },
                    "timeout":{
                       "description":"Protection functionality, that will set device state to off if there are communication problems.<br> Unit: minutes.",
                       "type":"integer",
                       "minimum":5,
                       "maximum":60,
                       "example":15
                    },
                    "timeout_enabled":{
                       "description":"Indicates that timeout functionality is enabled.",
                       "type":"boolean",
                       "example":true
                    },
                    "backlight_mode":{
                       "description":"Buttons backlight mode. Parameter is <b>optional</b>. Available when backlight is supported - check if `has_backlight` label is provided.",
                       "type":"string",
                       "enum":[
                          "auto",
                          "fixed",
                          "off"
                       ],
                       "example":"fixed"
                    },
                    "backlight_brightness":{
                       "description":"Buttons backlight brightness.<br> Paremeter <b>hidden</b> when backlight is <b>unsupported</b>.<br> Unit: %",
                       "type":"integer",
                       "minimum":0,
                       "maximum":100,
                       "example":95
                    },
                    "backlight_idle_color":{
                       "description":"HTML/Hex RGB representation of color when controller is in idle (inactive state).<br> Paremeter <b>hidden</b> when backlight is <b>unsupported</b>.",
                       "type":"string",
                       "pattern":"/^#[0-9a-f]{6}$/i",
                       "example":"#FF00FF"
                    },
                    "backlight_active_color":{
                       "description":"HTML/Hex RGB representation of color when controller is active eg. motor is working.<br> Paremeter <b>hidden</b> when backlight is <b>unsupported</b>.",
                       "type":"string",
                       "pattern":"/^#[0-9a-f]{6}$/i",
                       "example":"#FFFF00"
                    },
                    "inverted":{
                       "description":"Indicates if should invert physical state of relay compared to represented state in application.",
                       "type":"boolean",
                       "example":false
                    },
                    "time_since_state_change":{
                       "description":"Time since last relay state change.<br>Unit: seconds",
                       "type":"integer",
                       "readOnly":true,
                       "example":120
                    },
                    "startup_state":{
                       "description":"State of output that should be set on device after power restart. Parameter is <b>optional</b>. Available when function is supported - check if `relay_startup_state_support` label is provided.<br>*NOTE*: cannot be changed when `work_mode` is set to `alarm_siren`.",
                       "type":"string",
                       "enum":[
                          "off",
                          "on",
                          "previous"
                       ],
                       "example":"off"
                    },
                    "work_mode":{
                       "description":"Relay working mode.",
                       "type":"string",
                       "enum":[
                          "standard",
                          "alarm_siren"
                       ],
                       "example":"standard"
                    },
                    "trigger_signal_type":{
                       "description":"Selected device hardware trigger behavior. Impulse = (monostable trigger) impulse signal toggles the output state, state_change = (bistable trigger) when trigger state changes, output will be set equal to trigger signal. <br>Parameter is <b>optional</b>. Available when: check if `trigger_signal_config_support` label is provided.",
                       "type":"string",
                       "enum":[
                          "impulse",
                          "state_change"
                       ],
                       "example":"impulse"
                    },
                    "allowed_trigger_signal_types":{
                       "description":"List of available trigger signal types supported by the device. Allowed values to set in `trigger_signal_type` property. <br>Parameter is <b>optional</b>. Available when: check if `trigger_signal_config_support` label is provided.",
                       "type":"array",
                       "readOnly":true,
                       "items":{
                          "type":"string",
                          "enum":[
                             "impulse",
                             "state_change"
                          ]
                       },
                       "example":[
                          "impulse",
                          "state_change"
                       ]
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.SBus.Relay/value"
           }
        },
        "Device.SBus.TemperatureSensor":{
           "description":"Wired SBus Temperature Sensor representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ASBusDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "temperature",
                    "calibration"
                 ],
                 "properties":{
                    "temperature":{
                       "description":"Measured temperature value.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "readOnly":true,
                       "minimum":-400,
                       "maximum":1000,
                       "example":250
                    },
                    "calibration":{
                       "description":"Static point temperature calibration, used to adjust measurments.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "minimum":-100,
                       "maximum":100,
                       "example":0
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.SBus.TemperatureSensor/value"
           }
        },
        "Device.SBus.HumiditySensor":{
           "description":"Wired SBus Humidity Sensor representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ASBusDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "humidity"
                 ],
                 "properties":{
                    "humidity":{
                       "description":"Measured relative humidity value.<br> Unit: rH% with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "readOnly":true,
                       "minimum":0,
                       "maximum":1000,
                       "example":578
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.SBus.HumiditySensor/value"
           }
        },
        "Device.SBus.TemperatureRegulator":{
           "description":"Wired SBus Temperature Regulator representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ASBusDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "target_temperature",
                    "target_temperature_mode",
                    "target_temperature_minimum",
                    "target_temperature_maximum",
                    "target_temperature_reached",
                    "keylock",
                    "confirm_time_mode",
                    "user_menu_lock"
                 ],
                 "properties":{
                    "target_temperature":{
                       "description":"Desired setpoint temperature, which device will try to achieve.<br> Unit: °C with one decimal number, multiplied by 10.<br>Minimum from parameter `target_temperature_minimum`, maximum from parameter `target_temperature_maximum`.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "minimum":50,
                       "maximum":350,
                       "example":235
                    },
                    "target_temperature_mode":{
                       "type":"object",
                       "required":[
                          "current",
                          "remaining_time"
                       ],
                       "properties":{
                          "current":{
                             "description":"Regulator target temperature mode. Specifies if regulator works in `constant` mode with one target temperature, `time_limited` mode with one temporary target temperature or according to schedule in `schedule` mode with many target temperatures in time, configured by user.<br> <b>NOTE:</b> Parameter is read only, use commands to change target temperature mode!<br> <b>NOTE:</b> Parameter cannot be `schedule` if thermostat doesnt have `has_schedule` label!<br> <b>NOTE:</b> When not associated with Virtual Thermostat it will always work in `constant` mode.",
                             "type":"string",
                             "readOnly":true,
                             "enum":[
                                "schedule",
                                "constant",
                                "time_limited"
                             ],
                             "example":"constant"
                          },
                          "remaining_time":{
                             "description":"Remaining time until `time_limited` mode ends. Cannot be modified directly - use commands.<br> Unit: minutes.",
                             "type":"integer",
                             "readOnly":true,
                             "minimum":1,
                             "maximum":1440,
                             "example":600
                          }
                       }
                    },
                    "target_temperature_minimum":{
                       "description":"Lower limit of the target temperature. Could not be greater than maximum. Setting minimum value above target value, will also change target value to minimum.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "minimum":50,
                       "maximum":350,
                       "example":50
                    },
                    "target_temperature_maximum":{
                       "description":"Upper limit of the target temperature. Could not be less than minimum. Setting maximum below target, will also change target value to minimum.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "minimum":50,
                       "maximum":350,
                       "example":350
                    },
                    "target_temperature_reached":{
                       "description":"Controls device`s algorithm working state indicator. eg LED Diode. May be controlled by external algorithms or devices such as Thermostat.",
                       "type":"boolean",
                       "readOnly":true
                    },
                    "keylock":{
                       "description":"Device keylock state.",
                       "type":"string",
                       "enum":[
                          "on",
                          "off",
                          "unsupported"
                       ],
                       "example":"off"
                    },
                    "confirm_time_mode":{
                       "description":"Mainly for Mobile/Web App purposes. Indicates if time mode modal should be displayed when changing thermostat temperature. Controlled by Virtual Thermostat.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":true
                    },
                    "user_menu_lock":{
                       "description":"Pin code information to lock regulators user menu. Parameter is <b>optional</b>. Available when user menu lock is supported - check if `user_menu_lock_support` label is provided.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.KeyLockInfo"
                          }
                       ]
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.SBus.TemperatureRegulator/value"
           }
        },
        "Device.SBus.TwoStateInputSensor":{
           "description":"Wired SBus Two State Input Sensor representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ASBusDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "state",
                    "inverted"
                 ],
                 "properties":{
                    "state":{
                       "description":"Measured input value.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    },
                    "inverted":{
                       "description":"Indicates if physical state of input compared to represented state in application should be inverted.",
                       "type":"boolean",
                       "example":false
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.SBus.TwoStateInputSensor/value"
           }
        },
        "Device.SBus.Button":{
           "description":"Wired SBus Button representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ASBusDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "buttons_count",
                    "action"
                 ],
                 "properties":{
                    "buttons_count":{
                       "description":"Count of physical buttons",
                       "type":"integer",
                       "readOnly":true,
                       "example":1
                    },
                    "action":{
                       "description":"Last action performed by user.",
                       "type":"string",
                       "readOnly":true,
                       "example":"button_1_clicked_10_times"
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.SBus.Button/value"
           }
        },
        "Device.SBus.AnalogInput":{
           "description":"Wired SBus Analog Input representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ASBusDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "raw_value",
                    "value",
                    "formula",
                    "unit"
                 ],
                 "properties":{
                    "raw_value":{
                       "description":"Raw value read from analog input.",
                       "type":"integer",
                       "readOnly":true,
                       "example":1146
                    },
                    "value":{
                       "description":"Value from analog input after formula calculation or raw value when no formula specified.",
                       "type":"number",
                       "format":"double",
                       "readOnly":true,
                       "example":2325.85
                    },
                    "formula":{
                       "description":"Formula used to calculate value. In formula you can access all object parameters by calling *object.parameter_name*. <br> Should contain only calculations returning number. Should not contain any condition statements (excl. utils.ternary), loops and more complicated code.",
                       "type":"string",
                       "example":"object.raw_value*2 + math.sqrt(object.raw_value)"
                    },
                    "unit":{
                       "description":"Value unit used for statistics.",
                       "type":"string",
                       "example":"mV"
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.SBus.AnalogInput/value"
           }
        },
        "Device.SBus.Dimmer":{
           "description":"Wired SBUS Dimmer representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ASBusDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "state",
                    "target_level"
                 ],
                 "properties":{
                    "state":{
                       "description":"State of the output. On/Off",
                       "type":"boolean",
                       "example":true
                    },
                    "target_level":{
                       "description":"Desired light intensity level on which device is set or level on which device will be set when turned on. (depending on state) <br> Unit: %.",
                       "type":"integer",
                       "minimum":1,
                       "maximum":100,
                       "example":75
                    },
                    "backlight_mode":{
                       "description":"Buttons backlight mode. Parameter is <b>optional</b>. Available when backlight is supported - check if `has_backlight` label is provided.",
                       "type":"string",
                       "enum":[
                          "auto",
                          "fixed",
                          "off"
                       ],
                       "example":"fixed"
                    },
                    "backlight_brightness":{
                       "description":"Buttons backlight brightness.<br> Paremeter <b>hidden</b> when backlight is <b>unsupported</b>.<br> Unit: %",
                       "type":"integer",
                       "minimum":0,
                       "maximum":100,
                       "example":95
                    },
                    "backlight_idle_color":{
                       "description":"HTML/Hex RGB representation of color when controller is in idle.<br> Paremeter <b>hidden</b> when backlight is <b>unsupported</b>.",
                       "type":"string",
                       "pattern":"/^#[0-9a-f]{6}$/i",
                       "example":"#FF00FF"
                    },
                    "backlight_active_color":{
                       "description":"HTML/Hex RGB representation of color when controller is active eg. motor is working.<br> Paremeter <b>hidden</b> when backlight is <b>unsupported</b>.",
                       "type":"string",
                       "pattern":"/^#[0-9a-f]{6}$/i",
                       "example":"#FFFF00"
                    },
                    "ambient_light_intensity":{
                       "description":"Measured ambient light intensity.<br> Unit: %.<br>Parameter is <b>optional</b>. Available when: check if `has_backlight_brightness_sensor` label is provided.",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":100,
                       "example":80
                    },
                    "output_temperature":{
                       "description":"Measured temperature value of hardware output circuit.<br> Unit: \\xB0C with one decimal number, multiplied by 10.<br>Parameter is <b>optional</b>. Available when: check if `has_output_temperature_sensor` label is provided.",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":-400,
                       "maximum":1500,
                       "multipleOf":0.1,
                       "example":250
                    },
                    "level_calibration":{
                       "type":"object",
                       "required":[
                          "minimum",
                          "maximum"
                       ],
                       "properties":{
                          "minimum":{
                             "description":"Absolute minimum level that can be set on the device. Could not be larger than maximum.<br> Unit: % <br>Parameter is <b>optional</b>. Available when: check if `level_calibration_support` label is provided.",
                             "type":"integer",
                             "minimum":0,
                             "maximum":100,
                             "example":0
                          },
                          "maximum":{
                             "description":"Absolute maximum level that can be set on the device. Could not be less than minimum. <br> Unit: % <br>Parameter is <b>optional</b>. Available when: check if `level_calibration_support` label is provided.",
                             "type":"integer",
                             "minimum":0,
                             "maximum":100,
                             "example":100
                          }
                       }
                    },
                    "switch_mode":{
                       "description":"Depending on the value of this parameter, the swiches behavior will change. Can be modified with values from `allowed_switch_modes` property. <br> Parameter is <b>optional</b>. Available when: check if `switch_mode_support` label is provided.",
                       "type":"string",
                       "enum":[
                          "single_monostable",
                          "single_bistable",
                          "up_and_down",
                          "single_monostable_dim_hotkey",
                          "single_monostable_dim_saved_hotkey"
                       ],
                       "example":"single_bistable"
                    },
                    "allowed_switch_modes":{
                       "description":"List of available switch modes supported by the device. Allowed values to set in `switch_mode` property.",
                       "type":"array",
                       "readOnly":true,
                       "items":{
                          "type":"string",
                          "enum":[
                             "single_monostable",
                             "single_bistable",
                             "up_and_down",
                             "single_monostable_dim_hotkey",
                             "single_monostable_dim_saved_hotkey"
                          ]
                       },
                       "example":[
                          "single_monostable",
                          "single_bistable"
                       ]
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.SBus.Dimmer/value"
           }
        },
        "Device.SBus.RGBController":{
           "description":"Wired SBUS RGB controller representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ASBusDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "state",
                    "brightness",
                    "led_color",
                    "white_temperature",
                    "color_mode",
                    "led_strip_type",
                    "white_temperature_correction",
                    "cool_white_temperature_correction",
                    "warm_white_temperature_correction",
                    "available_animations",
                    "animations",
                    "active_animation"
                 ],
                 "properties":{
                    "state":{
                       "description":"State of the output. On/Off",
                       "type":"boolean",
                       "example":true
                    },
                    "brightness":{
                       "description":"Desired brightness level on which device is set or level on which device will be set when turned on. (depending on state) Unit: %.",
                       "type":"integer",
                       "minimum":1,
                       "maximum":100,
                       "example":75,
                       "readOnly":true
                    },
                    "led_color":{
                       "description":"HTML/Hex RGB color that device will set on its output led strip.",
                       "type":"string",
                       "pattern":"/^#[0-9a-f]{6}$/i",
                       "example":"#ff00ff",
                       "readOnly":true
                    },
                    "white_temperature":{
                       "description":"Color temperature that device will set on its output led strip. Unit: Kelvins",
                       "type":"integer",
                       "minimum":1000,
                       "maximum":40000,
                       "example":3000,
                       "readOnly":true
                    },
                    "color_mode":{
                       "description":"Color mode that device is set on.",
                       "type":"string",
                       "enum":[
                          "rgb",
                          "temperature",
                          "animation"
                       ],
                       "example":"animation",
                       "readOnly":true
                    },
                    "led_strip_type":{
                       "description":"Led strip type that is connected with device. Needs to be set in order for device to display colors properly.",
                       "type":"string",
                       "enum":[
                          "rgb",
                          "rgbw",
                          "rgbww"
                       ]
                    },
                    "white_temperature_correction":{
                       "description":"White color temperature correction. Should be set on the value provided by led strip manufacturer. Available when led_strip_type set to rgbw.",
                       "type":"integer",
                       "minimum":1000,
                       "maximum":40000,
                       "example":3000
                    },
                    "cool_white_temperature_correction":{
                       "description":"Cool white color temperature correction. Should be set on the value provided by led strip manufacturer. Available when led_strip_type set to rgbww.",
                       "type":"integer",
                       "minimum":1000,
                       "maximum":40000,
                       "example":6000
                    },
                    "warm_white_temperature_correction":{
                       "description":"Warm white color temperature correction. Should be set on the value provided by led strip manufacturer. Available when led_strip_type set to rgbww.",
                       "type":"integer",
                       "minimum":1000,
                       "maximum":40000,
                       "example":3000
                    },
                    "available_animations":{
                       "description":"Animations styles that are available for device.",
                       "readOnly":true,
                       "type":"array",
                       "items":{
                          "allOf":[
                             {
                                "$ref":"#/components/schemas/Device.SBus.RGBController.Animation"
                             }
                          ]
                       }
                    },
                    "animations":{
                       "description":"Animations created by user that are available to run by device.",
                       "type":"array",
                       "items":{
                          "allOf":[
                             {
                                "$ref":"#/components/schemas/Device.SBus.RGBController.CustomAnimation"
                             }
                          ]
                       }
                    },
                    "active_animation":{
                       "description":"Active animation id if animation was activated.",
                       "type":"integer",
                       "readOnly":true,
                       "nullable":true,
                       "example":1
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.SBus.RGBController/value"
           }
        },
        "Device.SBus.MotionSensor":{
           "description":"Wired SBUS Motion Sensor representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ASBusDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "enabled",
                    "blind_duration",
                    "motion_detected",
                    "time_since_motion",
                    "sensor_type"
                 ],
                 "properties":{
                    "enabled":{
                       "description":"Enable or disable sensor. eg. If you want sense only at night time, you can setup automation to enable/disable sensor.",
                       "type":"boolean",
                       "example":true
                    },
                    "blind_duration":{
                       "description":"Duration of sensor being off after detecting motion.<br> Unit: seconds",
                       "type":"integer",
                       "minimum":2,
                       "maximum":255,
                       "example":2
                    },
                    "pulses_threshold":{
                       "description":"Sensitivity factor. How many pulses from sensor are needed to treat action as motion.<br>*NOTE*: available when `sensor_type` is set to `pir`, i.e. device `variant` is `generic`.",
                       "type":"integer",
                       "minimum":1,
                       "maximum":255,
                       "example":2
                    },
                    "pulses_window":{
                       "description":"Sensitivity factor. Maximum time window in which {pulses_treshold} must occur to treat action as motion.<br> Unit: seconds<br>*NOTE*: available when `sensor_type` is set to `pir`, i.e. device `variant` is `generic`.",
                       "type":"integer",
                       "minimum":1,
                       "maximum":255,
                       "example":2
                    },
                    "motion_detected":{
                       "description":"Holds latest motion detection state. Remains `true` on motion detection and `false` when `blind_duration` time elapses.<br> **Notice**: the value will remain `true`` all the time when subsequent motion detections occur until motion stops.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":true
                    },
                    "time_since_motion":{
                       "description":"Time since last motion detected.<br> Unit: seconds<br> **Notice**: -1 means not detected so far (motion didnt happen since system start).<br> **Notice**: This value will show 0 for each detected move, even if the previous one has not yet finished.",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":43200,
                       "example":50
                    },
                    "sensor_type":{
                       "description":"Registered sensor type.",
                       "type":"string",
                       "readOnly":true,
                       "enum":[
                          "pir",
                          "radar"
                       ]
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.SBus.MotionSensor/value"
           }
        },
        "Device.SBus.LightSensor":{
           "description":"Wired SBUS Light Sensor representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ASBusDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "illuminance"
                 ],
                 "properties":{
                    "illuminance":{
                       "description":"Measured light illuminance value.<br> Unit: lx.",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":65535,
                       "example":400
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.SBus.LightSensor/value"
           }
        },
        "Device.SBus.PressureSensor":{
           "description":"Wired SBus Pressure Sensor representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ASBusDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "pressure",
                    "altitude"
                 ],
                 "properties":{
                    "pressure":{
                       "type":"integer",
                       "description":"Measured pressure value.<br> Unit: hPa with one decimal number, multiplied by 10.",
                       "readOnly":true,
                       "minimum":3000,
                       "maximum":11000,
                       "multipleOf":0.1,
                       "example":9899
                    },
                    "altitude":{
                       "type":"integer",
                       "description":"Setting the altitude compensates the atmospheric pressure reading to the pressure at mean sea level, that is normally given in weather reports.",
                       "minimum":0,
                       "maximum":8849,
                       "example":311
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.SBus.PressureSensor/value"
           }
        },
        "Device.SBus.CO2Sensor":{
           "description":"Wired SBus CO2 Sensor representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ASBusDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "co2"
                 ],
                 "properties":{
                    "co2":{
                       "description":"Measured co2 value.<br> Unit: ppm.",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":10000,
                       "example":350
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.SBus.CO2Sensor/value"
           }
        },
        "Device.SBus.IAQSensor":{
           "description":"Wired SBus Indexed Air Quality Sensor representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ASBusDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "iaq",
                    "iaq_accuracy",
                    "air_quality"
                 ],
                 "properties":{
                    "iaq":{
                       "description":"Calculated Index of Air Quality",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":500,
                       "example":50
                    },
                    "iaq_accuracy":{
                       "description":"Index of Air Quality calculation accuracy",
                       "type":"string",
                       "enum":[
                          "unreliable",
                          "low",
                          "medium",
                          "high"
                       ],
                       "readOnly":true,
                       "example":"high"
                    },
                    "air_quality":{
                       "$ref":"#/components/schemas/Device.DescriptiveAirQuality"
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.SBus.IAQSensor/value"
           }
        },
        "Device.SBus.BlindController":{
           "description":"Wired SBus Blind Controller representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ASBusDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "target_opening",
                    "current_opening",
                    "window_covering_type",
                    "allowed_window_covering_types",
                    "lift_control_mode",
                    "allowed_lift_control_modes"
                 ],
                 "properties":{
                    "target_opening":{
                       "description":"Desired setpoint opening, which device will try to achieve.<br> Unit: %.<br>**NOTE:** If device doesnt contain `percent_opening_control` label, target opening is limited to 0%, 50% or 100% (only these three).",
                       "type":"integer",
                       "minimum":0,
                       "maximum":100,
                       "example":50
                    },
                    "current_opening":{
                       "description":"Current opening value.<br> Unit: %",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":100,
                       "example":85
                    },
                    "window_covering_type":{
                       "description":"Defines the type of window covering the controller is connected to. Depending on the value of this parameter, the controller behavior will change and some parameters may be unavailable. Can be modified with values from `allowed_window_covering_types` property.",
                       "type":"string",
                       "enum":[
                          "roller_shade",
                          "tilt_blind",
                          "pergola"
                       ],
                       "example":"roller_shade"
                    },
                    "allowed_window_covering_types":{
                       "description":"List of available window covering types supported by the controller. Allowed values to set in `window_covering_type` property.",
                       "type":"array",
                       "readOnly":true,
                       "items":{
                          "type":"string",
                          "enum":[
                             "roller_shade",
                             "tilt_blind",
                             "pergola"
                          ]
                       },
                       "example":[
                          "roller_shade",
                          "tilt_blind"
                       ]
                    },
                    "lift_control_mode":{
                       "description":"Defines the control algorithm of lifting movement. Depending on the value of this parameter, the controller behavior will change and some parameters may be unavailable. Can be modified with values from `allowed_lift_control_modes` property.",
                       "type":"string",
                       "enum":[
                          "current_detection",
                          "fixed_duration"
                       ],
                       "example":"current_detection"
                    },
                    "allowed_lift_control_modes":{
                       "description":"List of available lift control modes supported by the controller. Allowed values to set in `lift_control_mode` property.",
                       "type":"array",
                       "readOnly":true,
                       "items":{
                          "type":"string",
                          "enum":[
                             "current_detection",
                             "fixed_duration"
                          ]
                       },
                       "example":[
                          "current_detection",
                          "fixed_duration"
                       ]
                    },
                    "target_tilt":{
                       "description":"Desired tilt position<br> Unit: %.<br>Parameter is <b>optional</b>. Available when: check if `percent_tilt_control` label is provided.",
                       "type":"integer",
                       "minimum":0,
                       "maximum":100,
                       "example":50
                    },
                    "current_tilt":{
                       "description":"Current tilt position<br> Unit: %.<br>Parameter is <b>optional</b>. Available when: check if `percent_tilt_control` label is provided.",
                       "type":"integer",
                       "minimum":0,
                       "maximum":100,
                       "example":50,
                       "readOnly":true
                    },
                    "tilt_range":{
                       "description":"Determines tilt range. <br> Unit: angle(degrees). <br>Parameter is <b>optional</b>. Available when: check if `percent_tilt_control` label is provided.<br>Can be modified when: check if `window_covering_type` is `tilt_blind` or `pergola`. When `window_covering_type` is `tilt_blind` ONLY 90 and 180 are valid values.",
                       "type":"integer",
                       "minimum":0,
                       "maximum":180,
                       "example":90
                    },
                    "full_cycle_duration":{
                       "description":"Time required by motor to do full lift cycle from 100% to 0% or 0% to 100% (select larger). Proper full open or full close action is based on this value.<br> Unit: seconds<br>Parameter is <b>optional</b>. Available when: check if `has_lift_duration` label is provided.<br>Can be modified when: check if `lift_control_mode` is `fixed_duration`. ",
                       "type":"integer",
                       "minimum":300,
                       "maximum":10000,
                       "example":750
                    },
                    "tilt_duration":{
                       "description":"Time required by motor to do full tilt cycle.<br> Unit: milliseconds<br>Parameter is <b>optional</b>. Available when: check if `has_tilt_duration` label is provided.",
                       "type":"integer",
                       "minimum":300,
                       "maximum":10000,
                       "example":750
                    },
                    "tilt_cycle_distance":{
                       "description":"Number of motor steps to do full tilt cycle. Available when: check if `has_tilt_cycle_distance` label is provided.",
                       "type":"integer",
                       "minimum":10,
                       "maximum":65535,
                       "example":1000
                    },
                    "motor_running_current_threshold":{
                       "description":"Current threshold that indicates motor is running. <br> Unit: mA. <br>Parameter is <b>optional</b>. Available when: check if `has_motor_running_current_threshold` label is provided.",
                       "type":"integer",
                       "minimum":30,
                       "maximum":500,
                       "example":150
                    },
                    "motor_overload_current_threshold":{
                       "description":"Current threshold that indicates motor is overloaded / stalled. <br> Unit: mA. <br>Parameter is <b>optional</b>. Available when: check if `has_motor_overload_current_threshold` label is provided.",
                       "type":"integer",
                       "minimum":100,
                       "maximum":5000,
                       "example":2000
                    },
                    "backlight_mode":{
                       "description":"Buttons backlight mode. Parameter is <b>optional</b>. Available when backlight is supported - check if `has_backlight` label is provided.",
                       "type":"string",
                       "enum":[
                          "auto",
                          "fixed",
                          "off"
                       ],
                       "example":"fixed"
                    },
                    "backlight_brightness":{
                       "description":"Buttons backlight brightness.<br> Paremeter <b>hidden</b> when backlight is <b>unsupported</b>.<br> Unit: %",
                       "type":"integer",
                       "minimum":0,
                       "maximum":100,
                       "example":95
                    },
                    "backlight_idle_color":{
                       "description":"HTML/Hex RGB representation of color when controller is in idle (inactive state).<br> Paremeter <b>hidden</b> when backlight is <b>unsupported</b>.",
                       "type":"string",
                       "pattern":"/^#[0-9a-f]{6}$/i",
                       "example":"#FF00FF"
                    },
                    "backlight_active_color":{
                       "description":"HTML/Hex RGB representation of color when controller is active eg. motor is working.<br> Paremeter <b>hidden</b> when backlight is <b>unsupported</b>.",
                       "type":"string",
                       "pattern":"/^#[0-9a-f]{6}$/i",
                       "example":"#FFFF00"
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.SBus.BlindController/value"
           }
        },
        "Device.SBus.AnalogOutput":{
           "description":"Wired SBus Analog Output representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ASBusDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "value",
                    "value_minimum",
                    "value_maximum",
                    "raw_value",
                    "raw_value_minimum",
                    "raw_value_maximum",
                    "unit"
                 ],
                 "properties":{
                    "value":{
                       "description":"Value of analog output in unit specified in `unit` property. Minimum value is set in property `value_minimum` and maximum value is set in property `value_maximum`.",
                       "type":"integer",
                       "example":2000
                    },
                    "value_minimum":{
                       "description":"Lower limit of value.",
                       "type":"integer",
                       "readOnly":true,
                       "example":0
                    },
                    "value_maximum":{
                       "description":"Upper limit of value.",
                       "type":"integer",
                       "readOnly":true,
                       "example":10000
                    },
                    "raw_value":{
                       "description":"Raw value that is sent to analog output. Calculated automatically when changed value, based on minimum and maximum values.",
                       "type":"integer",
                       "readOnly":true,
                       "example":1146
                    },
                    "raw_value_minimum":{
                       "description":"Lower limit of raw value.",
                       "type":"integer",
                       "readOnly":true,
                       "example":0
                    },
                    "raw_value_maximum":{
                       "description":"Upper limit of raw value.",
                       "type":"integer",
                       "readOnly":true,
                       "example":10000
                    },
                    "unit":{
                       "description":"Value unit used by analog output.",
                       "type":"string",
                       "readOnly":true,
                       "example":"mV"
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.SBus.AnalogOutput/value"
           }
        },
        "Device.SBus.PulseWidthModulation":{
           "description":"Wired SBus Pulse width modulation device representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ASBusDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "frequency",
                    "frequency_minimum",
                    "frequency_maximum",
                    "duty_cycle"
                 ],
                 "properties":{
                    "frequency":{
                       "description":"Frequency of pulse width modulation signal. Minimum frequency is set in property `frequency_minimum` and maximum frequency is set in property `frequency_maximum`.<br> Unit: Hz",
                       "type":"integer",
                       "example":2000
                    },
                    "frequency_minimum":{
                       "description":"Lower limit of frequency.<br> Unit: Hz",
                       "type":"integer",
                       "readOnly":true,
                       "example":0
                    },
                    "frequency_maximum":{
                       "description":"Upper limit of frequency.<br> Unit: Hz",
                       "type":"integer",
                       "readOnly":true,
                       "example":10000
                    },
                    "duty_cycle":{
                       "description":"Pulse width modulation duty cycle. The amount of time a digital signal is in the \"active\" state relative to the period of the signal.<br> Unit: %",
                       "type":"integer",
                       "minimum":0,
                       "maximum":100,
                       "example":80
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.SBus.PulseWidthModulation/value"
           }
        },
        "Device.SBus.FloodSensor":{
           "description":"Wired SBus Flood sensor device representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ASBusDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "flood_detected"
                 ],
                 "properties":{
                    "flood_detected":{
                       "description":"A flag representing the detection of flood / water leak by the sensor.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.SBus.FloodSensor/value"
           }
        },
        "Device.SBus.Valve":{
           "description":"Wired SBus Valve device representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ASBusDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "enabled",
                    "state",
                    "open_percent",
                    "temperature_valve",
                    "opening_direction",
                    "max_single_move",
                    "minimal_opening",
                    "pause_time",
                    "hysteresis",
                    "proportional_gain",
                    "opening_time",
                    "calibration_time",
                    "opening_time_mode",
                    "floor_overheating_temperature",
                    "heat_source_protection",
                    "heat_source_protection_temperature",
                    "return_protection",
                    "return_protection_temperature",
                    "central_heating_target_temperature",
                    "floor_heating_target_temperature",
                    "cooling_target_temperature",
                    "valve_type",
                    "work_mode",
                    "emergency_behaviour",
                    "valve_closes_from_pump_threshold",
                    "blockade",
                    "blockade_reasons"
                 ],
                 "properties":{
                    "enabled":{
                       "description":"Indicates if valve is turned on.",
                       "type":"boolean",
                       "example":false
                    },
                    "state":{
                       "description":"Valve current working state.",
                       "type":"string",
                       "readOnly":true,
                       "enum":[
                          "off",
                          "calibration",
                          "return_protection",
                          "heat_source_protection",
                          "work",
                          "blockade",
                          "alarm",
                          "manual_work",
                          "synchronization"
                       ]
                    },
                    "open_percent":{
                       "description":"Current opening percent.<br> Unit: % with two decimal numbers, multiplied by 100.",
                       "type":"integer",
                       "multipleOf":100,
                       "readOnly":true
                    },
                    "temperature_valve":{
                       "description":"Current valve temperature.<br>Unit: °C with one decimal number, multiplied by 10.",
                       "type":"boolean",
                       "multipleOf":10,
                       "readOnly":true
                    },
                    "opening_direction":{
                       "description":"Valve opening direction.",
                       "type":"string",
                       "enum":[
                          "left",
                          "right"
                       ]
                    },
                    "max_single_move":{
                       "description":"The maximum percentage that the valve can open in one interval.<br>Unit: %",
                       "type":"integer",
                       "minimum":1,
                       "maximum":99
                    },
                    "minimal_opening":{
                       "description":"Minimum opening below which the valve cannot close further in its normal operation.<br>Unit: %",
                       "type":"integer",
                       "minimum":1,
                       "maximum":99
                    },
                    "pause_time":{
                       "description":"The pause time the valve takes after opening/closing during normal operation.<br>Unit: second",
                       "type":"integer",
                       "minimum":1,
                       "maximum":900
                    },
                    "hysteresis":{
                       "description":"Valve temperature hysteresis.<br>Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":10,
                       "minimum":2,
                       "maximum":20
                    },
                    "proportional_gain":{
                       "description":"Specifies the response strength to temperature error.",
                       "type":"integer",
                       "minimum":1,
                       "maximum":10
                    },
                    "opening_time":{
                       "description":"The time it takes for the valve to open.<br>Unit: seconds",
                       "type":"integer",
                       "minimum":10,
                       "maximum":1500
                    },
                    "calibration_time":{
                       "description":"The time it takes for the valve to open in calibration.<br>Unit: seconds",
                       "type":"integer",
                       "minimum":10,
                       "maximum":1500
                    },
                    "opening_time_mode":{
                       "description":"Determines whether the calibration time differs from valve opening time in work.<br>Available when `has_opening_time_mode` label is provided.",
                       "type":"string",
                       "enum":[
                          "linked",
                          "splitted"
                       ]
                    },
                    "floor_overheating_temperature":{
                       "description":"The temperature after which the valve will close in floor heating mode.<br>Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":10,
                       "minimum":250,
                       "maximum":550
                    },
                    "heat_source_protection":{
                       "description":"Turns on/off the heating source protection.<br>Available when `heat_source_sensor_available` label is provided.",
                       "type":"boolean"
                    },
                    "heat_source_protection_temperature":{
                       "description":"The temperature after which the valve will open if heat source protection is enabeld.<br>Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":10,
                       "minimum":600,
                       "maximum":1000
                    },
                    "return_protection":{
                       "description":"Turns on/off the return protection. <br>Available when `return_sensor_available` label is provided.",
                       "type":"boolean"
                    },
                    "return_protection_temperature":{
                       "description":"The temperature below which the valve will close if return protection is enabeld.<br>Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":10,
                       "minimum":100,
                       "maximum":800
                    },
                    "central_heating_target_temperature":{
                       "description":"Temperature setpoint that the device should maintain in heating as central heating valve.<br>Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":10,
                       "minimum":100,
                       "maximum":990
                    },
                    "floor_heating_target_temperature":{
                       "description":"Temperature setpoint that the device should maintain in heating as floor heating valve.<br>Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":10,
                       "minimum":100,
                       "maximum":500
                    },
                    "cooling_target_temperature":{
                       "description":"Temperature setpoint that the device should maintain in cooling mode.<br>Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":10,
                       "minimum":50,
                       "maximum":990
                    },
                    "valve_type":{
                       "description":"Mixing valve type.",
                       "type":"string",
                       "enum":[
                          "central_heating",
                          "floor_heating"
                       ]
                    },
                    "work_mode":{
                       "description":"Specify whether valve is used to heating or cooling.",
                       "type":"string",
                       "enum":[
                          "heating",
                          "cooling"
                       ]
                    },
                    "emergency_behaviour":{
                       "description":"Specify valve behavior after communication loss.",
                       "type":"string",
                       "enum":[
                          "close",
                          "open",
                          "safe_opening_percentage",
                          "standalone_work"
                       ]
                    },
                    "valve_closes_from_pump_threshold":{
                       "description":"Closes the valve when the pump operating conditions are not met.<br>Available when `heat_source_sensor_available` label is provided.",
                       "type":"boolean"
                    },
                    "blockade":{
                       "description":"Specify whether valve blockade is on or off.",
                       "type":"boolean"
                    },
                    "blockade_reasons":{
                       "description":"Specify the reason why the valve entered blockade state.",
                       "type":"array",
                       "readOnly":true,
                       "items":{
                          "type":"string",
                          "enum":[
                             "floor_overheat",
                             "floor_heating_disabled",
                             "summer_mode",
                             "boiler_priority",
                             "device_standby_mode",
                             "closing_if_threshold_not_met",
                             "room_regulator",
                             "external_blockade"
                          ]
                       }
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.SBus.Valve/value"
           }
        },
        "Device.SBus.ValvePump":{
           "description":"Wired SBus Valve pump device representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ASBusDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "state",
                    "relay_control_mode",
                    "emergency_behaviour",
                    "antistop",
                    "work_mode",
                    "temperature_threshold_heating",
                    "temperature_threshold_cooling",
                    "pump_work_in_calibration",
                    "blockade"
                 ],
                 "properties":{
                    "state":{
                       "description":" Specify whether pump is working or not.",
                       "type":"boolean",
                       "readOnly":true
                    },
                    "relay_control_mode":{
                       "description":"Specify whether the pump relay belongs to the internal valve algorithm or external entity.",
                       "type":"string",
                       "enum":[
                          "internal",
                          "external"
                       ]
                    },
                    "emergency_behaviour":{
                       "description":"Specify pump behavior after communication loss if the pump relay control mode is internal.",
                       "type":"string",
                       "enum":[
                          "turn_off",
                          "turn_on"
                       ]
                    },
                    "antistop":{
                       "description":"Turns on the pump for 5 hours every 10 days if the pump relay control mode is internal.",
                       "type":"boolean"
                    },
                    "work_mode":{
                       "description":"Specify pump work mode if the pump relay control mode is internal.<br>Label `heat_source_sensor_available` is required to set `temperature_control`.",
                       "type":"string",
                       "enum":[
                          "always_on",
                          "always_off",
                          "temperature_control"
                       ]
                    },
                    "temperature_threshold_heating":{
                       "description":"The pump will operate after exceeding the temperature threshold.<br>Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":10,
                       "minimum":100,
                       "maximum":800
                    },
                    "temperature_threshold_cooling":{
                       "description":"The pump will operate below the temperature threshold.<br>Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":10,
                       "minimum":100,
                       "maximum":550
                    },
                    "pump_work_in_calibration":{
                       "description":"Allows the pump to operate in valve calibration.<br>Available when `pump_work_in_calibration_support` label is provided.",
                       "type":"boolean"
                    },
                    "blockade":{
                       "description":"Specify whether pump blockade is on or off.",
                       "type":"boolean"
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.SBus.ValvePump/value"
           }
        },
        "Device.SBus.EnergyMeter":{
           "description":"Wired SBus Energy Meter device representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ASBusDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "active_power",
                    "energy_consumed_today",
                    "energy_consumed_yesterday",
                    "energy_consumed_total"
                 ],
                 "properties":{
                    "current":{
                       "description":"Recent AC current measument.<br> Parameter is <b>optional</b>. Available when sensor is supported - check if `has_current_sensor` label is provided.<br> Unit: A with three decimal number, multiplied by 1000 (mA).",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":15000,
                       "multipleOf":0.001,
                       "example":120
                    },
                    "voltage":{
                       "description":"Recent AC voltage measument.<br> Parameter is <b>optional</b>. Available when sensoris supported - check if `has_voltage_sensor` label is provided.<br> Unit: V with three decimal number, multiplied by 1000 (mV).",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":260000,
                       "multipleOf":0.001,
                       "example":230000
                    },
                    "active_power":{
                       "description":"Recent AC active power measument.<br> Unit: W with three decimal number, multiplied by 1000 (mW).",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":4500000,
                       "multipleOf":0.001,
                       "example":7000
                    },
                    "energy_consumed_today":{
                       "description":"Sum of energy used today.<br> Unit: kWh with three decimal number, multiplied by 1000 (Wh).",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":100000,
                       "multipleOf":0.001,
                       "example":600
                    },
                    "energy_consumed_yesterday":{
                       "description":"Sum of energy used yesterday.<br> Unit: kWh with three decimal number, multiplied by 1000 (Wh).",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":100000,
                       "multipleOf":0.001,
                       "example":500
                    },
                    "energy_consumed_total":{
                       "description":"Total sum of energy used.<br> Unit: kWh with three decimal number, multiplied by 1000 (Wh).",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":2147483647,
                       "multipleOf":0.001,
                       "example":3000000
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.SBus.EnergyMeter/value"
           }
        },
        "Device.SBus.ValveAnalogPID":{
           "description":"Wired SBus Valve 0-10V with PID device representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ASBusDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "heating_target_temperature",
                    "heating_target_temperature_minimum",
                    "heating_target_temperature_maximum",
                    "cooling_target_temperature",
                    "cooling_target_temperature_minimum",
                    "cooling_target_temperature_maximum",
                    "work_mode",
                    "current_temperature",
                    "proportional_gain",
                    "integral_gain",
                    "derivative_gain",
                    "calculated_pid_value",
                    "output_value"
                 ],
                 "properties":{
                    "heating_target_temperature":{
                       "description":"Temperature setpoint that the device should maintain in heating.<br>Unit: °C with one decimal number, multiplied by 10.<br>Minimum from the parameter `heating_target_temperature_minimum`, maximum from the parameter `heating_target_temperature_maximum`.",
                       "type":"integer",
                       "multipleOf":10,
                       "minimum":100,
                       "maximum":500
                    },
                    "heating_target_temperature_minimum":{
                       "description":"Minimum value of temperature setpoint in heating.<br>Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":10,
                       "readOnly":true
                    },
                    "heating_target_temperature_maximum":{
                       "description":"Maximum value of temperature setpoint in heating.<br>Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":10,
                       "readOnly":true
                    },
                    "cooling_target_temperature":{
                       "description":"Temperature setpoint that the device should maintain in cooling.<br>Unit: °C with one decimal number, multiplied by 10.<br>Minimum from the parameter `heating_target_temperature_minimum`, maximum from the parameter `heating_target_temperature_maximum`.",
                       "type":"integer",
                       "multipleOf":10,
                       "minimum":100,
                       "maximum":500
                    },
                    "cooling_target_temperature_minimum":{
                       "description":"Minimum value of temperature setpoint in cooling.<br>Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":10,
                       "readOnly":true
                    },
                    "cooling_target_temperature_maximum":{
                       "description":"Maximum value of temperature setpoint in cooling.<br>Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":10,
                       "readOnly":true
                    },
                    "work_mode":{
                       "description":"Specify valve work mode.",
                       "type":"string",
                       "enum":[
                          "heating",
                          "cooling",
                          "off"
                       ]
                    },
                    "current_temperature":{
                       "description":"Current valve water temperature.<br>Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":10,
                       "readOnly":true
                    },
                    "proportional_gain":{
                       "description":"Proportional gain parameter for PID calculation.<br>Unit: no unit, parameter with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":10,
                       "minimum":0,
                       "maximum":100
                    },
                    "integral_gain":{
                       "description":"Integral gain parameter for PID calculation.<br>Unit: no unit, parameter with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":10,
                       "minimum":0,
                       "maximum":100
                    },
                    "derivative_gain":{
                       "description":"Derivative gain parameter for PID calculation.<br>Unit: no unit, parameter with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":10,
                       "minimum":0,
                       "maximum":100
                    },
                    "calculated_pid_value":{
                       "description":"Current calculated PID value.",
                       "type":"integer",
                       "readOnly":true
                    },
                    "output_value":{
                       "description":"Current valve output voltage.<br>Unit: V with three decimal number, multiplied by 1000 (mV)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":10000
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.SBus.ValveAnalogPID/value"
           }
        },
        "Device.SBus.WaterMeter":{
           "description":"Wired SBus Water Meter device representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ASBusDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "total_water_volume",
                    "monthly_water_volume"
                 ],
                 "properties":{
                    "current_water_flow":{
                       "description":"Current water flow.<br> Unit: m3/h with two decimal number, multiplied by 100.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.01,
                       "nullable":true,
                       "example":4139
                    },
                    "total_water_volume":{
                       "description":"Total water flow during the lifetime of water meter.<br> Unit: m3 with two decimal numbers, multiplied by 100.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.01,
                       "example":3000000
                    },
                    "monthly_water_volume":{
                       "description":"Monthly water flow data.",
                       "type":"array",
                       "readOnly":true,
                       "items":{
                          "type":"object",
                          "required":[
                             "year",
                             "month",
                             "value"
                          ],
                          "properties":{
                             "year":{
                                "description":"Year of total water flow volume save.",
                                "type":"integer",
                                "readOnly":true
                             },
                             "month":{
                                "description":"Month of total water flow volume save.",
                                "type":"integer",
                                "readOnly":true
                             },
                             "value":{
                                "description":"Total water flow volume for the time of saving the data. <br>Unit: m3 with two decimal numbers, multiplied by 100.<br>**NOTE:** this is a total water flow volume value, not month water flow volume.",
                                "type":"integer",
                                "multipleOf":1000,
                                "readOnly":true
                             }
                          }
                       }
                    },
                    "water_volume_current_month":{
                       "description":"Current month water flow volume data. Can be `null` when there is no monthly data saved yet and no total water flow volume data read.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.MonthlyWaterFlow"
                          }
                       ]
                    },
                    "water_volume_last_month":{
                       "description":"Last month water flow volume data. Can be `null` when there is no monthly data saved for last month.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.MonthlyWaterFlow"
                          }
                       ]
                    },
                    "water_volume_month_before_last_month":{
                       "description":"Month before the last month water flow volume data. Can be `null` when there is no monthly data saved for month before last month.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.MonthlyWaterFlow"
                          }
                       ]
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.SBus.WaterMeter/value"
           }
        },
        "Device.SBus.HeatMeter":{
           "description":"Wired SBus Water Meter device representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ASBusDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "total_water_volume",
                    "energy_consumed_total",
                    "monthly_water_volume",
                    "monthly_energy_consumption"
                 ],
                 "properties":{
                    "current_water_flow":{
                       "description":"Current water flow.<br> Unit: m3/h with two decimal number, multiplied by 100.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.01,
                       "nullable":true,
                       "example":4139
                    },
                    "total_water_volume":{
                       "description":"Total water flow during the lifetime of water meter.<br> Unit: m3 with two decimal numbers, multiplied by 100.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.01,
                       "example":3000000
                    },
                    "monthly_water_volume":{
                       "description":"Monthly water flow data.",
                       "type":"array",
                       "readOnly":true,
                       "items":{
                          "type":"object",
                          "required":[
                             "year",
                             "month",
                             "value"
                          ],
                          "properties":{
                             "year":{
                                "description":"Year of total water flow volume save.",
                                "type":"integer",
                                "readOnly":true
                             },
                             "month":{
                                "description":"Month of total water flow volume save.",
                                "type":"integer",
                                "readOnly":true
                             },
                             "value":{
                                "description":"Total water flow volume for the time of saving the data. <br>Unit: m3 with two decimal numbers, multiplied by 100.<br>**NOTE:** this is a total water flow volume value, not month water flow volume.",
                                "type":"integer",
                                "multipleOf":1000,
                                "readOnly":true
                             }
                          }
                       }
                    },
                    "water_volume_current_month":{
                       "description":"Current month water flow volume data. Can be `null` when there is no monthly data saved yet and no total water flow volume data read.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.MonthlyWaterFlow"
                          }
                       ]
                    },
                    "water_volume_last_month":{
                       "description":"Last month water flow volume data. Can be `null` when there is no monthly data saved for last month.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.MonthlyWaterFlow"
                          }
                       ]
                    },
                    "water_volume_month_before_last_month":{
                       "description":"Month before the last month water flow volume data. Can be `null` when there is no monthly data saved for month before last month.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.MonthlyWaterFlow"
                          }
                       ]
                    },
                    "energy_consumed_total":{
                       "description":"Energy consumption lifetime.<br>Unit: kWh, multiplied by 1000 (Wh)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":100000
                    },
                    "flow_temperature":{
                       "description":"Temperature measured for water flow.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "example":377
                    },
                    "return_temperature":{
                       "description":"Temperature measured on installation return.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "example":355
                    },
                    "active_power":{
                       "description":"Instantaneous value of thermal power.<br> Unit: W with three decimal number, multiplied by 1000 (mW).",
                       "type":"integer",
                       "multipleOf":0.001,
                       "example":320000
                    },
                    "monthly_energy_consumption":{
                       "description":"Monthly total energy consumption data.",
                       "type":"array",
                       "readOnly":true,
                       "items":{
                          "type":"object",
                          "required":[
                             "year",
                             "month",
                             "value"
                          ],
                          "properties":{
                             "year":{
                                "description":"Year of total energy consumption save.",
                                "type":"integer",
                                "readOnly":true
                             },
                             "month":{
                                "description":"Month of total energy consumption save.",
                                "type":"integer",
                                "readOnly":true
                             },
                             "value":{
                                "description":"Total energy consumption for the time of saving the data. <br>Unit: kWh, multiplied by 1000 (Wh).<br>**NOTE:** this is a total energy consumption value, not month energy consumption.",
                                "type":"integer",
                                "multipleOf":1000,
                                "readOnly":true
                             }
                          }
                       }
                    },
                    "energy_consumed_current_month":{
                       "description":"Current month energy consumption data. Can be `null` when there is no monthly data saved yet and no total energy consumption data read.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.MonthlyEnergyData"
                          }
                       ]
                    },
                    "energy_consumed_last_month":{
                       "description":"Last month energy consumption data. Can be `null` when there is no monthly data saved for last month.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.MonthlyEnergyData"
                          }
                       ]
                    },
                    "energy_consumed_month_before_last_month":{
                       "description":"Month before the last month energy consumption data. Can be `null` when there is no monthly data saved for month before last month.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.MonthlyEnergyData"
                          }
                       ]
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.SBus.HeatMeter/value"
           }
        },
        "Device.SBus.FanCoilValveSettings":{
           "description":"Four pipe installation valve settings.",
           "type":"object",
           "required":[
              "mode",
              "default_state",
              "state",
              "current_position"
           ],
           "properties":{
              "mode":{
                 "description":"Operation mode for the valve in four pipe installation.",
                 "type":"string",
                 "enum":[
                    "off",
                    "heating",
                    "cooling"
                 ],
                 "example":"heating"
              },
              "default_state":{
                 "description":"Default state of the valve.",
                 "type":"string",
                 "enum":[
                    "normal_close",
                    "normal_open"
                 ],
                 "example":"normal_close"
              },
              "state":{
                 "description":"Current state of the valve.",
                 "type":"string",
                 "enum":[
                    "closed",
                    "open",
                    "partially_open"
                 ],
                 "readOnly":true,
                 "example":"closed"
              },
              "current_position":{
                 "description":"Current position of the valve.<br> Unit: %",
                 "type":"integer",
                 "readOnly":true,
                 "minimum":0,
                 "maximum":100,
                 "example":0
              }
           }
        },
        "Device.SBus.FanCoil":{
           "description":"Wired SBus FanCoil device representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ASBusDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "state",
                    "profile_type",
                    "work_mode",
                    "fan_operation_mode",
                    "installation_type",
                    "target_temperature_minimum",
                    "target_temperature_maximum",
                    "comfort_profile",
                    "eco_profile",
                    "protection_profile",
                    "hysteresis",
                    "two_pipe_installation",
                    "four_pipe_installation",
                    "fan",
                    "boost_mode",
                    "room_temperature_sensor_source",
                    "factory_reset_user_timestamps",
                    "factory_reset_service_timestamps"
                 ],
                 "properties":{
                    "state":{
                       "description":"Current fan coil state.",
                       "type":"string",
                       "readOnly":true,
                       "enum":[
                          "off",
                          "idle",
                          "heating_demand",
                          "cooling_demand",
                          "boost_active",
                          "test_mode",
                          "alarm"
                       ],
                       "example":"idle"
                    },
                    "profile_type":{
                       "description":"Type of profile used by fan coil.",
                       "type":"string",
                       "enum":[
                          "comfort",
                          "eco",
                          "protection"
                       ],
                       "example":"eco"
                    },
                    "work_mode":{
                       "description":"Current working mode.",
                       "type":"string",
                       "enum":[
                          "automatic",
                          "cooling",
                          "heating"
                       ],
                       "example":"automatic"
                    },
                    "fan_operation_mode":{
                       "description":"Fan operation mode.",
                       "type":"string",
                       "enum":[
                          "automatic",
                          "manual"
                       ],
                       "example":"automatic"
                    },
                    "installation_type":{
                       "description":"Installation type.",
                       "type":"string",
                       "enum":[
                          "two_pipes",
                          "four_pipes"
                       ],
                       "example":"two_pipes"
                    },
                    "target_temperature_minimum":{
                       "description":"Defines the absolute minimum target temperature for all profiles.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "readOnly":true,
                       "example":50
                    },
                    "target_temperature_maximum":{
                       "description":"Defines the absolute maximum target temperature for all profiles.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "readOnly":true,
                       "example":350
                    },
                    "comfort_profile":{
                       "description":"Comfort profile settings.",
                       "type":"object",
                       "required":[
                          "target_temperature",
                          "target_temperature_minimum",
                          "target_temperature_maximum",
                          "delta_temperature"
                       ],
                       "properties":{
                          "target_temperature":{
                             "description":"Defines the desired target temperature for the Comfort profile.<br> Unit: °C with one decimal number, multiplied by 10.<br>Minimum value from `comfort_profile.target_temperature_minimum`, maximum value from `comfort_profile.target_temperature_maximum`.",
                             "type":"integer",
                             "multipleOf":0.1,
                             "example":210
                          },
                          "target_temperature_minimum":{
                             "description":"Defines the minimum target temperature for the Comfort profile.<br> Unit: °C with one decimal number, multiplied by 10.<br>Minimum value from `target_temperature_minimum`, maximum value from `comfort_profile.target_temperature_maximum`.",
                             "type":"integer",
                             "multipleOf":0.1,
                             "example":200
                          },
                          "target_temperature_maximum":{
                             "description":"Defines the maximum target temperature for the Comfort profile.<br> Unit: °C with one decimal number, multiplied by 10.<br>Minimum value from `comfort_profile.target_temperature_minimum`, maximum value from `target_temperature_maximum`.",
                             "type":"integer",
                             "multipleOf":0.1,
                             "example":220
                          },
                          "delta_temperature":{
                             "description":"Delta determines the range of voltage for 0_10V fan or valve. The farther the range is from the setpoint, the higher the voltage is.<br> Unit: °C with one decimal number, multiplied by 10.",
                             "type":"integer",
                             "minimum":2,
                             "maximum":50,
                             "multipleOf":0.1,
                             "example":50
                          }
                       }
                    },
                    "eco_profile":{
                       "description":"Eco profile settings.",
                       "type":"object",
                       "required":[
                          "target_temperature_minimum",
                          "target_temperature_maximum",
                          "delta_temperature_minimum",
                          "delta_temperature_maximum",
                          "deadband"
                       ],
                       "properties":{
                          "target_temperature_minimum":{
                             "description":"Defines the minimum target temperature for the Eco profile.<br> Unit: °C with one decimal number, multiplied by 10.<br>Minimum value from `protection_profile.target_temperature_minimum`, maximum value from `eco_profile.target_temperature_maximum` minus `eco_profile.deadband`.",
                             "type":"integer",
                             "multipleOf":0.1,
                             "example":150
                          },
                          "target_temperature_maximum":{
                             "description":"Defines the maximum target temperature for the Eco profile.<br> Unit: °C with one decimal number, multiplied by 10.<br>Minimum value from `eco_profile.target_temperature_minimum` plus `eco_profile.deadband`, maximum value from `protection_profile.target_temperature_max`.",
                             "type":"integer",
                             "multipleOf":0.1,
                             "example":200
                          },
                          "delta_temperature_minimum":{
                             "description":"Delta determines the range of voltage for 0_10V valve. The farther the range is from the setpoint, the higher the voltage is.<br> Unit: °C with one decimal number, multiplied by 10.<br>Maximum value from `eco_profile.delta_temperature_maximum`.",
                             "type":"integer",
                             "minimum":2,
                             "multipleOf":0.1,
                             "example":20
                          },
                          "delta_temperature_maximum":{
                             "description":"Delta determines the range of voltage for 0_10V valve. The farther the range is from the setpoint, the higher the voltage is.<br> Unit: °C with one decimal number, multiplied by 10.<br>Minimum value from `eco_profile.delta_temperature_minimum`.",
                             "type":"integer",
                             "maximum":50,
                             "multipleOf":0.1,
                             "example":30
                          },
                          "deadband":{
                             "description":"Minimum required difference between `eco_profile.target_temperature_minimum` and `eco_profile.target_temperature_maximum`.<br> Unit: °C with one decimal number, multiplied by 10.",
                             "type":"integer",
                             "readOnly":true,
                             "multipleOf":0.1,
                             "example":10
                          }
                       }
                    },
                    "protection_profile":{
                       "description":"Protection profile settings.",
                       "type":"object",
                       "required":[
                          "target_temperature_min",
                          "target_temperature_min_minimum",
                          "target_temperature_max",
                          "target_temperature_max_maximum",
                          "delta_temperature_minimum",
                          "delta_temperature_maximum"
                       ],
                       "properties":{
                          "target_temperature_min":{
                             "description":"Defines the minimum target temperature for the Protection profile.<br> Unit: °C with one decimal number, multiplied by 10.<br>Minimum value from `target_temperature_min_minimum`, maximum value from `eco_profile.target_temperature_minimum`.",
                             "type":"integer",
                             "multipleOf":0.1,
                             "example":50
                          },
                          "target_temperature_min_minimum":{
                             "description":"Defines the absolute minimum target temperature for the Protection profile.<br> Unit: °C with one decimal number, multiplied by 10.<br>Minimum value from `target_temperature_minimum`, maximum value from `eco_profile.target_temperature_minimum`.",
                             "type":"integer",
                             "multipleOf":0.1,
                             "example":50
                          },
                          "target_temperature_max":{
                             "description":"Defines the maximum target temperature for the Protection profile.<br> Unit: °C with one decimal number, multiplied by 10.<br>Minimum value from `eco_profile.target_temperature_maximum`, maximum value from `protection_profile.target_temperature_max_maximum`.",
                             "type":"integer",
                             "multipleOf":0.1,
                             "example":200
                          },
                          "target_temperature_max_maximum":{
                             "description":"Defines the absolute maximum target temperature for the Protection profile.<br> Unit: °C with one decimal number, multiplied by 10.<br>Minimum value from `eco_profile.target_temperature_maximum`, maximum value from `target_temperature_maximum`.",
                             "type":"integer",
                             "multipleOf":0.1,
                             "example":250
                          },
                          "delta_temperature_minimum":{
                             "description":"Delta determines the range of voltage for 0_10V valve. The farther the range is from the setpoint, the higher the voltage is.<br> Unit: °C with one decimal number, multiplied by 10.<br>Maximum value from `protection_profile.delta_temperature_maximum`.",
                             "type":"integer",
                             "minimum":2,
                             "multipleOf":0.1,
                             "example":20
                          },
                          "delta_temperature_maximum":{
                             "description":"Delta determines the range of voltage for 0_10V valve. The farther the range is from the setpoint, the higher the voltage is.<br> Unit: °C with one decimal number, multiplied by 10.<br>Minimum value from `protection_profile.delta_temperature_minimum`.",
                             "type":"integer",
                             "maximum":50,
                             "multipleOf":0.1,
                             "example":30
                          }
                       }
                    },
                    "hysteresis":{
                       "description":"Hysteresis settings.",
                       "type":"object",
                       "required":[
                          "automatic",
                          "two_state_valve"
                       ],
                       "properties":{
                          "automatic":{
                             "description":"Hysteresis in automatic operation mode.<br> Unit: °C with one decimal number, multiplied by 10.",
                             "type":"integer",
                             "minimum":2,
                             "maximum":50,
                             "multipleOf":0.1,
                             "example":50
                          },
                          "two_state_valve":{
                             "description":"Hysteresis settings for two state valve mode.",
                             "type":"object",
                             "required":[
                                "heating",
                                "cooling"
                             ],
                             "properties":{
                                "heating":{
                                   "description":"Hysteresis for heating mode.<br> Unit: °C with one decimal number, multiplied by 10.",
                                   "type":"integer",
                                   "minimum":2,
                                   "maximum":50,
                                   "multipleOf":0.1,
                                   "example":50
                                },
                                "cooling":{
                                   "description":"Hysteresis for cooling mode.<br> Unit: °C with one decimal number, multiplied by 10.",
                                   "type":"integer",
                                   "minimum":2,
                                   "maximum":50,
                                   "multipleOf":0.1,
                                   "example":50
                                }
                             }
                          }
                       }
                    },
                    "two_pipe_installation":{
                       "description":"Two pipe installation properties.",
                       "type":"object",
                       "required":[
                          "valve_type",
                          "valve_state",
                          "valve_current_position"
                       ],
                       "properties":{
                          "valve_type":{
                             "description":"Type of valve used in two pipe installation.",
                             "type":"string",
                             "enum":[
                                "two_state",
                                "analog"
                             ],
                             "example":"two_state"
                          },
                          "valve_state":{
                             "description":"Current state of the valve.",
                             "type":"string",
                             "enum":[
                                "closed",
                                "open",
                                "partially_open"
                             ],
                             "readOnly":true,
                             "example":"closed"
                          },
                          "valve_current_position":{
                             "description":"Current position of the valve.<br> Unit: %",
                             "type":"integer",
                             "readOnly":true,
                             "minimum":0,
                             "maximum":100,
                             "example":0
                          }
                       }
                    },
                    "four_pipe_installation":{
                       "description":"Four pipe installation properties.",
                       "type":"object",
                       "required":[
                          "valve_type",
                          "valve_1",
                          "valve_2"
                       ],
                       "properties":{
                          "valve_type":{
                             "description":"Type of valve used in four pipe installation.",
                             "type":"string",
                             "enum":[
                                "two_state",
                                "analog"
                             ],
                             "example":"two_state"
                          },
                          "valve_1":{
                             "description":"Valve 1 settings for four pipe installation.",
                             "allOf":[
                                {
                                   "$ref":"#/components/schemas/Device.SBus.FanCoilValveSettings"
                                }
                             ]
                          },
                          "valve_2":{
                             "description":"Valve 2 settings for four pipe installation.",
                             "allOf":[
                                {
                                   "$ref":"#/components/schemas/Device.SBus.FanCoilValveSettings"
                                }
                             ]
                          }
                       }
                    },
                    "fan":{
                       "description":"Fan settings.",
                       "type":"object",
                       "required":[
                          "output_type",
                          "manual_fan_gear",
                          "relay_fan",
                          "analog_fan"
                       ],
                       "properties":{
                          "output_type":{
                             "description":"Type of fan output.",
                             "type":"string",
                             "enum":[
                                "relay",
                                "analog"
                             ],
                             "example":"relay"
                          },
                          "manual_fan_gear":{
                             "description":"Manual fan gear selection.",
                             "type":"string",
                             "enum":[
                                "first",
                                "second",
                                "third"
                             ],
                             "example":"first"
                          },
                          "relay_fan":{
                             "description":"Relay fan settings.",
                             "type":"object",
                             "required":[
                                "current_gear",
                                "first_gear_hysteresis",
                                "second_gear_hysteresis",
                                "third_gear_hysteresis"
                             ],
                             "properties":{
                                "current_gear":{
                                   "description":"Current relay fan gear.",
                                   "type":"string",
                                   "readOnly":true,
                                   "enum":[
                                      "first",
                                      "second",
                                      "third"
                                   ],
                                   "example":"first"
                                },
                                "first_gear_hysteresis":{
                                   "description":"Hysteresis for first relay fan gear.<br> Unit: °C with one decimal number, multiplied by 10.",
                                   "type":"integer",
                                   "minimum":2,
                                   "maximum":50,
                                   "multipleOf":0.1,
                                   "example":10
                                },
                                "second_gear_hysteresis":{
                                   "description":"Hysteresis for second relay fan gear.<br> Unit: °C with one decimal number, multiplied by 10.",
                                   "type":"integer",
                                   "minimum":2,
                                   "maximum":50,
                                   "multipleOf":0.1,
                                   "example":20
                                },
                                "third_gear_hysteresis":{
                                   "description":"Hysteresis for third relay fan gear.<br> Unit: °C with one decimal number, multiplied by 10.",
                                   "type":"integer",
                                   "minimum":2,
                                   "maximum":50,
                                   "multipleOf":0.1,
                                   "example":30
                                }
                             }
                          },
                          "analog_fan":{
                             "description":"Analog fan settings.",
                             "type":"object",
                             "required":[
                                "manual_first_gear_percent",
                                "manual_second_gear_percent",
                                "manual_third_gear_percent",
                                "automatic_output_percent"
                             ],
                             "properties":{
                                "manual_first_gear_percent":{
                                   "description":"Manual first gear output percent.<br>Maximum value from `manual_second_gear_percent`.",
                                   "type":"integer",
                                   "minimum":0,
                                   "example":20
                                },
                                "manual_second_gear_percent":{
                                   "description":"Manual second gear output percent.<br>Minimum value from `manual_first_gear_percent`, Maximum value from `manual_third_gear_percent`.",
                                   "type":"integer",
                                   "example":50
                                },
                                "manual_third_gear_percent":{
                                   "description":"Manual third gear output percent.<br>Minimum value from `manual_second_gear_percent`.",
                                   "type":"integer",
                                   "maximum":100,
                                   "example":80
                                },
                                "automatic_output_percent":{
                                   "description":"Output percent for analog fan in automatic mode.",
                                   "type":"integer",
                                   "readOnly":true,
                                   "minimum":0,
                                   "maximum":100,
                                   "example":60
                                }
                             }
                          }
                       }
                    },
                    "boost_mode":{
                       "description":"Boost mode settings.",
                       "type":"object",
                       "required":[
                          "cyclic_check_temperature_time",
                          "work_time",
                          "work_time_left"
                       ],
                       "properties":{
                          "cyclic_check_temperature_time":{
                             "description":"Time in for cyclic check temperature.<br> Unit: seconds",
                             "type":"integer",
                             "minimum":1200,
                             "maximum":7200,
                             "example":1800
                          },
                          "work_time":{
                             "description":"Total work time in boost mode.<br> Unit: seconds",
                             "type":"integer",
                             "minimum":300,
                             "maximum":1800,
                             "example":600
                          },
                          "work_time_left":{
                             "description":"Remaining work time in boost mode.<br> Unit: seconds",
                             "type":"integer",
                             "readOnly":true,
                             "minimum":0,
                             "maximum":1800,
                             "example":300
                          }
                       }
                    },
                    "room_temperature_sensor_source":{
                       "description":"Source of room temperature sensor.",
                       "type":"string",
                       "enum":[
                          "from_module",
                          "from_display",
                          "sinum"
                       ],
                       "example":"from_module"
                    },
                    "factory_reset_user_timestamps":{
                       "description":"Timestamps for factory reset by user in UTC time.<br> Unit: seconds since epoch.",
                       "type":"array",
                       "items":{
                          "type":"integer"
                       },
                       "readOnly":true,
                       "example":[
                          1700000000,
                          1700003600
                       ]
                    },
                    "factory_reset_service_timestamps":{
                       "description":"Timestamps for factory reset by service in UTC time.<br> Unit: seconds since epoch.",
                       "type":"array",
                       "items":{
                          "type":"integer"
                       },
                       "readOnly":true,
                       "example":[
                          1700007200,
                          1700010800
                       ]
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.SBus.FanCoil/value"
           }
        },
        "Device.SystemModule.Transceiver":{
           "description":"Abstract build in transceiver representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ASystemModule"
              },
              {
                 "type":"object",
                 "required":[
                    "transceiver_address",
                    "link_latency",
                    "latest_link_latency",
                    "ip",
                    "diagnostic"
                 ],
                 "properties":{
                    "transceiver_address":{
                       "description":"Unique address of network transceiver.",
                       "type":"integer",
                       "readOnly":true,
                       "example":1815979098
                    },
                    "link_latency":{
                       "description":"Average communication latency in last 10 minutes.<br> Unit: ms.",
                       "type":"integer",
                       "readOnly":true,
                       "example":50
                    },
                    "latest_link_latency":{
                       "description":"Latest reported communication latency.<br> Unit: ms.",
                       "type":"integer",
                       "readOnly":true,
                       "example":50
                    },
                    "ip":{
                       "description":"IP of transceiver.",
                       "type":"string",
                       "readOnly":true,
                       "example":"127.0.0.1"
                    },
                    "diagnostic":{
                       "description":"Diagnostic data for transceiver. It is JSON object. Data is available only when enabled with `enable_diagnostic` command. Not available on endpoints which returns list of devices. Available only when label `diagnostic_support` is present.",
                       "type":"object",
                       "readOnly":true,
                       "example":{
                          "tech_heap":{
                             "used":160,
                             "total_size":236
                          },
                          "sys":{
                             "cpu_temp":33
                          }
                       }
                    }
                 }
              }
           ]
        },
        "Device.SystemModule.WTPTransceiver":{
           "description":"Built in wtp transceiver module.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.SystemModule.Transceiver"
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.SystemModule.WTPTransceiver/value"
           }
        },
        "Device.SystemModule.SBusTransceiver":{
           "description":"Built in SBus transceiver module.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.SystemModule.Transceiver"
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.SystemModule.SBusTransceiver/value"
           }
        },
        "Device.SystemModule.ModbusTransceiver":{
           "description":"Built in Modbus transceiver module.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.SystemModule.Transceiver"
              },
              {
                 "type":"object",
                 "required":[
                    "slave_mode",
                    "slave_config"
                 ],
                 "properties":{
                    "slave_mode":{
                       "description":"Indicates if module is in slave mode. Can be changed only using command `enable_slave` or `disable_slave`.",
                       "type":"boolean",
                       "readOnly":true
                    },
                    "slave_config":{
                       "description":"Slave mode modbus RTU configuration.<br>Available when `modbus_slave_support` label is provided.",
                       "type":"object",
                       "required":[
                          "baud_rate",
                          "parity",
                          "stop_bits"
                       ],
                       "properties":{
                          "baud_rate":{
                             "description":"Baud rate on which the slave device works.",
                             "type":"integer",
                             "example":115200
                          },
                          "parity":{
                             "allOf":[
                                {
                                   "$ref":"#/components/schemas/Modbus.Config.Parity"
                                }
                             ]
                          },
                          "stop_bits":{
                             "allOf":[
                                {
                                   "$ref":"#/components/schemas/Modbus.Config.StopBit"
                                }
                             ]
                          }
                       }
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.SystemModule.ModbusTransceiver/value"
           }
        },
        "Device.SystemModule.TECHRSTransceiver":{
           "description":"Built in TECHRS transceiver module.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.SystemModule.Transceiver"
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.SystemModule.TECHRSTransceiver/value"
           }
        },
        "Device.SystemModule.Extender":{
           "description":"Abstract extender representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ASystemModule"
              },
              {
                 "type":"object",
                 "required":[
                    "transceiver_address",
                    "link_latency",
                    "latest_link_latency",
                    "ip",
                    "diagnostic",
                    "network_name",
                    "network_signal",
                    "network_channel",
                    "ethernet_connected"
                 ],
                 "properties":{
                    "transceiver_address":{
                       "description":"Unique address of network transceiver.",
                       "type":"integer",
                       "readOnly":true,
                       "example":1815979098
                    },
                    "link_latency":{
                       "description":"Average communication latency in last 10 minutes.<br> Unit: ms.",
                       "type":"integer",
                       "readOnly":true,
                       "example":50
                    },
                    "latest_link_latency":{
                       "description":"Latest reported communication latency.<br> Unit: ms.",
                       "type":"integer",
                       "readOnly":true,
                       "example":50
                    },
                    "ip":{
                       "description":"IP of transceiver.",
                       "type":"string",
                       "readOnly":true,
                       "example":"127.0.0.1"
                    },
                    "diagnostic":{
                       "description":"Diagnostic data for transceiver. It is JSON object. Data is available only when enabled with `enable_diagnostic` command. Not available on endpoints which returns list of devices. Available only when label `diagnostic_support` is present.",
                       "type":"object",
                       "readOnly":true,
                       "example":{
                          "tech_heap":{
                             "used":160,
                             "total_size":236
                          },
                          "sys":{
                             "cpu_temp":33
                          }
                       }
                    },
                    "network_name":{
                       "description":"Name of WiFi network extender is connected to.",
                       "type":"string",
                       "readOnly":true,
                       "example":"TECH WIFI"
                    },
                    "network_signal":{
                       "description":"Signal quality of wifi network.<br> Unit: %.",
                       "type":"integer",
                       "minimum":0,
                       "maximum":100,
                       "readOnly":true,
                       "example":"100,"
                    },
                    "network_channel":{
                       "description":"Channel of wifi network",
                       "type":"integer",
                       "minimum":1,
                       "maximum":14,
                       "readOnly":true,
                       "example":1
                    },
                    "ethernet_connected":{
                       "description":"Indicates if ethernet cable is connected to extender.<br> This parameter is <b>optional</b> and available only when there is `has_ethernet` label attached.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":true
                    }
                 }
              }
           ]
        },
        "Device.SystemModule.WTPExtender":{
           "description":"Wtp extender module.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.SystemModule.Extender"
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.SystemModule.WTPExtender/value"
           }
        },
        "Device.SystemModule.SBusExtender":{
           "description":"SBus extender module.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.SystemModule.Extender"
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.SystemModule.SBusExtender/value"
           }
        },
        "Device.SystemModule.ModbusExtender":{
           "description":"Modbus extender module.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.SystemModule.Extender"
              },
              {
                 "type":"object",
                 "required":[
                    "slave_mode",
                    "slave_config"
                 ],
                 "properties":{
                    "slave_mode":{
                       "description":"Indicates if module is in slave mode. Can be changed only using command `enable_slave` or `disable_slave`.",
                       "type":"boolean",
                       "readOnly":true
                    },
                    "slave_config":{
                       "description":"Slave mode modbus RTU configuration.<br>Available when `modbus_slave_support` label is provided.",
                       "type":"object",
                       "required":[
                          "baud_rate",
                          "parity",
                          "stop_bits"
                       ],
                       "properties":{
                          "baud_rate":{
                             "description":"Baud rate on which the slave device works.",
                             "type":"integer",
                             "example":115200
                          },
                          "parity":{
                             "allOf":[
                                {
                                   "$ref":"#/components/schemas/Modbus.Config.Parity"
                                }
                             ]
                          },
                          "stop_bits":{
                             "allOf":[
                                {
                                   "$ref":"#/components/schemas/Modbus.Config.StopBit"
                                }
                             ]
                          }
                       }
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.SystemModule.ModbusExtender/value"
           }
        },
        "Device.SystemModule.TECHRSExtender":{
           "description":"TECHRS extender module.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.SystemModule.Extender"
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.SystemModule.TECHRSExtender/value"
           }
        },
        "Device.SystemModule.LoraGateway":{
           "description":"Lora gateway module.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ASystemModule"
              },
              {
                 "type":"object"
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.SystemModule.LoraGateway/value"
           }
        },
        "Device.SystemModule.IrRemote":{
           "description":"Infrared remote module.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ASystemModule"
              },
              {
                 "type":"object",
                 "required":[
                    "broadlink_device_type",
                    "learn_status",
                    "last_learned_data",
                    "last_learned_frequency",
                    "ip"
                 ],
                 "properties":{
                    "broadlink_device_type":{
                       "description":"Broadlink device type identifier.",
                       "type":"string",
                       "readOnly":true,
                       "example":"0x520D"
                    },
                    "learn_status":{
                       "description":"Indicates if device is in learning mode.",
                       "type":"string",
                       "readOnly":true,
                       "enum":[
                          "inactive",
                          "in_progress",
                          "done",
                          "failed"
                       ],
                       "example":"in_progress"
                    },
                    "last_learned_data":{
                       "description":"Last learned data.",
                       "type":"string",
                       "readOnly":true,
                       "example":"0x2600"
                    },
                    "last_learned_frequency":{
                       "description":"Last learned frequency.",
                       "type":"integer",
                       "readOnly":true,
                       "example":0
                    },
                    "ip":{
                       "description":"IP of device.",
                       "type":"string",
                       "readOnly":true,
                       "example":"192.168.1.3"
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.SystemModule.IrRemote/value"
           }
        },
        "Device.SystemModule.RfRemote":{
           "description":"Radio remote module.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ASystemModule"
              },
              {
                 "type":"object",
                 "required":[
                    "broadlink_device_type",
                    "learn_status",
                    "last_learned_data",
                    "last_learned_frequency",
                    "ip"
                 ],
                 "properties":{
                    "broadlink_device_type":{
                       "description":"Broadlink device type identifier.",
                       "type":"string",
                       "readOnly":true,
                       "example":"0x520D"
                    },
                    "learn_status":{
                       "description":"Indicates if device is in learning mode.",
                       "type":"string",
                       "readOnly":true,
                       "enum":[
                          "inactive",
                          "in_progress",
                          "done",
                          "failed"
                       ],
                       "example":"in_progress"
                    },
                    "last_learned_data":{
                       "description":"Last learned data.",
                       "type":"string",
                       "readOnly":true,
                       "example":"0x2600"
                    },
                    "last_learned_frequency":{
                       "description":"Last learned frequency.",
                       "type":"integer",
                       "readOnly":true,
                       "example":433.95
                    },
                    "ip":{
                       "description":"IP of device.",
                       "type":"string",
                       "readOnly":true,
                       "example":"192.168.1.3"
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.SystemModule.RfRemote/value"
           }
        },
        "Device.AlarmSystem.Satel.TwoStateInputSensor":{
           "description":"Satel alarm system Two state input Sensor representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AAlarmDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "state",
                    "inverted"
                 ],
                 "properties":{
                    "state":{
                       "description":"Measured input value. On/Off",
                       "type":"boolean",
                       "readOnly":true,
                       "example":true
                    },
                    "inverted":{
                       "description":"Indicates if physical state of input compared to represented state in application should be inverted.",
                       "type":"boolean",
                       "example":false
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.AlarmSystem.Satel.TwoStateInputSensor/value"
           }
        },
        "Device.AlarmSystem.Satel.TwoStateOutput":{
           "description":"Satel alarm system Two state output representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AAlarmDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "state"
                 ],
                 "properties":{
                    "state":{
                       "description":"State of the output. On/Off. Note: Parameter is read only as it can only by changed via command providing pin code. Note: Cannot be modified if device contains managed_by_alarm_central label!",
                       "type":"boolean",
                       "example":true,
                       "readOnly":true
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.AlarmSystem.Satel.TwoStateOutput/value"
           }
        },
        "Device.AlarmSystem.Satel.AlarmZone":{
           "description":"Satel alarm system Zone representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AAlarmDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "armed",
                    "violated",
                    "associations",
                    "zone_status"
                 ],
                 "properties":{
                    "armed":{
                       "description":"Indicates if zone is armed. Note: Parameter is read only as it can only by changed via command providing pin code.",
                       "type":"boolean",
                       "example":true,
                       "readOnly":true
                    },
                    "violated":{
                       "description":"Indicates zone violation status.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    },
                    "associations":{
                       "description":"Devices associated to zone.",
                       "type":"object",
                       "required":[
                          "inputs"
                       ],
                       "properties":{
                          "inputs":{
                             "type":"array",
                             "items":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.AssociationInfo"
                                   }
                                ]
                             }
                          }
                       }
                    },
                    "zone_status":{
                       "description":"Zone status.",
                       "type":"string",
                       "enum":[
                          "armed",
                          "disarmed",
                          "entry_time",
                          "exit_time",
                          "violated",
                          "fire",
                          "emergency",
                          "flooding"
                       ],
                       "readOnly":true,
                       "example":"armed"
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.AlarmSystem.Satel.AlarmZone/value"
           }
        },
        "Device.CustomDeviceModule.Battery":{
           "description":"Custom device module battery representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ACustomDeviceModule"
              },
              {
                 "type":"object",
                 "required":[
                    "charge_power",
                    "soc",
                    "energy_charged_today",
                    "energy_discharged_today",
                    "battery_charge_support"
                 ],
                 "properties":{
                    "charge_power":{
                       "description":"Current charge power.<br>Unit: W, multiplied by 1000 (mW).",
                       "type":"integer",
                       "multipleOf":0.001,
                       "readOnly":true
                    },
                    "soc":{
                       "description":"Current state of charge.<br>Unit: %.",
                       "type":"integer",
                       "readOnly":true,
                       "example":50
                    },
                    "energy_charged_today":{
                       "description":"Amount of energy charged to the battery today.<br>Unit: kwh with one decimal number, multiplied by 1000 (Wh).",
                       "type":"integer",
                       "multipleOf":0.001,
                       "readOnly":true,
                       "example":500
                    },
                    "energy_discharged_today":{
                       "description":"Amount of energy consumed from the battery today.<br>Unit: kwh with one decimal number, multiplied by 1000 (Wh).",
                       "type":"integer",
                       "multipleOf":0.001,
                       "readOnly":true,
                       "example":500
                    },
                    "battery_charge_support":{
                       "description":"Indicates if battery charge commands should be supported. Adds or removes the label `battery_charge_support` for the module.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":true
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.CustomDeviceModule.Battery/value"
           }
        },
        "Device.CustomDeviceModule.CarCharger":{
           "description":"Custom device module car charger representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ACustomDeviceModule"
              },
              {
                 "type":"object",
                 "required":[
                    "charge_power",
                    "energy_charged_total"
                 ],
                 "properties":{
                    "charge_power":{
                       "description":"Instantaneous power used by charger to charge the EV.<br>Unit: W, multiplied by 1000 (mW).",
                       "type":"integer",
                       "multipleOf":0.001,
                       "readOnly":true
                    },
                    "energy_charged_total":{
                       "description":"Total energy charged during device lifetime.<br>Unit: kwh with one decimal number, multiplied by 1000 (Wh).",
                       "type":"integer",
                       "multipleOf":0.001,
                       "readOnly":true,
                       "example":500
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.CustomDeviceModule.CarCharger/value"
           }
        },
        "Device.CustomDeviceModule.Dimmer":{
           "description":"Custom device module dimmer representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ACustomDeviceModule"
              },
              {
                 "type":"object",
                 "required":[
                    "state",
                    "target_level"
                 ],
                 "properties":{
                    "state":{
                       "description":"State of the output. On/Off",
                       "type":"boolean",
                       "example":true
                    },
                    "target_level":{
                       "description":"Desired light intensity level on which device is set or level on which device will be set when turned on. (depending on state) <br> Unit: %.",
                       "type":"integer",
                       "minimum":1,
                       "maximum":100,
                       "example":75
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.CustomDeviceModule.Dimmer/value"
           }
        },
        "Device.CustomDeviceModule.DomesticHotWater":{
           "description":"Custom device module Domestic Hot Water representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ACustomDeviceModule"
              },
              {
                 "type":"object",
                 "required":[
                    "current_temperature",
                    "target_temperature",
                    "hysteresis",
                    "heat_demand"
                 ],
                 "properties":{
                    "current_temperature":{
                       "description":"Current domestic hot water temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "readOnly":true,
                       "example":450
                    },
                    "target_temperature":{
                       "description":"Target hot water temperature for DHW or target temperature for temperature regulator. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "minimum":0,
                       "maximum":1000,
                       "multipleOf":0.1,
                       "example":500
                    },
                    "hysteresis":{
                       "description":"Target hot water temperature hysteresis. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "minimum":0,
                       "maximum":200,
                       "multipleOf":0.1,
                       "example":100
                    },
                    "heat_demand":{
                       "description":"Domestic Hot Water heat demand.",
                       "type":"boolean",
                       "example":true
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.CustomDeviceModule.DomesticHotWater/value"
           }
        },
        "Device.CustomDeviceModule.EnergyMeter":{
           "description":"Custom device module Energy Meter representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ACustomDeviceModule"
              },
              {
                 "type":"object",
                 "required":[
                    "total_active_power",
                    "energy_sum_total",
                    "uses_energy_of_building"
                 ],
                 "properties":{
                    "total_active_power":{
                       "description":"Active power measured by energy meter.<br>Unit: W, multiplied by 1000 (mW).",
                       "type":"integer",
                       "multipleOf":0.001,
                       "readOnly":true,
                       "example":6000000
                    },
                    "energy_sum_total":{
                       "description":"Energy sum (consumed + fed) of all phases lifetime.<br>Unit: kWh, multiplied by 1000 (Wh).",
                       "type":"integer",
                       "multipleOf":0.001,
                       "readOnly":true,
                       "example":400000
                    },
                    "uses_energy_of_building":{
                       "description":"Indicates if energy meter is used to measure energy of device inside the building. (Not main energy meter).",
                       "type":"boolean",
                       "example":false
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.CustomDeviceModule.EnergyMeter/value"
           }
        },
        "Device.CustomDeviceModule.HeatPump":{
           "description":"Custom device module Heat Pump representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ACustomDeviceModule"
              },
              {
                 "type":"object",
                 "required":[
                    "enabled",
                    "thermal_demand",
                    "electric_heater_active",
                    "target_temperature_indoor"
                 ],
                 "properties":{
                    "enabled":{
                       "description":"Indicates if heat pump is enabled.",
                       "type":"boolean",
                       "example":false
                    },
                    "thermal_demand":{
                       "description":"Heat pump thermal demand.",
                       "type":"string",
                       "enum":[
                          "none",
                          "heat",
                          "cool"
                       ],
                       "example":"heat"
                    },
                    "electric_heater_active":{
                       "description":"Indicates electric heater activation state in heat pump.",
                       "type":"boolean",
                       "example":false
                    },
                    "target_temperature_indoor":{
                       "description":"Set indoor temperature. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":200
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.CustomDeviceModule.HeatPump/value"
           }
        },
        "Device.CustomDeviceModule.HumiditySensor":{
           "description":"Custom device module Humidity Sensor representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ACustomDeviceModule"
              },
              {
                 "type":"object",
                 "required":[
                    "humidity"
                 ],
                 "properties":{
                    "humidity":{
                       "description":"Measured relative humidity value.<br> Unit: rH% with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":1000,
                       "multipleOf":0.1,
                       "example":578
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.CustomDeviceModule.HumiditySensor/value"
           }
        },
        "Device.CustomDeviceModule.Inverter":{
           "description":"Custom device module Inverter representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ACustomDeviceModule"
              },
              {
                 "type":"object",
                 "required":[
                    "pv_total_active_power",
                    "power_to_grid",
                    "energy_produced_total"
                 ],
                 "properties":{
                    "pv_total_active_power":{
                       "description":"Current total power produced by all photovoltaic panels. <br> Unit: W with three decimal number, multiplied by 1000 (mW)",
                       "type":"integer",
                       "multipleOf":0.001,
                       "readOnly":true,
                       "minimum":0,
                       "maximum":4294967295,
                       "example":500
                    },
                    "energy_produced_total":{
                       "description":"Total amount of energy produced by PV over a lifetime.<br>Unit: kWh with one decimal number, multiplied by 1000 (Wh).",
                       "type":"integer",
                       "multipleOf":0.001,
                       "readOnly":true,
                       "minimum":0,
                       "maximum":4294967295,
                       "example":10000
                    },
                    "power_to_grid":{
                       "description":"Current power fed to (positive number) or consumed from (negative number) the power grid.<br>Unit: W with three decimal number, multiplied by 1000 (mW)",
                       "type":"integer",
                       "multipleOf":0.001,
                       "readOnly":true,
                       "minimum":-2147483647,
                       "maximum":2147483647,
                       "example":-500
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.CustomDeviceModule.Inverter/value"
           }
        },
        "Device.CustomDeviceModule.Relay":{
           "description":"Custom device module Relay representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ACustomDeviceModule"
              },
              {
                 "type":"object",
                 "required":[
                    "state",
                    "timeout",
                    "timeout_enabled",
                    "time_since_state_change"
                 ],
                 "properties":{
                    "state":{
                       "description":"State of the output. On/Off",
                       "type":"boolean",
                       "example":true
                    },
                    "timeout":{
                       "description":"Protection functionality, that will set device state to off if there are communication problems.<br> Unit: minutes.",
                       "type":"integer",
                       "minimum":5,
                       "maximum":60,
                       "example":15
                    },
                    "timeout_enabled":{
                       "description":"Indicates that timeout functionality is enabled.",
                       "type":"boolean",
                       "example":true
                    },
                    "time_since_state_change":{
                       "description":"Time since last relay state change.<br>Unit: seconds",
                       "type":"integer",
                       "readOnly":true,
                       "example":120
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.CustomDeviceModule.Relay/value"
           }
        },
        "Device.CustomDeviceModule.RGBController":{
           "description":"Custom device module RGB Controller representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ACustomDeviceModule"
              },
              {
                 "type":"object",
                 "required":[
                    "state",
                    "brightness",
                    "led_color",
                    "white_temperature",
                    "color_mode",
                    "available_color_modes"
                 ],
                 "properties":{
                    "state":{
                       "description":"State of the output. On/Off",
                       "type":"boolean",
                       "example":true
                    },
                    "brightness":{
                       "description":"Desired brightness level on which device is set or level on which device will be set when turned on. (depending on state) Unit: %.",
                       "type":"integer",
                       "minimum":1,
                       "maximum":100,
                       "example":75,
                       "readOnly":true
                    },
                    "led_color":{
                       "description":"HTML/Hex RGB color that device will set on its output led strip.",
                       "type":"string",
                       "pattern":"/^#[0-9a-f]{6}$/i",
                       "example":"#ff00ff",
                       "readOnly":true
                    },
                    "white_temperature":{
                       "description":"Color temperature that device will set on its output led strip. Unit: Kelvins",
                       "type":"integer",
                       "minimum":1000,
                       "maximum":40000,
                       "example":3000,
                       "readOnly":true
                    },
                    "color_mode":{
                       "description":"Color mode that device is set on. Available values in `available_color_modes`.",
                       "type":"string",
                       "enum":[
                          "rgb",
                          "temperature"
                       ],
                       "example":"rgb",
                       "readOnly":true
                    },
                    "available_color_modes":{
                       "description":"List of available color modes in RGB controller.",
                       "type":"array",
                       "minLength":1,
                       "maxLength":2,
                       "readOnly":true,
                       "items":{
                          "type":"string",
                          "enum":[
                             "rgb",
                             "temperature"
                          ]
                       },
                       "example":[
                          "rgb"
                       ]
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.CustomDeviceModule.RGBController/value"
           }
        },
        "Device.CustomDeviceModule.TemperatureRegulator":{
           "description":"Custom device module Temperature Regulator representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ACustomDeviceModule"
              },
              {
                 "type":"object",
                 "required":[
                    "target_temperature",
                    "target_temperature_mode",
                    "target_temperature_minimum",
                    "target_temperature_maximum",
                    "target_temperature_reached",
                    "confirm_time_mode",
                    "system_mode"
                 ],
                 "properties":{
                    "target_temperature":{
                       "description":"Desired setpoint temperature, which device will try to achieve. <br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "minimum":0,
                       "maximum":1000,
                       "multipleOf":0.1,
                       "example":500
                    },
                    "target_temperature_mode":{
                       "description":"Regulator target temperature mode.",
                       "type":"object",
                       "required":[
                          "current",
                          "remaining_time"
                       ],
                       "properties":{
                          "current":{
                             "description":"Regulator target temperature mode. Specifies if regulator works in `constant` mode with one target temperature, `time_limited` mode with one temporary target temperature or according to schedule in `schedule` mode with many target temperatures in time, configured by user.<br> <b>NOTE:</b> Parameter is read only, use commands to change target temperature mode!<br> <b>NOTE:</b> Parameter cannot be `schedule` if thermostat doesnt have `has_schedule` label!<br> <b>NOTE:</b> When not associated with Virtual Thermostat it will always work in `constant` mode.",
                             "type":"string",
                             "readOnly":true,
                             "enum":[
                                "schedule",
                                "constant",
                                "time_limited"
                             ],
                             "example":"constant"
                          },
                          "remaining_time":{
                             "description":"Remaining time until `time_limited` mode ends. Cannot be modified directly - use commands.<br> Unit: minutes.",
                             "type":"integer",
                             "readOnly":true,
                             "minimum":1,
                             "maximum":1440,
                             "example":600
                          }
                       }
                    },
                    "target_temperature_minimum":{
                       "description":"Lower limit of the target temperature. Could not be greater than maximum. Setting minimum value above target value, will also change target value to minimum.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "minimum":50,
                       "maximum":350,
                       "example":50
                    },
                    "target_temperature_maximum":{
                       "description":"Upper limit of the target temperature. Could not be less than minimum. Setting maximum below target, will also change target value to minimum.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "minimum":50,
                       "maximum":350,
                       "example":350
                    },
                    "target_temperature_reached":{
                       "description":"Controls device`s algorithm working state indicator. eg LED Diode. May be controlled by external algorithms or devices such as Thermostat.",
                       "type":"boolean",
                       "readOnly":true
                    },
                    "confirm_time_mode":{
                       "description":"Mainly for Mobile/Web App purposes. Indicates if time mode modal should be displayed when changing thermostat temperature. Controlled by Virtual Thermostat.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":true
                    },
                    "system_mode":{
                       "description":"Current temperature regulator working mode.",
                       "type":"string",
                       "enum":[
                          "heating",
                          "cooling",
                          "off"
                       ],
                       "example":"heating"
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.CustomDeviceModule.TemperatureRegulator/value"
           }
        },
        "Device.CustomDeviceModule.TemperatureSensor":{
           "description":"Custom device module Temperature Sensor representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ACustomDeviceModule"
              },
              {
                 "type":"object",
                 "required":[
                    "temperature"
                 ],
                 "properties":{
                    "temperature":{
                       "description":"Measured temperature value.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.1,
                       "example":250
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.CustomDeviceModule.TemperatureSensor/value"
           }
        },
        "Device.CustomDeviceModule.TwoStateInputSensor":{
           "description":"Custom device module Two State Input Sensor representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ACustomDeviceModule"
              },
              {
                 "type":"object",
                 "required":[
                    "state"
                 ],
                 "properties":{
                    "state":{
                       "description":"Measured input value. On/Off",
                       "type":"boolean",
                       "readOnly":true,
                       "example":true
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.CustomDeviceModule.TwoStateInputSensor/value"
           }
        },
        "Device.CustomDeviceModule.AnalogInput":{
           "description":"Custom device module Analog Input representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ACustomDeviceModule"
              },
              {
                 "type":"object",
                 "required":[
                    "value",
                    "unit",
                    "value_valid"
                 ],
                 "properties":{
                    "value":{
                       "description":"Value from analog input.",
                       "type":"number",
                       "format":"double",
                       "readOnly":true,
                       "example":2325.85
                    },
                    "unit":{
                       "description":"Value unit used for statistics.",
                       "type":"string",
                       "pattern":"[a-zA-Z0-9\\\\-_]+",
                       "example":"mV"
                    },
                    "value_valid":{
                       "description":"Indicates if the read value is valid. Message is set if the value is set to `false`.",
                       "type":"boolean",
                       "readOnly":true
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.CustomDeviceModule.AnalogInput/value"
           }
        },
        "Device.CustomDeviceModule.AnalogOutput":{
           "description":"Custom device module Analog Output representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ACustomDeviceModule"
              },
              {
                 "type":"object",
                 "required":[
                    "value",
                    "value_minimum",
                    "value_maximum",
                    "unit"
                 ],
                 "properties":{
                    "value":{
                       "description":"Value of analog output in unit specified in `unit` property. Minimum value is set in property `value_minimum` and maximum value is set in property `value_maximum`.",
                       "type":"integer",
                       "example":2000
                    },
                    "value_minimum":{
                       "description":"Lower limit of value.",
                       "type":"integer",
                       "readOnly":true,
                       "example":0
                    },
                    "value_maximum":{
                       "description":"Upper limit of value.",
                       "type":"integer",
                       "readOnly":true,
                       "example":10000
                    },
                    "unit":{
                       "description":"Value unit used for statistics.",
                       "type":"string",
                       "pattern":"[a-zA-Z0-9\\\\-_]+",
                       "example":"mV"
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.CustomDeviceModule.AnalogOutput/value"
           }
        },
        "Device.CustomDeviceModule.AQSensor":{
           "description":"Custom device module Air Quality sensor representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ACustomDeviceModule"
              },
              {
                 "type":"object",
                 "required":[
                    "air_quality"
                 ],
                 "properties":{
                    "pm1p0":{
                       "description":"Measured concentration of PM1.0 value (particulate matter).<br> Unit: μg/m3.",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":1000,
                       "example":16,
                       "x-unit":"1 micro gram per metre cubed",
                       "x-notInLua":false
                    },
                    "pm2p5":{
                       "description":"Measured concentration of PM2.5 value (particulate matter).<br> Unit: μg/m3.",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":1000,
                       "example":16,
                       "x-unit":"1 micro gram per metre cubed",
                       "x-notInLua":false
                    },
                    "pm4p0":{
                       "description":"Measured concentration of PM4.0 value (particulate matter).<br> Unit: μg/m3.",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":1000,
                       "example":16,
                       "x-unit":"1 micro gram per metre cubed",
                       "x-notInLua":false
                    },
                    "pm10p0":{
                       "description":"Measured concentration of PM10.0 value (particulate matter).<br> Unit: μg/m3.",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":1000,
                       "example":16,
                       "x-unit":"1 micro gram per metre cubed",
                       "x-notInLua":false
                    },
                    "air_quality":{
                       "$ref":"#/components/schemas/Device.DescriptiveAirQuality"
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.CustomDeviceModule.AQSensor/value"
           }
        },
        "Device.CustomDeviceModule.BlindController":{
           "description":"Custom device module Blind controller representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ACustomDeviceModule"
              },
              {
                 "type":"object",
                 "required":[
                    "target_opening",
                    "current_opening",
                    "percent_control_supported",
                    "tilt_control_supported"
                 ],
                 "properties":{
                    "target_opening":{
                       "description":"Desired setpoint opening, which device will try to achieve.<br> Unit: %.<br>**NOTE:** If device doesnt contain `percent_opening_control` label, target opening is limited to 0%, 50% or 100% (only these three).",
                       "type":"integer",
                       "minimum":0,
                       "maximum":100,
                       "example":50
                    },
                    "current_opening":{
                       "description":"Current opening value.<br> Unit: %",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":100,
                       "example":85
                    },
                    "target_tilt":{
                       "description":"Desired tilt position<br> Unit: %.<br>Parameter is <b>optional</b>. Available when: check if `percent_tilt_control` label is provided.",
                       "type":"integer",
                       "minimum":0,
                       "maximum":100,
                       "example":50
                    },
                    "current_tilt":{
                       "description":"Current tilt position<br> Unit: %.<br>Parameter is <b>optional</b>. Available when: check if `percent_tilt_control` label is provided.",
                       "type":"integer",
                       "minimum":0,
                       "maximum":100,
                       "example":50,
                       "readOnly":true
                    },
                    "percent_control_supported":{
                       "description":"Indicates if percent control is supported. When set to `true`, label `percent_opening_control` is set.",
                       "type":"boolean",
                       "readOnly":true
                    },
                    "tilt_control_supported":{
                       "description":"Indicates if tilt control is supported. When set to `true`, label `percent_tilt_control` is set.",
                       "type":"boolean",
                       "readOnly":true
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.CustomDeviceModule.BlindController/value"
           }
        },
        "Device.CustomDeviceModule.Co2Sensor":{
           "description":"Custom device module Co2 sensor representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ACustomDeviceModule"
              },
              {
                 "type":"object",
                 "required":[
                    "co2"
                 ],
                 "properties":{
                    "co2":{
                       "description":"Measured co2 value.<br> Unit: ppm.",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":10000,
                       "example":350
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.CustomDeviceModule.Co2Sensor/value"
           }
        },
        "Device.CustomDeviceModule.FloodSensor":{
           "description":"Custom device module Flood sensor representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ACustomDeviceModule"
              },
              {
                 "type":"object",
                 "required":[
                    "flood_detected"
                 ],
                 "properties":{
                    "flood_detected":{
                       "description":"A flag representing the detection of flood / water leak by the sensor.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.CustomDeviceModule.FloodSensor/value"
           }
        },
        "Device.CustomDeviceModule.IAQSensor":{
           "description":"Custom device module Indexed Air Quaity sensor representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ACustomDeviceModule"
              },
              {
                 "type":"object",
                 "required":[
                    "iaq",
                    "air_quality"
                 ],
                 "properties":{
                    "iaq":{
                       "description":"Calculated Index of Air Quality",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":500,
                       "example":50
                    },
                    "air_quality":{
                       "$ref":"#/components/schemas/Device.DescriptiveAirQuality"
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.CustomDeviceModule.IAQSensor/value"
           }
        },
        "Device.CustomDeviceModule.LightSensor":{
           "description":"Custom device module Light sensor representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ACustomDeviceModule"
              },
              {
                 "type":"object",
                 "required":[
                    "illuminance"
                 ],
                 "properties":{
                    "illuminance":{
                       "description":"Measured light illuminance value.<br> Unit: lx.",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":65535,
                       "example":400
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.CustomDeviceModule.LightSensor/value"
           }
        },
        "Device.CustomDeviceModule.MotionSensor":{
           "description":"Custom device module Motion sensor representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ACustomDeviceModule"
              },
              {
                 "type":"object",
                 "required":[
                    "enabled",
                    "motion_detected",
                    "time_since_motion",
                    "sensor_type"
                 ],
                 "properties":{
                    "enabled":{
                       "description":"Enable or disable sensor. eg. If you want sense only at night time, you can setup automation to enable/disable sensor.",
                       "type":"boolean",
                       "example":true
                    },
                    "motion_detected":{
                       "description":"Holds latest motion detection state.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":true
                    },
                    "time_since_motion":{
                       "description":"Time since last motion detected.<br> Unit: seconds<br> **Notice**: -1 means not detected so far (motion didnt happen since system start).<br> **Notice**: This value will show 0 for each detected move, even if the previous one has not yet finished.",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":43200,
                       "example":50
                    },
                    "sensor_type":{
                       "description":"Module sensor type.",
                       "type":"string",
                       "readOnly":true,
                       "enum":[
                          "unknown"
                       ]
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.CustomDeviceModule.MotionSensor/value"
           }
        },
        "Device.CustomDeviceModule.OpeningSensor":{
           "description":"Custom device module Opening (window/door) sensor representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ACustomDeviceModule"
              },
              {
                 "type":"object",
                 "required":[
                    "open"
                 ],
                 "properties":{
                    "open":{
                       "description":"Opening sensor state. Open/Closed",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.CustomDeviceModule.OpeningSensor/value"
           }
        },
        "Device.CustomDeviceModule.PressureSensor":{
           "description":"Custom device module Pressure sensor representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ACustomDeviceModule"
              },
              {
                 "type":"object",
                 "required":[
                    "pressure"
                 ],
                 "properties":{
                    "pressure":{
                       "type":"integer",
                       "description":"Measured pressure value.<br> Unit: hPa with one decimal number, multiplied by 10.",
                       "readOnly":true,
                       "minimum":3000,
                       "maximum":11000,
                       "multipleOf":0.1,
                       "example":9899
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.CustomDeviceModule.PressureSensor/value"
           }
        },
        "Device.CustomDeviceModule.RadiatorActuator":{
           "description":"Custom device module Radiator actuator representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ACustomDeviceModule"
              },
              {
                 "type":"object",
                 "required":[
                    "opening",
                    "opening_minimum",
                    "opening_maximum"
                 ],
                 "properties":{
                    "opening":{
                       "description":"Current valve opening level.<br> Unit: %",
                       "type":"integer",
                       "minimum":0,
                       "maximum":100,
                       "example":75
                    },
                    "opening_minimum":{
                       "description":"Lower valve opening level. Could not be greater than maximum. Setting minimum value above current opening value, will also change current opening value to minimum.<br> Unit: %",
                       "type":"integer",
                       "minimum":0,
                       "maximum":100,
                       "example":0
                    },
                    "opening_maximum":{
                       "description":"Upper valve opening level. Could not be less than minimum. Setting maximum value below current opening value, will also change current opening value to maximum.<br> Unit: %",
                       "type":"integer",
                       "minimum":0,
                       "maximum":100,
                       "example":100
                    },
                    "emergency_opening":{
                       "description":"Emergency opening level when communication with central device is lost.<br> Unit: %.",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":100,
                       "example":50
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.CustomDeviceModule.RadiatorActuator/value"
           }
        },
        "Device.CustomDeviceModule.SmokeSensor":{
           "description":"Custom device module Smoke sensor representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ACustomDeviceModule"
              },
              {
                 "type":"object",
                 "required":[
                    "smoke_detected"
                 ],
                 "properties":{
                    "smoke_detected":{
                       "description":"A flag representing the detection of smoke by the sensor.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.CustomDeviceModule.SmokeSensor/value"
           }
        },
        "Device.CustomDeviceModule.HeatMeter":{
           "description":"Custom device module Heat meter representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ACustomDeviceModule"
              },
              {
                 "type":"object",
                 "required":[
                    "total_water_volume",
                    "energy_consumed_total"
                 ],
                 "properties":{
                    "current_water_flow":{
                       "description":"Current water flow.<br> Unit: m3/h with two decimal number, multiplied by 100.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.01,
                       "nullable":true,
                       "example":4139
                    },
                    "total_water_volume":{
                       "description":"Total water flow during the lifetime of water meter.<br> Unit: m3 with two decimal numbers, multiplied by 100.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.01,
                       "example":3000000
                    },
                    "energy_consumed_total":{
                       "description":"Energy consumption lifetime.<br>Unit: kWh, multiplied by 1000 (Wh)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":100000
                    },
                    "flow_temperature":{
                       "description":"Temperature measured for water flow.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "example":377
                    },
                    "return_temperature":{
                       "description":"Temperature measured on installation return.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "example":355
                    },
                    "active_power":{
                       "description":"Instantaneous value of thermal power.<br> Unit: W with three decimal number, multiplied by 1000 (mW).",
                       "type":"integer",
                       "multipleOf":0.001,
                       "example":320000
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.CustomDeviceModule.HeatMeter/value"
           }
        },
        "Device.CustomDeviceModule.WaterMeter":{
           "description":"Custom device module Water meter representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ACustomDeviceModule"
              },
              {
                 "type":"object",
                 "required":[
                    "total_water_volume"
                 ],
                 "properties":{
                    "current_water_flow":{
                       "description":"Current water flow.<br> Unit: m3/h with two decimal number, multiplied by 100.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.01,
                       "nullable":true,
                       "example":4139
                    },
                    "total_water_volume":{
                       "description":"Total water flow during the lifetime of water meter.<br> Unit: m3 with two decimal numbers, multiplied by 100.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.01,
                       "example":3000000
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.CustomDeviceModule.WaterMeter/value"
           }
        },
        "Device.CustomDeviceModule.GasMeter":{
           "description":"Custom device module Gas meter representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ACustomDeviceModule"
              },
              {
                 "type":"object",
                 "required":[
                    "gas_consumed_total"
                 ],
                 "properties":{
                    "current_gas_flow":{
                       "description":"Current gas flow.<br> Unit: m3/h with two decimal number, multiplied by 100.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.01,
                       "nullable":true,
                       "example":4139
                    },
                    "gas_consumed_total":{
                       "description":"Total lifetime gas consumption.<br> Unit: m3 with two decimal numbers, multiplied by 100.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.01,
                       "example":3000000
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.CustomDeviceModule.GasMeter/value"
           }
        },
        "Device.CustomDeviceModule.AirConditioner":{
           "description":"Custom device module Air conditioner representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ACustomDeviceModule"
              },
              {
                 "type":"object",
                 "required":[
                    "target_temperature",
                    "target_temperature_minimum",
                    "target_temperature_maximum",
                    "precision",
                    "state",
                    "available_modes",
                    "mode",
                    "available_fan_speeds",
                    "fan_speed",
                    "horizontal_swing_available_states",
                    "horizontal_swing_state",
                    "vertical_swing_available_states",
                    "vertical_swing_state"
                 ],
                 "properties":{
                    "target_temperature":{
                       "description":"Desired setpoint temperature, which device will try to achieve.<br> Unit: °C with one decimal number, multiplied by 10.<br>Minimum from parameter `target_temperature_minimum`, maximum from parameter `target_temperature_maximum`.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "minimum":50,
                       "maximum":350,
                       "example":235
                    },
                    "target_temperature_minimum":{
                       "description":"Lower limit of the target temperature. Setting minimum value above target value, will also change target value to minimum.<br> Unit: °C with one decimal number, multiplied by 10.<br>Maximum from parameter `target_temperature_maximum`.",
                       "type":"integer",
                       "minimum":50,
                       "maximum":350,
                       "multipleOf":0.1,
                       "readOnly":true,
                       "example":50
                    },
                    "target_temperature_maximum":{
                       "description":"Upper limit of the target temperature. Setting maximum below target, will also change target value to minimum.<br> Unit: °C with one decimal number, multiplied by 10.<br>Minimum from parameter `target_temperature_minimum`.",
                       "type":"integer",
                       "minimum":50,
                       "maximum":350,
                       "multipleOf":0.1,
                       "readOnly":true,
                       "example":350
                    },
                    "precision":{
                       "description":"Target temperature set precision. Defines minimum step when changing the target temperature.<br> Unit: °C with two decimal numbers, multiplied by 100.",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.01,
                       "example":10
                    },
                    "room_temperature":{
                       "description":"Current temperature in the room.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "multipleOf":0.1,
                       "readOnly":true,
                       "example":220
                    },
                    "state":{
                       "description":"Current state of the device.",
                       "type":"boolean",
                       "example":true
                    },
                    "available_modes":{
                       "description":"List of available modes for the device.",
                       "type":"array",
                       "minLength":1,
                       "readOnly":true,
                       "items":{
                          "type":"string",
                          "enum":[
                             "off",
                             "automatic",
                             "cooling",
                             "heating",
                             "fan",
                             "drying",
                             "ion",
                             "eco"
                          ]
                       },
                       "example":[
                          "off",
                          "automatic",
                          "cooling",
                          "heating",
                          "fan",
                          "drying",
                          "ion",
                          "eco"
                       ]
                    },
                    "mode":{
                       "description":"Current mode of the device.<br>Possible values in `available_modes`.",
                       "type":"string",
                       "enum":[
                          "off",
                          "automatic",
                          "cooling",
                          "heating",
                          "fan",
                          "drying",
                          "ion",
                          "eco"
                       ],
                       "example":"cooling"
                    },
                    "available_fan_speeds":{
                       "description":"List of available fan speeds for the device.",
                       "type":"array",
                       "minLength":1,
                       "readOnly":true,
                       "items":{
                          "type":"string",
                          "enum":[
                             "automatic",
                             "low",
                             "low_medium",
                             "medium",
                             "medium_high",
                             "high",
                             "turbo",
                             "silent"
                          ]
                       },
                       "example":[
                          "automatic",
                          "low",
                          "low_medium",
                          "medium",
                          "medium_high",
                          "high",
                          "turbo",
                          "silent"
                       ]
                    },
                    "fan_speed":{
                       "description":"Current fan speed of the device.<br>Possible values in `available_fan_speeds`.",
                       "type":"string",
                       "enum":[
                          "automatic",
                          "low",
                          "low_medium",
                          "medium",
                          "medium_high",
                          "high",
                          "turbo",
                          "silent"
                       ],
                       "example":"medium"
                    },
                    "horizontal_swing_available_states":{
                       "description":"List of available horizontal swing states for the device.",
                       "type":"array",
                       "readOnly":true,
                       "items":{
                          "type":"string",
                          "enum":[
                             "stopped",
                             "full_swing",
                             "fixed_left",
                             "fixed_left_center",
                             "fixed_center",
                             "fixed_right_center",
                             "fixed_right"
                          ]
                       },
                       "example":[
                          "stopped",
                          "full_swing",
                          "fixed_left",
                          "fixed_left_center",
                          "fixed_center",
                          "fixed_right_center",
                          "fixed_right"
                       ]
                    },
                    "horizontal_swing_state":{
                       "description":"Current horizontal swing state of the device.<br>Possible values in `horizontal_swing_available_states`.",
                       "type":"string",
                       "enum":[
                          "stopped",
                          "full_swing",
                          "fixed_left",
                          "fixed_left_center",
                          "fixed_center",
                          "fixed_right_center",
                          "fixed_right"
                       ],
                       "example":"full_swing"
                    },
                    "vertical_swing_available_states":{
                       "description":"List of available vertical swing states for the device.",
                       "type":"array",
                       "readOnly":true,
                       "items":{
                          "type":"string",
                          "enum":[
                             "stopped",
                             "full_swing",
                             "fixed_top",
                             "fixed_top_center",
                             "fixed_center",
                             "fixed_bottom_center",
                             "fixed_bottom"
                          ]
                       },
                       "example":[
                          "stopped",
                          "full_swing",
                          "fixed_top",
                          "fixed_top_center",
                          "fixed_center",
                          "fixed_bottom_center",
                          "fixed_bottom"
                       ]
                    },
                    "vertical_swing_state":{
                       "description":"Current vertical swing state of the device.<br>Possible values in `vertical_swing_available_states`.",
                       "type":"string",
                       "enum":[
                          "stopped",
                          "full_swing",
                          "fixed_top",
                          "fixed_top_center",
                          "fixed_center",
                          "fixed_bottom_center",
                          "fixed_bottom"
                       ],
                       "example":"full_swing"
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.CustomDeviceModule.AirConditioner/value"
           }
        },
        "Parent.Device":{
           "description":"Container device representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Parent.AParentDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "address"
                 ],
                 "properties":{
                    "address":{
                       "description":"Container device unique address.",
                       "type":"integer",
                       "readOnly":true,
                       "example":43423521
                    }
                 }
              }
           ]
        },
        "Parent.SystemModule":{
           "description":"System Module Container device representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Parent.AParentDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "uuid"
                 ],
                 "properties":{
                    "uuid":{
                       "description":"Container device unique identifier.",
                       "type":"string",
                       "readOnly":true,
                       "example":"FFFFFFFFFFFFFFFFFFFFFF01"
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Parent.SystemModule/value"
           }
        },
        "Parent.Tech":{
           "description":"TECH Container device representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Parent.AParentDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "address"
                 ],
                 "properties":{
                    "address":{
                       "description":"TECH Container device unique address.",
                       "type":"string",
                       "readOnly":true,
                       "example":"005D00433138510A33343938"
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Parent.Tech/value"
           }
        },
        "Parent.AlarmSystem.Satel":{
           "description":"Satel central unit device representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Parent.AParentDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "ip_address",
                    "port",
                    "module_version"
                 ],
                 "properties":{
                    "ip_address":{
                       "description":"Ip address of internet module connected to Satel central unit.",
                       "type":"string",
                       "example":"192.168.1.2"
                    },
                    "port":{
                       "description":"Port used for connection with internet module.",
                       "type":"integer",
                       "example":7094
                    },
                    "module_version":{
                       "description":"Version of internet module connected to central unit.",
                       "type":"string",
                       "readOnly":true,
                       "example":"v2.09"
                    }
                 }
              }
           ]
        },
        "Parent.Video":{
           "description":"Collection of video parent devices.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Parent.AParentDevice"
              }
           ]
        },
        "Modbus.Specification":{
           "description":"Modbus device specification used to create new devices.",
           "type":"object",
           "required":[
              "id",
              "name",
              "firm",
              "firm_code",
              "version",
              "type",
              "config"
           ],
           "properties":{
              "id":{
                 "description":"Identifier of the specification.",
                 "type":"integer",
                 "readOnly":true,
                 "example":1
              },
              "name":{
                 "description":"Name of the specification.",
                 "type":"string",
                 "readOnly":true,
                 "example":"EcoGeo"
              },
              "firm":{
                 "description":"Name of the manufactuer.",
                 "type":"string",
                 "readOnly":true,
                 "example":"EcoForest"
              },
              "firm_code":{
                 "description":"Manufactuer code.",
                 "type":"string",
                 "readOnly":true,
                 "enum":[
                    "eco_forest",
                    "heatcomp",
                    "remeha",
                    "alpha_innotec",
                    "itho",
                    "solax",
                    "eastron",
                    "solar_edge",
                    "mitsubishi",
                    "galmet",
                    "kaisai",
                    "goodwe",
                    "four_eco",
                    "solis",
                    "ampowr",
                    "wallbox",
                    "daikin"
                 ],
                 "example":"eco_forest"
              },
              "version":{
                 "description":"Supported version number.",
                 "type":"string",
                 "readOnly":true,
                 "example":"EcoGeo v1.x"
              },
              "type":{
                 "description":"Type of device specification is describing.",
                 "type":"string",
                 "readOnly":true,
                 "enum":[
                    "heat_pump",
                    "inverter",
                    "energy_meter",
                    "car_charger"
                 ],
                 "example":"heat_pump"
              },
              "config":{
                 "description":"Default device connection configuration.",
                 "oneOf":[
                    {
                       "$ref":"#/components/schemas/Modbus.TcpConfig"
                    },
                    {
                       "$ref":"#/components/schemas/Modbus.RtuConfig"
                    }
                 ]
              },
              "capabilities":{
                 "description":"Array of capabilities that a specification can handle.",
                 "readOnly":true,
                 "type":"array",
                 "items":{
                    "type":"string"
                 },
                 "example":[
                    "has_battery"
                 ]
              }
           }
        },
        "Modbus.Config":{
           "description":"Base config of request and parent device.",
           "type":"object",
           "required":[
              "config"
           ],
           "properties":{
              "config":{
                 "description":"Modbus connection configuration.",
                 "oneOf":[
                    {
                       "$ref":"#/components/schemas/Parent.Modbus.TcpConfig"
                    },
                    {
                       "$ref":"#/components/schemas/Parent.Modbus.RtuConfig"
                    }
                 ]
              }
           }
        },
        "Parent.Modbus.Request":{
           "description":"Modbus parent device creation request data.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Modbus.Config"
              },
              {
                 "type":"object",
                 "required":[
                    "name",
                    "specification"
                 ],
                 "properties":{
                    "name":{
                       "description":"Container device name. Cannot contain special characters except `:` `,` `;` `.` `-` `_`",
                       "type":"string",
                       "example":"My Heat Pump"
                    },
                    "specification":{
                       "description":"Identifier of specification to use.",
                       "type":"integer",
                       "example":1
                    }
                 }
              }
           ]
        },
        "Parent.Modbus.Request.HuaweiSUN2000":{
           "description":"HuaweiSUN2000 Inverter Modbus parent device creation request data.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Parent.Modbus.Request"
              },
              {
                 "type":"object",
                 "required":[
                    "capabilities"
                 ],
                 "properties":{
                    "capabilities":{
                       "description":"List of additional functions with which device should be created.",
                       "type":"object",
                       "required":[
                          "has_battery",
                          "has_energy_meter"
                       ],
                       "properties":{
                          "has_battery":{
                             "description":"Indicator that battery functionality should be created.",
                             "type":"boolean",
                             "example":true
                          },
                          "has_energy_meter":{
                             "description":"Indicator that energy meter functionality should be created.",
                             "type":"boolean",
                             "example":true
                          }
                       }
                    }
                 }
              }
           ]
        },
        "Parent.Modbus.Request.DaikinAltherma":{
           "description":"DaikinAltherma Heat pump Modbus parent device creation request data.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Parent.Modbus.Request"
              },
              {
                 "type":"object",
                 "required":[
                    "capabilities"
                 ],
                 "properties":{
                    "capabilities":{
                       "description":"List of additional functions with which device should be created.",
                       "type":"object",
                       "required":[
                          "has_domestic_hot_water"
                       ],
                       "properties":{
                          "has_domestic_hot_water":{
                             "description":"Indicator that domestic hot water functionality should be created.",
                             "type":"boolean",
                             "example":true
                          }
                       }
                    }
                 }
              }
           ]
        },
        "Parent.Modbus.Request.AmpowrAmpihome":{
           "description":"AmpowrAmpihome inverter Modbus parent device creation request data.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Parent.Modbus.Request"
              },
              {
                 "type":"object",
                 "required":[
                    "capabilities"
                 ],
                 "properties":{
                    "capabilities":{
                       "description":"List of additional functions with which device should be created.",
                       "type":"object",
                       "required":[
                          "has_inverter",
                          "has_battery"
                       ],
                       "properties":{
                          "has_inverter":{
                             "description":"Indicator that inverter functionality should be created.",
                             "type":"boolean",
                             "example":true
                          },
                          "has_battery":{
                             "description":"Indicator that battery functionality should be created.",
                             "type":"boolean",
                             "example":true
                          }
                       }
                    }
                 }
              }
           ]
        },
        "Parent.Modbus":{
           "description":"Modbus Container device representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Parent.AParentDevice"
              },
              {
                 "$ref":"#/components/schemas/Modbus.Config"
              }
           ]
        },
        "Modbus.Config.ConnectionType":{
           "description":"Type of Modbus connection configuration.",
           "type":"string",
           "enum":[
              "modbus_rtu",
              "modbus_tcp"
           ],
           "example":"modbus_tcp"
        },
        "Modbus.Config.Parity":{
           "description":"Parity UART setting which slave device uses.",
           "type":"string",
           "enum":[
              "none",
              "odd",
              "even"
           ],
           "example":"none"
        },
        "Modbus.Config.StopBit":{
           "description":"Stop bits UART setting which slave device uses.",
           "type":"string",
           "enum":[
              "one",
              "two"
           ],
           "example":"one"
        },
        "Modbus.TcpConfig":{
           "description":"Modbus TCP configuration.",
           "type":"object",
           "required":[
              "type",
              "port",
              "device_id"
           ],
           "properties":{
              "type":{
                 "$ref":"#/components/schemas/Modbus.Config.ConnectionType"
              },
              "port":{
                 "description":"TCP port number the device communicate on.",
                 "type":"number",
                 "minimum":0,
                 "maximum":65535,
                 "example":502
              },
              "device_id":{
                 "description":"Slave Device ID. Used if target device is gateway.",
                 "type":"integer",
                 "minimum":0,
                 "maximum":255,
                 "example":0
              }
           },
           "example":{
              "$ref":"#/components/examples/Modbus.TcpConfig/value"
           }
        },
        "Parent.Modbus.TcpConfig":{
           "description":"Modbus TCP configuration.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Modbus.TcpConfig"
              },
              {
                 "type":"object",
                 "required":[
                    "ip_address"
                 ],
                 "properties":{
                    "ip_address":{
                       "description":"IP address of Modbus device.",
                       "type":"string",
                       "example":"10.0.0.1"
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Parent.Modbus.TcpConfig/value"
           }
        },
        "Modbus.RtuConfig":{
           "description":"Modbus RTU configuration.",
           "type":"object",
           "required":[
              "type",
              "slave_address",
              "baud_rate",
              "parity",
              "stop_bits"
           ],
           "properties":{
              "type":{
                 "$ref":"#/components/schemas/Modbus.Config.ConnectionType"
              },
              "slave_address":{
                 "description":"Address of slave device to communicate.",
                 "type":"integer",
                 "minimum":1,
                 "maximum":255,
                 "example":1
              },
              "baud_rate":{
                 "description":"Baud rate on which the slave device works.",
                 "type":"integer",
                 "example":115200
              },
              "parity":{
                 "allOf":[
                    {
                       "$ref":"#/components/schemas/Modbus.Config.Parity"
                    }
                 ]
              },
              "stop_bits":{
                 "allOf":[
                    {
                       "$ref":"#/components/schemas/Modbus.Config.StopBit"
                    }
                 ]
              }
           },
           "example":{
              "$ref":"#/components/examples/Modbus.RtuConfig/value"
           }
        },
        "Parent.Modbus.RtuConfig":{
           "description":"Modbus RTU configuration.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Modbus.RtuConfig"
              },
              {
                 "type":"object",
                 "required":[
                    "transceiver_uuid",
                    "associations"
                 ],
                 "properties":{
                    "transceiver_uuid":{
                       "description":"UUID of transceiver the device communicate with.",
                       "type":"string",
                       "readOnly":true,
                       "example":"FFFFFFFFFFFFFFFFFFFFFF03"
                    },
                    "associations":{
                       "description":"Associated devices information.",
                       "type":"object",
                       "required":[
                          "transceiver"
                       ],
                       "properties":{
                          "transceiver":{
                             "description":"Transceiver associated to device which will be used for communication.",
                             "allOf":[
                                {
                                   "$ref":"#/components/schemas/Device.AssociationInfo"
                                }
                             ]
                          }
                       }
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Parent.Modbus.RtuConfig/value"
           }
        },
        "Parent.SBus.SceneControlPanel":{
           "description":"SBus/SLink scene control panel parent device representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Parent.Device"
              },
              {
                 "type":"object",
                 "required":[
                    "buttons",
                    "pages",
                    "page_order",
                    "page_order_max_pages",
                    "autolock",
                    "allowed_icons",
                    "quick_page"
                 ],
                 "properties":{
                    "buttons":{
                       "description":"List of buttons available in control panel.",
                       "type":"array",
                       "items":{
                          "type":"object",
                          "required":[
                             "id",
                             "type",
                             "scene_id",
                             "text",
                             "icons_set",
                             "icon",
                             "mode",
                             "labels",
                             "state",
                             "associations"
                          ],
                          "properties":{
                             "id":{
                                "description":"Button ID used to assign to specific page.",
                                "type":"integer",
                                "example":1,
                                "readOnly":true
                             },
                             "type":{
                                "description":"Parent feature type.",
                                "type":"string",
                                "enum":[
                                   "display_button"
                                ],
                                "example":"display_button",
                                "readOnly":true
                             },
                             "scene_id":{
                                "description":"ID of scene associated with button.",
                                "type":"integer",
                                "example":1
                             },
                             "text":{
                                "description":"Text displayed with button.",
                                "type":"string",
                                "example":"Lights in kitchen"
                             },
                             "icons_set":{
                                "description":"Icon`s set ID used by button.",
                                "type":"integer",
                                "readOnly":true
                             },
                             "icon":{
                                "description":"Icon name displayed with button.",
                                "type":"string",
                                "example":"lamp"
                             },
                             "mode":{
                                "description":"Button working mode.",
                                "type":"string",
                                "enum":[
                                   "momentary",
                                   "bistable"
                                ],
                                "readOnly":true,
                                "example":"bistable"
                             },
                             "labels":{
                                "description":"Collection of button specific labels.",
                                "type":"array",
                                "readOnly":true,
                                "items":{
                                   "type":"string",
                                   "enum":[
                                      "bistable_switch_support"
                                   ]
                                }
                             },
                             "state":{
                                "description":"State of button in bistable mode.",
                                "type":"boolean",
                                "readOnly":true,
                                "example":false
                             },
                             "associations":{
                                "description":"Associated devices information. Applies only in bistable mode.",
                                "type":"object",
                                "required":[
                                   "output"
                                ],
                                "properties":{
                                   "output":{
                                      "description":"Thermostat associated to schedule which will control target temperature in time.",
                                      "allOf":[
                                         {
                                            "$ref":"#/components/schemas/Device.AssociationInfo"
                                         }
                                      ]
                                   }
                                }
                             }
                          }
                       }
                    },
                    "pages":{
                       "description":"List of pages in control panel.",
                       "type":"array",
                       "items":{
                          "type":"object",
                          "required":[
                             "id",
                             "type",
                             "labels"
                          ],
                          "properties":{
                             "id":{
                                "description":"Page ID used to add to page order.",
                                "type":"integer",
                                "example":2,
                                "readOnly":true
                             },
                             "type":{
                                "description":"Page feature type.",
                                "type":"string",
                                "enum":[
                                   "display_page_with_buttons",
                                   "main_page",
                                   "weather_page",
                                   "sensors_page",
                                   "thermostat_page",
                                   "alarm_zones_page"
                                ],
                                "example":"display_page_with_buttons",
                                "readOnly":true
                             },
                             "buttons":{
                                "description":"Order of buttons IDs assigned to page. Property applies for pages of type `display_page_with_buttons`.",
                                "type":"array",
                                "items":{
                                   "type":"integer"
                                },
                                "example":[
                                   2,
                                   3,
                                   5
                                ]
                             },
                             "max_buttons":{
                                "description":"Maximum number of buttons that can be assigned to page. Property applies for pages of type `display_page_with_buttons`.",
                                "type":"integer",
                                "readOnly":true,
                                "example":3
                             },
                             "sensor_widgets":{
                                "description":"Order of sensor widgets IDs assigned to page. Property applies for pages of type `sensors_page`.",
                                "type":"array",
                                "items":{
                                   "type":"integer"
                                },
                                "example":[
                                   2,
                                   3,
                                   5
                                ]
                             },
                             "max_sensor_widgets":{
                                "description":"Maximum number of sensor widgets that can be assigned to page. Property applies for pages of type `sensors_page`.",
                                "type":"integer",
                                "readOnly":true,
                                "example":3
                             },
                             "alarm_zone_widgets":{
                                "description":"Order of alarm zone widgets IDs assigned to page. Property applies for pages of type `alarm_zones_page`.",
                                "type":"array",
                                "items":{
                                   "type":"integer"
                                },
                                "example":[
                                   2,
                                   3,
                                   5
                                ]
                             },
                             "max_alarm_zone_widgets":{
                                "description":"Maximum number of alarm zone widgets that can be assigned to page. Property applies for pages of type `alarm_zones_page`.",
                                "type":"integer",
                                "readOnly":true,
                                "example":3
                             },
                             "name":{
                                "description":"Page name send to control panel. Maximum page name size is set in parameter `name_max_size`.",
                                "type":"string",
                                "minimum":1,
                                "example":"Alarm page"
                             },
                             "associations":{
                                "description":"Associations related to the page. Property applies for pages of type `thermostat_page` or `alarm_zone_page`.",
                                "type":"object",
                                "properties":{
                                   "thermostat":{
                                      "description":"Associated thermostat information. Property applies for pages of type `thermostat_page`.",
                                      "allOf":[
                                         {
                                            "$ref":"#/components/schemas/Device.AssociationInfo"
                                         }
                                      ]
                                   }
                                }
                             },
                             "name_max_size":{
                                "description":"Max name size that is accepted for page name.",
                                "type":"integer",
                                "readOnly":true,
                                "example":32
                             },
                             "thermostat_local_endpoint_id":{
                                "description":"Local communication endpoint ID created by central unit for thermostat page communication. Property applies for pages of type `thermostat_page`.",
                                "type":"integer",
                                "readOnly":true,
                                "example":6
                             },
                             "labels":{
                                "description":"Collection of page specific labels. Contains device specification and additional flags.",
                                "type":"array",
                                "readOnly":true,
                                "items":{
                                   "type":"string",
                                   "enum":[
                                      "page_name_support"
                                   ]
                                }
                             }
                          }
                       }
                    },
                    "page_order":{
                       "description":"Order of page IDs displayed in control panel. Must contain 0 and/or IDs of pages to display.",
                       "type":"array",
                       "items":{
                          "type":"integer"
                       },
                       "example":[
                          0,
                          5,
                          6
                       ]
                    },
                    "page_order_max_pages":{
                       "description":"Limit for pages in page order.",
                       "type":"integer",
                       "readOnly":true,
                       "example":4
                    },
                    "autolock":{
                       "description":"Pin code information to lock a feature",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.KeyLockInfo"
                          }
                       ]
                    },
                    "allowed_icons":{
                       "description":"List of icons allowed to set for buttons.",
                       "type":"array",
                       "items":{
                          "type":"string"
                       },
                       "example":[
                          "air-conditioning",
                          "baby-boy",
                          "baby-girl",
                          "battery",
                          "bear",
                          "bin",
                          "blocks"
                       ]
                    },
                    "quick_page":{
                       "description":"ID of page which is used as quick page in control panel.",
                       "type":"integer",
                       "nullable":true,
                       "example":1
                    },
                    "sensor_widgets":{
                       "description":"List of sensor widgets available in control panel.",
                       "type":"array",
                       "items":{
                          "type":"object",
                          "required":[
                             "id",
                             "type",
                             "associations",
                             "icons_set",
                             "sensor_type"
                          ],
                          "properties":{
                             "id":{
                                "description":"Sensor widget ID used to assign to specific page.",
                                "type":"integer",
                                "example":14,
                                "readOnly":true
                             },
                             "type":{
                                "description":"Parent feature type.",
                                "type":"string",
                                "enum":[
                                   "sensor_widget"
                                ],
                                "example":"sensor_widget",
                                "readOnly":true
                             },
                             "associations":{
                                "type":"object",
                                "required":[
                                   "sensor"
                                ],
                                "properties":{
                                   "sensor":{
                                      "$ref":"#/components/schemas/Device.AssociationInfo"
                                   }
                                }
                             },
                             "icons_set":{
                                "description":"Icon`s set ID used by widget. Defines which icons are available for widget to display. If not supported icon set, control panel will display default icon for sensor.",
                                "type":"integer",
                                "readOnly":true
                             },
                             "sensor_type":{
                                "description":"Sensor type. Indicates which parameter from sensor will be sent to control panel widget.",
                                "type":"string",
                                "enum":[
                                   "unspecified",
                                   "aq_sensor_pm1p0",
                                   "aq_sensor_pm2p5",
                                   "aq_sensor_pm4p0",
                                   "aq_sensor_pm10p0",
                                   "co2_sensor",
                                   "humidity_sensor",
                                   "iaq_sensor",
                                   "light_sensor",
                                   "motion_sensor",
                                   "opening_sensor",
                                   "pressure_sensor",
                                   "smoke_sensor",
                                   "flood_sensor",
                                   "temperature_sensor",
                                   "two_state_input_sensor",
                                   "analog_input"
                                ],
                                "example":"humidity_sensor"
                             }
                          }
                       }
                    },
                    "alarm_zone_widgets":{
                       "description":"List of alarm zone widgets available in control panel.",
                       "type":"array",
                       "items":{
                          "type":"object",
                          "required":[
                             "id",
                             "type",
                             "associations",
                             "local_endpoint_id"
                          ],
                          "properties":{
                             "id":{
                                "description":"Alarm zone widget ID used to assign to specific page.",
                                "type":"integer",
                                "example":15,
                                "readOnly":true
                             },
                             "type":{
                                "description":"Parent feature type.",
                                "type":"string",
                                "enum":[
                                   "alarm_zone_status"
                                ],
                                "example":"alarm_zone_status",
                                "readOnly":true
                             },
                             "associations":{
                                "type":"object",
                                "required":[
                                   "alarm_zone"
                                ],
                                "properties":{
                                   "alarm_zone":{
                                      "$ref":"#/components/schemas/Device.AssociationInfo"
                                   }
                                }
                             },
                             "local_endpoint_id":{
                                "description":"Local communication endpoint ID created by central unit for alarm zone widget communication.",
                                "type":"integer",
                                "readOnly":true,
                                "example":6
                             }
                          }
                       }
                    },
                    "user_menu_lock":{
                       "description":"Pin code information to lock a feature. Parameter is <b>optional</b>. Available when user menu lock is supported - check if `user_menu_lock_support` label is provided.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.KeyLockInfo"
                          }
                       ]
                    },
                    "backlight":{
                       "description":"Backlight settings. Parameter is <b>optional</b>. Available when backlight is supported - check if `has_backlight` label is provided.",
                       "type":"object",
                       "required":[
                          "available_modes",
                          "mode",
                          "fixed_brightness"
                       ],
                       "properties":{
                          "available_modes":{
                             "description":"List of available backlight modes.",
                             "type":"array",
                             "items":{
                                "type":"string",
                                "enum":[
                                   "automatic",
                                   "fixed",
                                   "day_night"
                                ]
                             },
                             "readOnly":true,
                             "example":[
                                "automatic",
                                "fixed"
                             ]
                          },
                          "mode":{
                             "description":"Current backlight mode.",
                             "type":"string",
                             "enum":[
                                "automatic",
                                "fixed",
                                "day_night"
                             ],
                             "example":"automatic"
                          },
                          "fixed_brightness":{
                             "description":"Fixed backlight brightness level. <br> *NOTE:* Available only when `fixed` is in `available_modes`.",
                             "type":"integer",
                             "minimum":0,
                             "maximum":100,
                             "example":85
                          }
                       }
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Parent.SBus.SceneControlPanel/value"
           }
        },
        "Parent.SBus.TemperatureSensorSlot":{
           "description":"Associated temperature sensor information.",
           "type":"object",
           "required":[
              "associations",
              "local_endpoint_id",
              "sensor_type"
           ],
           "properties":{
              "associations":{
                 "type":"object",
                 "required":[
                    "temperature_sensor"
                 ],
                 "properties":{
                    "temperature_sensor":{
                       "description":"Associated temperature sensor.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.AssociationInfo"
                          }
                       ]
                    }
                 }
              },
              "local_endpoint_id":{
                 "description":"Local communication endpoint ID created by central unit for temperature sensor communication.",
                 "type":"integer",
                 "readOnly":true
              },
              "sensor_type":{
                 "description":"Sensor type recognized from communication.",
                 "type":"string",
                 "readOnly":true,
                 "enum":[
                    "unknown",
                    "heating_source_sensor",
                    "outdoor_sensor",
                    "installation_return_sensor"
                 ]
              }
           }
        },
        "Parent.SBus.EHI01":{
           "description":"SBus / SLink EHI-01 panel parent device representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Parent.Device"
              },
              {
                 "type":"object",
                 "required":[
                    "heating_source_sensor",
                    "outdoor_sensor",
                    "return_sensor"
                 ],
                 "properties":{
                    "heating_source_sensor":{
                       "description":"Heating source sensor association information.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Parent.SBus.TemperatureSensorSlot"
                          }
                       ]
                    },
                    "outdoor_sensor":{
                       "description":"Outdoor sensor association information.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Parent.SBus.TemperatureSensorSlot"
                          }
                       ]
                    },
                    "return_sensor":{
                       "description":"Return sensor association information.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Parent.SBus.TemperatureSensorSlot"
                          }
                       ]
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Parent.SBus.EHI01/value"
           }
        },
        "Parent.SBus.FanCoil":{
           "description":"SBus / SLink FanCoil parent device representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Parent.Device"
              },
              {
                 "type":"object",
                 "required":[
                    "room_temperature_sensor"
                 ],
                 "properties":{
                    "room_temperature_sensor":{
                       "description":"Room temperature sensor association information.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Parent.SBus.TemperatureSensorSlot"
                          }
                       ]
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Parent.SBus.FanCoil/value"
           }
        },
        "Parent.SBus.ParentDeviceWithMbus":{
           "description":"SBus / SLink Parent device with MBus representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Parent.Device"
              },
              {
                 "type":"object",
                 "properties":{
                    "mbus_master":{
                       "description":"MBus master devices info.",
                       "type":"object",
                       "required":[
                          "devices"
                       ],
                       "properties":{
                          "devices":{
                             "description":"Devices info.",
                             "readOnly":true,
                             "type":"array",
                             "items":{
                                "type":"object",
                                "required":[
                                   "primary_address",
                                   "secondary_address"
                                ],
                                "properties":{
                                   "primary_address":{
                                      "description":"Primary device address.",
                                      "type":"integer",
                                      "readOnly":true
                                   },
                                   "secondary_address":{
                                      "description":"Secondary device addres.",
                                      "type":"integer",
                                      "readOnly":true
                                   }
                                }
                             }
                          }
                       }
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Parent.SBus.ParentDeviceWithMbus/value"
           }
        },
        "Device.Lora.TemperatureSensor":{
           "description":"Lora Temperature Sensor representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ALoraDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "temperature",
                    "calibration"
                 ],
                 "properties":{
                    "temperature":{
                       "description":"Measured temperature value.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":-400,
                       "maximum":1000,
                       "multipleOf":0.1,
                       "example":250
                    },
                    "calibration":{
                       "description":"Static point temperature calibration, used to adjust measurments.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "minimum":-100,
                       "maximum":100,
                       "multipleOf":0.1,
                       "example":0
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Lora.TemperatureSensor/value"
           }
        },
        "Device.Lora.HumiditySensor":{
           "description":"Lora Humidity Sensor representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ALoraDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "humidity"
                 ],
                 "properties":{
                    "humidity":{
                       "description":"Measured relative humidity value.<br> Unit: rH% with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":1000,
                       "multipleOf":0.1,
                       "example":578
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Lora.HumiditySensor/value"
           }
        },
        "Device.Lora.OpeningSensor":{
           "description":"Lora opening sensor (window/door) representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ALoraDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "open"
                 ],
                 "properties":{
                    "open":{
                       "description":"Opening sensor state - open/closed.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Lora.OpeningSensor/value"
           }
        },
        "Device.Lora.FloodSensor":{
           "description":"Lora Flood Sensor representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ALoraDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "flood_detected"
                 ],
                 "properties":{
                    "flood_detected":{
                       "description":"A flag representing the detection of flood / water leak by the sensor.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Lora.FloodSensor/value"
           }
        },
        "Device.Lora.Relay":{
           "description":"Lora Relay representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ALoraDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "state",
                    "inverted",
                    "work_mode"
                 ],
                 "properties":{
                    "state":{
                       "description":"State of the output. On/Off",
                       "type":"boolean",
                       "example":true
                    },
                    "inverted":{
                       "description":"Indicates if should invert physical state of relay compared to represented state in application.",
                       "type":"boolean",
                       "example":false
                    },
                    "work_mode":{
                       "description":"Relay working mode.",
                       "type":"string",
                       "enum":[
                          "standard",
                          "alarm_siren"
                       ],
                       "example":"standard"
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Lora.Relay/value"
           }
        },
        "Device.Lora.TwoStateInputSensor":{
           "description":"Lora Boolean Input Sensor representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ALoraDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "state",
                    "inverted"
                 ],
                 "properties":{
                    "state":{
                       "description":"Measured input value. On/Off",
                       "type":"boolean",
                       "readOnly":true,
                       "example":true
                    },
                    "inverted":{
                       "description":"Indicates if physical state of input compared to represented state in application should be inverted.",
                       "type":"boolean",
                       "example":false
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Lora.TwoStateInputSensor/value"
           }
        },
        "Device.Lora.SmokeSensor":{
           "description":"Lora Smoke Sensor representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.ALoraDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "locked",
                    "dirt_level",
                    "smoke_detected",
                    "high_temperature_detected",
                    "tamper_detected",
                    "uptime"
                 ],
                 "properties":{
                    "locked":{
                       "description":"Sensing/detection lock status. If true it means sensor won`t report high temperature and smoke detection alarms.",
                       "type":"boolean",
                       "example":false
                    },
                    "dirt_level":{
                       "description":"The current dirt (contamination) level of the optical sensor.<br> Unit: %.",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":100,
                       "example":55
                    },
                    "smoke_detected":{
                       "description":"A flag representing the detection of smoke by the sensor.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    },
                    "high_temperature_detected":{
                       "description":"A flag representing the detection of high temperature (eg. fire) by the sensor.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    },
                    "tamper_detected":{
                       "description":"A flag representing the detection of tamper (eg. the sensor is not in the correct position or someone is trying to take it off).",
                       "type":"boolean",
                       "readOnly":true,
                       "example":false
                    },
                    "uptime":{
                       "description":"Time since sensor start.<br> Unit: seconds.",
                       "type":"integer",
                       "minimum":0,
                       "maximum":65535,
                       "readOnly":true,
                       "example":600
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Device.Lora.SmokeSensor/value"
           }
        },
        "LuaVariable.Type":{
           "description":"Model type description, based on stored variable type.",
           "type":"string",
           "readOnly":true,
           "enum":[
              "bool",
              "int",
              "string",
              "table"
           ]
        },
        "LuaVariable.Boolean":{
           "description":"Global Boolean lua variable represantation. Could be used to exchange data between automations/scenes.",
           "type":"object",
           "required":[
              "id",
              "type",
              "name",
              "description",
              "value",
              "default_value"
           ],
           "properties":{
              "id":{
                 "description":"Unique (per system) instance identifier.",
                 "type":"integer",
                 "readOnly":true,
                 "minimum":1,
                 "example":1
              },
              "type":{
                 "allOf":[
                    {
                       "$ref":"#/components/schemas/LuaVariable.Type"
                    }
                 ],
                 "example":"bool"
              },
              "name":{
                 "description":"Custom model name for user purposes. Cannot contain special characters except `:` `,` `;` `.` `-` `_`",
                 "type":"string",
                 "maxLength":100,
                 "example":"My variable"
              },
              "description":{
                 "description":"Custom model description for user purposes.",
                 "type":"string",
                 "maxLength":100,
                 "example":"My variable description"
              },
              "value":{
                 "description":"Current value of variable.",
                 "type":"boolean",
                 "example":false
              },
              "default_value":{
                 "description":"Default value which will be set on application load.",
                 "type":"boolean",
                 "example":false
              }
           },
           "example":{
              "$ref":"#/components/examples/LuaVariable.Boolean/value"
           }
        },
        "LuaVariable.Integer":{
           "description":"Global Integer lua variable represantation. Could be used to exchange data between automations/scenes.",
           "type":"object",
           "required":[
              "id",
              "type",
              "name",
              "description",
              "value",
              "default_value"
           ],
           "properties":{
              "id":{
                 "description":"Unique (per system) instance identifier.",
                 "type":"integer",
                 "readOnly":true,
                 "minimum":1,
                 "example":1
              },
              "type":{
                 "allOf":[
                    {
                       "$ref":"#/components/schemas/LuaVariable.Type"
                    }
                 ],
                 "example":"int"
              },
              "name":{
                 "description":"Custom model name for user purposes. Cannot contain special characters except `:` `,` `;` `.` `-` `_`",
                 "type":"string",
                 "minLength":100,
                 "example":"My variable"
              },
              "description":{
                 "description":"Custom model description for user purposes.",
                 "type":"string",
                 "minLength":100,
                 "example":"My variable description"
              },
              "value":{
                 "description":"Current value of variable.",
                 "type":"integer",
                 "example":-12315552
              },
              "default_value":{
                 "description":"Default value which will be set on application load.",
                 "type":"integer",
                 "example":0
              }
           },
           "example":{
              "$ref":"#/components/examples/LuaVariable.Integer/value"
           }
        },
        "LuaVariable.String":{
           "description":"Global String lua variable represantation. Could be used to exchange data between automations/scenes.",
           "type":"object",
           "required":[
              "id",
              "type",
              "name",
              "description",
              "value",
              "default_value"
           ],
           "properties":{
              "id":{
                 "description":"Unique (per system) instance identifier.",
                 "type":"integer",
                 "readOnly":true,
                 "minimum":1,
                 "example":1
              },
              "type":{
                 "allOf":[
                    {
                       "$ref":"#/components/schemas/LuaVariable.Type"
                    }
                 ],
                 "example":"string"
              },
              "name":{
                 "description":"Custom model name for user purposes. Cannot contain special characters except `:` `,` `;` `.` `-` `_`",
                 "type":"string",
                 "minLength":100,
                 "example":"My variable"
              },
              "description":{
                 "description":"Custom model description for user purposes.",
                 "type":"string",
                 "minLength":100,
                 "example":"My variable description"
              },
              "value":{
                 "description":"Current value of variable.",
                 "type":"string",
                 "example":"working"
              },
              "default_value":{
                 "description":"Default value which will be set on application load.",
                 "type":"string",
                 "example":""
              }
           },
           "example":{
              "$ref":"#/components/examples/LuaVariable.String/value"
           }
        },
        "LuaVariable.Table":{
           "description":"Global Table lua variable represantation. Could be used to exchange data between automations/scenes.",
           "type":"object",
           "required":[
              "id",
              "type",
              "name",
              "description",
              "value",
              "default_value"
           ],
           "properties":{
              "id":{
                 "description":"Unique (per system) instance identifier.",
                 "type":"integer",
                 "readOnly":true,
                 "minimum":1,
                 "example":1
              },
              "type":{
                 "allOf":[
                    {
                       "$ref":"#/components/schemas/LuaVariable.Type"
                    }
                 ],
                 "example":"table"
              },
              "name":{
                 "description":"Custom model name for user purposes. Cannot contain special characters except `:` `,` `;` `.` `-` `_`",
                 "type":"string",
                 "minLength":100,
                 "example":"My variable"
              },
              "description":{
                 "description":"Custom model description for user purposes.",
                 "type":"string",
                 "minLength":100,
                 "example":"My variable description"
              },
              "value":{
                 "description":"Current value of variable.",
                 "type":"object",
                 "example":{
                    "key":"value",
                    "another_key":"another_value"
                 }
              },
              "default_value":{
                 "description":"Default value which will be set on application load.",
                 "type":"object",
                 "example":{
                    "key":"value",
                    "another_key":"another_value"
                 }
              }
           },
           "example":{
              "$ref":"#/components/examples/LuaVariable.Table/value"
           }
        },
        "LuaTimer.Unit":{
           "description":"Unit type description. When using milliseconds unit, minimum start value is 100ms.",
           "type":"string",
           "readOnly":true,
           "enum":[
              "milliseconds",
              "seconds",
              "minutes",
              "hours"
           ],
           "example":"seconds"
        },
        "LuaTimer":{
           "description":"Global lua timer represantation. Could be used to generate events after certain time elapsed or to count time.",
           "type":"object",
           "required":[
              "id",
              "unit",
              "name",
              "description"
           ],
           "properties":{
              "id":{
                 "description":"Unique (per system) instance identifier.",
                 "type":"integer",
                 "readOnly":true,
                 "minimum":1,
                 "example":1
              },
              "unit":{
                 "allOf":[
                    {
                       "$ref":"#/components/schemas/LuaTimer.Unit"
                    }
                 ]
              },
              "name":{
                 "description":"Custom model name for user purposes. Cannot contain special characters except `:` `,` `;` `.` `-` `_`",
                 "type":"string",
                 "maxLength":100,
                 "example":"My timer"
              },
              "description":{
                 "description":"Custom model description for user purposes.",
                 "type":"string",
                 "maxLength":100,
                 "example":"My timer description"
              }
           },
           "example":{
              "$ref":"#/components/examples/LuaTimer/value"
           }
        },
        "LuaExampleWithoutCode":{
           "description":"Lua code example's basic information.",
           "type":"object",
           "required":[
              "id",
              "name"
           ],
           "properties":{
              "id":{
                 "description":"Unique lua code example indentifier.",
                 "type":"integer",
                 "readOnly":true,
                 "minimum":1,
                 "example":1
              },
              "name":{
                 "description":"Lua example name.",
                 "readOnly":true,
                 "allOf":[
                    {
                       "$ref":"#/components/schemas/TextTranslation"
                    }
                 ]
              }
           },
           "example":{
              "$ref":"#/components/examples/LuaExampleWithoutCode/value"
           }
        },
        "LuaExample":{
           "description":"Lua code example's full information.",
           "type":"object",
           "required":[
              "id",
              "name",
              "code"
           ],
           "properties":{
              "id":{
                 "description":"Unique lua code example indentifier.",
                 "type":"integer",
                 "readOnly":true,
                 "minimum":1,
                 "example":1
              },
              "name":{
                 "description":"Lua example name.",
                 "readOnly":true,
                 "allOf":[
                    {
                       "$ref":"#/components/schemas/TextTranslation"
                    }
                 ]
              },
              "code":{
                 "description":"Lua example code.",
                 "type":"string",
                 "readOnly":true,
                 "example":[
                    {
                       "$ref":"#/components/examples/LuaExample/value/code"
                    }
                 ]
              }
           },
           "example":{
              "$ref":"#/components/examples/LuaExample/value"
           }
        },
        "LuaHttpClient":{
           "description":"Global lua http client represantation. Could be used to send requests to any server.",
           "type":"object",
           "required":[
              "id",
              "name",
              "url",
              "body",
              "headers",
              "query_params"
           ],
           "properties":{
              "id":{
                 "description":"Unique (per system) instance identifier.",
                 "type":"integer",
                 "readOnly":true,
                 "minimum":1,
                 "example":1
              },
              "name":{
                 "description":"Custom client name for user purposes. Cannot contain special characters except `:` `,` `;` `.` `-` `_`",
                 "type":"string",
                 "maxLength":64,
                 "example":"My server request"
              },
              "url":{
                 "description":"Default URL that will be used if not specified in lua script.",
                 "type":"string",
                 "example":"https://myserver.com"
              },
              "body":{
                 "description":"Default body that will be used if not specified in lua script.",
                 "type":"string",
                 "example":"{\"update\":\"name\"}"
              },
              "headers":{
                 "description":"Hash Map of default headers used for every request. {Header: Value} (compliant with the HTTP specification)",
                 "type":"object",
                 "additionalProperties":{
                    "type":"string"
                 },
                 "example":{
                    "Content-Type":"application/json",
                    "Authorization":"Bearer SuperSecretTokenGoesHere"
                 }
              },
              "query_params":{
                 "description":"Hash Map of default Query Parameters which are appended to every request.",
                 "type":"object",
                 "additionalProperties":{
                    "type":"string"
                 },
                 "example":{
                    "parameter1":"Value-1",
                    "parameter2":"Value-2"
                 }
              }
           },
           "example":{
              "$ref":"#/components/examples/LuaHttpClient/value"
           }
        },
        "LuaModbusClient":{
           "description":"Global lua modbus client represantation. Could be used to send requests to any device via RS485 using modbus protocol.",
           "type":"object",
           "required":[
              "id",
              "name",
              "type",
              "slave_address",
              "baud_rate",
              "parity",
              "stop_bits",
              "transceiver_uuid",
              "associations"
           ],
           "properties":{
              "id":{
                 "description":"Unique (per system) instance identifier.",
                 "type":"integer",
                 "readOnly":true,
                 "minimum":1,
                 "example":1
              },
              "name":{
                 "description":"Custom client name for user purposes. Cannot contain special characters except `:` `,` `;` `.` `-` `_`",
                 "type":"string",
                 "maxLength":64,
                 "example":"Heat Pump client"
              },
              "type":{
                 "allOf":[
                    {
                       "$ref":"#/components/schemas/Modbus.Config.ConnectionType"
                    }
                 ],
                 "example":"modbus_rtu"
              },
              "slave_address":{
                 "description":"Address of slave device to which client will communicate.",
                 "type":"integer",
                 "minimum":1,
                 "maximum":255,
                 "example":1
              },
              "baud_rate":{
                 "description":"Baud rate on which the slave device works.",
                 "type":"integer",
                 "example":115200
              },
              "parity":{
                 "allOf":[
                    {
                       "$ref":"#/components/schemas/Modbus.Config.Parity"
                    }
                 ]
              },
              "stop_bits":{
                 "allOf":[
                    {
                       "$ref":"#/components/schemas/Modbus.Config.StopBit"
                    }
                 ]
              },
              "transceiver_uuid":{
                 "description":"UUID of transceiver which client is using for communication.",
                 "type":"string",
                 "readOnly":true,
                 "example":"FFFFFFFFFFFFFFFFFFFFFF03"
              },
              "associations":{
                 "description":"Associated devices information.",
                 "type":"object",
                 "required":[
                    "transceiver"
                 ],
                 "properties":{
                    "transceiver":{
                       "description":"Transceiver associated to client which will be used for communication.",
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.AssociationInfo"
                          }
                       ]
                    }
                 }
              }
           },
           "example":{
              "$ref":"#/components/examples/LuaModbusClient/value"
           }
        },
        "LuaModbusTcpClient":{
           "description":"Global lua modbus TCP client represantation. Could be used to send requests to any device using modbus TCP protocol.'",
           "type":"object",
           "required":[
              "id",
              "name",
              "type",
              "ip_address",
              "port",
              "device_id"
           ],
           "properties":{
              "id":{
                 "description":"Unique (per system) instance identifier.",
                 "type":"integer",
                 "readOnly":true,
                 "minimum":1,
                 "example":1
              },
              "name":{
                 "description":"Custom client name for user purposes. Cannot contain special characters except `:` `,` `;` `.` `-` `_`",
                 "type":"string",
                 "maxLength":64,
                 "example":"Heat Pump client"
              },
              "type":{
                 "allOf":[
                    {
                       "$ref":"#/components/schemas/Modbus.Config.ConnectionType"
                    }
                 ],
                 "example":"modbus_tcp"
              },
              "ip_address":{
                 "description":"IP address of the device the client communicates with.",
                 "type":"string",
                 "example":"192.168.0.100"
              },
              "port":{
                 "description":"TCP port the device communicate on.",
                 "type":"integer",
                 "minimum":0,
                 "maximum":65535,
                 "example":502
              },
              "device_id":{
                 "description":"Slave Device ID. Used if target device is gateway.",
                 "type":"integer",
                 "minimum":0,
                 "maximum":255,
                 "example":0
              }
           },
           "example":{
              "$ref":"#/components/examples/LuaModbusTcpClient/value"
           }
        },
        "LuaMqttClient":{
           "description":"Global lua mqtt client represantation. Could be used to exchange messaged with any broker. (Currently mqtt-over-ws is not supported)",
           "type":"object",
           "required":[
              "id",
              "name",
              "broker",
              "client_id",
              "username",
              "password",
              "tls",
              "last_will",
              "subscriptions"
           ],
           "properties":{
              "id":{
                 "description":"Unique (per system) instance identifier.",
                 "type":"integer",
                 "readOnly":true,
                 "minimum":1,
                 "example":1
              },
              "name":{
                 "description":"Custom client name for user purposes. Cannot contain special characters except `:` `,` `;` `.` `-` `_`",
                 "type":"string",
                 "maxLength":64,
                 "example":"My broker client"
              },
              "broker":{
                 "description":"Broker hostname or ip.",
                 "type":"string",
                 "example":"myserver.com"
              },
              "port":{
                 "description":"Broker.",
                 "type":"integer",
                 "minimum":1,
                 "maximum":65535,
                 "example":1883
              },
              "client_id":{
                 "description":"Mqtt client identifier. Cannot contain special characters except `-` `_`",
                 "type":"string",
                 "maxLength":64,
                 "example":"my-mqtt_client"
              },
              "username":{
                 "description":"Mqtt broker authorization username (optional, may be empty)",
                 "type":"string",
                 "example":"user"
              },
              "password":{
                 "description":"Mqtt broker authorization password (optional, may be empty). Will always be masked when retrieving client data eg. `*******`",
                 "type":"string",
                 "example":"p@$$w0rd"
              },
              "tls":{
                 "description":"Secure transport layer settings.",
                 "type":"object",
                 "required":[
                    "enabled",
                    "certificate",
                    "private_key",
                    "ca_certificate"
                 ],
                 "properties":{
                    "enabled":{
                       "description":"Indicates if TLS is enabled.",
                       "type":"boolean",
                       "example":true
                    },
                    "certificate":{
                       "description":"Client certificate in PEM format. Will always be masked when retrieving client data eg. `*******`",
                       "type":"string",
                       "example":"-----BEGIN CERTIFICATE-----\\nRGlkIHlvdSBzZXJpb3VzbHkgdGhpbmsgdGhhdCB0aGVyZSB3b3VsZCBiZSBhIHJlYWwgY2VydGlmaWNhdGUgaGVyZT8gOi0p\\n-----END CERTIFICATE-----"
                    },
                    "private_key":{
                       "description":"Client private key in PEM format.",
                       "type":"string",
                       "example":"-----BEGIN PRIVATE KEY-----\\nRGlkIHlvdSBzZXJpb3VzbHkgdGhpbmsgdGhhdCB0aGVyZSB3b3VsZCBiZSBhIHJlYWwgcHJpdmF0ZSBrZXkgaGVyZT8gOi0p\\n-----END PRIVATE KEY-----"
                    },
                    "ca_certificate":{
                       "description":"Client CA certificate in PEM format.",
                       "type":"string",
                       "example":"-----BEGIN CERTIFICATE-----\\nRGlkIHlvdSBzZXJpb3VzbHkgdGhpbmsgdGhhdCB0aGVyZSB3b3VsZCBiZSBhIHJlYWwgY2VydGlmaWNhdGUgaGVyZT8gOi0p\\n-----END CERTIFICATE-----"
                    }
                 }
              },
              "last_will":{
                 "description":"Last will message settings. Will not be sent if topic is",
                 "type":"object",
                 "required":[
                    "topic",
                    "payload",
                    "qos",
                    "retain"
                 ],
                 "properties":{
                    "topic":{
                       "description":"Last will topic.",
                       "type":"string",
                       "example":"my/last/will"
                    },
                    "payload":{
                       "description":"Last will message payload.",
                       "type":"string",
                       "example":"I am gone"
                    },
                    "qos":{
                       "description":"Last will qos level.",
                       "type":"integer",
                       "minimum":0,
                       "maximum":2,
                       "example":1
                    },
                    "retain":{
                       "description":"Last will retain flag.",
                       "type":"boolean",
                       "example":true
                    }
                 }
              },
              "subscriptions":{
                 "description":"List of topics to subscribe.",
                 "type":"array",
                 "items":{
                    "type":"object",
                    "required":[
                       "topic",
                       "qos"
                    ],
                    "properties":{
                       "topic":{
                          "description":"Topic to subscribe. Wildcard allowed.",
                          "type":"string"
                       },
                       "qos":{
                          "description":"Subscription qos level.",
                          "type":"integer",
                          "minimum":0,
                          "maximum":2
                       }
                    }
                 }
              }
           },
           "example":{
              "$ref":"#/components/examples/LuaMqttClient/value"
           }
        },
        "LuaWsClient":{
           "description":"Global lua ws client represantation. Could be used to exchange messaged with any server.",
           "type":"object",
           "required":[
              "id",
              "name",
              "url",
              "headers",
              "query_params"
           ],
           "properties":{
              "id":{
                 "description":"Unique (per system) instance identifier.",
                 "type":"integer",
                 "readOnly":true,
                 "minimum":1,
                 "example":1
              },
              "name":{
                 "description":"Custom client name for user purposes. Cannot contain special characters except `:` `,` `;` `.` `-` `_`",
                 "type":"string",
                 "maxLength":64,
                 "example":"My broker client"
              },
              "url":{
                 "description":"URL that will be to connect to server.",
                 "type":"string",
                 "example":"ws://myserver.com"
              },
              "headers":{
                 "description":"List of key-value pairs with headers used while connecting to server.",
                 "type":"object",
                 "additionalProperties":{
                    "type":"string"
                 },
                 "example":{
                    "Content-Type":"application/json",
                    "Authorization":"Bearer SuperSecretTokenGoesHere"
                 }
              },
              "query_params":{
                 "description":"Hash Map of Query Parameters which are appended to every request.",
                 "type":"object",
                 "additionalProperties":{
                    "type":"string"
                 },
                 "example":{
                    "parameter1":"Value-1",
                    "parameter2":"Value-2"
                 }
              }
           },
           "example":{
              "$ref":"#/components/examples/LuaWsClient/value"
           }
        },
        "WeatherInfo":{
           "type":"object",
           "required":[
              "cloud_coverage",
              "feels_like",
              "humidity",
              "pressure",
              "rain",
              "snow",
              "temperature",
              "timestamp",
              "weather",
              "wind"
           ],
           "properties":{
              "cloud_coverage":{
                 "description":"Cloud coverage in percent.",
                 "type":"integer",
                 "example":42
              },
              "feels_like":{
                 "description":"Feels like temperature.<br> Unit: °C with one decimal number, multiplied by 10.",
                 "type":"integer",
                 "example":245
              },
              "humidity":{
                 "description":"Measured or forecast humidity in percent.",
                 "type":"integer",
                 "example":54
              },
              "pressure":{
                 "description":"Measured or forecast pressure in hPa.",
                 "type":"integer",
                 "example":1024
              },
              "rain":{
                 "description":"Rain volume in millimeters.<br> Unit: mm with one decimal number, multiplied by 10.",
                 "type":"integer",
                 "example":15
              },
              "snow":{
                 "description":"Snow volume in millimeters.<br> Unit: mm with one decimal number, multiplied by 10.",
                 "type":"integer",
                 "example":21
              },
              "temperature":{
                 "description":"Measured or forecast temperature in Celsius.<br> Unit: °C with one decimal number, multiplied by 10.",
                 "type":"integer",
                 "example":255
              },
              "timestamp":{
                 "description":"Timestamp of weather data, with timezone offset.",
                 "type":"integer",
                 "example":1629357763
              },
              "weather":{
                 "description":"Weather description.",
                 "type":"object",
                 "required":[
                    "description",
                    "id",
                    "main"
                 ],
                 "properties":{
                    "description":{
                       "description":"Detailed description of weather.",
                       "type":"integer",
                       "example":"clear sky"
                    },
                    "id":{
                       "description":"Weather condition ID.",
                       "type":"integer",
                       "example":800
                    },
                    "main":{
                       "description":"General weather description.",
                       "type":"string",
                       "example":"Clear",
                       "enum":[
                          "Clear",
                          "Clouds",
                          "Rain",
                          "Snow"
                       ]
                    }
                 }
              },
              "wind":{
                 "description":"Wind description.",
                 "type":"object",
                 "required":[
                    "degrees",
                    "gust",
                    "speed"
                 ],
                 "properties":{
                    "degrees":{
                       "description":"Measured or forecast wind direction in meteorological degrees.",
                       "type":"integer",
                       "minimum":0,
                       "maximum":359,
                       "example":180
                    },
                    "gust":{
                       "description":"Measured or forecast wind gust.<br> Unit: km/h with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "example":41
                    },
                    "speed":{
                       "description":"Measured or forecast wind speed.<br> Unit: km/h with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "example":10
                    }
                 }
              }
           }
        },
        "Weather":{
           "description":"Weather data for current conditions and next 7 days.",
           "type":"object",
           "required":[
              "city_name",
              "sunrise",
              "sunset",
              "current",
              "daily",
              "hourly"
           ],
           "properties":{
              "city_name":{
                 "description":"City name based on localization.",
                 "type":"string",
                 "example":"Warszawa"
              },
              "sunrise":{
                 "description":"Timestamp of sunrise, with timezone offset.",
                 "type":"string",
                 "example":1637907120
              },
              "sunset":{
                 "description":"Timestamp of sunset, with timezone offset.",
                 "type":"string",
                 "example":1637938020
              },
              "current":{
                 "description":"Current weather conditions.",
                 "allOf":[
                    {
                       "$ref":"#/components/schemas/WeatherInfo"
                    }
                 ]
              },
              "daily":{
                 "description":"Weather forecast for today and next 7 days.",
                 "type":"array",
                 "items":{
                    "type":"object",
                    "required":[
                       "cloud_coverage",
                       "feels_like",
                       "humidity",
                       "pressure",
                       "rain",
                       "snow",
                       "temperature",
                       "timestamp",
                       "weather",
                       "winter"
                    ],
                    "properties":{
                       "cloud_coverage":{
                          "description":"Cloud coverage in percent.",
                          "type":"integer",
                          "example":42
                       },
                       "feels_like":{
                          "description":"Feels like temperature in a day.",
                          "type":"object",
                          "required":[
                             "day"
                          ],
                          "properties":{
                             "day":{
                                "description":"Feels like temperature during the day.<br> Unit: °C with one decimal number, multiplied by 10.",
                                "type":"integer",
                                "example":301
                             }
                          }
                       },
                       "humidity":{
                          "description":"Last measured humidity in percent.",
                          "type":"integer",
                          "example":54
                       },
                       "pressure":{
                          "description":"Last measured pressure in hPa.",
                          "type":"integer",
                          "example":1024
                       },
                       "rain":{
                          "description":"Precipitation rain volume in millimeters.<br> Unit: mm with one decimal number, multiplied by 10.",
                          "type":"integer",
                          "example":15
                       },
                       "snow":{
                          "description":"Precipitation snow volume in millimeters.<br> Unit: mm with one decimal number, multiplied by 10.",
                          "type":"integer",
                          "example":21
                       },
                       "temperature":{
                          "description":"Temperature in a day.",
                          "type":"object",
                          "required":[
                             "day",
                             "min",
                             "max"
                          ],
                          "properties":{
                             "day":{
                                "description":"Temperature during the day.<br> Unit: °C with one decimal number, multiplied by 10.",
                                "type":"integer",
                                "example":301
                             },
                             "min":{
                                "description":"Minimum temperature during the day.<br> Unit: °C with one decimal number, multiplied by 10.",
                                "type":"integer",
                                "example":180
                             },
                             "max":{
                                "description":"Maximum temperature in the evening.<br> Unit: °C with one decimal number, multiplied by 10.",
                                "type":"integer",
                                "example":310
                             }
                          }
                       },
                       "timestamp":{
                          "description":"Timestamp of the day for weather forecast, with timezone offset.",
                          "type":"integer",
                          "example":1629357763
                       },
                       "weather":{
                          "description":"Weather description.",
                          "type":"object",
                          "required":[
                             "description",
                             "id",
                             "main"
                          ],
                          "properties":{
                             "description":{
                                "description":"Detailed description of current weather.",
                                "type":"integer",
                                "example":"clear sky"
                             },
                             "id":{
                                "description":"Weather condition ID.",
                                "type":"integer",
                                "example":800
                             },
                             "main":{
                                "description":"General weather description.",
                                "type":"string",
                                "example":"Clear",
                                "enum":[
                                   "Clear",
                                   "Clouds",
                                   "Rain",
                                   "Snow"
                                ]
                             }
                          }
                       },
                       "wind":{
                          "description":"Wind description.",
                          "type":"object",
                          "required":[
                             "degrees",
                             "gust",
                             "speed"
                          ],
                          "properties":{
                             "degrees":{
                                "description":"Last measured wind direction in meteorological degrees.",
                                "type":"integer",
                                "minimum":0,
                                "maximum":359,
                                "example":180
                             },
                             "gust":{
                                "description":"Last measured wind gust.<br> Unit: km/h with one decimal number, multiplied by 10.",
                                "type":"integer",
                                "example":41
                             },
                             "speed":{
                                "description":"Last measured wind speed.<br> Unit: km/h with one decimal number, multiplied by 10.",
                                "type":"integer",
                                "example":10
                             }
                          }
                       }
                    }
                 }
              },
              "hourly":{
                 "description":"Weather forecast for next 48 hours.",
                 "type":"array",
                 "items":{
                    "allOf":[
                       {
                          "$ref":"#/components/schemas/WeatherInfo"
                       },
                       {
                          "type":"object",
                          "required":[
                             "precipitation_probability"
                          ],
                          "properties":{
                             "precipitation_probability":{
                                "description":"Probability of precipitation Unit: %.",
                                "type":"integer",
                                "minimum":0,
                                "maximum":100,
                                "example":30
                             }
                          }
                       }
                    ]
                 }
              }
           },
           "example":{
              "$ref":"#/components/examples/Weather/value"
           }
        },
        "ScriptExecutor.Type":{
           "description":"Model type description.",
           "type":"string",
           "enum":[
              "simple",
              "blockly",
              "code",
              "simple_ast"
           ],
           "example":"code"
        },
        "Automation.Model":{
           "type":"object",
           "required":[
              "id",
              "name",
              "icon",
              "enabled",
              "type",
              "banned",
              "ban_reason",
              "error_counter",
              "max_errors",
              "max_execution_time",
              "lua",
              "schema",
              "dir_id",
              "tags",
              "delayed_actions"
           ],
           "properties":{
              "id":{
                 "description":"Unique (per system) instance identifier.",
                 "type":"integer",
                 "readOnly":true,
                 "minimum":1,
                 "example":1
              },
              "name":{
                 "description":"Custom model name for user purposes. Cannot contain special characters except `:` `,` `;` `.` `-` `_`",
                 "type":"string",
                 "maxLength":64,
                 "example":"My Automation"
              },
              "icon":{
                 "description":"One of font awesome font set, presented in frontend app.",
                 "type":"string",
                 "maxLength":64,
                 "example":"fas fa-magic"
              },
              "enabled":{
                 "description":"Current automation state. Action cannot be performed if disabled.",
                 "type":"boolean",
                 "example":false
              },
              "type":{
                 "allOf":[
                    {
                       "$ref":"#/components/schemas/ScriptExecutor.Type"
                    }
                 ]
              },
              "banned":{
                 "description":"Ban flag.",
                 "readOnly":true,
                 "type":"boolean",
                 "example":false
              },
              "ban_reason":{
                 "description":"Contains error message which resulted in ban.",
                 "readOnly":true,
                 "type":"string",
                 "example":"Syntax error on line 4."
              },
              "error_counter":{
                 "description":"Current error counter value. (incremented on execute fail until less than max_error)",
                 "readOnly":true,
                 "type":"integer",
                 "example":0
              },
              "max_errors":{
                 "description":"Maximum error_counter value. Exceeding this value by error_counter will result in ban.",
                 "type":"integer",
                 "minimum":1,
                 "maximum":10,
                 "example":5
              },
              "max_execution_time":{
                 "description":"Maximum script execution time before terminate with error message.<br> Unit: seconds",
                 "type":"integer",
                 "minimum":1,
                 "maximum":120,
                 "example":15
              },
              "lua":{
                 "description":"Algorithm representation in lua language. (script used to perform action)",
                 "type":"string",
                 "format":"lua",
                 "example":"wtp[3]:setValue(\"state\", true)"
              },
              "schema":{
                 "description":"Schema representation in json language. (description file used to build blockly or creator)",
                 "type":"string",
                 "format":"json",
                 "example":"{}"
              },
              "dir_id":{
                 "description":"ID of directory where automation is.",
                 "type":"integer",
                 "readOnly":true,
                 "nullable":true,
                 "minimum":1,
                 "example":1
              },
              "tags":{
                 "description":"Collection of automation tags. Tags can be set by user to differentiate types of automations.",
                 "type":"array",
                 "items":{
                    "type":"string"
                 }
              },
              "delayed_actions":{
                 "description":"Collection of all actions scheduled to execute by the device.",
                 "type":"array",
                 "readOnly":true,
                 "items":{
                    "allOf":[
                       {
                          "$ref":"#/components/schemas/DelayedAction"
                       }
                    ]
                 }
              }
           },
           "example":{
              "$ref":"#/components/examples/Automation.Model/value"
           }
        },
        "Scene.Model":{
           "type":"object",
           "required":[
              "id",
              "name",
              "icon",
              "enabled",
              "type",
              "banned",
              "ban_reason",
              "error_counter",
              "max_errors",
              "max_execution_time",
              "lua",
              "schema",
              "labels",
              "room_id",
              "dir_id",
              "tags",
              "delayed_actions"
           ],
           "properties":{
              "id":{
                 "description":"Unique (per system) instance identifier.",
                 "type":"integer",
                 "readOnly":true,
                 "minimum":1,
                 "example":1
              },
              "name":{
                 "description":"Custom model name for user purposes. Cannot contain special characters except `:` `,` `;` `.` `-` `_`",
                 "type":"string",
                 "maxLength":64,
                 "example":"My Scene"
              },
              "icon":{
                 "description":"One of font awesome font set, presented in frontend app.",
                 "type":"string",
                 "maxLength":64,
                 "example":"fas fa-magic"
              },
              "enabled":{
                 "description":"Current scene state. Action cannot be performed if disabled.",
                 "type":"boolean",
                 "example":false
              },
              "type":{
                 "allOf":[
                    {
                       "$ref":"#/components/schemas/ScriptExecutor.Type"
                    }
                 ]
              },
              "banned":{
                 "description":"Ban flag.",
                 "readOnly":true,
                 "type":"boolean",
                 "example":false
              },
              "ban_reason":{
                 "description":"Contains error message which resulted in ban.",
                 "readOnly":true,
                 "type":"string",
                 "example":"Syntax error on line 4."
              },
              "error_counter":{
                 "description":"Current error counter value. (incremented on execute fail until less than max_error)",
                 "readOnly":true,
                 "type":"integer",
                 "example":0
              },
              "max_errors":{
                 "description":"Maximum error_counter value. Exceeding this value by error_counter will result in ban.",
                 "type":"integer",
                 "minimum":1,
                 "maximum":10,
                 "example":5
              },
              "max_execution_time":{
                 "description":"Maximum script execution time before terminate with error message.<br> Unit: seconds",
                 "type":"integer",
                 "minimum":1,
                 "maximum":120,
                 "example":15
              },
              "lua":{
                 "description":"Algorithm representation in lua language. (script used to perform action)",
                 "type":"string",
                 "format":"lua",
                 "example":"wtp[3]:setValue(\"state\", true)"
              },
              "schema":{
                 "description":"Schema representation in json language. (description file used to build blockly or creator)",
                 "type":"string",
                 "format":"json",
                 "example":"{}"
              },
              "labels":{
                 "description":"Collection of scene specific labels.",
                 "type":"array",
                 "readOnly":true,
                 "items":{
                    "type":"string",
                    "enum":[
                       "in_room"
                    ]
                 }
              },
              "room_id":{
                 "description":"ID of room with which scene is associated or null otherwise.",
                 "type":"integer",
                 "readOnly":true,
                 "nullable":true,
                 "minimum":1,
                 "example":1
              },
              "dir_id":{
                 "description":"ID of directory where scene is.",
                 "type":"integer",
                 "readOnly":true,
                 "nullable":true,
                 "minimum":1,
                 "example":1
              },
              "tags":{
                 "description":"Collection of scene tags. Tags can be set by user to differentiate types of scenes.",
                 "type":"array",
                 "items":{
                    "type":"string"
                 }
              },
              "delayed_actions":{
                 "description":"Collection of all actions scheduled to execute by the scene.",
                 "type":"array",
                 "readOnly":true,
                 "items":{
                    "allOf":[
                       {
                          "$ref":"#/components/schemas/DelayedAction"
                       }
                    ]
                 }
              }
           },
           "example":{
              "$ref":"#/components/examples/Scene.Model/value"
           }
        },
        "Directory.Model":{
           "type":"object",
           "required":[
              "id",
              "name",
              "type",
              "is_root",
              "parent_id",
              "items",
              "children"
           ],
           "properties":{
              "id":{
                 "description":"Unique (per system) instance identifier.",
                 "type":"integer",
                 "readOnly":true,
                 "minimum":1,
                 "example":1
              },
              "name":{
                 "description":"Custom model name for user purposes. Cannot contain special characters except `:` `,` `;` `.` `-` `_`",
                 "type":"string",
                 "maxLength":64,
                 "example":"My Directory"
              },
              "type":{
                 "description":"Type of directory.",
                 "type":"string",
                 "enum":[
                    "automations",
                    "scenes"
                 ],
                 "readOnly":true,
                 "example":"scenes"
              },
              "is_root":{
                 "description":"Indicates if directory is root directory. **NOTE:** Root directory cannot be deleted.",
                 "type":"boolean",
                 "readOnly":true,
                 "example":false
              },
              "parent_id":{
                 "description":"ID of parent directory, null for root directory.",
                 "type":"integer",
                 "nullable":true,
                 "minimum":1,
                 "example":1
              },
              "items":{
                 "description":"IDs of scenes or automations in the directory.",
                 "type":"array",
                 "items":{
                    "type":"integer",
                    "minimum":1
                 }
              },
              "children":{
                 "description":"IDs of child directories in the directory.",
                 "type":"array",
                 "readOnly":true,
                 "items":{
                    "type":"integer",
                    "minimum":1
                 }
              }
           },
           "example":{
              "$ref":"#/components/examples/Directory.Model/value"
           }
        },
        "Schedule.Type":{
           "description":"Schedule type.",
           "type":"string",
           "enum":[
              "thermal",
              "temperature_curve",
              "relay_control"
           ]
        },
        "Schedule.Base":{
           "description":"Abstract schedule representation.",
           "type":"object",
           "required":[
              "id",
              "type",
              "name",
              "icon"
           ],
           "properties":{
              "id":{
                 "description":"Unique (per system) instance identifier.",
                 "type":"integer",
                 "readOnly":true,
                 "minimum":1,
                 "example":1
              },
              "type":{
                 "readOnly":true,
                 "allOf":[
                    {
                       "$ref":"#/components/schemas/Schedule.Type"
                    }
                 ]
              },
              "name":{
                 "description":"Custom device name for user purposes. Cannot contain special characters except `:` `,` `;` `.` `-` `_`",
                 "type":"string",
                 "maxLength":64,
                 "example":"My Device"
              },
              "icon":{
                 "description":"One of font awesome font set, presented in frontend app.",
                 "type":"string",
                 "maxLength":64,
                 "example":"fas fa-magic"
              }
           }
        },
        "Schedule.Thermal.Day":{
           "type":"object",
           "required":[
              "start",
              "end",
              "target_temperature"
           ],
           "properties":{
              "start":{
                 "description":"Schedule start time-point in minutes of the day since 0:00. Must be lower than end.",
                 "type":"integer",
                 "minimum":0,
                 "maximum":1439
              },
              "end":{
                 "description":"Schedule end timepoint in minutes of the day since 0:00. Must be greater than start.",
                 "type":"integer",
                 "minimum":0,
                 "maximum":1439
              },
              "target_temperature":{
                 "description":"Target temperature for this time range.<br> Unit: °C with one decimal number, multiplied by 10.",
                 "type":"integer",
                 "minimum":50,
                 "maximum":350
              }
           }
        },
        "Schedule.Thermal":{
           "description":"Thermal schedule representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Schedule.Base"
              },
              {
                 "type":"object",
                 "required":[
                    "current_target_temperature",
                    "fallback",
                    "associations",
                    "monday",
                    "tuesday",
                    "wednesday",
                    "thursday",
                    "friday",
                    "saturday",
                    "sunday"
                 ],
                 "properties":{
                    "current_target_temperature":{
                       "description":"Computed target temperature for current time if available or `fallback` value if not available.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "minimum":50,
                       "maximum":350,
                       "readOnly":true,
                       "example":195
                    },
                    "fallback":{
                       "description":"This target temperature will be used when current time-point couldn`t match any configured range.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "minimum":50,
                       "maximum":350,
                       "example":195
                    },
                    "associations":{
                       "description":"Devices associated to schedule.",
                       "type":"object",
                       "required":[
                          "thermostats",
                          "heat_pump_managers"
                       ],
                       "properties":{
                          "thermostats":{
                             "description":"Thermostats associated to schedule which will control target temperature in time.",
                             "type":"array",
                             "items":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.AssociationInfo"
                                   }
                                ]
                             }
                          },
                          "heat_pump_managers":{
                             "description":"Heat pump managers associated to schedule which will control target temperature in time.",
                             "type":"array",
                             "items":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.AssociationInfo"
                                   }
                                ]
                             }
                          }
                       }
                    },
                    "monday":{
                       "type":"array",
                       "items":{
                          "allOf":[
                             {
                                "$ref":"#/components/schemas/Schedule.Thermal.Day"
                             }
                          ]
                       }
                    },
                    "tuesday":{
                       "type":"array",
                       "items":{
                          "allOf":[
                             {
                                "$ref":"#/components/schemas/Schedule.Thermal.Day"
                             }
                          ]
                       }
                    },
                    "wednesday":{
                       "type":"array",
                       "items":{
                          "allOf":[
                             {
                                "$ref":"#/components/schemas/Schedule.Thermal.Day"
                             }
                          ]
                       }
                    },
                    "thursday":{
                       "type":"array",
                       "items":{
                          "allOf":[
                             {
                                "$ref":"#/components/schemas/Schedule.Thermal.Day"
                             }
                          ]
                       }
                    },
                    "friday":{
                       "type":"array",
                       "items":{
                          "allOf":[
                             {
                                "$ref":"#/components/schemas/Schedule.Thermal.Day"
                             }
                          ]
                       }
                    },
                    "saturday":{
                       "type":"array",
                       "items":{
                          "allOf":[
                             {
                                "$ref":"#/components/schemas/Schedule.Thermal.Day"
                             }
                          ]
                       }
                    },
                    "sunday":{
                       "type":"array",
                       "items":{
                          "allOf":[
                             {
                                "$ref":"#/components/schemas/Schedule.Thermal.Day"
                             }
                          ]
                       }
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Schedule.Thermal/value"
           }
        },
        "Schedule.TemperatureCurve.Point":{
           "type":"object",
           "required":[
              "outdoor_temperature",
              "target_temperature"
           ],
           "properties":{
              "outdoor_temperature":{
                 "description":"Related outdoor temperature for point on curve (X axis value).<br> Unit: °C with one decimal number, multiplied by 10.",
                 "type":"integer",
                 "minimum":-500,
                 "maximum":500,
                 "example":200
              },
              "target_temperature":{
                 "description":"Related target temperature for point on curve (Y axis value).<br> Unit: °C with one decimal number, multiplied by 10.",
                 "type":"integer",
                 "minimum":-500,
                 "maximum":1200,
                 "example":600
              }
           }
        },
        "Schedule.TemperatureCurve":{
           "description":"Temperature curve representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Schedule.Base"
              },
              {
                 "type":"object",
                 "required":[
                    "current_target_temperature",
                    "outdoor_temperature_override",
                    "fallback",
                    "points",
                    "associations"
                 ],
                 "properties":{
                    "current_target_temperature":{
                       "description":"Computed target temperature for current outdoor temperature if available or `fallback` value if not available.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "minimum":-500,
                       "maximum":1200,
                       "readOnly":true,
                       "example":195
                    },
                    "outdoor_temperature_override":{
                       "description":"Override outdoor temperature for target temperature calculation. Can be set only from LUA.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "readOnly":true,
                       "nullable":true,
                       "example":200
                    },
                    "fallback":{
                       "description":"This target temperature will be used when there is no valid outdoor temperature data from weather or points configuration is not correct.<br> Unit: °C with one decimal number, multiplied by 10.",
                       "type":"integer",
                       "minimum":-500,
                       "maximum":1200,
                       "example":300
                    },
                    "points":{
                       "type":"array",
                       "items":{
                          "allOf":[
                             {
                                "$ref":"#/components/schemas/Schedule.TemperatureCurve.Point"
                             }
                          ]
                       }
                    },
                    "associations":{
                       "description":"Devices associated to temperature curve.",
                       "type":"object",
                       "required":[
                          "heat_buffers",
                          "valves",
                          "pellet_boilers",
                          "domestic_hot_waters",
                          "temperature_sensor"
                       ],
                       "properties":{
                          "heat_buffers":{
                             "description":"TECH Heat Buffers associated to temperature curve which will control target temperature based on outdoor temperature.",
                             "type":"array",
                             "items":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.AssociationInfo"
                                   }
                                ]
                             }
                          },
                          "valves":{
                             "description":"TECH Common Valves associated to temperature curve which will control target temperature based on outdoor temperature.",
                             "type":"array",
                             "items":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.AssociationInfo"
                                   }
                                ]
                             }
                          },
                          "pellet_boilers":{
                             "description":"TECH Pellet Boilers associated to temperature curve which will control target temperature based on outdoor temperature.",
                             "type":"array",
                             "items":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.AssociationInfo"
                                   }
                                ]
                             }
                          },
                          "domestic_hot_waters":{
                             "description":"TECH Main DHWs associated to temperature curve which will control target temperature based on outdoor temperature.",
                             "type":"array",
                             "items":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.AssociationInfo"
                                   }
                                ]
                             }
                          },
                          "temperature_sensor":{
                             "description":"Temperature Sensor associated to temperature curve which will provide outdoor temperature for target temperature calculation.",
                             "allOf":[
                                {
                                   "$ref":"#/components/schemas/Device.AssociationInfo"
                                }
                             ]
                          }
                       }
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Schedule.TemperatureCurve/value"
           }
        },
        "Schedule.RelayControl.DayConfiguration":{
           "type":"object",
           "required":[
              "start",
              "end",
              "state"
           ],
           "properties":{
              "start":{
                 "description":"Schedule start time-point in minutes of the day since 0:00. Must be lower than end.",
                 "type":"integer",
                 "minimum":0,
                 "maximum":1439
              },
              "end":{
                 "description":"Schedule end timepoint in minutes of the day since 0:00. Must be greater than start.",
                 "type":"integer",
                 "minimum":0,
                 "maximum":1439
              },
              "state":{
                 "description":"State value for this time range",
                 "type":"boolean",
                 "example":true
              }
           }
        },
        "Schedule.RelayControl.Day":{
           "type":"object",
           "required":[
              "enabled",
              "configuration"
           ],
           "properties":{
              "enabled":{
                 "description":"Flag indicating if this day is enabled. If not enabled, no control will be applied for this day.",
                 "type":"boolean",
                 "example":true
              },
              "configuration":{
                 "description":"Configuration for this day, control will be applied according to configuration.",
                 "type":"array",
                 "items":{
                    "allOf":[
                       {
                          "$ref":"#/components/schemas/Schedule.RelayControl.DayConfiguration"
                       }
                    ]
                 }
              }
           }
        },
        "Schedule.RelayControl":{
           "description":"RelayControl schedule representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Schedule.Base"
              },
              {
                 "type":"object",
                 "required":[
                    "control_policy",
                    "associations",
                    "current",
                    "monday",
                    "tuesday",
                    "wednesday",
                    "thursday",
                    "friday",
                    "saturday",
                    "sunday"
                 ],
                 "properties":{
                    "control_policy":{
                       "description":"Control policy. `continuous` means that the device state will be forced during specific time range - manual change will always be overridden. `once_at_change` means that device state will be set only at time range start - manual change will not be overridden.",
                       "type":"string",
                       "enum":[
                          "continuous",
                          "once_at_change"
                       ],
                       "example":"continuous"
                    },
                    "associations":{
                       "description":"Devices associated to schedule.",
                       "type":"object",
                       "required":[
                          "relays"
                       ],
                       "properties":{
                          "relays":{
                             "description":"Relays associated to schedule which will control their state in time.",
                             "type":"array",
                             "items":{
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.AssociationInfo"
                                   }
                                ]
                             }
                          }
                       }
                    },
                    "current":{
                       "description":"Computed values for current time.",
                       "type":"object",
                       "required":[
                          "state"
                       ],
                       "properties":{
                          "state":{
                             "description":"Current state for the relays or null if not available (day disabled).",
                             "type":"boolean",
                             "nullable":true,
                             "readOnly":true,
                             "example":true
                          }
                       }
                    },
                    "monday":{
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Schedule.RelayControl.Day"
                          }
                       ]
                    },
                    "tuesday":{
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Schedule.RelayControl.Day"
                          }
                       ]
                    },
                    "wednesday":{
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Schedule.RelayControl.Day"
                          }
                       ]
                    },
                    "thursday":{
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Schedule.RelayControl.Day"
                          }
                       ]
                    },
                    "friday":{
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Schedule.RelayControl.Day"
                          }
                       ]
                    },
                    "saturday":{
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Schedule.RelayControl.Day"
                          }
                       ]
                    },
                    "sunday":{
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Schedule.RelayControl.Day"
                          }
                       ]
                    }
                 }
              }
           ],
           "example":{
              "$ref":"#/components/examples/Schedule.RelayControl/value"
           }
        },
        "LuaLog":{
           "type":"object",
           "required":[
              "type",
              "details",
              "payload"
           ],
           "properties":{
              "type":{
                 "description":"Event type.",
                 "type":"string",
                 "readOnly":true,
                 "enum":[
                    "log"
                 ],
                 "example":"log"
              },
              "details":{
                 "description":"Process that caused an event.",
                 "type":"string",
                 "readOnly":true,
                 "enum":[
                    "main"
                 ],
                 "example":"main"
              },
              "payload":{
                 "type":"object",
                 "required":[
                    "timestamp",
                    "tag",
                    "line"
                 ],
                 "readOnly":true,
                 "properties":{
                    "timestamp":{
                       "description":"Epoch timestamp indicating when event occurred.",
                       "type":"integer",
                       "readOnly":true,
                       "example":1634308688340
                    },
                    "tag":{
                       "description":"Log tag.",
                       "type":"string",
                       "readOnly":true,
                       "enum":[
                          "ERROR",
                          "PRINT",
                          "INFO",
                          "STATUS",
                          "WARNING"
                       ],
                       "example":"ERROR"
                    },
                    "line":{
                       "description":"Log content.",
                       "type":"string",
                       "readOnly":true,
                       "example":"syntax error: scene_19.lua:12: syntax error near 'a'"
                    }
                 }
              }
           },
           "example":{
              "$ref":"#/components/examples/LuaLog/value"
           }
        },
        "Floor.Model":{
           "type":"object",
           "required":[
              "id",
              "name",
              "rooms"
           ],
           "properties":{
              "id":{
                 "description":"Unique (per system) instance identifier.",
                 "type":"integer",
                 "readOnly":true,
                 "minimum":1,
                 "example":1
              },
              "name":{
                 "description":"Custom model name for user purposes. Cannot contain special characters except `:` `,` `;` `.` `-` `_`",
                 "type":"string",
                 "maxLength":64,
                 "example":"Ground floor"
              },
              "rooms":{
                 "description":"Associated rooms IDs.",
                 "type":"array",
                 "items":{
                    "type":"integer"
                 },
                 "example":[
                    1,
                    2,
                    3
                 ]
              }
           },
           "example":{
              "$ref":"#/components/examples/Floor.Model/value"
           }
        },
        "Room.Model":{
           "type":"object",
           "required":[
              "id",
              "name",
              "icon",
              "color",
              "devices",
              "scenes",
              "has_error",
              "has_warning",
              "is_heating",
              "is_cooling",
              "labels",
              "floor_id",
              "is_window_open",
              "heating_configuration_finished",
              "climate_control_status",
              "is_light_on"
           ],
           "properties":{
              "id":{
                 "description":"Unique (per system) instance identifier.",
                 "type":"integer",
                 "readOnly":true,
                 "minimum":1,
                 "example":1
              },
              "name":{
                 "description":"Custom model name for user purposes. Cannot contain special characters except `:` `,` `;` `.` `-` `_`",
                 "type":"string",
                 "maxLength":64,
                 "example":"My Room"
              },
              "icon":{
                 "description":"One of font awesome font set, presented in frontend app.",
                 "type":"string",
                 "maxLength":64,
                 "example":"fas fa-magic"
              },
              "color":{
                 "description":"App-specific color representation, presented in frontend app.",
                 "type":"string",
                 "maxLength":64,
                 "example":"blue"
              },
              "devices":{
                 "description":"Associated devices information.",
                 "type":"array",
                 "items":{
                    "allOf":[
                       {
                          "$ref":"#/components/schemas/Device.AssociationInfo"
                       }
                    ]
                 }
              },
              "scenes":{
                 "description":"Associated scenes IDs.",
                 "type":"array",
                 "items":{
                    "type":"integer"
                 },
                 "example":[
                    1,
                    2,
                    3
                 ]
              },
              "has_error":{
                 "description":"Indicates if any associated device has error.",
                 "type":"boolean",
                 "readOnly":true,
                 "example":false
              },
              "has_warning":{
                 "description":"Indicates if any associated device has warning.",
                 "type":"boolean",
                 "readOnly":true,
                 "example":false
              },
              "is_heating":{
                 "description":"Indicates if any associated thermostat is currently in heating mode.",
                 "type":"boolean",
                 "readOnly":true,
                 "example":false
              },
              "is_cooling":{
                 "description":"Indicates if any associated thermostat is currently in cooling mode.",
                 "type":"boolean",
                 "readOnly":true,
                 "example":false
              },
              "labels":{
                 "description":"Collection of room specific labels.",
                 "type":"array",
                 "readOnly":true,
                 "items":{
                    "type":"string",
                    "enum":[
                       "on_floor"
                    ]
                 }
              },
              "floor_id":{
                 "description":"ID of floor with which room is associated or null otherwise.",
                 "type":"integer",
                 "readOnly":true,
                 "nullable":true,
                 "minimum":1,
                 "example":1
              },
              "is_window_open":{
                 "description":"Informs whether there is window opened in any associated thermostat.",
                 "type":"boolean",
                 "readOnly":true,
                 "example":false
              },
              "heating_configuration_finished":{
                 "description":"Informs whether heating configuration is finished for room.",
                 "type":"boolean",
                 "example":true
              },
              "climate_control_status":{
                 "description":"Issues related to heating configuration.",
                 "type":"object",
                 "required":[
                    "issues",
                    "skipped"
                 ],
                 "properties":{
                    "issues":{
                       "description":"Current issues related to heating configuration.",
                       "type":"array",
                       "readOnly":true,
                       "items":{
                          "type":"string",
                          "enum":[
                             "climate_control_unavailable",
                             "temperature_sensor_without_thermostat",
                             "temperature_regulator_without_thermostat",
                             "thermostat_without_temperature_sensor",
                             "thermostat_without_temperature_regulator"
                          ]
                       }
                    },
                    "skipped":{
                       "description":"Issues related to heating configuration ignored by the user.",
                       "type":"array",
                       "items":{
                          "type":"string",
                          "enum":[
                             "climate_control_unavailable",
                             "temperature_sensor_without_thermostat",
                             "temperature_regulator_without_thermostat",
                             "thermostat_without_temperature_sensor",
                             "thermostat_without_temperature_regulator"
                          ]
                       }
                    }
                 }
              },
              "is_light_on":{
                 "description":"Informs whether there is light on in any associated light.",
                 "type":"boolean",
                 "readOnly":true,
                 "example":false
              }
           },
           "example":{
              "$ref":"#/components/examples/Room.Model/value"
           }
        },
        "LogSettings":{
           "description":"eHome process logger settings representation.",
           "type":"object",
           "required":[
              "log",
              "debug"
           ],
           "properties":{
              "log":{
                 "description":"Logging settings.",
                 "type":"object",
                 "required":[
                    "INFO",
                    "STATUS",
                    "WARNING",
                    "ERROR",
                    "LUA_SCRIPT"
                 ],
                 "properties":{
                    "INFO":{
                       "type":"boolean"
                    },
                    "STATUS":{
                       "type":"boolean"
                    },
                    "WARNING":{
                       "type":"boolean"
                    },
                    "ERROR":{
                       "type":"boolean"
                    },
                    "LUA_SCRIPT":{
                       "type":"boolean"
                    }
                 }
              },
              "debug":{
                 "description":"Debugging settings.",
                 "type":"object",
                 "required":[
                    "STANDARD_DEBUG",
                    "LUA_DEBUG",
                    "COAP_DEBUG",
                    "EVENTBUS_DEBUG",
                    "REST_DEBUG",
                    "WTP_DEVICE_DEBUG",
                    "WTP_MANAGER_DEBUG",
                    "TECH_DEVICE_DEBUG",
                    "VIRTUAL_DEVICE_DEBUG",
                    "TECH_DEVICE_UPDATE_DEBUG",
                    "DB_QUERY_DEBUG",
                    "STATISTICS_DEBUG",
                    "TDFP_DEBUG"
                 ],
                 "properties":{
                    "STANDARD_DEBUG":{
                       "type":"boolean"
                    },
                    "LUA_DEBUG":{
                       "type":"boolean"
                    },
                    "COAP_DEBUG":{
                       "type":"boolean"
                    },
                    "EVENTBUS_DEBUG":{
                       "type":"boolean"
                    },
                    "REST_DEBUG":{
                       "type":"boolean"
                    },
                    "WTP_DEVICE_DEBUG":{
                       "type":"boolean"
                    },
                    "WTP_MANAGER_DEBUG":{
                       "type":"boolean"
                    },
                    "TECH_DEVICE_DEBUG":{
                       "type":"boolean"
                    },
                    "VIRTUAL_DEVICE_DEBUG":{
                       "type":"boolean"
                    },
                    "TECH_DEVICE_UPDATE_DEBUG":{
                       "type":"boolean"
                    },
                    "SYSMODULE_DEVICE_DEBUG":{
                       "type":"boolean"
                    },
                    "DB_QUERY_DEBUG":{
                       "type":"boolean"
                    },
                    "STATISTICS_DEBUG":{
                       "type":"boolean"
                    },
                    "TDFP_DEBUG":{
                       "type":"boolean"
                    },
                    "DBG_SBUS":{
                       "type":"boolean"
                    },
                    "DBG_MODBUS":{
                       "type":"boolean"
                    },
                    "DBG_SBUS_APP":{
                       "type":"boolean"
                    },
                    "LORA_DEVICE_DEBUG":{
                       "type":"boolean"
                    }
                 }
              }
           },
           "example":{
              "$ref":"#/components/examples/LogSettings/value"
           }
        },
        "LocalizationSettings":{
           "description":"eHome localization settings representation.",
           "type":"object",
           "required":[
              "latitude",
              "longitude"
           ],
           "properties":{
              "latitude":{
                 "description":"Latitude.",
                 "type":"number",
                 "format":"double",
                 "minimum":-180,
                 "maximum":180
              },
              "longitude":{
                 "description":"Longitude.",
                 "type":"number",
                 "format":"double",
                 "minimum":-90,
                 "maximum":90
              }
           },
           "example":{
              "$ref":"#/components/examples/LocalizationSettings/value"
           }
        },
        "WeatherSettings":{
           "description":"Weather service settings representation.",
           "type":"object",
           "required":[
              "enabled",
              "associations",
              "access_type"
           ],
           "properties":{
              "enabled":{
                 "description":"Indicates if weather feature is turned on.",
                 "type":"boolean",
                 "example":false
              },
              "associations":{
                 "type":"object",
                 "required":[
                    "outdoor_sensor"
                 ],
                 "properties":{
                    "outdoor_sensor":{
                       "description":"Outdoor temperature sensor association. If set, current temperature in weather data is taken from this sensor.",
                       "type":"object",
                       "required":[
                          "id",
                          "class"
                       ],
                       "properties":{
                          "id":{
                             "description":"Unique (per system) instance identifier.",
                             "type":"integer",
                             "readOnly":true,
                             "example":1
                          },
                          "class":{
                             "description":"Device class description, based on communication type, manufacturer etc.",
                             "readOnly":true,
                             "oneOf":[
                                {
                                   "$ref":"#/components/schemas/Device.Class"
                                },
                                {
                                   "type":"string",
                                   "enum":[
                                      ""
                                   ]
                                }
                             ]
                          }
                       }
                    }
                 }
              },
              "access_type":{
                 "description":"Method of obtaining weather data. When set to `api`, weather data is retrieved from weather service, when set to `lua` user needs to provide weather data in lua scripts to be available.",
                 "type":"string",
                 "enum":[
                    "lua",
                    "api"
                 ],
                 "example":"api"
              }
           },
           "example":{
              "$ref":"#/components/examples/WeatherSettings/value"
           }
        },
        "BuildingSettings":{
           "description":"Building settings representation.",
           "type":"object",
           "required":[
              "building_type"
           ],
           "properties":{
              "building_type":{
                 "description":"Building type.",
                 "type":"string",
                 "enum":[
                    "house",
                    "hotel"
                 ],
                 "example":"house"
              }
           },
           "example":{
              "$ref":"#/components/examples/BuildingSettings/value"
           }
        },
        "EnergyCenter.Associations":{
           "description":"EnergyCenter associations representation.",
           "type":"object",
           "required":[
              "grid",
              "pv",
              "battery"
           ],
           "properties":{
              "grid":{
                 "description":"Grid energy meter association. If set, grid power and energy data is used by energy center. Device must be of type `energy_meter`",
                 "type":"object",
                 "required":[
                    "id",
                    "class"
                 ],
                 "properties":{
                    "id":{
                       "description":"Unique (per system) instance identifier.",
                       "type":"integer",
                       "readOnly":true,
                       "example":1
                    },
                    "class":{
                       "description":"Device class description, based on communication type, manufacturer etc.",
                       "readOnly":true,
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.Class"
                          }
                       ]
                    }
                 }
              },
              "pv":{
                 "description":"PV panels (inverter) association. If set, pv power and energy data is used by energy center. Device must be of type `inverter`",
                 "type":"object",
                 "required":[
                    "id",
                    "class"
                 ],
                 "properties":{
                    "id":{
                       "description":"Unique (per system) instance identifier.",
                       "type":"integer",
                       "readOnly":true,
                       "example":1
                    },
                    "class":{
                       "description":"Device class description, based on communication type, manufacturer etc.",
                       "readOnly":true,
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.Class"
                          }
                       ]
                    }
                 }
              },
              "battery":{
                 "description":"Battery association. If set, battery power and energy data is used by energy center. Device must be of type `battery`",
                 "type":"object",
                 "required":[
                    "id",
                    "class"
                 ],
                 "properties":{
                    "id":{
                       "description":"Unique (per system) instance identifier.",
                       "type":"integer",
                       "readOnly":true,
                       "example":1
                    },
                    "class":{
                       "description":"Device class description, based on communication type, manufacturer etc.",
                       "readOnly":true,
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/Device.Class"
                          }
                       ]
                    }
                 }
              }
           },
           "example":{
              "$ref":"#/components/examples/EnergyCenter.Associations/value"
           }
        },
        "EnergyCenter.FlowMonitor":{
           "description":"EnergyCenter FlowMonitor representation.",
           "type":"object",
           "required":[
              "summary",
              "flow",
              "building_consumption_details",
              "voltage"
           ],
           "properties":{
              "summary":{
                 "description":"Represents total power for each of source (grid, battery, inverter, building)",
                 "type":"object",
                 "required":[
                    "building",
                    "grid",
                    "pv",
                    "battery"
                 ],
                 "properties":{
                    "building":{
                       "description":"Total power used by building.",
                       "type":"object",
                       "required":[
                          "available",
                          "value"
                       ],
                       "properties":{
                          "available":{
                             "description":"Describes if building power distribution data is available. Becomes available if grid energy meter, pv or battery sources are configured (associated devices).",
                             "type":"boolean",
                             "readOnly":true,
                             "example":true
                          },
                          "value":{
                             "description":"Current building power distribution. Only positive values are possible. The value represents the current consumption of the building.<br> Unit: mW",
                             "type":"integer",
                             "readOnly":true,
                             "example":0
                          }
                       }
                    },
                    "grid":{
                       "description":"Total power imported from or exported to grid.",
                       "type":"object",
                       "required":[
                          "available",
                          "value"
                       ],
                       "properties":{
                          "available":{
                             "description":"Describes if grid power distribution data is available. Becomes available if grid energy meter source is configured (associated device).",
                             "type":"boolean",
                             "readOnly":true,
                             "example":true
                          },
                          "value":{
                             "description":"Current grid power distribution. Positive value represents the power that is currently being imported from grid. Negative value represents the power that is currently being exported to the grid.<br> Unit: mW",
                             "type":"integer",
                             "readOnly":true,
                             "example":0
                          }
                       }
                    },
                    "pv":{
                       "description":"Total power produced by pv panels.",
                       "type":"object",
                       "required":[
                          "available",
                          "value"
                       ],
                       "properties":{
                          "available":{
                             "description":"Describes if pv power distribution data is available. Becomes available if pv panels (inverter) source is configured (associated device).",
                             "type":"boolean",
                             "readOnly":true,
                             "example":true
                          },
                          "value":{
                             "description":"Current pv power distribution. Only positive values are possible. The value represents the current production of the pv panels.<br> Unit: mW",
                             "type":"integer",
                             "readOnly":true,
                             "example":0
                          }
                       }
                    },
                    "battery":{
                       "description":"Total power of charging or discharging the battery.",
                       "type":"object",
                       "required":[
                          "available",
                          "value",
                          "state_of_charge"
                       ],
                       "properties":{
                          "available":{
                             "description":"Describes if battery power distribution data is available. Becomes available if battery source is configured (associated device).",
                             "type":"boolean",
                             "readOnly":true,
                             "example":true
                          },
                          "value":{
                             "description":"Current battery power distribution. Positive value represents the power that is currently used to charge battery. Negative value represents the power that is currently used to discharge battery.<br> Unit: mW",
                             "type":"integer",
                             "readOnly":true,
                             "example":0
                          },
                          "state_of_charge":{
                             "description":"Represents battery state of charge.",
                             "type":"object",
                             "required":[
                                "available",
                                "value"
                             ],
                             "properties":{
                                "available":{
                                   "description":"Describes if battery state of charge data is available. Becomes available if battery device exposes such data.",
                                   "type":"boolean",
                                   "readOnly":true,
                                   "example":true
                                },
                                "value":{
                                   "description":"Current battery state of charge.<br> Unit: %",
                                   "type":"integer",
                                   "readOnly":true,
                                   "example":0
                                }
                             }
                          }
                       }
                    }
                 }
              },
              "flow":{
                 "description":"Represents power distribution details for each source.",
                 "type":"object",
                 "required":[
                    "pv_to_battery",
                    "pv_to_building",
                    "pv_to_grid",
                    "grid_to_battery",
                    "grid_to_building",
                    "battery_to_building"
                 ],
                 "properties":{
                    "pv_to_battery":{
                       "type":"object",
                       "required":[
                          "value"
                       ],
                       "properties":{
                          "value":{
                             "description":"Represents value of current power flow from pv panels to battery. Only positive values are possible.<br> Unit: mW",
                             "type":"integer",
                             "readOnly":true,
                             "example":0
                          }
                       }
                    },
                    "pv_to_building":{
                       "type":"object",
                       "required":[
                          "value"
                       ],
                       "properties":{
                          "value":{
                             "description":"Represents value of current power flow from pv panels to building. Only positive values are possible.<br> Unit: mW",
                             "type":"integer",
                             "readOnly":true,
                             "example":0
                          }
                       }
                    },
                    "pv_to_grid":{
                       "type":"object",
                       "required":[
                          "value"
                       ],
                       "properties":{
                          "value":{
                             "description":"Represents value of current power flow from pv panels to grid. Only positive values are possible.<br> Unit: mW",
                             "type":"integer",
                             "readOnly":true,
                             "example":0
                          }
                       }
                    },
                    "grid_to_battery":{
                       "type":"object",
                       "required":[
                          "value"
                       ],
                       "properties":{
                          "value":{
                             "description":"Represents value of current power flow from grid to battery (positive value) or from battery to grid (negative value).<br> Unit: mW",
                             "type":"integer",
                             "readOnly":true,
                             "example":0
                          }
                       }
                    },
                    "grid_to_building":{
                       "type":"object",
                       "required":[
                          "value"
                       ],
                       "properties":{
                          "value":{
                             "description":"Represents value of current power flow from grid to building. Only positive values are possible. <br> Unit: mW",
                             "type":"integer",
                             "readOnly":true,
                             "example":0
                          }
                       }
                    },
                    "battery_to_building":{
                       "type":"object",
                       "required":[
                          "value"
                       ],
                       "properties":{
                          "value":{
                             "description":"Represents value of current power flow from battery to building. Only positive values are possible. <br> Unit: mW",
                             "type":"integer",
                             "readOnly":true,
                             "example":0
                          }
                       }
                    }
                 }
              },
              "building_consumption_details":{
                 "description":"Represents building power consumption details.",
                 "type":"object",
                 "required":[
                    "rest",
                    "by_devices"
                 ],
                 "properties":{
                    "rest":{
                       "description":"Represents computed value of power consumption of devices that dont provide their individual power consumption data. Only positive values are possible.<br> Unit: mW",
                       "type":"integer",
                       "readOnly":true,
                       "example":0
                    },
                    "by_devices":{
                       "description":"Represents collection of devices that provide their power consumption.",
                       "type":"array",
                       "items":{
                          "type":"object",
                          "required":[
                             "id",
                             "class",
                             "value"
                          ],
                          "properties":{
                             "id":{
                                "description":"Unique (per system) instance identifier.",
                                "type":"integer",
                                "readOnly":true,
                                "example":1
                             },
                             "class":{
                                "description":"Device class description, based on communication type, manufacturer etc.",
                                "readOnly":true,
                                "allOf":[
                                   {
                                      "$ref":"#/components/schemas/Device.Class"
                                   }
                                ]
                             },
                             "value":{
                                "description":"Represents value of current power consumed by device. Only positive values are possible. <br> Unit: mW",
                                "type":"integer",
                                "readOnly":true,
                                "example":0
                             }
                          }
                       }
                    }
                 }
              },
              "voltage":{
                 "description":"Voltage information.",
                 "type":"object",
                 "required":[
                    "grid"
                 ],
                 "properties":{
                    "grid":{
                       "type":"object",
                       "required":[
                          "phases",
                          "max"
                       ],
                       "properties":{
                          "phases":{
                             "description":"Phases voltage information.",
                             "readOnly":true,
                             "type":"array",
                             "items":{
                                "description":"Phase voltage information.<br>Unit: millivolt.",
                                "type":"integer"
                             }
                          },
                          "max":{
                             "description":"Maximum voltage from all phases. Null if not available.<br>Unit: millivolt.",
                             "type":"integer",
                             "nullable":true,
                             "example":230000
                          }
                       }
                    }
                 }
              }
           },
           "example":{
              "$ref":"#/components/examples/EnergyCenter.FlowMonitor/value"
           }
        },
        "EnergyCenter.Prices":{
           "description":"Energy prices for every hour in a day.",
           "type":"object",
           "required":[
              "currency",
              "prices",
              "date",
              "next_day_prices",
              "next_day_date",
              "prices_interval"
           ],
           "properties":{
              "currency":{
                 "description":"Currency at which values are passed (in ISO 4217).",
                 "type":"string",
                 "minimum":3,
                 "maximum":3,
                 "readOnly":true,
                 "example":"EUR"
              },
              "prices":{
                 "description":"Array with prices for every hour in a day. <br>Unit: */kWh multiplied by 100000",
                 "type":"array",
                 "minimum":24,
                 "maximum":96,
                 "readOnly":true,
                 "items":{
                    "type":"integer",
                    "multipleOf":0.00001,
                    "readOnly":true
                 },
                 "example":[
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34
                 ]
              },
              "date":{
                 "description":"Date for which prices are given. <br>Format: YYYY-MM-DD",
                 "type":"string",
                 "readOnly":true,
                 "example":"2025-06-09"
              },
              "next_day_prices":{
                 "description":"Array with prices for every hour in the next day. <br>Unit: */kWh multiplied by 100000<br>NOTE: May be empty if prices for next day are not available yet.",
                 "type":"array",
                 "minimum":24,
                 "maximum":96,
                 "readOnly":true,
                 "items":{
                    "type":"integer",
                    "multipleOf":0.00001,
                    "readOnly":true
                 },
                 "example":[
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34
                 ]
              },
              "next_day_date":{
                 "description":"Date for which next day prices are given. <br>Format: YYYY-MM-DD",
                 "type":"string",
                 "readOnly":true,
                 "example":"2025-06-10"
              },
              "prices_interval":{
                 "description":"Interval in which energy prices are given.<br>Unit: minutes. Can be one of values: 15, 30, 60.",
                 "type":"integer",
                 "minimum":15,
                 "maximum":60,
                 "readOnly":true,
                 "example":60
              }
           }
        },
        "EnergyCenter.Prices.Settings":{
           "description":"Settings for energy prices widget.",
           "type":"object",
           "required":[
              "enabled",
              "access_type",
              "country",
              "api_name",
              "currency"
           ],
           "properties":{
              "enabled":{
                 "description":"Indicates if prices widget should be visible. If disabled all prices downloading logic is inactive.",
                 "type":"boolean",
                 "example":true
              },
              "access_type":{
                 "description":"Method of obtaining energy prices. <br> *NOTE:* Cannot be modified when *enabled* is set to *false*",
                 "type":"string",
                 "enum":[
                    "lua",
                    "api"
                 ],
                 "example":"lua"
              },
              "country":{
                 "description":"Country for which energy prices should be obtained. <br> *NOTE:* Cannot be modified when *enabled* is set to *false*. <br> Cannot be modified when *access-type* is set to *lua*. <br> Has to be passed together with *api_name*. <br> *not_set* cannot be set via REST.",
                 "type":"string",
                 "enum":[
                    "holland",
                    "czech",
                    "slovakia",
                    "poland",
                    "not_set"
                 ],
                 "example":"not_set"
              },
              "api_name":{
                 "description":"Api which should be used to obtain energy prices. <br> *NOTE:* Cannot be modified when *enabled* is set to *false*. <br> Cannot be modified when *access-type* is set to *lua*. <br> Has to be passed together with *country*. <br> *not_set* cannot be set via REST.",
                 "type":"string",
                 "enum":[
                    "epex_econtro",
                    "ote",
                    "okte",
                    "pse",
                    "not_set"
                 ],
                 "example":"not_set"
              },
              "currency":{
                 "description":"Currency (in ISO 4217) which will be passed with prices when `lua` values are used. When access_type is `api` it has to be one of available currencies as passed in sources endpoint. <br> *NOTE:* Cannot be modified when *enabled* is set to *false*.",
                 "minimum":3,
                 "maximum":3,
                 "example":"EUR"
              }
           }
        },
        "EnergyCenter.Prices.Sources":{
           "description":"List of available APIs and countries and currencies to use in energy-center/prices/settings endpoint.",
           "type":"array",
           "items":{
              "type":"object",
              "required":[
                 "api_name",
                 "countries"
              ],
              "properties":{
                 "api_name":{
                    "description":"Name of API.",
                    "type":"string",
                    "enum":[
                       "epex_econtro",
                       "ote",
                       "okte"
                    ],
                    "readOnly":true,
                    "example":"ote"
                 },
                 "countries":{
                    "description":"List of countries and currencies supported by API.",
                    "type":"array",
                    "items":{
                       "type":"object",
                       "required":[
                          "name",
                          "currencies"
                       ],
                       "properties":{
                          "name":{
                             "type":"string",
                             "readOnly":true,
                             "enum":[
                                "holland",
                                "czech",
                                "slovakia"
                             ],
                             "example":"czech"
                          },
                          "currencies":{
                             "type":"array",
                             "items":{
                                "type":"string",
                                "enum":[
                                   "EUR",
                                   "CZK"
                                ],
                                "example":[
                                   "EUR",
                                   "CZK"
                                ]
                             },
                             "readOnly":true
                          }
                       }
                    },
                    "readOnly":true
                 }
              }
           }
        },
        "EnergyCenter.EnergyStorage":{
           "description":"EnergyCenter EnergyStorage representation.",
           "type":"object",
           "required":[
              "available",
              "status",
              "power",
              "energy_charged_today",
              "energy_discharged_today",
              "state_of_charge"
           ],
           "properties":{
              "available":{
                 "description":"Describes if energy storage data is available. Becomes available if battery device association is configured (associated devices).",
                 "type":"boolean",
                 "readOnly":true,
                 "example":true
              },
              "status":{
                 "description":"Current status of energy storage.",
                 "type":"string",
                 "enum":[
                    "idle",
                    "charging",
                    "discharging"
                 ],
                 "readOnly":true,
                 "example":"idle"
              },
              "power":{
                 "description":"Current battery power distribution. Positive value represents the power that the battery is currently charged with. Negative value represents the power that the battery is currently discharged with.<br> Unit: mW",
                 "type":"integer",
                 "readOnly":true,
                 "example":0
              },
              "energy_charged_today":{
                 "description":"Daily sum of energy the battery was charged with.<br> Unit: Wh",
                 "type":"integer",
                 "readOnly":true,
                 "example":0
              },
              "energy_discharged_today":{
                 "description":"Daily sum of energy the battery was discharged with.<br> Unit: Wh",
                 "type":"integer",
                 "readOnly":true,
                 "example":0
              },
              "state_of_charge":{
                 "description":"Represents battery state of charge.",
                 "type":"object",
                 "required":[
                    "available",
                    "value"
                 ],
                 "properties":{
                    "available":{
                       "description":"Describes if battery state of charge data is available. Becomes available if battery device exposes such data.",
                       "type":"boolean",
                       "readOnly":true,
                       "example":true
                    },
                    "value":{
                       "description":"Current battery state of charge.<br> Unit: %",
                       "type":"integer",
                       "readOnly":true,
                       "example":0
                    }
                 }
              }
           },
           "example":{
              "$ref":"#/components/examples/EnergyCenter.EnergyStorage/value"
           }
        },
        "EnergyCenter.EnergyConsumption.ConsumptionData":{
           "description":"EnergyCenter EnergyConsumption representation.",
           "type":"object",
           "required":[
              "total_consumption",
              "house_consumption",
              "electrical_outlets_consumption",
              "car_chargers_consumption"
           ],
           "properties":{
              "total_consumption":{
                 "description":"Summary of building energy consumption.<br>Unit: kWh, multiplied by 1000 (Wh)",
                 "type":"integer",
                 "readOnly":true,
                 "multipleOf":0.001,
                 "example":100000
              },
              "house_consumption":{
                 "description":"House energy consumption. Represents computed value of energy consumption of devices that dont provide their individual energy consumption data.<br>Unit: kWh, multiplied by 1000 (Wh)",
                 "type":"integer",
                 "readOnly":true,
                 "multipleOf":0.001,
                 "example":50000
              },
              "electrical_outlets_consumption":{
                 "description":"Represents computed value of energy consumption of devices that provide their power consumption.<br>Unit: kWh, multiplied by 1000 (Wh)",
                 "type":"integer",
                 "readOnly":true,
                 "multipleOf":0.001,
                 "example":50000
              },
              "car_chargers_consumption":{
                 "description":"Represents computed value of energy consumption of car chargers.<br>Unit: kWh, multiplied by 1000 (Wh)",
                 "type":"integer",
                 "readOnly":true,
                 "multipleOf":0.001,
                 "example":50000
              }
           }
        },
        "EnergyCenter.EnergyConsumption":{
           "description":"EnergyCenter EnergyConsumption representation.",
           "type":"object",
           "required":[
              "available",
              "total",
              "today"
           ],
           "properties":{
              "available":{
                 "description":"Describes if total energy consumption data is available. Becomes available if grid, pv or battery device association is configured (associated devices).",
                 "type":"boolean",
                 "readOnly":true,
                 "example":true
              },
              "total":{
                 "description":"Total energy consumption data.",
                 "allOf":[
                    {
                       "$ref":"#/components/schemas/EnergyCenter.EnergyConsumption.ConsumptionData"
                    }
                 ]
              },
              "today":{
                 "description":"Today energy consumption data.",
                 "allOf":[
                    {
                       "$ref":"#/components/schemas/EnergyCenter.EnergyConsumption.ConsumptionData"
                    }
                 ]
              }
           },
           "example":{
              "$ref":"#/components/examples/EnergyCenter.EnergyConsumption/value"
           }
        },
        "EnergyCenter.EnergyProduction":{
           "description":"EnergyCenter EnergyProduction representation.",
           "type":"object",
           "required":[
              "available",
              "total",
              "today"
           ],
           "properties":{
              "available":{
                 "description":"Describes if energy consumption data is available. Becomes available if FlowMonitor PV Summary is available and inverter exposed total energy produced parameter",
                 "type":"boolean",
                 "readOnly":true,
                 "example":true
              },
              "total":{
                 "description":"Total values.",
                 "type":"object",
                 "required":[
                    "autoconsumption",
                    "energy_storage",
                    "grid_export",
                    "all"
                 ],
                 "properties":{
                    "autoconsumption":{
                       "description":"Total value of produced energy that was autoconsumed by building.<br>Unit: kWh, multiplied by 1000 (Wh)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":100000
                    },
                    "energy_storage":{
                       "description":"Total value of produced energy that was used to charge battery<br>Unit: kWh, multiplied by 1000 (Wh)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":50000
                    },
                    "grid_export":{
                       "description":"Total value of produced energy that was exported to grid.<br>Unit: kWh, multiplied by 1000 (Wh)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":50000
                    },
                    "all":{
                       "description":"Total value of produced energy.<br>Unit: kWh, multiplied by 1000 (Wh)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":50000
                    }
                 }
              },
              "today":{
                 "description":"Today values.",
                 "type":"object",
                 "required":[
                    "autoconsumption",
                    "energy_storage",
                    "grid_export",
                    "all"
                 ],
                 "properties":{
                    "autoconsumption":{
                       "description":"Today value of produced energy that was autoconsumed by building.<br>Unit: kWh, multiplied by 1000 (Wh)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":10000
                    },
                    "energy_storage":{
                       "description":"Today value of produced energy that was used to charge battery<br>Unit: kWh, multiplied by 1000 (Wh)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":5000
                    },
                    "grid_export":{
                       "description":"Today value of produced energy that was exported to grid.<br>Unit: kWh, multiplied by 1000 (Wh)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":5000
                    },
                    "all":{
                       "description":"Today value of produced energy.<br>Unit: kWh, multiplied by 1000 (Wh)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":5000
                    }
                 }
              }
           },
           "example":{
              "$ref":"#/components/examples/EnergyCenter.EnergyProduction/value"
           }
        },
        "ModbusSettings":{
           "description":"Modbus settings representation.",
           "type":"object",
           "required":[
              "cache_refresh",
              "request_delay",
              "keep_cached",
              "tcp_connection_timeout"
           ],
           "properties":{
              "cache_refresh":{
                 "description":"Interval at which cached values will be refreshed. Every read request by any modbus client will add this request to periodic refresh.<br>Unit: seconds",
                 "type":"integer",
                 "minimum":30,
                 "maximum":600
              },
              "request_delay":{
                 "description":"Pause time between requests. After every request completed by modbus client, next request must wait this set time for send.<br>Unit: milliseconds",
                 "type":"integer",
                 "minimum":10,
                 "maximum":200
              },
              "keep_cached":{
                 "description":"Determines the time the requests will be kept in cache and refreshed periodically after read request.<br>Unit: seconds",
                 "type":"integer",
                 "minimum":120,
                 "maximum":3600
              },
              "tcp_connection_timeout":{
                 "description":"Duration of maintaining connection with the Modbus TCP device during inactivity.<br>Unit: seconds",
                 "type":"integer",
                 "minimum":60,
                 "maximum":3600
              }
           },
           "example":{
              "$ref":"#/components/examples/ModbusSettings/value"
           }
        },
        "ModbusParentDeviceDiagnosticInfo":{
           "description":"Modbus Parent device diagnostic info.",
           "type":"object",
           "required":[
              "id",
              "name",
              "firm",
              "model",
              "type",
              "config",
              "devices"
           ],
           "properties":{
              "id":{
                 "description":"Parent device ID.",
                 "type":"integer",
                 "readOnly":true,
                 "example":1
              },
              "name":{
                 "description":"Container device name. Cannot contain special characters except `:` `,` `;` `.` `-` `_`",
                 "type":"string",
                 "readOnly":true,
                 "example":"PS-08"
              },
              "firm":{
                 "description":"Container device manufacturer name.",
                 "type":"string",
                 "readOnly":true,
                 "example":"Tech"
              },
              "model":{
                 "description":"Parent Device unique product model name.",
                 "type":"string",
                 "readOnly":true,
                 "example":"R-8b+"
              },
              "type":{
                 "description":"Container device type",
                 "type":"string",
                 "readOnly":true,
                 "enum":[
                    "generic",
                    "rail",
                    "pellet_boiler",
                    "heat_pump",
                    "ventilation",
                    "solar",
                    "valve",
                    "scene_control_panel",
                    "satel_alarm_system",
                    "inverter",
                    "energy_meter",
                    "car_charger"
                 ],
                 "example":"generic"
              },
              "config":{
                 "description":"Device connection configuration.",
                 "oneOf":[
                    {
                       "$ref":"#/components/schemas/Modbus.TcpConfig"
                    },
                    {
                       "$ref":"#/components/schemas/Modbus.RtuConfig"
                    }
                 ]
              },
              "devices":{
                 "description":"List of child devices info.",
                 "type":"array",
                 "readOnly":true,
                 "items":{
                    "type":"object",
                    "required":[
                       "id",
                       "name",
                       "type",
                       "parameters_status"
                    ],
                    "properties":{
                       "id":{
                          "description":"Unique (per system) instance identifier.",
                          "type":"integer",
                          "readOnly":true,
                          "example":1
                       },
                       "name":{
                          "description":"Custom device name for user purposes. Cannot contain special characters except `:` `,` `;` `.` `-` `_`",
                          "type":"string",
                          "readOnly":true,
                          "example":"My Device"
                       },
                       "type":{
                          "description":"Device type description, based on role and functionality.",
                          "type":"string",
                          "readOnly":true
                       },
                       "parameters_status":{
                          "description":"Parameter status info. Contains information about modbus registers status. Varies depending on type of device.",
                          "type":"object",
                          "readOnly":true
                       }
                    }
                 }
              }
           },
           "example":{
              "$ref":"#/components/examples/ModbusParentDeviceDiagnosticInfo/value"
           }
        },
        "FloorsSettings":{
           "description":"Floors settings representation.",
           "type":"object",
           "required":[
              "visible"
           ],
           "properties":{
              "visible":{
                 "description":"Flag indicating whether floors feature should be visible to users.",
                 "type":"boolean"
              }
           },
           "example":{
              "$ref":"#/components/examples/FloorsSettings/value"
           }
        },
        "InfluxQuery":{
           "description":"influq query parametrers",
           "type":"object",
           "required":[
              "series",
              "time_start",
              "time_end"
           ],
           "properties":{
              "series":{
                 "type":"array",
                 "items":{
                    "type":"object",
                    "required":[
                       "devices",
                       "name"
                    ],
                    "properties":{
                       "devices":{
                          "type":"object",
                          "required":[
                             "tech",
                             "wtp",
                             "sbus",
                             "slink",
                             "virtual",
                             "system_module",
                             "lora",
                             "modbus"
                          ],
                          "properties":{
                             "tech":{
                                "type":"array",
                                "items":{
                                   "type":"integer"
                                }
                             },
                             "wtp":{
                                "type":"array",
                                "items":{
                                   "type":"integer"
                                }
                             },
                             "sbus":{
                                "type":"array",
                                "items":{
                                   "type":"integer"
                                }
                             },
                             "slink":{
                                "type":"array",
                                "items":{
                                   "type":"integer"
                                }
                             },
                             "virtual":{
                                "type":"array",
                                "items":{
                                   "type":"integer"
                                }
                             },
                             "system_module":{
                                "type":"array",
                                "items":{
                                   "type":"integer"
                                }
                             },
                             "lora":{
                                "type":"array",
                                "items":{
                                   "type":"integer"
                                }
                             },
                             "modbus":{
                                "type":"array",
                                "items":{
                                   "type":"integer"
                                }
                             }
                          }
                       },
                       "name":{
                          "description":"Name of property.",
                          "type":"string"
                       },
                       "query_variant":{
                          "description":"Optional field, if not provided `standard` variant will be assumed. <br> Using `standard` will return data as is. <br> Using `incremental` will return data in a form relative to the time period (the beginning of the time range means zero). Useful for incremental data (e.g. total energy consumption/production values) <br> Using `incremental_summary` is similar to `incremental` this will return single value representing the increase for the entire period of time",
                          "type":"string",
                          "enum":[
                             "standard",
                             "incremental",
                             "incremental_summary"
                          ]
                       }
                    }
                 }
              },
              "time_start":{
                 "type":"string"
              },
              "time_end":{
                 "type":"string"
              }
           }
        },
        "InfluxNotificationQuery":{
           "description":"influq notification query parameters",
           "type":"object",
           "properties":{
              "time_start":{
                 "type":"string",
                 "example":"2021-11-12T23:00:00.000Z"
              },
              "time_end":{
                 "type":"string",
                 "example":"2021-12-13T22:59:59.999Z"
              },
              "limit":{
                 "type":"number",
                 "example":10
              },
              "offset":{
                 "type":"number",
                 "example":10
              },
              "type":{
                 "type":"array",
                 "items":{
                    "enum":[
                       "error",
                       "warning",
                       "info"
                    ]
                 }
              },
              "with_checked":{
                 "type":"boolean"
              },
              "filter":{
                 "type":"object",
                 "properties":{
                    "device":{
                       "type":"object",
                       "properties":{
                          "wtp":{
                             "items":{
                                "type":"number",
                                "example":[
                                   1,
                                   2
                                ]
                             }
                          },
                          "tech":{
                             "items":{
                                "type":"number",
                                "example":[
                                   1,
                                   2
                                ]
                             }
                          },
                          "virtual":{
                             "items":{
                                "type":"number",
                                "example":[
                                   1,
                                   2
                                ]
                             }
                          },
                          "system_module":{
                             "items":{
                                "type":"number",
                                "example":[
                                   1,
                                   2
                                ]
                             }
                          },
                          "sbus":{
                             "items":{
                                "type":"number",
                                "example":[
                                   1,
                                   2
                                ]
                             }
                          },
                          "slink":{
                             "items":{
                                "type":"number",
                                "example":[
                                   1,
                                   2
                                ]
                             }
                          },
                          "lora":{
                             "items":{
                                "type":"number",
                                "example":[
                                   1,
                                   2
                                ]
                             }
                          },
                          "modbus":{
                             "items":{
                                "type":"number",
                                "example":[
                                   1,
                                   2
                                ]
                             }
                          },
                          "alarm_system":{
                             "items":{
                                "type":"number",
                                "example":[
                                   1,
                                   2
                                ]
                             }
                          }
                       }
                    },
                    "parent_device":{
                       "type":"object",
                       "properties":{
                          "wtp_parent_device":{
                             "items":{
                                "type":"number",
                                "example":[
                                   1,
                                   2
                                ]
                             }
                          },
                          "tech_parent_device":{
                             "items":{
                                "type":"number",
                                "example":[
                                   1,
                                   2
                                ]
                             }
                          },
                          "sbus_parent_device":{
                             "items":{
                                "type":"number",
                                "example":[
                                   1,
                                   2
                                ]
                             }
                          },
                          "slink_parent_device":{
                             "items":{
                                "type":"number",
                                "example":[
                                   1,
                                   2
                                ]
                             }
                          },
                          "lora_parent_device":{
                             "items":{
                                "type":"number",
                                "example":[
                                   1,
                                   2
                                ]
                             }
                          },
                          "modbus_parent_device":{
                             "items":{
                                "type":"number",
                                "example":[
                                   1,
                                   2
                                ]
                             }
                          },
                          "system_module_parent_device":{
                             "items":{
                                "type":"number",
                                "example":[
                                   1,
                                   2
                                ]
                             }
                          }
                       }
                    },
                    "scene":{
                       "type":"array",
                       "items":{
                          "type":"number",
                          "example":[
                             1,
                             2
                          ]
                       }
                    },
                    "automation":{
                       "type":"array",
                       "items":{
                          "type":"number",
                          "example":[
                             1,
                             2
                          ]
                       }
                    },
                    "by_user":{
                       "type":"boolean",
                       "example":true,
                       "description":"true - filer by user settings"
                    }
                 }
              }
           }
        },
        "InfluxLoginHistoryQuery":{
           "description":"influq login history query parameters",
           "type":"object",
           "properties":{
              "time_start":{
                 "type":"string",
                 "example":"2021-11-12T23:00:00.000Z"
              },
              "time_end":{
                 "type":"string",
                 "example":"2021-12-13T22:59:59.999Z"
              },
              "limit":{
                 "type":"number",
                 "example":10
              },
              "offset":{
                 "type":"number",
                 "example":10
              },
              "connection_type":{
                 "type":"array",
                 "items":{
                    "enum":[
                       "CloudConnection",
                       "LocalConnection"
                    ]
                 }
              },
              "role":{
                 "type":"array",
                 "items":{
                    "enum":[
                       "SUPER_ADMIN",
                       "USER"
                    ]
                 }
              },
              "user_name":{
                 "type":"array",
                 "items":{
                    "enum":[
                       "admin",
                       "superadmin@techsterowniki.pl"
                    ]
                 }
              }
           }
        },
        "InfluxQueryTemplate":{
           "description":"Statistic data query template preconfigured by user.",
           "type":"object",
           "required":[
              "id",
              "name",
              "sources"
           ],
           "properties":{
              "id":{
                 "type":"integer",
                 "readOnly":true,
                 "example":1
              },
              "name":{
                 "description":"Query template named given by user. Cannot contain special characters except `:` `,` `;` `.` `-` `_`",
                 "type":"string",
                 "minLength":1,
                 "maxLength":64,
                 "example":"My fancy query template"
              },
              "sources":{
                 "description":"List of data sources for this query.",
                 "type":"array",
                 "items":{
                    "type":"object",
                    "required":[
                       "device",
                       "property",
                       "color",
                       "query_variant",
                       "chart_type",
                       "min",
                       "max"
                    ],
                    "properties":{
                       "device":{
                          "$ref":"#/components/schemas/Device.AssociationInfo"
                       },
                       "property":{
                          "type":"string",
                          "example":"target_temperature"
                       },
                       "color":{
                          "type":"string",
                          "example":"orange"
                       },
                       "query_variant":{
                          "description":"Type of query to retrieve data from database.<br>standard - gets the data points from database<br>incremental - returns parameter value change in the time interval",
                          "type":"string",
                          "enum":[
                             "standard",
                             "incremental"
                          ],
                          "example":"standard"
                       },
                       "chart_type":{
                          "description":"Type of chart to display.",
                          "type":"string",
                          "enum":[
                             "line",
                             "bar"
                          ],
                          "example":"line"
                       },
                       "min":{
                          "description":"Minimum value that should be displayed on the statistics chart.",
                          "type":"integer",
                          "nullable":true,
                          "example":100
                       },
                       "max":{
                          "description":"Maximum value that should be displayed on the statistics chart.",
                          "type":"integer",
                          "nullable":true,
                          "example":300
                       }
                    }
                 }
              }
           }
        },
        "InfluxQueryRunResult":{
           "type":"object",
           "required":[
              "series"
           ],
           "properties":{
              "series":{
                 "type":"array",
                 "items":{
                    "type":"object",
                    "required":[
                       "name",
                       "values",
                       "columns"
                    ],
                    "properties":{
                       "name":{
                          "type":"string"
                       },
                       "values":{
                          "type":"array",
                          "items":{
                             "type":"string"
                          }
                       },
                       "columns":{
                          "type":"array",
                          "items":{
                             "type":"string"
                          }
                       }
                    }
                 }
              }
           }
        },
        "InfluxQueryTemplateRunResult":{
           "description":"Object representing result of running query template",
           "type":"object",
           "required":[
              "id",
              "name",
              "series"
           ],
           "properties":{
              "id":{
                 "type":"integer",
                 "readOnly":true,
                 "example":1
              },
              "name":{
                 "description":"Query template named given by user. Cannot contain special characters except `:` `,` `;` `.` `-` `_`",
                 "type":"string",
                 "minLength":1,
                 "maxLength":64,
                 "example":"My fancy query template"
              },
              "series":{
                 "type":"array",
                 "items":{
                    "type":"object",
                    "required":[
                       "device",
                       "property",
                       "color",
                       "values",
                       "columns",
                       "query_variant",
                       "chart_type",
                       "min",
                       "max"
                    ],
                    "properties":{
                       "device":{
                          "$ref":"#/components/schemas/Device.AssociationInfo"
                       },
                       "property":{
                          "type":"string",
                          "example":"target_temperature"
                       },
                       "color":{
                          "type":"string",
                          "example":"orange"
                       },
                       "values":{
                          "type":"array",
                          "items":{
                             "type":"string"
                          },
                          "example":[
                             [
                                "2021-11-12T23:00:00Z",
                                "Cx10",
                                191
                             ],
                             [
                                "2021-11-12T23:01:00Z",
                                "Cx10",
                                200
                             ]
                          ]
                       },
                       "columns":{
                          "type":"array",
                          "items":{
                             "type":"string"
                          },
                          "example":[
                             "time",
                             "unit",
                             "val"
                          ]
                       },
                       "query_variant":{
                          "description":"Type of query to retrieve data from database.<br>standard - gets the data points from database<br>incremental - returns parameter value change in the time interval",
                          "type":"string",
                          "enum":[
                             "standard",
                             "incremental"
                          ],
                          "example":"standard"
                       },
                       "chart_type":{
                          "description":"Type of chart to display.",
                          "type":"string",
                          "enum":[
                             "line",
                             "bar"
                          ],
                          "example":"line"
                       },
                       "min":{
                          "description":"Minimum value that should be displayed on the statistics chart.",
                          "type":"integer",
                          "nullable":true,
                          "example":100
                       },
                       "max":{
                          "description":"Maximum value that should be displayed on the statistics chart.",
                          "type":"integer",
                          "nullable":true,
                          "example":300
                       }
                    }
                 }
              }
           }
        },
        "InfluxNotificationQueryRunResult":{
           "type":"object",
           "properties":{
              "metadata":{
                 "type":"object",
                 "properties":{
                    "totalCount":{
                       "type":"integer",
                       "example":500
                    },
                    "hasNextPage":{
                       "type":"boolean",
                       "example":true
                    }
                 }
              },
              "data":{
                 "type":"array",
                 "items":{
                    "type":"object",
                    "required":[
                       "time",
                       "code",
                       "source",
                       "name",
                       "device_id",
                       "title",
                       "body",
                       "stop_time",
                       "type"
                    ],
                    "properties":{
                       "time":{
                          "type":"string",
                          "example":"2022-07-07T15:20:52.72342558Z"
                       },
                       "code":{
                          "description":"alarm code - tech device",
                          "type":"string",
                          "example":"0"
                       },
                       "source":{
                          "type":"string",
                          "enum":[
                             "wtp",
                             "tech",
                             "virtual",
                             "system_module",
                             "sbus",
                             "slink",
                             "lora",
                             "automation",
                             "scene",
                             "modbus",
                             "alarm_system"
                          ]
                       },
                       "name":{
                          "type":"string",
                          "example":"Temperature Sensor"
                       },
                       "source_id":{
                          "type":"integer",
                          "example":5
                       },
                       "title":{
                          "type":"string",
                          "example":"title"
                       },
                       "body":{
                          "type":"string",
                          "example":"title"
                       },
                       "stop_time":{
                          "description":"end off alarm",
                          "type":"string",
                          "example":"2022-07-07T15:20:52.72342558Z"
                       },
                       "type":{
                          "type":"string",
                          "enum":[
                             "error",
                             "warning",
                             "info"
                          ]
                       }
                    }
                 }
              }
           }
        },
        "InfluxLoginHistoryQueryRunResult":{
           "type":"object",
           "properties":{
              "metadata":{
                 "type":"object",
                 "properties":{
                    "totalCount":{
                       "type":"integer",
                       "example":500
                    },
                    "hasNextPage":{
                       "type":"boolean",
                       "example":true
                    }
                 }
              },
              "data":{
                 "type":"array",
                 "items":{
                    "type":"object",
                    "required":[
                       "time",
                       "connection_type",
                       "role",
                       "user_name",
                       "stop_time",
                       "user_id",
                       "os_info",
                       "device_info",
                       "uuid_device"
                    ],
                    "properties":{
                       "time":{
                          "description":"login time",
                          "type":"string",
                          "example":"2022-07-07T15:20:52.72342558Z"
                       },
                       "connection_type":{
                          "description":"local connection or cloud connection",
                          "type":"string",
                          "enum":[
                             "CloudConnection",
                             "LocalConnection"
                          ]
                       },
                       "role":{
                          "type":"string",
                          "enum":[
                             "SUPER_ADMIN",
                             "ADMIN",
                             "INSTALLER",
                             "USER",
                             "GUEST",
                             "ROLE_SUPER_TECH_ADMIN",
                             "ROLE_TECH_ADMIN"
                          ]
                       },
                       "user_name":{
                          "type":"string",
                          "example":"admin"
                       },
                       "stop_time":{
                          "description":"logout time",
                          "type":"string",
                          "example":"2022-07-07T15:20:52.72342558Z"
                       },
                       "user_id":{
                          "type":"string",
                          "example":"5"
                       },
                       "os_info":{
                          "type":"string",
                          "example":"android,ios,windows"
                       },
                       "device_info":{
                          "type":"string",
                          "example":""
                       },
                       "uuid_device":{
                          "type":"string",
                          "example":""
                       }
                    }
                 }
              }
           }
        },
        "InfluxLoginHistoryFilterRunResult":{
           "type":"object",
           "required":[
              "connection_type",
              "role",
              "user_name"
           ],
           "properties":{
              "connection_type":{
                 "description":"local connection or cloud connection",
                 "type":"array",
                 "items":{
                    "type":"string",
                    "enum":[
                       "CloudConnection",
                       "LocalConnection"
                    ]
                 },
                 "example":[
                    "CloudConnection",
                    "LocalConnection"
                 ]
              },
              "role":{
                 "type":"array",
                 "items":{
                    "type":"string",
                    "enum":[
                       "SUPER_ADMIN",
                       "ADMIN",
                       "INSTALLER",
                       "USER",
                       "GUEST",
                       "ROLE_SUPER_TECH_ADMIN",
                       "ROLE_TECH_ADMIN"
                    ]
                 },
                 "example":[
                    "SUPER_ADMIN",
                    "ADMIN"
                 ]
              },
              "user_name":{
                 "type":"array",
                 "items":{
                    "type":"string"
                 },
                 "example":[
                    "admin",
                    "user",
                    "user@example.com"
                 ]
              }
           }
        },
        "InfluxStatisticFilterRunResult":{
           "type":"object",
           "required":[
              "id",
              "source",
              "series"
           ],
           "properties":{
              "id":{
                 "description":"source id",
                 "type":"integer",
                 "example":5
              },
              "source":{
                 "description":"device type/scene/automation/virtual",
                 "type":"string",
                 "enum":[
                    "wtp",
                    "tech",
                    "virtual",
                    "system_module",
                    "sbus",
                    "slink",
                    "lora",
                    "automation",
                    "scene",
                    "energy_production",
                    "energy_consumption",
                    "total_energy_consumption"
                 ],
                 "example":"wtp"
              },
              "series":{
                 "type":"array",
                 "items":{
                    "type":"object",
                    "required":[
                       "property",
                       "text_id",
                       "unit",
                       "supported_types"
                    ],
                    "properties":{
                       "property":{
                          "description":"property name",
                          "type":"string"
                       },
                       "text_id":{
                          "description":"property text id or if 0 display the property",
                          "type":"integer"
                       },
                       "unit":{
                          "description":"unit type",
                          "type":"string"
                       },
                       "supported_types":{
                          "description":"List of supported chart types for given property.",
                          "type":"array",
                          "items":{
                             "type":"string",
                             "enum":[
                                "line",
                                "bar"
                             ]
                          },
                          "example":[
                             "line",
                             "bar"
                          ]
                       }
                    }
                 }
              }
           }
        },
        "InfluxStatus":{
           "type":"object",
           "required":[
              "status"
           ],
           "properties":{
              "status":{
                 "description":"Status of database.",
                 "type":"string",
                 "enum":[
                    "not_checked_yet",
                    "unknown_failure",
                    "storage_failure",
                    "service_down",
                    "server_down",
                    "server_not_ready",
                    "up"
                 ],
                 "example":"server_down"
              }
           }
        },
        "TextTranslation":{
           "description":"Represents multi-lang text entity.",
           "type":"object",
           "required":[
              "id",
              "text"
           ],
           "properties":{
              "id":{
                 "description":"Text ID from translations database",
                 "type":"integer",
                 "readOnly":true,
                 "example":552
              },
              "text":{
                 "description":"Text in english from translations database",
                 "type":"string",
                 "readOnly":true,
                 "example":"English translation goes here."
              }
           }
        },
        "Response.Error":{
           "description":"Encountered error during request processing.",
           "type":"object",
           "required":[
              "error"
           ],
           "properties":{
              "error":{
                 "type":"object",
                 "required":[
                    "message"
                 ],
                 "properties":{
                    "message":{
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/TextTranslation"
                          }
                       ]
                    }
                 }
              }
           }
        },
        "Response.ReasonError":{
           "description":"Encountered error during request processing.",
           "type":"object",
           "required":[
              "error"
           ],
           "properties":{
              "error":{
                 "type":"object",
                 "required":[
                    "message"
                 ],
                 "properties":{
                    "message":{
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/TextTranslation"
                          }
                       ]
                    }
                 }
              },
              "reason":{
                 "type":"string",
                 "enum":[
                    "influx_is_off",
                    "regulations"
                 ],
                 "example":[
                    "influx_is_off"
                 ]
              }
           }
        },
        "Response.ValidationError":{
           "description":"Encountered error during validating request data. Validation rules described on <a href=\"http://git.tech.sp/wojciech.marmurowicz/eHomeDocs/wiki/Walidacja%20-%20odpowiedzi\">WikiDocs</a>",
           "type":"object",
           "required":[
              "error"
           ],
           "properties":{
              "error":{
                 "type":"object",
                 "required":[
                    "message"
                 ],
                 "properties":{
                    "message":{
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/TextTranslation"
                          }
                       ]
                    },
                    "errors":{
                       "description":"Dynamic hash map of validation errors with actual parameter name which failed validation",
                       "type":"object",
                       "additionalProperties":{
                          "type":"object",
                          "required":[
                             "id",
                             "text",
                             "params"
                          ],
                          "properties":{
                             "id":{
                                "type":"integer"
                             },
                             "text":{
                                "description":"Text in english from translations database",
                                "type":"string"
                             },
                             "params":{
                                "description":"Parameters which should be used in \"text\" instead of {} variables if there are any.",
                                "type":"array",
                                "items":{
                                   "type":"string"
                                }
                             }
                          }
                       }
                    }
                 }
              }
           }
        },
        "Response.GoGatewayError":{
           "description":"Encountered error during request processing or sending through GO gateway.",
           "type":"object",
           "required":[
              "error"
           ],
           "properties":{
              "error":{
                 "type":"object",
                 "required":[
                    "message"
                 ],
                 "properties":{
                    "message":{
                       "allOf":[
                          {
                             "$ref":"#/components/schemas/TextTranslation"
                          }
                       ]
                    }
                 }
              }
           }
        },
        "Device.Registration":{
           "description":"Represents device registration entity.",
           "type":"object",
           "required":[
              "state",
              "deadline",
              "deadline_time"
           ],
           "properties":{
              "state":{
                 "description":"Current registration state.",
                 "type":"string",
                 "readOnly":true,
                 "enum":[
                    "idle",
                    "started",
                    "in_progress",
                    "completed"
                 ],
                 "example":"idle"
              },
              "deadline":{
                 "description":"UTC timestamp, deadline of registration that is `started` / `in_progress` or `null` in other states.",
                 "readOnly":true,
                 "nullable":true,
                 "type":"integer",
                 "example":1640995200
              },
              "deadline_time":{
                 "description":"RFC3339 string, deadline of registration that is `started` / `in_progress` or `null` in other states.",
                 "readOnly":true,
                 "nullable":true,
                 "type":"string",
                 "example":"2024-10-01T10:56:12.572405852+02:00"
              }
           }
        },
        "Device.AssociationInfo":{
           "description":"Represents association or reference to device / parent-device entity.",
           "type":"object",
           "required":[
              "id",
              "class"
           ],
           "properties":{
              "id":{
                 "description":"Unique (per system) instance identifier.",
                 "type":"integer",
                 "readOnly":true,
                 "minimum":1,
                 "example":1
              },
              "class":{
                 "description":"Device class description, based on communication type, manufacturer etc.",
                 "readOnly":true,
                 "allOf":[
                    {
                       "$ref":"#/components/schemas/Device.Class"
                    }
                 ]
              }
           }
        },
        "Device.AssociationInfoWithParent":{
           "description":"Represents association or reference to device / parent-device entity.",
           "type":"object",
           "required":[
              "id",
              "class"
           ],
           "properties":{
              "id":{
                 "description":"Unique (per system) instance identifier.",
                 "type":"integer",
                 "readOnly":true,
                 "minimum":1,
                 "example":1
              },
              "class":{
                 "description":"Device class description, based on communication type, manufacturer etc.",
                 "readOnly":true,
                 "oneOf":[
                    {
                       "$ref":"#/components/schemas/Device.Class"
                    },
                    {
                       "$ref":"#/components/schemas/ParentDevice.Class"
                    }
                 ]
              }
           }
        },
        "Device.Class":{
           "description":"Device classes.",
           "type":"string",
           "enum":[
              "wtp",
              "tech",
              "virtual",
              "system_module",
              "sbus",
              "slink",
              "lora",
              "modbus",
              "alarm_system",
              "custom_device_module"
           ]
        },
        "ParentDevice.Class":{
           "description":"Parent device classes.",
           "type":"string",
           "enum":[
              "tech_parent_device",
              "wtp_parent_device",
              "sbus_parent_device",
              "slink_parent_device",
              "lora_parent_device",
              "modbus_parent_device",
              "system_module_parent_device",
              "alarm_system_parent"
           ]
        },
        "Device.Type":{
           "description":"Devices types.",
           "type":"string",
           "enum":[
              "aq_sensor",
              "blind_controller",
              "button",
              "co2_sensor",
              "humidity_sensor",
              "iaq_sensor",
              "light_sensor",
              "motion_sensor",
              "opening_sensor",
              "pressure_sensor",
              "radiator_actuator",
              "relay",
              "smoke_sensor",
              "flood_sensor",
              "temperature_regulator",
              "temperature_sensor",
              "throttle",
              "thermostat",
              "thermostat_output_group",
              "custom_device",
              "common_ch_additional",
              "common_dhw_additional",
              "common_floor_pump_additional",
              "common_relay_additional",
              "common_protect_pump_additional",
              "common_heat_buffer",
              "coal_boiler",
              "heat_pump",
              "pellet_ch_main",
              "common_dhw_main",
              "parameters_container",
              "pellet_boiler",
              "solar",
              "two_state_input_sensor",
              "common_valve",
              "ventilation",
              "wtp_extender",
              "wtp_transceiver",
              "sbus_transceiver",
              "sbus_extender",
              "modbus_transceiver",
              "modbus_extender",
              "lora_gateway",
              "analog_input",
              "relay_integrator",
              "blind_controller_integrator",
              "dimmer",
              "rgb_controller",
              "energy_meter",
              "heat_pump_manager",
              "alarm_zone",
              "two_state_output",
              "inverter",
              "battery",
              "wicket",
              "gate",
              "fan_control",
              "analog_output",
              "pulse_width_modulation",
              "ir_remote",
              "rf_remote",
              "car_charger",
              "gps_tracker",
              "fan_coil",
              "valve_pump",
              "valve_analog_pid",
              "ir_heater",
              "water_meter",
              "heat_meter",
              "dimmer_rgb_integrator",
              "air_conditioner",
              "techrs_transceiver",
              "techrs_extender"
           ]
        },
        "Device.Variant":{
           "description":"Devices types.",
           "type":"string",
           "enum":[
              "generic",
              "eco_geo",
              "eco_air",
              "satel",
              "heatcomp",
              "remeha_elga_ace",
              "alpha_innotec",
              "solax_x1",
              "solax_x3",
              "itho",
              "eastron_sdm630",
              "solar_edge_single",
              "solar_edge_multiple",
              "mitsubishi_ecodan",
              "galmet_prima",
              "kaisai_khc",
              "sliding_gate",
              "swing_gate",
              "garage_gate",
              "goodwe_mt_smt",
              "goodwe_sdt_ms_dns_xs",
              "heat_eco",
              "solis",
              "huawei_sun_2000",
              "p1",
              "ampowr_ampi_home_1_phase",
              "ampowr_ampi_home_3_phase",
              "wallbox_ev",
              "daikin_altherma",
              "eco_geo_high_power",
              "tech_le3x230mb",
              "heatcomp_inverter",
              "temperature_sensor",
              "heat_pump",
              "inverter",
              "energy_meter",
              "battery",
              "common_dhw_main",
              "relay",
              "broadlink",
              "temperature_regulator",
              "two_state_input_sensor",
              "floor_temperature_sensor",
              "simple_fan_coil",
              "pergola",
              "alarm_siren",
              "radar",
              "car_charger"
           ]
        },
        "Device.SoftwareStatus":{
           "description":"Current device software update status.",
           "type":"string",
           "readOnly":true,
           "enum":[
              "up_to_date",
              "update_available",
              "recovery",
              "pending",
              "downloading",
              "updating"
           ],
           "example":"up_to_date"
        },
        "Device.SoftwareUpdateDetails":{
           "description":"Software update details.",
           "type":"object",
           "readOnly":true,
           "required":[
              "available_version",
              "progress"
           ],
           "properties":{
              "available_version":{
                 "description":"Shows version available for update. If no update available, this field is empty.",
                 "type":"string",
                 "readOnly":true,
                 "example":"1.0.1"
              },
              "progress":{
                 "description":"Updating progress in percent if available or null (progress bar should be indeterminate).",
                 "type":"integer",
                 "nullable":true,
                 "readOnly":true,
                 "example":50
              }
           }
        },
        "Device.DescriptiveAirQuality":{
           "description":"Descriptive name for air quality.",
           "type":"string",
           "readOnly":true,
           "enum":[
              "very_good",
              "good",
              "moderate",
              "poor",
              "unhealthy",
              "very_unhealthy",
              "hazardous",
              "extreme"
           ]
        },
        "Device.KeyLockInfo":{
           "type":"object",
           "required":[
              "enabled",
              "pin_code",
              "pin_code_length_minimum",
              "pin_code_length_maximum",
              "allowed_characters"
           ],
           "properties":{
              "enabled":{
                 "description":"Indicates that lock feature is enabled.<br>**NOTE:** When set to `true` has to be passed together with `pin_code`.",
                 "type":"boolean",
                 "example":true
              },
              "pin_code":{
                 "description":"Pin code used to unlock the functionality.",
                 "type":"string",
                 "example":"1234"
              },
              "pin_code_length_minimum":{
                 "description":"Min length of pin code.",
                 "type":"integer",
                 "example":4,
                 "readOnly":true
              },
              "pin_code_length_maximum":{
                 "description":"Max length of pin code.",
                 "type":"integer",
                 "example":4,
                 "readOnly":true
              },
              "allowed_characters":{
                 "description":"Characters that are allowed to use in pin code setup.",
                 "type":"string",
                 "example":"0123456789",
                 "readOnly":true
              }
           }
        },
        "Device.AGenericDevice":{
           "description":"Abstract device representation.",
           "type":"object",
           "required":[
              "id",
              "type",
              "variant",
              "class",
              "name",
              "icon",
              "messages",
              "status",
              "labels",
              "tags",
              "room_id",
              "visible",
              "color",
              "voice_assistant_device_type",
              "purpose",
              "supervised_properties",
              "delayed_actions"
           ],
           "properties":{
              "id":{
                 "description":"Unique (per system) instance identifier.",
                 "type":"integer",
                 "readOnly":true,
                 "minimum":1,
                 "example":1
              },
              "type":{
                 "description":"Device type description, based on role and functionality.",
                 "readOnly":true,
                 "allOf":[
                    {
                       "$ref":"#/components/schemas/Device.Type"
                    }
                 ]
              },
              "variant":{
                 "description":"Defines the more detailed functionality of the device.",
                 "readOnly":true,
                 "allOf":[
                    {
                       "$ref":"#/components/schemas/Device.Variant"
                    }
                 ],
                 "example":"generic"
              },
              "class":{
                 "description":"Device class description, based on communication type, manufacturer etc.",
                 "type":"string",
                 "readOnly":true,
                 "allOf":[
                    {
                       "$ref":"#/components/schemas/Device.Class"
                    }
                 ]
              },
              "name":{
                 "description":"Custom device name for user purposes. Cannot contain special characters except `:` `,` `;` `.` `-` `_`",
                 "type":"string",
                 "maxLength":64,
                 "example":"My Device"
              },
              "icon":{
                 "description":"One of font awesome font set, presented in frontend app.",
                 "type":"string",
                 "maxLength":64,
                 "example":"fas fa-magic"
              },
              "messages":{
                 "description":"Collection of device specific messages. Contains device error/warning details.",
                 "type":"array",
                 "readOnly":true,
                 "items":{
                    "type":"object",
                    "required":[
                       "type",
                       "message",
                       "code"
                    ],
                    "properties":{
                       "type":{
                          "description":"Message type information",
                          "type":"string",
                          "readOnly":true,
                          "enum":[
                             "error",
                             "warning"
                          ]
                       },
                       "message":{
                          "description":"Device specific message data.",
                          "readOnly":true,
                          "allOf":[
                             {
                                "$ref":"#/components/schemas/TextTranslation"
                             }
                          ]
                       },
                       "code":{
                          "description":"Device specific message code.",
                          "type":"string",
                          "readOnly":true
                       }
                    }
                 }
              },
              "status":{
                 "description":"Current device connection status.",
                 "type":"string",
                 "readOnly":true,
                 "enum":[
                    "online",
                    "offline",
                    "unknown",
                    "service"
                 ],
                 "example":"online"
              },
              "labels":{
                 "description":"Collection of device specific labels. Contains device specification and additional flags.",
                 "type":"array",
                 "readOnly":true,
                 "items":{
                    "type":"string",
                    "enum":[
                       "floor",
                       "in_room",
                       "on_floor",
                       "has_schedule",
                       "has_temperature_curve",
                       "managed_by_thermostat",
                       "managed_by_tog",
                       "has_backlight",
                       "battery_powered",
                       "has_ethernet",
                       "has_system_mode",
                       "has_acknowledgment",
                       "has_buzzer",
                       "has_keylock",
                       "percent_opening_control",
                       "percent_tilt_control",
                       "managed_by_integrator",
                       "rgbw",
                       "rgbww",
                       "has_voltage_sensor",
                       "has_current_sensor",
                       "calibration_support",
                       "bistable_switch_support",
                       "managed_by_heat_pump_manager",
                       "managed_by_gate",
                       "managed_by_wicket",
                       "button_inversion_support",
                       "output_inversion_support",
                       "temperature_down_available",
                       "bypass_available",
                       "additional_temperature_supply_available",
                       "additional_temperature_outside_available",
                       "managed_by_ventilation_manager",
                       "power_control_support",
                       "managed_by_alarm_central",
                       "has_valve_temperature_sensor",
                       "temperature_return_available",
                       "relay_startup_state_support",
                       "emergency_opening_support",
                       "config_required",
                       "factory_calibrated",
                       "user_menu_lock_support",
                       "power_control_mode_support",
                       "page_name_support",
                       "has_motor_running_current_threshold",
                       "has_tilt_duration",
                       "single_click_mode_support",
                       "no_output_mode_support",
                       "trigger_signal_config_support",
                       "has_backlight_brightness_sensor",
                       "smart_grid_support",
                       "button_set_support",
                       "has_tilt_cycle_distance",
                       "modbus_slave_support",
                       "measurement_configuration_support",
                       "has_lift_duration",
                       "has_motor_overload_current_threshold",
                       "has_opening_time_mode",
                       "pump_work_in_calibration_support",
                       "managed_by_valve",
                       "heat_source_sensor_available",
                       "return_sensor_available",
                       "has_output_temperature_sensor",
                       "level_calibration_support",
                       "switch_mode_support",
                       "battery_charge_support",
                       "diagnostic_support",
                       "rgb_support"
                    ]
                 }
              },
              "tags":{
                 "description":"Collection of device tags. Tags can be set by user to differentiate devices in room.",
                 "type":"array",
                 "items":{
                    "type":"string"
                 }
              },
              "room_id":{
                 "description":"ID of room with which device is associated or null otherwise.",
                 "type":"integer",
                 "readOnly":true,
                 "nullable":true,
                 "minimum":1,
                 "example":1
              },
              "visible":{
                 "description":"Indicates if device is enabled/viable to use.",
                 "type":"boolean",
                 "readOnly":true,
                 "example":true
              },
              "color":{
                 "description":"HTML/Hex RGB representation of device widget color.",
                 "type":"string",
                 "pattern":"/^#[0-9a-f]{6}$/i",
                 "example":"#FF00FF"
              },
              "voice_assistant_device_type":{
                 "description":"Device type defined for voice assistants (Goolge Home/Alexa etc.) integrations.",
                 "type":"string",
                 "readOnly":true,
                 "enum":[
                    "not_set",
                    "light",
                    "thermostat",
                    "blind_controller",
                    "blind_controller_percent_control",
                    "two_state_switch",
                    "dimmer",
                    "rgb_controller",
                    "door",
                    "lock",
                    "fireplace",
                    "garage_door",
                    "gate",
                    "smoke_detector",
                    "sprinkler",
                    "carbon_dioxide_level",
                    "water_leak"
                 ],
                 "example":"not_set"
              },
              "purpose":{
                 "description":"Some devices can have a specific, changeable purpose in the system, eg. `relay` or `two_state_output` can be used as a light switch, sprinkler controller, etc. This parameter may be read-only for some devices that have a fixed purpose.",
                 "type":"string",
                 "enum":[
                    "general",
                    "light",
                    "sprinkler",
                    "door",
                    "lock",
                    "fireplace",
                    "heater",
                    "cooler",
                    "humidifier",
                    "fan",
                    "pump",
                    "valve"
                 ],
                 "example":"general"
              },
              "supervised_properties":{
                 "description":"List of properties that are supervised by other device.",
                 "type":"array",
                 "readOnly":true,
                 "items":{
                    "type":"object",
                    "required":[
                       "name",
                       "supervisor"
                    ],
                    "properties":{
                       "name":{
                          "description":"Name of the supervised property.",
                          "type":"string"
                       },
                       "supervisor":{
                          "description":"Device that supervises the property.",
                          "allOf":[
                             {
                                "$ref":"#/components/schemas/Device.AssociationInfo"
                             }
                          ]
                       }
                    }
                 },
                 "example":[
                    
                 ]
              },
              "delayed_actions":{
                 "description":"Collection of all actions scheduled to execute by the device.",
                 "type":"array",
                 "readOnly":true,
                 "items":{
                    "allOf":[
                       {
                          "$ref":"#/components/schemas/DelayedAction"
                       }
                    ]
                 }
              }
           }
        },
        "Device.ARadioDevice":{
           "description":"Abstract Wireless device representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AGenericDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "address",
                    "signal",
                    "software_version",
                    "sub_id"
                 ],
                 "properties":{
                    "address":{
                       "description":"Unique network address.",
                       "type":"integer",
                       "readOnly":true,
                       "example":2233551
                    },
                    "signal":{
                       "description":"Signal status.<br> Unit: %",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":100,
                       "example":50
                    },
                    "software_version":{
                       "description":"Software name and version description.",
                       "type":"string",
                       "readOnly":true,
                       "example":"STT-869 v2.0.0"
                    },
                    "sub_id":{
                       "description":"Unique (per physical device) identifier that help to distinguish same device types in one physical device.",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":10,
                       "example":5
                    },
                    "battery":{
                       "description":"Battery status.<br> This parameter is <b>optional</b> and available only when there is `battery_powered` label attached.<br> Unit: %",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":100,
                       "example":50
                    }
                 }
              }
           ]
        },
        "Device.AWiredDevice":{
           "description":"Abstract Wired device representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AGenericDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "address"
                 ],
                 "properties":{
                    "address":{
                       "description":"TECH device unique address.",
                       "type":"string",
                       "readOnly":true,
                       "example":"005D00433138510A33343938"
                    }
                 }
              }
           ]
        },
        "Device.ASBusDevice":{
           "description":"Abstract Wired SBUS device representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AGenericDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "address",
                    "endpoint",
                    "software_version"
                 ],
                 "properties":{
                    "address":{
                       "description":"Unique network address.",
                       "type":"integer",
                       "readOnly":true,
                       "example":2233558
                    },
                    "endpoint":{
                       "description":"Unique (per physical device) identifier that help to distinguish same device types in one physical device.",
                       "type":"integer",
                       "readOnly":true,
                       "example":1
                    },
                    "software_version":{
                       "description":"Software name and version description.",
                       "type":"string",
                       "readOnly":true,
                       "example":"STT-869 v2.0.0"
                    }
                 }
              }
           ]
        },
        "Device.ASystemModule":{
           "description":"Abstract System module representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AGenericDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "enabled",
                    "uuid",
                    "software_version"
                 ],
                 "properties":{
                    "enabled":{
                       "description":"Current module state.",
                       "type":"boolean",
                       "example":true
                    },
                    "uuid":{
                       "description":"Module unique id.",
                       "type":"string",
                       "readOnly":true,
                       "example":"FFFFFFFFFFFFFFFFFFFFFF01"
                    },
                    "software_version":{
                       "description":"Software name and version description.",
                       "type":"string",
                       "readOnly":true,
                       "example":"Built-in MCU v0.3.0"
                    }
                 }
              }
           ]
        },
        "Device.ALoraDevice":{
           "description":"Abstract Lora device representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AGenericDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "eui",
                    "signal",
                    "software_version",
                    "sub_id"
                 ],
                 "properties":{
                    "eui":{
                       "description":"Lora 64-bit device EUI (Extended Unique Identifier)",
                       "type":"string",
                       "readOnly":true,
                       "example":"70b3d59ba000a200"
                    },
                    "signal":{
                       "description":"Signal status.<br> Unit: %",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":100,
                       "example":50
                    },
                    "software_version":{
                       "description":"Software name and version description.",
                       "type":"string",
                       "readOnly":true,
                       "example":"STT-869 v2.0.0"
                    },
                    "sub_id":{
                       "description":"Unique (per physical device) identifier that help to distinguish same device types in one physical device.",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":10,
                       "example":5
                    },
                    "battery":{
                       "description":"Battery status.<br> This parameter is <b>optional</b> and available only when there is `battery_powered` label attached.<br> Unit: %",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":100,
                       "example":50
                    }
                 }
              }
           ]
        },
        "Device.AAlarmDevice":{
           "description":"Abstract alarm system device representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AGenericDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "parent_id",
                    "software_version",
                    "sub_id"
                 ],
                 "properties":{
                    "parent_id":{
                       "description":"Id of parent device.",
                       "type":"integer",
                       "readOnly":true,
                       "example":2
                    },
                    "software_version":{
                       "description":"Software name and version description.",
                       "type":"string",
                       "readOnly":true,
                       "example":"Integra-32 v1.2.3"
                    },
                    "sub_id":{
                       "description":"Unique (per physical device) identifier that help to distinguish same device types in one physical device.",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":65535,
                       "example":2
                    }
                 }
              }
           ]
        },
        "Device.ACustomDeviceModule":{
           "description":"Abstract custom device module representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AGenericDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "uuid",
                    "custom_device_id",
                    "software_version",
                    "params_callback_function",
                    "command_callback_function"
                 ],
                 "properties":{
                    "uuid":{
                       "description":"Unique ID if the module in custom device.",
                       "type":"string",
                       "readOnly":true,
                       "example":"relay-module"
                    },
                    "custom_device_id":{
                       "description":"ID of containing custom device.",
                       "type":"integer",
                       "readOnly":true,
                       "example":2
                    },
                    "battery":{
                       "description":"Battery status.<br> This parameter is <b>optional</b> and available only when there is `battery_powered` label attached.<br> Unit: %",
                       "type":"integer",
                       "readOnly":true,
                       "minimum":0,
                       "maximum":100,
                       "example":50
                    },
                    "signal":{
                       "description":"Signal power of the device.<br>Parameter is optional.",
                       "type":"integer",
                       "readOnly":true,
                       "nullable":true,
                       "example":88
                    },
                    "software_version":{
                       "description":"Software name and version description.",
                       "type":"string",
                       "readOnly":true,
                       "example":"CM-1 v2.0.0"
                    },
                    "params_callback_function":{
                       "description":"Name of function that will be executed in containing custom device when parameters change.",
                       "type":"string",
                       "maxLength":64,
                       "pattern":"/^[a-zA-Z_][a-zA-Z0-9_]*$/",
                       "example":"onModuleParameterChange"
                    },
                    "command_callback_function":{
                       "description":"Name of function that will be executed in containing custom device when specific command in device is executed.",
                       "type":"string",
                       "maxLength":64,
                       "pattern":"/^[a-zA-Z_][a-zA-Z0-9_]*$/",
                       "example":"onModuleCommand"
                    }
                 }
              }
           ]
        },
        "Device.RegistrationBody":{
           "description":"Registration data representation.",
           "allOf":[
              {
                 "type":"object",
                 "required":[
                    "class",
                    "tech_key"
                 ],
                 "properties":{
                    "class":{
                       "description":"Device class description, based on communication type, manufacturer etc.",
                       "type":"string",
                       "enum":[
                          "system_module",
                          "lora"
                       ],
                       "example":"lora"
                    },
                    "type":{
                       "description":"Device type description, based on role and functionality. Star means any type.",
                       "type":"string",
                       "example":"*"
                    },
                    "tech_key":{
                       "description":"Unique for each device key assigned by the TECH company",
                       "type":"string",
                       "example":"f3a59ca4611900deffa53ebc01584e62"
                    }
                 }
              }
           ]
        },
        "Device.AVideoDevice":{
           "description":"Abstract Video device representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AGenericDevice"
              },
              {
                 "type":"object",
                 "required":[
                    "ip",
                    "mac",
                    "video_type",
                    "login",
                    "url"
                 ],
                 "properties":{
                    "ip":{
                       "description":"Unique network address.",
                       "type":"string",
                       "example":"192.168.1.100"
                    },
                    "mac":{
                       "description":"Unique MAC address.",
                       "type":"string",
                       "readOnly":true,
                       "example":"00:1A:2B:3C:4D:5E"
                    },
                    "video_type":{
                       "description":"Type of video device.",
                       "type":"string",
                       "enum":[
                          "rtsp"
                       ],
                       "example":"rtsp"
                    },
                    "login":{
                       "description":"Login credentials for the video device.",
                       "type":"string",
                       "example":"admin"
                    },
                    "url":{
                       "description":"Streaming URL for the video device.",
                       "type":"string",
                       "example":"/stream"
                    }
                 }
              }
           ]
        },
        "Device.Video.Camera":{
           "description":"Camera device representation.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.AVideoDevice"
              }
           ]
        },
        "Parent.AParentDevice":{
           "description":"Container device representation.",
           "type":"object",
           "required":[
              "id",
              "status",
              "version",
              "firm",
              "model",
              "name",
              "type",
              "class",
              "devices",
              "software_status",
              "update_details",
              "has_messages",
              "labels"
           ],
           "properties":{
              "id":{
                 "description":"Parent device ID.",
                 "type":"integer",
                 "readOnly":true,
                 "example":1
              },
              "status":{
                 "description":"Current device connection status.",
                 "type":"string",
                 "readOnly":true,
                 "enum":[
                    "online",
                    "offline",
                    "unknown",
                    "service"
                 ],
                 "example":"online"
              },
              "version":{
                 "description":"Container device software version.",
                 "type":"string",
                 "readOnly":true,
                 "example":"1.0.0"
              },
              "firm":{
                 "description":"Container device manufacturer name.",
                 "type":"string",
                 "readOnly":true,
                 "example":"Tech"
              },
              "model":{
                 "description":"Parent Device unique product model name.",
                 "type":"string",
                 "readOnly":true,
                 "example":"R-8b+"
              },
              "name":{
                 "description":"Container device name. Cannot contain special characters except `:` `,` `;` `.` `-` `_`",
                 "type":"string",
                 "readOnly":true,
                 "example":"PS-08"
              },
              "type":{
                 "description":"Container device type",
                 "type":"string",
                 "readOnly":true,
                 "enum":[
                    "generic",
                    "rail",
                    "pellet_boiler",
                    "heat_pump",
                    "ventilation",
                    "solar",
                    "valve",
                    "scene_control_panel",
                    "satel_alarm_system",
                    "inverter",
                    "energy_meter",
                    "car_charger",
                    "ehi_01_valve",
                    "fan_coil",
                    "inputs_card_with_mbus"
                 ],
                 "example":"generic"
              },
              "class":{
                 "description":"Container device class",
                 "readOnly":true,
                 "allOf":[
                    {
                       "$ref":"#/components/schemas/ParentDevice.Class"
                    }
                 ],
                 "example":"tech_parent_device"
              },
              "devices":{
                 "description":"List of associated devices",
                 "readOnly":true,
                 "type":"array",
                 "items":{
                    "type":"object"
                 },
                 "example":[
                    
                 ]
              },
              "software_status":{
                 "allOf":[
                    {
                       "$ref":"#/components/schemas/Device.SoftwareStatus"
                    }
                 ]
              },
              "update_details":{
                 "allOf":[
                    {
                       "$ref":"#/components/schemas/Device.SoftwareUpdateDetails"
                    }
                 ]
              },
              "has_messages":{
                 "description":"Indicates if there is warning or error for any of contained devices.",
                 "type":"boolean",
                 "readOnly":true,
                 "example":false
              },
              "labels":{
                 "description":"Collection of parent device specific labels. Contains device specification and additional flags.",
                 "type":"array",
                 "readOnly":true,
                 "items":{
                    "type":"string",
                    "enum":[
                       "bistable_switch_support",
                       "has_backlight",
                       "user_menu_lock_support",
                       "page_name_support"
                    ]
                 }
              }
           }
        },
        "Device.SBus.RGBController.AnimationStep":{
           "description":"Defines animation step: colors and min, max transition time.",
           "type":"object",
           "required":[
              "color",
              "min_transition_time",
              "max_transition_time"
           ],
           "properties":{
              "color":{
                 "description":"HTML/Hex RGB color that device will set for this step on its output led strip.",
                 "type":"string",
                 "pattern":"/^#[0-9a-f]{6}$/i",
                 "example":"#ff00ff"
              },
              "min_transition_time":{
                 "description":"Minimum transition time from previous animation color to current. Cannot be greater than max_transition_time. Unit: ms. Time for each step is random value between min and max.",
                 "type":"integer",
                 "minimum":1,
                 "example":200
              },
              "max_transition_time":{
                 "description":"Maximum transition time from previous animation color to current. Cannot be lower than min_transition_time. Unit: ms. Time for each step is random value between min and max.",
                 "type":"integer",
                 "example":500
              }
           }
        },
        "Device.SBus.RGBController.AnimationDescription":{
           "description":"Animation style name.",
           "type":"object",
           "required":[
              "text",
              "id"
           ],
           "properties":{
              "text":{
                 "description":"Animation style name in english.",
                 "type":"string",
                 "readOnly":true,
                 "example":"Aurora"
              },
              "id":{
                 "description":"Animation style name text ID.",
                 "type":"integer",
                 "readOnly":true,
                 "example":1234
              }
           }
        },
        "Device.SBus.RGBController.Animation":{
           "description":"Animation information.",
           "required":[
              "style",
              "description",
              "steps"
           ],
           "properties":{
              "style":{
                 "description":"Animation style. Each style has different number of steps (colors, times) defined.",
                 "type":"string",
                 "enum":[
                    "aurora",
                    "colorshift",
                    "fire",
                    "forest",
                    "ocean",
                    "romance",
                    "storm",
                    "sun",
                    "rainbow"
                 ],
                 "readOnly":true,
                 "example":"aurora"
              },
              "description":{
                 "allOf":[
                    {
                       "$ref":"#/components/schemas/Device.SBus.RGBController.AnimationDescription"
                    }
                 ]
              },
              "steps":{
                 "description":"Animation steps, colors and min, max transition times for each.",
                 "type":"array",
                 "items":{
                    "allOf":[
                       {
                          "$ref":"#/components/schemas/Device.SBus.RGBController.AnimationStep"
                       }
                    ]
                 }
              }
           }
        },
        "Device.SBus.RGBController.CustomAnimation":{
           "description":"Animation created by user.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.SBus.RGBController.Animation"
              },
              {
                 "type":"object",
                 "required":[
                    "id",
                    "name",
                    "style",
                    "description",
                    "steps"
                 ],
                 "properties":{
                    "id":{
                       "description":"Unique animation identificator.",
                       "type":"integer",
                       "readOnly":true,
                       "example":1
                    },
                    "name":{
                       "description":"Animation name set by user.",
                       "type":"string",
                       "maxLength":64,
                       "example":"My animation"
                    }
                 }
              }
           ]
        },
        "Device.CurrentProperties":{
           "description":"Properties of current.",
           "type":"object",
           "required":[
              "active_power",
              "voltage",
              "current"
           ],
           "properties":{
              "active_power":{
                 "description":"Current power.<br>Unit: W with three decimal number, multiplied by 1000 (mW)",
                 "type":"integer",
                 "readOnly":true,
                 "multipleOf":0.001,
                 "example":1000
              },
              "voltage":{
                 "description":"Current voltage.<br>Unit: V with three decimal number, multiplied by 1000 (mV)",
                 "type":"integer",
                 "readOnly":true,
                 "multipleOf":0.001,
                 "example":230
              },
              "current":{
                 "description":"Current current.<br>Unit: A with three decimal number, multiplied by 1000 (mA)",
                 "type":"integer",
                 "readOnly":true,
                 "multipleOf":0.001,
                 "example":10
              }
           }
        },
        "Device.SolaxX3CurrentProperties":{
           "description":"Properties of current for Solax X3.",
           "type":"object",
           "required":[
              "active_power"
           ],
           "properties":{
              "active_power":{
                 "description":"Current power.<br>Unit: W with three decimal number, multiplied by 1000 (mW)",
                 "type":"integer",
                 "readOnly":true,
                 "multipleOf":0.001,
                 "example":1000
              },
              "voltage":{
                 "description":"Current voltage.<br>Unit: V with three decimal number, multiplied by 1000 (mV).<br> This parameter is <b>optional</b> and available only when `meter_number` is equal to 1.",
                 "type":"integer",
                 "readOnly":true,
                 "multipleOf":0.001,
                 "example":230
              },
              "current":{
                 "description":"Current current.<br>Unit: A with three decimal number, multiplied by 1000 (mA).<br> This parameter is <b>optional</b> and available only when `meter_number` is equal to 1.",
                 "type":"integer",
                 "readOnly":true,
                 "multipleOf":0.001,
                 "example":10
              },
              "frequency":{
                 "description":"Current AC frequency.<br>Unit: Hz with two decimal numbers, multiplied by 100.<br> This parameter is <b>optional</b> and available only when `meter_number` is equal to 1.",
                 "type":"integer",
                 "readOnly":true,
                 "multipleOf":0.01,
                 "example":23100
              }
           }
        },
        "Device.CurrentNoPowerProperties":{
           "description":"Properties of current.",
           "type":"object",
           "required":[
              "voltage",
              "current"
           ],
           "properties":{
              "voltage":{
                 "description":"Current voltage.<br>Unit: V with three decimal number, multiplied by 1000 (mV)",
                 "type":"integer",
                 "readOnly":true,
                 "multipleOf":0.001,
                 "example":230
              },
              "current":{
                 "description":"Current current.<br>Unit: A with three decimal number, multiplied by 1000 (mA)",
                 "type":"integer",
                 "readOnly":true,
                 "multipleOf":0.001,
                 "example":10
              }
           }
        },
        "Device.P1PhaseProperties":{
           "description":"Properties of phase in P1 energy meter.",
           "type":"object",
           "required":[
              "active_power",
              "voltage",
              "current",
              "number_of_voltage_sags",
              "number_of_voltage_swells"
           ],
           "properties":{
              "active_power":{
                 "description":"Current power.<br>Unit: W with three decimal number, multiplied by 1000 (mW)",
                 "type":"integer",
                 "readOnly":true,
                 "multipleOf":0.001,
                 "example":1000
              },
              "voltage":{
                 "description":"Current voltage.<br>Unit: V with three decimal number, multiplied by 1000 (mV)",
                 "type":"integer",
                 "readOnly":true,
                 "multipleOf":0.001,
                 "example":230
              },
              "current":{
                 "description":"Current current.<br>Unit: A with three decimal number, multiplied by 1000 (mA)",
                 "type":"integer",
                 "readOnly":true,
                 "multipleOf":0.001,
                 "example":10
              },
              "number_of_voltage_sags":{
                 "description":"Total number of voltage sags.",
                 "type":"integer",
                 "readOnly":true,
                 "example":1
              },
              "number_of_voltage_swells":{
                 "description":"Total number of voltage swells.",
                 "type":"integer",
                 "readOnly":true,
                 "example":1
              }
           }
        },
        "Device.PhaseProperties":{
           "description":"Phase current properties.",
           "type":"object",
           "required":[
              "active_power",
              "voltage",
              "current",
              "apparent_power",
              "reactive_power"
           ],
           "properties":{
              "active_power":{
                 "description":"Phase current active power.<br>Unit: W, multiplied by 1000 (mW).",
                 "type":"integer",
                 "readOnly":true,
                 "multipleOf":0.001,
                 "example":1000000
              },
              "voltage":{
                 "description":"Phase current voltage.<br>Unit: V, multiplied by 1000 (mV).",
                 "type":"integer",
                 "readOnly":true,
                 "multipleOf":0.001,
                 "example":230000
              },
              "current":{
                 "description":"Phase current current.<br>Unit: A, multiplied by 1000 (mA).",
                 "type":"integer",
                 "readOnly":true,
                 "multipleOf":0.001,
                 "example":10000
              },
              "apparent_power":{
                 "description":"Phase current apparent power.<br>Unit: VA, multiplied by 1000 (mVA).",
                 "type":"integer",
                 "readOnly":true,
                 "multipleOf":0.001,
                 "example":10000000
              },
              "reactive_power":{
                 "description":"Phase current reactive power.<br>Unit: VAr, multiplied by 1000 (mVAr).",
                 "type":"integer",
                 "readOnly":true,
                 "multipleOf":0.001,
                 "example":100000
              }
           }
        },
        "Device.PhasePropertiesWithEnergy":{
           "description":"Phase current properties with energy usages.",
           "allOf":[
              {
                 "$ref":"#/components/schemas/Device.PhaseProperties"
              },
              {
                 "type":"object",
                 "required":[
                    "energy_consumed_total",
                    "energy_consumed_today",
                    "energy_fed_total",
                    "energy_fed_today",
                    "energy_sum_total",
                    "energy_sum_today",
                    "reactive_energy_consumed_total",
                    "reactive_energy_consumed_today",
                    "reactive_energy_fed_total",
                    "reactive_energy_fed_today",
                    "reactive_energy_sum_total",
                    "reactive_energy_sum_today"
                 ],
                 "properties":{
                    "energy_consumed_total":{
                       "description":"Energy consumption lifetime.<br>Unit: kWh, multiplied by 1000 (Wh)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":100000
                    },
                    "energy_consumed_today":{
                       "description":"Energy consumption today.<br>Unit: kWh, multiplied by 1000 (Wh)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":10000
                    },
                    "energy_fed_total":{
                       "description":"Energy feed lifetime.<br>Unit: kWh, multiplied by 1000 (Wh)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":10000
                    },
                    "energy_fed_today":{
                       "description":"Energy feed today.<br>Unit: kWh, multiplied by 1000 (Wh)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":1000
                    },
                    "energy_sum_total":{
                       "description":"Energy sum (consumption + feed) lifetime.<br>Unit: kWh, multiplied by 1000 (Wh)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":110000
                    },
                    "energy_sum_today":{
                       "description":"Energy sum (consumption + feed) today.<br>Unit: kWh, multiplied by 1000 (Wh)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":11000
                    },
                    "reactive_energy_consumed_total":{
                       "description":"Reactive energy consumption lifetime.<br>Unit: kVArh, multiplied by 1000 (VArh)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":100000
                    },
                    "reactive_energy_consumed_today":{
                       "description":"Reactive energy consumption today.<br>Unit: kVArh, multiplied by 1000 (VArh)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":10000
                    },
                    "reactive_energy_fed_total":{
                       "description":"Reactive energy feed lifetime.<br>Unit: kVArh, multiplied by 1000 (VArh)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":10000
                    },
                    "reactive_energy_fed_today":{
                       "description":"Reactive energy feed today.<br>Unit: kVArh, multiplied by 1000 (VArh)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":1000
                    },
                    "reactive_energy_sum_total":{
                       "description":"Reactive energy sum (consumption + feed) lifetime.<br>Unit: kVArh, multiplied by 1000 (VArh)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":110000
                    },
                    "reactive_energy_sum_today":{
                       "description":"Reactive energy sum (consumption + feed) today.<br>Unit: kVArh, multiplied by 1000 (VArh)",
                       "type":"integer",
                       "readOnly":true,
                       "multipleOf":0.001,
                       "example":11000
                    }
                 }
              }
           ]
        }
     },
     "examples":{
        "Device.WTP.Button":{
           "value":{
              "id":1,
              "type":"button",
              "variant":"generic",
              "class":"wtp",
              "name":"My button",
              "icon":"",
              "messages":[
                 {
                    "type":"warning",
                    "message":{
                       "id":44,
                       "text":"Low battery"
                    },
                    "code":"1"
                 }
              ],
              "labels":[
                 "battery_powered",
                 "button_set_support"
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "address":455266,
              "signal":99,
              "software_version":"BTN v1.0.0",
              "status":"online",
              "visible":true,
              "sub_id":1,
              "color":"#FF00FF",
              "battery":100,
              "buttons_count":1,
              "single_click_mode":true,
              "action":"button_2_held_2_seconds",
              "buzzer":"off",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "button_set":{
                 "total_count":1,
                 "available_count":1,
                 "current":1
              }
           }
        },
        "Device.WTP.BlindController":{
           "value":{
              "id":2,
              "type":"blind_controller",
              "variant":"generic",
              "class":"wtp",
              "name":"My blind",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 "has_backlight",
                 "percent_opening_control",
                 "has_lift_duration",
                 "has_tilt_duration",
                 "percent_tilt_control",
                 "button_inversion_support",
                 "output_inversion_support",
                 "has_motor_running_current_threshold"
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "address":4526,
              "signal":99,
              "software_version":"Blind v1.2.0",
              "status":"online",
              "visible":true,
              "sub_id":1,
              "color":"#FF00FF",
              "target_opening":70,
              "current_opening":20,
              "window_covering_type":"tilt_blind",
              "available_window_covering_types":[
                 "roller_share",
                 "titl_blind"
              ],
              "lift_control_mode":"current_detection",
              "allowed_lift_control_modes":[
                 "current_detection",
                 "fixed_duration"
              ],
              "target_tilt":50,
              "current_tilt":10,
              "tilt_range":180,
              "full_cycle_duration":90,
              "tilt_duration":750,
              "motor_running_current_threshold":150,
              "buttons_inverted":false,
              "outputs_inverted":true,
              "backlight_mode":"fixed",
              "backlight_brightness":80,
              "backlight_idle_color":"#FF00FF",
              "backlight_active_color":"#00FF00",
              "ambient_light_intensity":80,
              "voice_assistant_device_type":"blind_controller_percent_control",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ]
           }
        },
        "Device.WTP.TemperatureRegulator":{
           "value":{
              "id":3,
              "type":"temperature_regulator",
              "variant":"generic",
              "class":"wtp",
              "name":"My regulator",
              "icon":"",
              "messages":[
                 {
                    "type":"warning",
                    "message":{
                       "id":44,
                       "text":"Low battery"
                    },
                    "code":"1"
                 }
              ],
              "labels":[
                 "battery_powered",
                 "user_menu_lock_support"
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "address":452366,
              "signal":99,
              "software_version":"R8b v1.2.0",
              "status":"online",
              "visible":true,
              "sub_id":1,
              "color":"#FF00FF",
              "battery":77,
              "target_temperature":230,
              "target_temperature_mode":{
                 "current":"time_limited",
                 "remaining_time":63
              },
              "target_temperature_minimum":50,
              "target_temperature_maximum":350,
              "target_temperature_reached":false,
              "keylock":"unsupported",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "confirm_time_mode":true,
              "user_menu_lock":{
                 "enabled":false,
                 "pin_code":"000",
                 "pin_code_length_minimum":3,
                 "pin_code_length_maximum":3,
                 "allowed_characters":"0123456789"
              }
           }
        },
        "Device.WTP.Relay":{
           "value":{
              "id":4,
              "type":"relay",
              "variant":"generic",
              "class":"wtp",
              "name":"My relay",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 "has_backlight"
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "address":552255,
              "signal":77,
              "software_version":"DIN1 v1.0.0",
              "status":"online",
              "visible":true,
              "sub_id":1,
              "color":"#FF00FF",
              "state":false,
              "timeout":15,
              "timeout_enabled":true,
              "backlight_mode":"fixed",
              "backlight_brightness":80,
              "backlight_idle_color":"#FF00FF",
              "backlight_active_color":"#00FF00",
              "no_output_mode":false,
              "trigger_signal_type":"impulse",
              "allowed_trigger_signal_types'":[
                 "impulse",
                 "state_change"
              ],
              "ambient_light_intensity":80,
              "voice_assistant_device_type":"light",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "inverted":false,
              "time_since_state_change":120,
              "startup_state":"off",
              "work_mode":"standard"
           }
        },
        "Device.WTP.RadiatorActuator":{
           "value":{
              "id":5,
              "type":"radiator_actuator",
              "variant":"generic",
              "class":"wtp",
              "name":"My radiator actuator",
              "icon":"",
              "messages":[
                 {
                    "type":"error",
                    "message":{
                       "id":44,
                       "text":"Low battery"
                    },
                    "code":"5"
                 },
                 {
                    "type":"error",
                    "message":{
                       "id":455,
                       "text":"Encoder stalled"
                    },
                    "code":"6"
                 }
              ],
              "labels":[
                 "battery_powered"
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "address":552335,
              "signal":77,
              "software_version":"STT-868n v1.0.0",
              "status":"online",
              "visible":true,
              "sub_id":1,
              "color":"#FF00FF",
              "battery":60,
              "opening":100,
              "opening_minimum":0,
              "opening_maximum":100,
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "valve_temperature":350,
              "emergency_opening":50
           }
        },
        "Device.WTP.TemperatureSensor":{
           "value":{
              "id":6,
              "type":"temperature_sensor",
              "variant":"generic",
              "class":"wtp",
              "name":"My temperature sensor",
              "icon":"",
              "messages":[
                 {
                    "type":"warning",
                    "message":{
                       "id":44,
                       "text":"Low battery"
                    },
                    "code":"1"
                 },
                 {
                    "type":"error",
                    "message":{
                       "id":455,
                       "text":"Temperature sensor damaged"
                    },
                    "code":"2"
                 }
              ],
              "labels":[
                 "floor",
                 "battery_powered"
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "address":552355,
              "signal":56,
              "software_version":"CL-Mini v1.0.0",
              "status":"online",
              "visible":true,
              "sub_id":1,
              "color":"#FF00FF",
              "battery":100,
              "temperature":244,
              "calibration":0,
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ]
           }
        },
        "Device.WTP.HumiditySensor":{
           "value":{
              "id":7,
              "type":"humidity_sensor",
              "variant":"generic",
              "class":"wtp",
              "name":"My humidity sensor",
              "icon":"",
              "messages":[
                 {
                    "type":"warning",
                    "message":{
                       "id":44,
                       "text":"Low battery"
                    },
                    "code":"1"
                 },
                 {
                    "type":"error",
                    "message":{
                       "id":455,
                       "text":"Humidity sensor damaged"
                    },
                    "code":"1"
                 }
              ],
              "labels":[
                 "battery_powered"
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "address":552325,
              "signal":56,
              "software_version":"CL-Mini v1.0.0",
              "status":"online",
              "visible":true,
              "sub_id":1,
              "color":"#FF00FF",
              "battery":100,
              "humidity":566,
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ]
           }
        },
        "Device.WTP.PressureSensor":{
           "value":{
              "id":8,
              "type":"pressure_sensor",
              "variant":"generic",
              "class":"wtp",
              "name":"My pressure sensor",
              "icon":"",
              "messages":[
                 {
                    "type":"warning",
                    "message":{
                       "id":44,
                       "text":"Low battery"
                    },
                    "code":"1"
                 },
                 {
                    "type":"error",
                    "message":{
                       "id":455,
                       "text":"Pressure sensor damaged"
                    },
                    "code":"1"
                 }
              ],
              "labels":[
                 "battery_powered"
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "address":552335,
              "signal":56,
              "software_version":"unknown",
              "status":"online",
              "visible":true,
              "sub_id":1,
              "color":"#FF00FF",
              "battery":100,
              "pressure":9899,
              "altitude":311,
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ]
           }
        },
        "Device.WTP.CO2Sensor":{
           "value":{
              "id":80,
              "type":"co2_sensor",
              "variant":"generic",
              "class":"wtp",
              "name":"My CO2 sensor",
              "icon":"",
              "messages":[
                 {
                    "type":"warning",
                    "message":{
                       "id":44,
                       "text":"Low battery"
                    },
                    "code":"1"
                 },
                 {
                    "type":"error",
                    "message":{
                       "id":455,
                       "text":"CO2 sensor damaged"
                    },
                    "code":"1"
                 }
              ],
              "labels":[
                 "battery_powered"
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "address":552135,
              "signal":56,
              "software_version":"unknown",
              "status":"online",
              "visible":true,
              "sub_id":1,
              "color":"#FF00FF",
              "battery":100,
              "co2":360,
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ]
           }
        },
        "Device.WTP.IAQSensor":{
           "value":{
              "id":9,
              "type":"iaq_sensor",
              "variant":"generic",
              "class":"wtp",
              "name":"My iaq sensor",
              "icon":"",
              "messages":[
                 {
                    "type":"warning",
                    "message":{
                       "id":44,
                       "text":"Low battery"
                    },
                    "code":"1"
                 },
                 {
                    "type":"error",
                    "message":{
                       "id":455,
                       "text":"IAQ sensor damaged"
                    },
                    "code":"1"
                 }
              ],
              "labels":[
                 "battery_powered"
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "address":523325,
              "signal":56,
              "software_version":"unknown",
              "status":"online",
              "visible":true,
              "sub_id":1,
              "color":"#FF00FF",
              "battery":100,
              "iaq":75,
              "iaq_accuracy":"high",
              "air_quality":"moderate",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ]
           }
        },
        "Device.WTP.OpeningSensor":{
           "value":{
              "id":10,
              "type":"opening_sensor",
              "variant":"generic",
              "class":"wtp",
              "name":"My opening sensor",
              "icon":"",
              "messages":[
                 {
                    "type":"warning",
                    "message":{
                       "id":44,
                       "text":"Low battery"
                    },
                    "code":"1"
                 }
              ],
              "labels":[
                 "battery_powered"
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "address":552395,
              "signal":56,
              "software_version":"C-2n v1.2.0",
              "status":"online",
              "visible":true,
              "sub_id":1,
              "color":"#FF00FF",
              "battery":100,
              "open":false,
              "acknowledgment":"on",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ]
           }
        },
        "Device.WTP.MotionSensor":{
           "value":{
              "id":11,
              "type":"motion_sensor",
              "variant":"generic",
              "class":"wtp",
              "name":"My motion sensor",
              "icon":"",
              "messages":[
                 {
                    "type":"warning",
                    "message":{
                       "id":44,
                       "text":"Low battery"
                    },
                    "code":"1"
                 }
              ],
              "labels":[
                 "battery_powered"
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "address":235489,
              "signal":56,
              "software_version":"unknown",
              "status":"online",
              "visible":true,
              "sub_id":1,
              "color":"#FF00FF",
              "battery":100,
              "enabled":true,
              "blind_duration":5,
              "pulses_treshold":6,
              "pulses_window":4,
              "motion_detected":true,
              "time_since_motion":50,
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "sensor_type":"pir"
           }
        },
        "Device.WTP.AQSensor":{
           "value":{
              "id":11,
              "type":"aq_sensor",
              "variant":"generic",
              "class":"wtp",
              "name":"My Air Quality sensor",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "address":2354489,
              "signal":56,
              "software_version":"unknown",
              "status":"online",
              "visible":true,
              "sub_id":1,
              "color":"#FF00FF",
              "pm1p0":6,
              "pm2p5":6,
              "pm4p0":6,
              "pm10p0":6,
              "air_quality":"very_good",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ]
           }
        },
        "Device.WTP.LightSensor":{
           "value":{
              "id":11,
              "type":"light_sensor",
              "variant":"generic",
              "class":"wtp",
              "name":"My Light sensor",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "address":2355489,
              "signal":56,
              "software_version":"unknown",
              "status":"online",
              "sub_id":1,
              "color":"#FF00FF",
              "illuminance":440,
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ]
           }
        },
        "Device.WTP.SmokeSensor":{
           "value":{
              "id":11,
              "type":"smoke_sensor",
              "variant":"generic",
              "class":"wtp",
              "name":"My Smoke sensor",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "address":44221,
              "signal":56,
              "software_version":"CD-01 1.0.0",
              "status":"online",
              "visible":true,
              "sub_id":1,
              "color":"#FF00FF",
              "locked":false,
              "dirt_level":50,
              "smoke_detected":true,
              "high_temperature_detected":false,
              "tamper_detected":false,
              "uptime":600,
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ]
           }
        },
        "Device.WTP.FloodSensor":{
           "value":{
              "id":11,
              "type":"flood_sensor",
              "variant":"generic",
              "class":"wtp",
              "name":"My Flood sensor",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "address":44221,
              "signal":56,
              "software_version":"CZ-01 1.0.0",
              "status":"online",
              "visible":true,
              "sub_id":1,
              "color":"#FF00FF",
              "flood_detected":true,
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ]
           }
        },
        "Device.WTP.Throttle":{
           "value":{
              "id":12,
              "type":"throttle",
              "variant":"generic",
              "class":"wtp",
              "name":"My throttle",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "address":44222,
              "signal":56,
              "software_version":"TH-01 1.0.0",
              "status":"online",
              "visible":true,
              "sub_id":1,
              "color":"#FF00FF",
              "opening":60,
              "impulses":1200,
              "flow":76.281,
              "formula":"8+(object.impulses*((1.32-object.opening/100)^2*-0.35+1.9))*0.055",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ]
           }
        },
        "Device.WTP.TwoStateInputSensor":{
           "value":{
              "id":12,
              "type":"two_state_input_sensor",
              "variant":"generic",
              "class":"wtp",
              "name":"My input sensor",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "address":44222,
              "signal":56,
              "software_version":"PS-10 Floor 1.0.0",
              "status":"online",
              "visible":true,
              "sub_id":1,
              "color":"#FF00FF",
              "state":true,
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "inverted":false
           }
        },
        "Device.WTP.Dimmer":{
           "value":{
              "id":8,
              "type":"dimmer",
              "variant":"generic",
              "class":"wtp",
              "name":"My dimmer",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "address":552255,
              "signal":56,
              "sub_id":1,
              "software_version":"DIM v1.0.0",
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "state":false,
              "target_level":75,
              "backlight_mode":"fixed",
              "backlight_brightness":80,
              "backlight_idle_color":"#FF00FF",
              "backlight_active_color":"#00FF00",
              "ambient_light_intensity":80,
              "output_temperature":250,
              "level_calibration":{
                 "minimum":40,
                 "maximum":60
              },
              "switch_mode":"single_monostable",
              "allowed_switch_modes":[
                 "single_monostable",
                 "single_bistable"
              ],
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ]
           }
        },
        "Device.TECH.TwoStateInputSensor":{
           "value":{
              "id":1,
              "type":"two_state_input_sensor",
              "variant":"generic",
              "class":"tech",
              "name":"My input sensor",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "status":"online",
              "visible":true,
              "sub_id":2,
              "color":"#FF00FF",
              "state":true,
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "inverted":false
           }
        },
        "Device.WTP.EnergyMeter":{
           "value":{
              "id":4,
              "type":"energy_meter",
              "variant":"generic",
              "class":"wtp",
              "name":"My energy meter",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 "has_current_sensor",
                 "has_voltage_sensor"
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "address":552255,
              "signal":77,
              "software_version":"DIN1 v1.0.0",
              "status":"online",
              "visible":true,
              "sub_id":1,
              "color":"#FF00FF",
              "current":120,
              "voltage":230000,
              "active_power":7000,
              "energy_consumed_today":600,
              "energy_consumed_yesterday":500,
              "energy_consumed_total":3000000,
              "voice_assistant_device_type":"not_set",
              "purpose":"general"
           }
        },
        "Device.WTP.FanControl":{
           "value":{
              "id":4,
              "type":"fan_control",
              "variant":"generic",
              "class":"wtp",
              "name":"My energy meter",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 "has_current_sensor",
                 "has_voltage_sensor"
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "address":552255,
              "signal":77,
              "software_version":"DIN1 v1.0.0",
              "status":"online",
              "visible":true,
              "sub_id":1,
              "color":"#FF00FF",
              "state":{
                 "current":"party",
                 "previous":"automatic",
                 "remaining_time":3600
              },
              "state_configuration":{
                 "auto":{
                    "co2_thresholds":[
                       1000,
                       2000,
                       3000
                    ]
                 },
                 "holiday":{
                    "air_out_interval":2
                 },
                 "hurricane":{
                    "default_duration":3600
                 },
                 "party":{
                    "default_duration":3600
                 },
                 "hearth":{
                    "default_duration":3600
                 },
                 "flaccid":{
                    "default_duration":3600
                 }
              },
              "computed_flow":5000,
              "voice_assistant_device_type":"not_set",
              "purpose":"general"
           }
        },
        "Device.WTP.RGBController":{
           "value":{
              "id":4,
              "type":"rgb_controller",
              "variant":"generic",
              "class":"wtp",
              "name":"My RGB controller",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 "rgbww"
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "address":552255,
              "signal":77,
              "software_version":"RGB v1.0.0",
              "status":"online",
              "visible":true,
              "sub_id":1,
              "color":"#ff00ff",
              "voice_assistant_device_type":"light",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "state":false,
              "brightness":75,
              "led_color":"#ab12c9",
              "white_temperature":3500,
              "color_mode":"animation",
              "led_strip_type":"rgbw",
              "white_temperature_correction":3000,
              "cool_white_temperature_correction":6000,
              "warm_white_temperature_correction":3500,
              "available_animations":[
                 {
                    "style":"aurora",
                    "description":{
                       "text":"Aurora",
                       "id":12014
                    },
                    "steps":[
                       {
                          "color":"#00c6c6",
                          "min_transition_time":520,
                          "max_transition_time":840
                       },
                       {
                          "color":"#00f7e4",
                          "min_transition_time":1000,
                          "max_transition_time":1230
                       },
                       {
                          "color":"#00d9fb",
                          "min_transition_time":1000,
                          "max_transition_time":1320
                       },
                       {
                          "color":"#5472c9",
                          "min_transition_time":610,
                          "max_transition_time":1010
                       }
                    ]
                 },
                 {
                    "style":"colorshift",
                    "description":{
                       "text":"Shift",
                       "id":12017
                    },
                    "steps":[
                       {
                          "color":"#00ff7f",
                          "min_transition_time":1000,
                          "max_transition_time":1000
                       },
                       {
                          "color":"#010101",
                          "min_transition_time":1000,
                          "max_transition_time":1000
                       },
                       {
                          "color":"#0096ff",
                          "min_transition_time":1000,
                          "max_transition_time":1000
                       },
                       {
                          "color":"#010101",
                          "min_transition_time":1000,
                          "max_transition_time":1000
                       }
                    ]
                 },
                 {
                    "style":"fire",
                    "description":{
                       "text":"Fireplace",
                       "id":1843
                    },
                    "steps":[
                       {
                          "color":"#ff9600",
                          "min_transition_time":150,
                          "max_transition_time":650
                       },
                       {
                          "color":"#b77300",
                          "min_transition_time":40,
                          "max_transition_time":460
                       },
                       {
                          "color":"#e58d0a",
                          "min_transition_time":230,
                          "max_transition_time":580
                       },
                       {
                          "color":"#d08d00",
                          "min_transition_time":80,
                          "max_transition_time":540
                       }
                    ]
                 }
              ],
              "animations":[
                 {
                    "id":1,
                    "style":"aurora",
                    "name":"Aurora 1",
                    "description":{
                       "text":"Aurora",
                       "id":12014
                    },
                    "steps":[
                       {
                          "color":"#00c6c6",
                          "min_transition_time":520,
                          "max_transition_time":840
                       },
                       {
                          "color":"#00f7e4",
                          "min_transition_time":1000,
                          "max_transition_time":1230
                       },
                       {
                          "color":"#00d9fb",
                          "min_transition_time":1000,
                          "max_transition_time":1320
                       },
                       {
                          "color":"#5472c9",
                          "min_transition_time":610,
                          "max_transition_time":1010
                       }
                    ]
                 },
                 {
                    "id":2,
                    "style":"aurora",
                    "name":"Aurora 2",
                    "description":{
                       "text":"Aurora",
                       "id":12014
                    },
                    "steps":[
                       {
                          "color":"#00c0c0",
                          "min_transition_time":520,
                          "max_transition_time":840
                       },
                       {
                          "color":"#0f0733",
                          "min_transition_time":1000,
                          "max_transition_time":1230
                       },
                       {
                          "color":"#10ff00",
                          "min_transition_time":1000,
                          "max_transition_time":1320
                       },
                       {
                          "color":"#084a3d",
                          "min_transition_time":610,
                          "max_transition_time":1010
                       }
                    ]
                 },
                 {
                    "id":3,
                    "style":"colorshift",
                    "name":"Color change",
                    "description":{
                       "text":"Shift",
                       "id":12017
                    },
                    "steps":[
                       {
                          "color":"#00ff7f",
                          "min_transition_time":1000,
                          "max_transition_time":1000
                       },
                       {
                          "color":"#010101",
                          "min_transition_time":1000,
                          "max_transition_time":1000
                       },
                       {
                          "color":"#0096ff",
                          "min_transition_time":1000,
                          "max_transition_time":1000
                       },
                       {
                          "color":"#010101",
                          "min_transition_time":1000,
                          "max_transition_time":1000
                       }
                    ]
                 },
                 {
                    "id":4,
                    "style":"fire",
                    "name":"My fireplace",
                    "description":{
                       "text":"Fireplace",
                       "id":1843
                    },
                    "steps":[
                       {
                          "color":"#ff9600",
                          "min_transition_time":150,
                          "max_transition_time":650
                       },
                       {
                          "color":"#b77300",
                          "min_transition_time":40,
                          "max_transition_time":460
                       },
                       {
                          "color":"#e58d0a",
                          "min_transition_time":230,
                          "max_transition_time":580
                       },
                       {
                          "color":"#d08d00",
                          "min_transition_time":80,
                          "max_transition_time":540
                       }
                    ]
                 }
              ],
              "active_animation":1
           }
        },
        "Device.WTP.FanCoil":{
           "value":{
              "id":4,
              "type":"fan_coil",
              "variant":"simple_fan_coil",
              "class":"wtp",
              "name":"My Fan Coil",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 ""
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "address":552255,
              "signal":77,
              "software_version":"FanCoil v1.0.0",
              "status":"online",
              "visible":true,
              "sub_id":1,
              "color":"#ff00ff",
              "voice_assistant_device_type":"light",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "gear_1":{
                 "state":true,
                 "hysteresis":10
              },
              "gear_2":{
                 "state":false,
                 "hysteresis":20
              },
              "gear_3":{
                 "state":false,
                 "hysteresis":30
              },
              "factory_reset_timestamp":1733207955,
              "valve_state":true
           }
        },
        "Device.WTP.IRHeater":{
           "value":{
              "id":4,
              "type":"ir_heater",
              "variant":"generic",
              "class":"wtp",
              "name":"My IR heating panel",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "address":552255,
              "signal":77,
              "software_version":"IR v1.0.0",
              "status":"online",
              "visible":true,
              "sub_id":1,
              "color":"#ff00ff",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "state":true,
              "foil_working_temperature":1100,
              "foil_current_temperature":1050,
              "triac_current_temperature":760,
              "pwm_duty":5000,
              "device_state":"heating_keep_temp"
           }
        },
        "Device.TECH.TemperatureSensor":{
           "value":{
              "id":2,
              "type":"temperature_sensor",
              "variant":"generic",
              "class":"tech",
              "name":"My temperature sensor",
              "icon":"",
              "messages":[
                 {
                    "type":"error",
                    "message":{
                       "id":555,
                       "text":"Temperature Sensor damaged"
                    },
                    "code":"1"
                 }
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "status":"online",
              "visible":true,
              "sub_id":7,
              "color":"#FF00FF",
              "temperature":250,
              "calibration":0,
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ]
           }
        },
        "Device.TECH.TemperatureRegulator":{
           "value":{
              "id":3,
              "type":"temperature_regulator",
              "variant":"generic",
              "class":"tech",
              "name":"My temperature regulator",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "status":"online",
              "visible":true,
              "sub_id":7,
              "color":"#FF00FF",
              "target_temperature":230,
              "target_temperature_mode":{
                 "current":"time_limited",
                 "remaining_time":63
              },
              "target_temperature_minimum":50,
              "target_temperature_maximum":350,
              "target_temperature_reached":false,
              "is_timeout":false,
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "confirm_time_mode":true
           }
        },
        "Device.TECH.HumiditySensor":{
           "value":{
              "id":4,
              "type":"humidity_sensor",
              "variant":"generic",
              "class":"tech",
              "name":"My humidity sensor",
              "icon":"",
              "messages":[
                 {
                    "type":"error",
                    "message":{
                       "id":555,
                       "text":"Humidity Sensor damaged"
                    },
                    "code":"1"
                 }
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "status":"online",
              "visible":true,
              "sub_id":7,
              "color":"#FF00FF",
              "humidity":230,
              "is_broken":false,
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ]
           }
        },
        "Device.TECH.Relay":{
           "value":{
              "id":5,
              "type":"relay",
              "variant":"generic",
              "class":"tech",
              "name":"My relay",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "status":"online",
              "visible":true,
              "sub_id":7,
              "color":"#FF00FF",
              "state":true,
              "timeout":15,
              "timeout_enabled":true,
              "voice_assistant_device_type":"light",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "inverted":false,
              "time_since_state_change":120,
              "work_mode":"standard"
           }
        },
        "Device.TECH.HeatPump":{
           "value":{
              "id":7,
              "type":"heat_pump",
              "variant":"generic",
              "class":"tech",
              "name":"My heat pump",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "version":10,
              "dhw_temperature":450,
              "dhw_target_temperature":50,
              "dhw_target_temperature_minimum":30,
              "dhw_target_temperature_maximum":60,
              "buffer_target_temperature":50,
              "buffer_target_temperature_minimum":25,
              "buffer_target_temperature_maximum":65,
              "cooling_target_temperature":10,
              "cooling_target_temperature_minimum":5,
              "cooling_target_temperature_maximum":20,
              "work_mode":"heating",
              "defrost_state":"active",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "temperature_return":320
           }
        },
        "Device.TECH.Ventilation":{
           "value":{
              "id":7,
              "type":"ventilation",
              "variant":"generic",
              "class":"tech",
              "name":"My ventilation",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "version":10,
              "intake_temperature":25,
              "exhaust_temperature":26,
              "extract_temperature":27,
              "supply_temperature":24,
              "supply_fan_gear":35,
              "extract_fan_gear":35,
              "target_temperature":"22",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "target_flow_supply":50,
              "target_flow_extract":50,
              "target_gear_supply":35,
              "target_gear_extract":35
           }
        },
        "Device.TECH.PelletBoiler":{
           "value":{
              "id":7,
              "type":"pellet_boiler",
              "variant":"generic",
              "class":"tech",
              "name":"My pellet boiler",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "feeder":false,
              "stocker":false,
              "fan":30,
              "grid":false,
              "heater":true,
              "state":1,
              "temperature_central_heating":455,
              "temperature_exhaust":400,
              "temperature_return":350,
              "temperature_feeder":320,
              "fire":true,
              "target_temperature":50,
              "target_temperature_mode":"fixed",
              "target_temperature_minimum":40,
              "target_temperature_maximum":80,
              "correction":2,
              "firing_up":false,
              "blockade":false,
              "tray_calibrated":true,
              "tray_percent":100,
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ]
           }
        },
        "Device.TECH.CommonDHWMain":{
           "value":{
              "id":7,
              "type":"common_dhw_main",
              "variant":"generic",
              "class":"tech",
              "name":"My DHW",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "target_temperature":50,
              "target_temperature_mode":"fixed",
              "target_temperature_minimum":40,
              "target_temperature_maximum":80,
              "correction":2,
              "temperature_central_heating":455,
              "temperature_domestic_hot_water":400,
              "pump_work":true,
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ]
           }
        },
        "Device.TECH.CommonValve":{
           "value":{
              "id":8,
              "type":"common_valve",
              "variant":"generic",
              "class":"tech",
              "name":"My valve",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "target_temperature":50,
              "target_temperature_mode":"fixed",
              "target_temperature_minimum":40,
              "target_temperature_maximum":80,
              "correction":0,
              "temperature_valve":350,
              "open_percent":60,
              "state":1,
              "temperature_return":320,
              "temperature_central_heating":455,
              "room_regulator":false,
              "pump_work":true,
              "blockade":false,
              "weather_control":true,
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "work_mode":"heating"
           }
        },
        "Device.TECH.CommonHeatBuffer":{
           "value":{
              "id":9,
              "type":"common_heat_buffer",
              "variant":"generic",
              "class":"tech",
              "name":"My Buffer",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "target_temperature":50,
              "target_temperature_mode":"fixed",
              "lower_temperature":40,
              "upper_temperature":45,
              "temperature_reached":false,
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "target_temperature_minimum":40,
              "target_temperature_maximum":80,
              "correction":0
           }
        },
        "Device.TECH.PelletChMain":{
           "value":{
              "id":9,
              "type":"pellet_ch_main",
              "variant":"generic",
              "class":"tech",
              "name":"My Buffer",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "pump_work":true,
              "operations_mode":"house_heating",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ]
           }
        },
        "Device.TECH.CommonCoAdditional":{
           "value":{
              "id":9,
              "type":"common_ch_additional",
              "variant":"generic",
              "class":"tech",
              "name":"co",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "temperature_central_heating":500,
              "temperature_hysteresis":40,
              "temperature_threshold":45,
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ]
           }
        },
        "Device.TECH.CommonDHWAdditional":{
           "value":{
              "id":9,
              "type":"common_dhw_additional",
              "variant":"generic",
              "class":"tech",
              "name":"co",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "target_temperature":50,
              "target_temperature_maximum":90,
              "temperature_threshold":45,
              "temperature_domestic_hot_water":456,
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ]
           }
        },
        "Device.TECH.CommonFloorPumpAdditional":{
           "value":{
              "id":9,
              "type":"common_floor_pump_additional",
              "variant":"generic",
              "class":"tech",
              "name":"floor",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "maximum_temperature":90,
              "minimum_temperature":45,
              "temperature_floor":456,
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ]
           }
        },
        "Device.TECH.CommonProtectPumpAdditional":{
           "value":{
              "id":9,
              "type":"common_protect_pump_additional",
              "variant":"generic",
              "class":"tech",
              "name":"floor",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "temperature_central_heating":345,
              "temperature_return":234,
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ]
           }
        },
        "Device.TECH.CommonRelayAdditional":{
           "value":{
              "id":9,
              "type":"common_relay_additional",
              "variant":"generic",
              "class":"tech",
              "name":"floor",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ]
           }
        },
        "Device.TECH.Solar":{
           "value":{
              "id":10,
              "type":"solar",
              "variant":"generic",
              "class":"tech",
              "name":"My Solar",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "solar_pump":true,
              "secondary_pump":true,
              "peripheral_device":true,
              "temperature_collector_1":45,
              "temperature_collector_2":46,
              "temperature_tank":42,
              "temperature_additional":44,
              "scheme":2,
              "work_mode":1,
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ]
           }
        },
        "Device.VIRTUAL.Thermostat":{
           "value":{
              "id":1,
              "type":"thermostat",
              "variant":"generic",
              "class":"virtual",
              "name":"My thermostat",
              "icon":"",
              "messages":[
                 {
                    "type":"warning",
                    "message":{
                       "id":555,
                       "text":"Relay fault"
                    },
                    "code":"1"
                 },
                 {
                    "type":"warning",
                    "message":{
                       "id":5552,
                       "text":"Window opened"
                    },
                    "code":"1"
                 },
                 {
                    "type":"error",
                    "message":{
                       "id":2455,
                       "text":"Room temperature sensor is not assigned"
                    },
                    "code":"1"
                 },
                 {
                    "type":"error",
                    "message":{
                       "id":2445,
                       "text":"Floor temperature sensor damaged"
                    },
                    "code":"1"
                 },
                 {
                    "type":"error",
                    "message":{
                       "id":515,
                       "text":"Temperature regulator damaged"
                    },
                    "code":"1"
                 }
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "state":false,
              "temperature":210,
              "floor_temperature":235,
              "humidity":556,
              "target_temperature":225,
              "target_temperature_mode":{
                 "current":"constant",
                 "previous":"schedule",
                 "remaining_time":0
              },
              "target_temperature_minimum":100,
              "target_temperature_maximum":280,
              "hysteresis":2,
              "mode":"heating",
              "mode_mutable":true,
              "overheat_protection":{
                 "active":false,
                 "enabled":true,
                 "range":30
              },
              "cooling_control":{
                 "maximum_humidity":90,
                 "dew_point_control":{
                    "enabled":true,
                    "offset":50,
                    "hysteresis":5
                 }
              },
              "sigma_control":{
                 "enabled":true,
                 "range":10,
                 "opening_factor":56
              },
              "radiator_control":{
                 "use_for_heating":true,
                 "use_for_cooling":false,
                 "emergency_opening":50
              },
              "floor_control":{
                 "enabled":true,
                 "lower_target_temperature":50,
                 "upper_target_temperature":400,
                 "hysteresis":2,
                 "condition":"optimal"
              },
              "associations":{
                 "room_temperature_sensor":{
                    "id":1,
                    "class":"wtp"
                 },
                 "floor_temperature_sensor":{
                    "id":2,
                    "class":"tech"
                 },
                 "humidity_sensor":{
                    "id":3,
                    "class":"wtp"
                 },
                 "temperature_regulator":{
                    "id":22,
                    "class":"tech"
                 },
                 "radiator_actuators":[
                    {
                       "id":22,
                       "class":"tech"
                    },
                    {
                       "id":22,
                       "class":"wtp"
                    }
                 ],
                 "relays":[
                    {
                       "id":11,
                       "class":"tech"
                    },
                    {
                       "id":33,
                       "class":"wtp"
                    }
                 ],
                 "heating_relays":[
                    {
                       "id":11,
                       "class":"tech"
                    },
                    {
                       "id":33,
                       "class":"wtp"
                    }
                 ],
                 "cooling_relays":[
                    {
                       "id":11,
                       "class":"tech"
                    },
                    {
                       "id":33,
                       "class":"wtp"
                    }
                 ],
                 "opening_sensors":[
                    {
                       "id":66,
                       "class":"tech"
                    },
                    {
                       "id":77,
                       "class":"wtp"
                    }
                 ],
                 "supply_temperature_sensor":{
                    "id":5,
                    "class":"wtp"
                 },
                 "ir_heaters":[
                    {
                       "id":77,
                       "class":"wtp"
                    },
                    {
                       "id":78,
                       "class":"wtp"
                    }
                 ]
              },
              "antifrost_protection":false,
              "antifrost_protection_temperature":60,
              "opening_sensors_delay":0,
              "visible":true,
              "color":"#FF00FF",
              "voice_assistant_device_type":"thermostat",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "is_window_open":false,
              "confirm_time_mode":true,
              "dew_point":23,
              "floor_dew_point":4
           }
        },
        "Device.VIRTUAL.ThermostatOutputGroup":{
           "value":{
              "id":1,
              "type":"thermostat_output_group",
              "variant":"generic",
              "class":"virtual",
              "name":"My thermostat output group",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "enabled":true,
              "state":false,
              "mode":"heating",
              "propagation_delay":0,
              "associations":{
                 "thermostats":[
                    {
                       "id":22,
                       "class":"virtual"
                    },
                    {
                       "id":22,
                       "class":"virtual"
                    }
                 ],
                 "relays":[
                    {
                       "id":11,
                       "class":"tech"
                    },
                    {
                       "id":33,
                       "class":"wtp"
                    }
                 ],
                 "heating_relays":[
                    {
                       "id":11,
                       "class":"tech"
                    },
                    {
                       "id":33,
                       "class":"wtp"
                    }
                 ],
                 "cooling_relays":[
                    {
                       "id":11,
                       "class":"tech"
                    },
                    {
                       "id":33,
                       "class":"wtp"
                    }
                 ],
                 "pellet_boilers":[
                    {
                       "id":67,
                       "class":"tech"
                    }
                 ],
                 "heat_pumps":[
                    {
                       "id":68,
                       "class":"tech"
                    }
                 ],
                 "two_state_input_sensor":{
                    "id":62,
                    "class":"wtp"
                 },
                 "circuit_pumps":[
                    {
                       "id":17,
                       "class":"tech"
                    },
                    {
                       "id":69,
                       "class":"wtp"
                    }
                 ]
              },
              "visible":true,
              "color":"#FF00FF",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "pump_antistop":{
                 "enabled":true,
                 "work_time":60,
                 "pause_time":240
              },
              "integration_model":"",
              "integration_version":"",
              "integration_uid":"",
              "logo":"blank"
           }
        },
        "Device.VIRTUAL.CustomDevice":{
           "value":{
              "id":1,
              "type":"custom_device",
              "variant":"generic",
              "class":"virtual",
              "name":"My Custom Device",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "visible":true,
              "color":"#FF00FF",
              "software_status":"up_to_date",
              "update_details":{
                 "available_version":"3.2.1",
                 "progress":null
              },
              "enabled":true,
              "blocked":false,
              "uuid":"550e8400-e29b-41d4-a716-446655440000",
              "version":"1.0.0",
              "lua":"function CustomDevice:onMyButtonPress(element) print(\"HELLO\") end\\nfunction CustomDevice:onMySwitcherChange(newValue, element) print(\"HELLO\") end\\nfunction CustomDevice:onMyTextChange(newValue, element) print(\"HELLO\") end\\nfunction CustomDevice:onMyProgressBarChange(newValue, element) print(\"HELLO\") end\\nfunction CustomDevice:onMySliderChange(newValue, element) print(\"HELLO\") end\\n",
              "elements":[
                 {
                    "type":"button",
                    "name":"my_button",
                    "enabled":true,
                    "visibility":"visible",
                    "device_id":1,
                    "text":"Press me",
                    "text_id":10023,
                    "icon":"",
                    "on_press":"onMyButtonPress"
                 },
                 {
                    "type":"switcher",
                    "name":"my_switcher",
                    "enabled":true,
                    "visibility":"visible",
                    "device_id":1,
                    "value":false,
                    "on_change":"onMySwitcherChange"
                 },
                 {
                    "type":"text",
                    "name":"my_text",
                    "enabled":true,
                    "visibility":"visible",
                    "device_id":1,
                    "value":"This is my text",
                    "text_id":10023,
                    "icon":"",
                    "font_weight":"bold",
                    "font_size":"large",
                    "on_change":"onMyTextChange"
                 },
                 {
                    "type":"progress_bar",
                    "name":"my_progress_bar",
                    "enabled":true,
                    "visibility":"visible",
                    "device_id":1,
                    "value":55,
                    "on_change":"onMyProgressBarChange"
                 },
                 {
                    "type":"slider",
                    "name":"my_slider",
                    "enabled":true,
                    "visibility":"visible",
                    "device_id":1,
                    "minimum":11.5,
                    "maximum":60.5,
                    "value":55.5,
                    "step":0.1,
                    "on_change":"onMySliderChange"
                 },
                 {
                    "type":"combo_box",
                    "name":"my_combo_box",
                    "enabled":true,
                    "visibility":"visible",
                    "device_id":1,
                    "options":[
                       
                    ],
                    "value":"",
                    "on_change":"onMyComboBoxChange"
                 },
                 {
                    "type":"device_selector",
                    "name":"my_device_selector",
                    "enabled":true,
                    "visibility":"visible",
                    "device_id":1,
                    "accepted_classes":[
                       "wtp",
                       "sbus"
                    ],
                    "accepted_types":[
                       "relay"
                    ],
                    "allow_multiple":true,
                    "associations":{
                       "selected":[
                          {
                             "class":"wtp",
                             "id":10
                          },
                          {
                             "class":"wtp",
                             "id":11
                          }
                       ]
                    },
                    "on_change":"onMyDeviceSelectorChange"
                 },
                 {
                    "type":"color_picker",
                    "name":"my_color_picker",
                    "enabled":true,
                    "visibility":"visible",
                    "device_id":1,
                    "state":true,
                    "available_color_modes":[
                       "rgb",
                       "gradient"
                    ],
                    "gradient_size_maximum":4,
                    "color_mode":"rgb",
                    "brightness":80,
                    "color":"#ff00ff",
                    "on_state_change":"onMyColorPickerStateChange",
                    "on_brightness_change":"onMyColorPickerBrightnessChange",
                    "on_color_change":"onMyColorPickerColorChange"
                 },
                 {
                    "type":"schedule_selector",
                    "name":"my_schedule_selector",
                    "enabled":true,
                    "visibility":"visible",
                    "device_id":1,
                    "acceped_types":[
                       "thermal"
                    ],
                    "schedule_id":0,
                    "on_change":"onMyScheduleSelectorChange"
                 },
                 {
                    "type":"time_picker",
                    "name":"my_time_picker",
                    "enabled":true,
                    "visibility":"visible",
                    "device_id":1,
                    "minimum":0,
                    "maximum":172800,
                    "units":[
                       "days",
                       "hours",
                       "minutes",
                       "seconds"
                    ],
                    "time":{
                       "days":1,
                       "hours":10,
                       "minutes":30,
                       "seconds":15,
                       "count":124215
                    },
                    "on_change":"onMyTimePickerChange"
                 },
                 {
                    "type":"date_picker",
                    "name":"my_date_picker",
                    "enabled":true,
                    "visibility":"visible",
                    "device_id":1,
                    "date_type":"range",
                    "range":{
                       "from":{
                          "year":2021,
                          "month":6,
                          "day":1
                       },
                       "to":{
                          "year":2025,
                          "month":2,
                          "day":10
                       }
                    },
                    "on_change":"onMyDatePickerChange"
                 }
              ],
              "components":[
                 {
                    "type":"http_client",
                    "name":"my_http_client",
                    "custom_device_id":1,
                    "url":"https://myserver.com",
                    "body":"{\"update\":\"name\"}",
                    "headers":{
                       "Content-Type":"application/json",
                       "Accept-Language":"pl,en-US;q=0.7,en;q=0.3"
                    },
                    "query_params":{
                       "parameter1":"Value-1",
                       "parameter2":"Value-2"
                    }
                 },
                 {
                    "type":"mqtt_client",
                    "name":"my_mqtt_client",
                    "custom_device_id":1,
                    "broker":"my.broker.com",
                    "port":1883,
                    "client_id":"my-client",
                    "username":"user",
                    "password":"H@CK3RM@N",
                    "subscriptions":[
                       {
                          "topic":"first_topic",
                          "qos":0
                       },
                       {
                          "topic":"first_level_wildcard/+/data",
                          "qos":1
                       },
                       {
                          "topic":"multi_level_wildcard/#",
                          "qos":2
                       }
                    ]
                 },
                 {
                    "type":"ws_client",
                    "name":"my_ws_client",
                    "custom_device_id":1,
                    "url":"ws://my.server.com",
                    "headers":{
                       "Content-Type":"application/json",
                       "Accept-Language":"pl,en-US;q=0.7,en;q=0.3"
                    },
                    "query_params":{
                       "parameter1":"Value-1",
                       "parameter2":"Value-2"
                    }
                 },
                 {
                    "type":"modbus_rtu_client",
                    "name":"my_modbus_rtu_client",
                    "custom_device_id":1,
                    "slave_address":1,
                    "baud_rate":115200,
                    "parity":"none",
                    "stop_bits":"one",
                    "transceiver_uuid":"FFFFFFFFFFFFFFFFFFFFFF03",
                    "associations":{
                       "transceiver":{
                          "id":11,
                          "class":"system_module"
                       }
                    }
                 },
                 {
                    "type":"modbus_tcp_client",
                    "name":"my_modbus_tcp_client",
                    "custom_device_id":1,
                    "ip_address":"192.168.0.100",
                    "port":502,
                    "device_id":0
                 },
                 {
                    "type":"variable_boolean",
                    "name":"my_boolean_variable",
                    "custom_device_id":1,
                    "value":false,
                    "default_value":true
                 },
                 {
                    "type":"variable_integer",
                    "name":"my_integer_variable",
                    "custom_device_id":1,
                    "value":10,
                    "default_value":0
                 },
                 {
                    "type":"variable_string",
                    "name":"my_string_variable",
                    "custom_device_id":1,
                    "value":"Jakiś string",
                    "default_value":""
                 },
                 {
                    "type":"timer",
                    "name":"my_timer",
                    "custom_device_id":1,
                    "unit":"seconds"
                 }
              ],
              "dialog":{
                 "version":2,
                 "content":[
                    
                 ]
              },
              "widget":{
                 "version":2,
                 "content":[
                    
                 ]
              },
              "config":{
                 "version":2,
                 "content":[
                    
                 ]
              },
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "blockade_pin_code_enabled":true,
              "blockade_pin_code":"12345",
              "bannable":true,
              "banned":false,
              "ban_reason":"",
              "error_counter":0,
              "max_errors":3,
              "max_execution_time":30,
              "associations":{
                 "module_devices":[
                    {
                       "id":1,
                       "class":"custom_device_module"
                    },
                    {
                       "id":2,
                       "class":"custom_device_module"
                    }
                 ]
              }
           }
        },
        "Device.VIRTUAL.RelayIntegrator":{
           "value":{
              "id":1,
              "type":"relay_integrator",
              "variant":"generic",
              "class":"virtual",
              "name":"My relays integrator",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "state":false,
              "blind_duration":2000,
              "associations":{
                 "relays":[
                    {
                       "id":11,
                       "class":"tech"
                    },
                    {
                       "id":32,
                       "class":"wtp"
                    },
                    {
                       "id":33,
                       "class":"wtp"
                    },
                    {
                       "id":2,
                       "class":"sbus"
                    }
                 ]
              },
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ]
           }
        },
        "Device.VIRTUAL.BlindControllerIntegrator":{
           "value":{
              "id":3,
              "type":"blind_controller_integrator",
              "variant":"generic",
              "class":"virtual",
              "name":"My blind controller integrator",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "last_set_target_opening":100,
              "action_in_progress":false,
              "lift_position_description":"all_closed",
              "associations":{
                 "blind_controllers":[
                    {
                       "id":24,
                       "class":"wtp"
                    },
                    {
                       "id":32,
                       "class":"wtp"
                    },
                    {
                       "id":44,
                       "class":"wtp"
                    }
                 ]
              },
              "voice_assistant_device_type":"blind_controller",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "last_set_target_tilt":100,
              "tilt_in_progress":false,
              "tilt_position_description":"all_closed"
           }
        },
        "Device.VIRTUAL.DimmerRgbIntegrator":{
           "value":{
              "id":4,
              "type":"dimmer_rgb_integrator",
              "variant":"generic",
              "class":"virtual",
              "name":"My Dimmer RGB controller integrator",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 "rgb_support"
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "voice_assistant_device_type":"light",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "state":false,
              "brightness":80,
              "color_mode":"rgb",
              "color":"#000000",
              "white_temperature":8000,
              "associations":{
                 "dimmers":[
                    {
                       "id":24,
                       "class":"wtp"
                    },
                    {
                       "id":32,
                       "class":"wtp"
                    }
                 ],
                 "rgb_controllers":[
                    {
                       "id":44,
                       "class":"wtp"
                    }
                 ]
              }
           }
        },
        "Device.VIRTUAL.HeatPumpManager":{
           "value":{
              "id":99,
              "type":"heat_pump_manager",
              "variant":"generic",
              "class":"virtual",
              "name":"My manager",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "temperature":245,
              "enabled":true,
              "work_mode":"heating",
              "state":false,
              "target_temperature":{
                 "current":220,
                 "heating":220,
                 "cooling":250,
                 "automatic":245
              },
              "hysteresis":{
                 "heating":5,
                 "cooling":5,
                 "automatic":5
              },
              "dhw_control":{
                 "enabled":true,
                 "temperature":412,
                 "target_temperature":400,
                 "hysteresis":30,
                 "state":false
              },
              "associations":{
                 "heat_pump":{
                    "id":24,
                    "class":"modbus"
                 },
                 "domestic_hot_water":{
                    "id":25,
                    "class":"modbus"
                 },
                 "temperature_sensors":[
                    {
                       "id":24,
                       "class":"wtp"
                    },
                    {
                       "id":32,
                       "class":"sbus"
                    },
                    {
                       "id":44,
                       "class":"tech"
                    }
                 ],
                 "temperature_regulator":{
                    "id":22,
                    "class":"wtp"
                 }
              },
              "electric_heater_active":false,
              "target_temperature_mode":"constant"
           }
        },
        "Device.VIRTUAL.Gate":{
           "value":{
              "id":99,
              "type":"gate",
              "variant":"sliding_gate",
              "class":"virtual",
              "name":"My gate",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "state":"opening",
              "stopped_state":null,
              "partial_movement":false,
              "operating_logic":"full_step_by_step",
              "full_move_duration":30,
              "partial_move_duration":15,
              "associations":{
                 "full_open_close_output":{
                    "id":24,
                    "class":"wtp"
                 },
                 "partial_open_close_output":{
                    "id":25,
                    "class":"sbus"
                 },
                 "close_status_sensor":{
                    "id":23,
                    "class":"tech"
                 },
                 "trigger_sensors":[
                    {
                       "id":24,
                       "class":"wtp"
                    },
                    {
                       "id":32,
                       "class":"sbus"
                    },
                    {
                       "id":44,
                       "class":"tech"
                    }
                 ],
                 "buttons":[
                    {
                       "id":24,
                       "class":"wtp",
                       "trigger":{
                          "full_open_close":{
                             "type":"click",
                             "duration":1,
                             "button_index":1
                          },
                          "partial_open_close":{
                             "type":"hold_end",
                             "duration":1,
                             "button_index":1
                          }
                       }
                    },
                    {
                       "id":32,
                       "class":"sbus",
                       "trigger":{
                          "full_open_close":{
                             "type":"click",
                             "duration":1,
                             "button_index":1
                          },
                          "partial_open_close":{
                             "type":"hold_end",
                             "duration":1,
                             "button_index":1
                          }
                       }
                    },
                    {
                       "id":44,
                       "class":"tech",
                       "trigger":{
                          "full_open_close":{
                             "type":"click",
                             "duration":1,
                             "button_index":1
                          },
                          "partial_open_close":{
                             "type":"hold_end",
                             "duration":1,
                             "button_index":1
                          }
                       }
                    }
                 ]
              }
           }
        },
        "Device.VIRTUAL.Wicket":{
           "value":{
              "id":99,
              "type":"wicket",
              "variant":"generic",
              "class":"virtual",
              "name":"My wicket",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "state":"closed",
              "unlock_duration":15,
              "associations":{
                 "electric_strike_output":{
                    "id":24,
                    "class":"wtp"
                 },
                 "close_status_sensor":{
                    "id":23,
                    "class":"tech"
                 },
                 "trigger_sensors":[
                    {
                       "id":24,
                       "class":"wtp"
                    },
                    {
                       "id":32,
                       "class":"sbus"
                    },
                    {
                       "id":44,
                       "class":"tech"
                    }
                 ],
                 "buttons":[
                    {
                       "id":24,
                       "class":"wtp",
                       "trigger":{
                          "unlock":{
                             "type":"click",
                             "duration":1,
                             "button_index":1
                          }
                       }
                    },
                    {
                       "id":32,
                       "class":"sbus",
                       "trigger":{
                          "unlock":{
                             "type":"hold_end",
                             "duration":1,
                             "button_index":1
                          }
                       }
                    },
                    {
                       "id":44,
                       "class":"tech",
                       "trigger":{
                          "unlock":{
                             "type":"hold_end",
                             "duration":2,
                             "button_index":1
                          }
                       }
                    }
                 ]
              }
           }
        },
        "Device.Modbus.EcoAirHeatPump":{
           "value":{
              "id":1,
              "type":"heat_pump",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "variant":"eco_air",
              "class":"modbus",
              "name":"My EcoAir Heat Pump",
              "icon":"",
              "status":"online",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "software_version":"EcoAir v1.x",
              "visible":true,
              "color":"#FF00FF",
              "room_id":null,
              "state":"on",
              "work_mode":"heating",
              "temperature_outdoor":100,
              "heating_supply":400,
              "heating_return":200,
              "heating_system_pressure":300,
              "hot_gas_temperature":500,
              "condensation_temperature":300,
              "evaporation_temperature":500,
              "running_hours":100,
              "number_of_starts":1,
              "electric_heater_emergency":false,
              "electric_heater_active":true,
              "heat_demand":false,
              "cool_demand":false
           }
        },
        "Device.Modbus.EcoAirMainDhw":{
           "value":{
              "id":2,
              "type":"common_dhw_main",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "variant":"eco_air",
              "class":"modbus",
              "name":"My EcoAir DHW",
              "icon":"",
              "status":"online",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "software_version":"EcoAir v1.x",
              "visible":true,
              "color":"#FF00FF",
              "room_id":null,
              "target_temperature":450,
              "temperature_domestic_hot_water":400,
              "dhw_demand":true
           }
        },
        "Device.Modbus.EcoGeoHeatPump":{
           "value":{
              "id":3,
              "type":"heat_pump",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "variant":"eco_geo",
              "class":"modbus",
              "name":"My EcoGeo Heat Pump",
              "icon":"",
              "status":"online",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "software_version":"EcoGeo v1.x",
              "visible":true,
              "color":"#FF00FF",
              "room_id":null,
              "state":"on",
              "work_mode":"heating",
              "temperature_outdoor":100,
              "brine_out_temperature":300,
              "brine_in_temperature":500,
              "brine_pressure":300,
              "heating_supply":400,
              "heating_return":200,
              "heating_system_pressure":300,
              "hot_gas_temperature":500,
              "condensation_temperature":300,
              "evaporation_temperature":500,
              "running_hours":100,
              "number_of_starts":1,
              "electric_heater_emergency":false,
              "electric_heater_active":true,
              "heat_demand":false,
              "cool_demand":false,
              "fixed_heating_target_temperature":340,
              "fixed_cooling_target_temperature":210,
              "target_temperature_mode":"fixed",
              "heat_curve_base_point":20,
              "heat_curve_end_point":65,
              "heat_curve_end_point_outside":-5
           }
        },
        "Device.Modbus.EcoGeoMainDhw":{
           "value":{
              "id":4,
              "type":"common_dhw_main",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "variant":"eco_geo",
              "class":"modbus",
              "name":"My EcoGeo DHW",
              "icon":"",
              "status":"online",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "software_version":"EcoGeo v1.x",
              "visible":true,
              "color":"#FF00FF",
              "room_id":null,
              "target_temperature":450,
              "temperature_domestic_hot_water":400,
              "dhw_demand":true,
              "buffer_temperature":400,
              "installation_base_temperature":"room_temperature"
           }
        },
        "Device.Modbus.HeatcompHeatPump":{
           "value":{
              "id":4,
              "type":"heat_pump",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "variant":"heatcomp",
              "class":"modbus",
              "name":"My Heatcomp Heat Pump",
              "icon":"",
              "status":"online",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "software_version":"Heatcomp v1.x",
              "visible":true,
              "color":"#FF00FF",
              "room_id":null,
              "state":"on",
              "work_mode":"heating",
              "temperature_outdoor":100,
              "heating_supply":400,
              "heating_return":200,
              "hot_gas_temperature":500,
              "condensation_temperature":300,
              "evaporation_temperature":500,
              "running_hours":100,
              "compressor_percentage":60,
              "heat_demand":false,
              "cool_demand":false,
              "fixed_heating_target_temperature":500,
              "fixed_cooling_target_temperature":200,
              "target_temperature_mode":"fixed",
              "heat_curve_slope":10,
              "heat_curve_offset":20,
              "min_compressor_frequency":30,
              "max_compressor_frequency":60
           }
        },
        "Device.Modbus.HeatcompMainDhw":{
           "value":{
              "id":4,
              "type":"common_dhw_main",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "variant":"heatcomp",
              "class":"modbus",
              "name":"My Heatcomp DHW",
              "icon":"",
              "status":"online",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "software_version":"Heatcomp v1.x",
              "visible":true,
              "color":"#FF00FF",
              "room_id":null,
              "target_temperature":450,
              "temperature_domestic_hot_water":400,
              "dhw_demand":true
           }
        },
        "Device.Modbus.RemehaElgaACEHeatPump":{
           "value":{
              "id":5,
              "type":"heat_pump",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "variant":"remeha_elga_ace",
              "class":"modbus",
              "name":"My Remeha Heat Pump",
              "icon":"",
              "status":"online",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "software_version":"Remeha Elga ACE v1.x",
              "visible":true,
              "color":"#FF00FF",
              "room_id":null,
              "state":"on",
              "work_mode":"heating",
              "temperature_indoor":200,
              "target_temperature_indoor":220,
              "central_heating_target_temperature":450,
              "fixed_heating_target_temperature":460,
              "temperature_outdoor":100,
              "heating_supply":400,
              "heating_return":200,
              "heating_system_pressure":21,
              "energy_used_for_heating":500,
              "current_power":500,
              "alarm_code":0,
              "alarm_description":0,
              "running_hours":100,
              "operating_hours_heating":100,
              "heat_demand":false,
              "cool_demand":false,
              "smart_grid_state":"standard_work"
           }
        },
        "Device.Modbus.RemehaElgaACETemperatureSensor":{
           "value":{
              "id":37,
              "type":"temperature_sensor",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "variant":"remeha_elga_ace",
              "class":"modbus",
              "name":"Indoor temperature sensor",
              "icon":"",
              "status":"online",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "software_version":"Remeha Elga ACE v1.x",
              "visible":true,
              "color":"#FF00FF",
              "room_id":null,
              "temperature":221
           }
        },
        "Device.Modbus.AlphaInnotecHeatPump":{
           "value":{
              "id":6,
              "type":"heat_pump",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "variant":"alpha_innotec",
              "class":"modbus",
              "name":"My Alpha-Innotec Heat Pump",
              "icon":"",
              "status":"online",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "software_version":"Alpha-Innotec v1.x",
              "visible":true,
              "color":"#FF00FF",
              "room_id":null,
              "temperature_indoor":200,
              "target_temperature_indoor":220,
              "fixed_heating_target_temperature":460,
              "temperature_outdoor":100,
              "heating_supply":400,
              "heating_return":200,
              "hot_gas_temperature":850,
              "condensation_temperature":500,
              "evaporation_temperature":500,
              "overheating":600,
              "lower_source_out_temperature":420,
              "lower_source_in_temperature":460,
              "heat_quantity_hot_water":300,
              "heat_quantity_heating":400,
              "heat_quantity_total":700,
              "electric_heater_active":false,
              "running_hours":100,
              "operating_hours_heating":100,
              "operating_hours_hot_water":60,
              "heat_curve_end_point":300,
              "heat_curve_parallel_shift":60,
              "heat_demand":false,
              "cool_demand":false
           }
        },
        "Device.Modbus.AlphaInnotecMainDhw":{
           "value":{
              "id":7,
              "type":"common_dhw_main",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "variant":"alpha_innotec",
              "class":"modbus",
              "name":"My Alpha-Innotec DHW",
              "icon":"",
              "status":"online",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "software_version":"Alpha-Innotec v1.x",
              "visible":true,
              "color":"#FF00FF",
              "room_id":null,
              "target_temperature":450,
              "temperature_domestic_hot_water":400,
              "dhw_demand":true,
              "emergency_electric_element_dhw_active":false
           }
        },
        "Device.Modbus.AlphaInnotecTemperatureSensor":{
           "value":{
              "id":34,
              "type":"temperature_sensor",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "variant":"alpha_innotec",
              "class":"modbus",
              "name":"Indoor temperature sensor",
              "icon":"",
              "status":"online",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "software_version":"Alpha-Innotec v1.x",
              "visible":true,
              "color":"#FF00FF",
              "room_id":null,
              "temperature":221
           }
        },
        "Device.Modbus.SolaxX1Inverter":{
           "value":{
              "id":8,
              "type":"inverter",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "variant":"solax_x1",
              "class":"modbus",
              "name":"My Solax X1 Inverter",
              "icon":"",
              "status":"online",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "software_version":"SolaxX1 v1.x",
              "visible":true,
              "color":"#FF00FF",
              "room_id":null,
              "run_mode":"normal",
              "pv_total_active_power":500,
              "energy_produced_total":10000,
              "energy_produced_today":200,
              "pv_1":{
                 "active_power":250000,
                 "voltage":500000,
                 "current":100000
              },
              "pv_2":{
                 "active_power":250000,
                 "voltage":500000,
                 "current":100000
              },
              "active_power_limit":100,
              "unlock_passowrd":"****"
           }
        },
        "Device.Modbus.SolaxX1EnergyMeter":{
           "value":{
              "id":9,
              "type":"energy_meter",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "variant":"solax_x1",
              "class":"modbus",
              "name":"My Solax X1 Energy meter",
              "icon":"",
              "status":"online",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "software_version":"SolaxX1 v1.x",
              "visible":true,
              "color":"#FF00FF",
              "room_id":null,
              "meter_number":1,
              "total_active_power":-500,
              "energy_fed_total":100000,
              "energy_fed_today":1000,
              "energy_consumed_total":100000,
              "energy_consumed_today":1000,
              "grid":{
                 "active_power":2000000,
                 "voltage":230000,
                 "current":10000
              }
           }
        },
        "Device.Modbus.SolaxX1Battery":{
           "value":{
              "id":10,
              "type":"battery",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "variant":"solax_x1",
              "class":"modbus",
              "name":"My Solax X1 Battery",
              "icon":"",
              "status":"online",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "software_version":"SolaxX1 v1.x",
              "visible":true,
              "color":"#FF00FF",
              "room_id":null,
              "soc":50,
              "energy_charged_total":50000,
              "energy_charged_today":500,
              "energy_discharged_total":50000,
              "energy_discharged_today":500,
              "charge_power":-500,
              "unlock_password":"****"
           }
        },
        "Device.Modbus.SolaxX3Inverter":{
           "value":{
              "id":10,
              "type":"inverter",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "variant":"solax_x3",
              "class":"modbus",
              "name":"My Solax X3 Inverter",
              "icon":"",
              "status":"online",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "software_version":"SolaxX3 v1.x",
              "visible":true,
              "color":"#FF00FF",
              "room_id":null,
              "run_mode":"normal",
              "pv_total_active_power":500,
              "energy_produced_total":10000,
              "energy_produced_today":200,
              "pv_1":{
                 "active_power":250000,
                 "voltage":500000,
                 "current":100000
              },
              "pv_2":{
                 "active_power":250000,
                 "voltage":500000,
                 "current":100000
              },
              "active_power_limit":0,
              "unlock_passowrd":"****"
           }
        },
        "Device.Modbus.SolaxX3EnergyMeter":{
           "value":{
              "id":11,
              "type":"energy_meter",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "variant":"solax_x3",
              "class":"modbus",
              "name":"My Solax X3 Energy meter",
              "icon":"",
              "status":"online",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "software_version":"SolaxX3 v1.x",
              "visible":true,
              "color":"#FF00FF",
              "room_id":null,
              "meter_number":1,
              "total_active_power":-500,
              "energy_fed_total":100000,
              "energy_fed_today":1000,
              "energy_consumed_total":100000,
              "energy_consumed_today":1000,
              "phase_1":{
                 "active_power":2000000,
                 "voltage":230000,
                 "current":10000
              },
              "phase_2":{
                 "active_power":2000000,
                 "voltage":230000,
                 "current":10000
              },
              "phase_3":{
                 "active_power":2000000,
                 "voltage":230000,
                 "current":10000
              }
           }
        },
        "Device.Modbus.SolaxX3Battery":{
           "value":{
              "id":12,
              "type":"battery",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "variant":"solax_x3",
              "class":"modbus",
              "name":"My Solax X3 Battery",
              "icon":"",
              "status":"online",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "software_version":"SolaxX3 v1.x",
              "visible":true,
              "color":"#FF00FF",
              "room_id":null,
              "soc":50,
              "energy_charged_total":50000,
              "energy_charged_today":500,
              "energy_discharged_total":50000,
              "energy_discharged_today":500,
              "charge_power":-500,
              "unlock_password":"****"
           }
        },
        "Device.Modbus.IthoHeatPump":{
           "value":{
              "id":12,
              "type":"heat_pump",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "variant":"itho",
              "class":"modbus",
              "name":"My Itho Heat Pump",
              "icon":"",
              "status":"online",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "software_version":"Itho v1.x",
              "visible":true,
              "color":"#FF00FF",
              "room_id":null,
              "state":"on",
              "fixed_heating_target_temperature":46,
              "temperature_outdoor":100,
              "temperature_indoor":200,
              "target_temperature_indoor":200,
              "heating_supply":400,
              "heating_return":200,
              "heating_system_pressure":42,
              "hot_gas_temperature":850,
              "condensation_temperature":500,
              "evaporation_temperature":500,
              "brine_out_temperature":420,
              "brine_in_temperature":460,
              "energy_used_for_hot_water":300,
              "energy_used_for_heating":500,
              "energy_used_for_cooling":200,
              "energy_used_in_stand_by":50,
              "energy_used_total":1050,
              "source_supply_energy":153,
              "source_return_energy":153,
              "electric_heater_active":false,
              "running_hours":100,
              "operating_hours_heating":100,
              "operating_hours_hot_water":60,
              "number_of_starts":60,
              "heat_curve_end_point":300,
              "heat_curve_base_point":500,
              "heat_demand":false,
              "cool_demand":false
           }
        },
        "Device.Modbus.IthoMainDhw":{
           "value":{
              "id":13,
              "type":"common_dhw_main",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "variant":"itho",
              "class":"modbus",
              "name":"My Itho DHW",
              "icon":"",
              "status":"online",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "software_version":"Itho v1.x",
              "visible":true,
              "color":"#FF00FF",
              "room_id":null,
              "target_temperature":450,
              "temperature_domestic_hot_water":450,
              "temperature_domestic_hot_water_lower_tank":400,
              "hysteresis":25,
              "dhw_demand":true
           }
        },
        "Device.Modbus.IthoTemperatureSensor":{
           "value":{
              "id":33,
              "type":"temperature_sensor",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "variant":"itho",
              "class":"modbus",
              "name":"Indoor temperature sensor",
              "icon":"",
              "status":"online",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "software_version":"Itho v1.x",
              "visible":true,
              "color":"#FF00FF",
              "room_id":null,
              "temperature":221
           }
        },
        "Device.Modbus.EastronSDM630EnergyMeter":{
           "value":{
              "id":14,
              "type":"energy_meter",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "variant":"eastron_sdm630",
              "class":"modbus",
              "name":"My Eastron Energy Meter",
              "icon":"",
              "status":"online",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "software_version":"SDM630 v1.x",
              "visible":true,
              "color":"#FF00FF",
              "room_id":null,
              "phase_1":{
                 "active_power":1000000,
                 "voltage":230000,
                 "current":10000,
                 "apparent_power":100000,
                 "reactive_power":100000,
                 "energy_consumed_total":200000,
                 "energy_consumed_today":5000,
                 "energy_fed_total":5000,
                 "energy_fed_today":500,
                 "energy_sum_toal":205000,
                 "energy_sum_today":5500,
                 "reactive_energy_consumed_total":200000,
                 "reactive_energy_consumed_today":5000,
                 "reactive_energy_fed_total":5000,
                 "reactive_energy_fed_today":500,
                 "reactive_energy_sum_toal":205000,
                 "reactive_energy_sum_today":5500
              },
              "phase_2":{
                 "active_power":1000000,
                 "voltage":230000,
                 "current":10000,
                 "apparent_power":100000,
                 "reactive_power":100000,
                 "energy_consumed_total":200000,
                 "energy_consumed_today":5000,
                 "energy_fed_total":5000,
                 "energy_fed_today":500,
                 "energy_sum_toal":205000,
                 "energy_sum_today":5500,
                 "reactive_energy_consumed_total":200000,
                 "reactive_energy_consumed_today":5000,
                 "reactive_energy_fed_total":5000,
                 "reactive_energy_fed_today":500,
                 "reactive_energy_sum_toal":205000,
                 "reactive_energy_sum_today":5500
              },
              "phase_3":{
                 "active_power":1000000,
                 "voltage":230000,
                 "current":10000,
                 "apparent_power":100000,
                 "reactive_power":100000,
                 "energy_consumed_total":200000,
                 "energy_consumed_today":5000,
                 "energy_fed_total":5000,
                 "energy_fed_today":500,
                 "energy_sum_toal":205000,
                 "energy_sum_today":5500,
                 "reactive_energy_consumed_total":200000,
                 "reactive_energy_consumed_today":5000,
                 "reactive_energy_fed_total":5000,
                 "reactive_energy_fed_today":500,
                 "reactive_energy_sum_toal":205000,
                 "reactive_energy_sum_today":5500
              },
              "total_active_power":3000000,
              "total_apparent_power":300000,
              "total_reacive_power":300000,
              "energy_sum_total":615000,
              "energy_sum_today":15000,
              "reactive_energy_sum_total":615000,
              "reactive_energy_sum_toda":15000,
              "uses_energy_of_building":false
           }
        },
        "Device.Modbus.SolarEdgeSingleInverter":{
           "value":{
              "id":15,
              "type":"inverter",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "variant":"solar_edge_single",
              "class":"modbus",
              "name":"My Solar Edge Inverter",
              "icon":"",
              "status":"online",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "software_version":"SolarEdge v1.x",
              "visible":true,
              "color":"#FF00FF",
              "room_id":null,
              "run_mode":"standby",
              "energy_produced_total":10000,
              "energy_produced_today":200,
              "power_to_grid":-500,
              "pv_total_active_power":250000,
              "pv":{
                 "active_power":250000,
                 "voltage":500000,
                 "current":100000
              },
              "advanced_power_control_enabled":false,
              "reactive_power_config":"fixed_cosphi",
              "active_power_limit":100
           }
        },
        "Device.Modbus.SolarEdgeMultipleInverter":{
           "value":{
              "id":16,
              "type":"inverter",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "variant":"solar_edge_multiple",
              "class":"modbus",
              "name":"My Solar Edge Inverter",
              "icon":"",
              "status":"online",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "software_version":"SolarEdge /w multiple MPPT Extension v1.x",
              "visible":true,
              "color":"#FF00FF",
              "room_id":null,
              "run_mode":"standby",
              "energy_produced_total":10000,
              "energy_produced_today":200,
              "power_to_grid":-500,
              "pv_1":{
                 "active_power":250000,
                 "voltage":500000,
                 "current":100000
              },
              "pv_2":{
                 "active_power":250000,
                 "voltage":500000,
                 "current":100000
              },
              "pv_3":{
                 "active_power":250000,
                 "voltage":500000,
                 "current":100000
              },
              "advanced_power_control_enabled":false,
              "reactive_power_config":"fixed_cosphi",
              "active_power_limit":100,
              "pv_total_active_power":750000
           }
        },
        "Device.Modbus.MitsubishiEcodanHeatPump":{
           "value":{
              "id":17,
              "type":"heat_pump",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "variant":"mitsubishi_ecodan",
              "class":"modbus",
              "name":"My MitsubishiEcodan Heat Pump",
              "icon":"",
              "status":"online",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "software_version":"Ecodan v1.x",
              "visible":true,
              "color":"#FF00FF",
              "room_id":null,
              "state":"on",
              "work_mode":"cooling",
              "temperature_outdoor":100,
              "heating_supply":400,
              "heating_return":200,
              "running_hours":100,
              "zone_1":{
                 "target_temperature":210,
                 "current_temperature":200,
                 "work_mode":"heating_room_temp",
                 "heating_supply":550,
                 "heating_return":450
              },
              "zone_2":{
                 "target_temperature":210,
                 "current_temperature":200,
                 "work_mode":"heating_room_temp",
                 "heating_supply":550,
                 "heating_return":450
              },
              "heat_demand":false,
              "cool_demand":false,
              "defrost_mode":"normal",
              "residual_heat_removal":"normal",
              "frequency_master":45,
              "refrigerant_temperature":450,
              "energy_used_for_heating":5000,
              "energy_used_for_cooling":2000,
              "energy_used_for_hot_water":3000,
              "energy_produced_heating":10000,
              "energy_produced_cooling":5000,
              "energy_produced_hot_water":6000,
              "flow_rate":200
           }
        },
        "Device.Modbus.MitsubishiEcodanMainDhw":{
           "value":{
              "id":18,
              "type":"common_dhw_main",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "variant":"mitsubishi_ecodan",
              "class":"modbus",
              "name":"My MitsubishiEcodan DHW",
              "icon":"",
              "status":"online",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "software_version":"Ecodan v1.x",
              "visible":true,
              "color":"#FF00FF",
              "room_id":null,
              "target_temperature":450,
              "temperature_domestic_hot_water":450,
              "dhw_demand":true,
              "work_mode":"normal",
              "temperature_drop":350,
              "heating_supply":550,
              "heating_return":400
           }
        },
        "Device.Modbus.MitsubishiEcodanTemperatureSensor":{
           "value":{
              "id":19,
              "type":"temperature_sensor",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "variant":"mitsubishi_ecodan",
              "class":"modbus",
              "name":"Zone 1 temperature sensor",
              "icon":"",
              "status":"online",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "software_version":"Ecodan v1.x",
              "visible":true,
              "color":"#FF00FF",
              "room_id":null,
              "temperature":221
           }
        },
        "Device.Modbus.GalmetPrimaHeatPump":{
           "value":{
              "id":20,
              "type":"heat_pump",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "variant":"galmet_prima",
              "class":"modbus",
              "name":"My Galmet Prima Heat Pump",
              "icon":"",
              "status":"online",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "software_version":"Galmet Prima v1.x",
              "visible":true,
              "color":"#FF00FF",
              "room_id":null,
              "work_mode":"heating",
              "fixed_target_temperature_minimum":35,
              "fixed_target_temperature_maximum":65,
              "temperature_outdoor":100,
              "heating_system_pressure":13,
              "hot_gas_temperature":400,
              "condensation_temperature":200,
              "water_inlet_temperature":440,
              "water_outlet_temperature":440,
              "running_hours":100,
              "electric_heater_active":false,
              "zone_1":{
                 "heat_demand":false,
                 "cool_demand":false,
                 "fixed_target_temperature":40,
                 "heat_curve":2,
                 "heat_curve_target_temperature":345,
                 "heat_curve_enabled":true
              },
              "zone_2":{
                 "heat_demand":false,
                 "cool_demand":false,
                 "fixed_target_temperature":45,
                 "heat_curve":3,
                 "heat_curve_target_temperature":345,
                 "heat_curve_enabled":false
              },
              "work_frequency":113,
              "outdoor_unit_work_mode":"heating",
              "fan_speed":139,
              "t1_water_outlet_temperature":433,
              "t2_temperature":456,
              "device_power":4000,
              "energy_used_total":45454,
              "energy_generated_total":42558,
              "outdoor_unit_capacity":4500,
              "water_flow":12000,
              "buffer_up_temperature":444,
              "buffer_down_temperature":433,
              "pump_i_state":false,
              "pump_o_state":true,
              "pump_d_state":true,
              "pump_s_state":false,
              "pump_c_state":false,
              "electric_heater_state":false,
              "sv_1_state":false,
              "sv_2_state":false,
              "defrost_state":false
           }
        },
        "Device.Modbus.GalmetPrimaMainDhw":{
           "value":{
              "id":21,
              "type":"common_dhw_main",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "variant":"galmet_prima",
              "class":"modbus",
              "name":"My Galmet Prima DHW",
              "icon":"",
              "status":"online",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "software_version":"Galmet Prima v1.x",
              "visible":true,
              "color":"#FF00FF",
              "room_id":null,
              "target_temperature":45,
              "temperature_domestic_hot_water":450,
              "dhw_demand":true,
              "electric_heater_active":false,
              "circulation_pump_enabled":true,
              "electric_heater_state":false
           }
        },
        "Device.Modbus.GalmetPrimaTemperatureSensor":{
           "value":{
              "id":22,
              "type":"temperature_sensor",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "variant":"galmet_prima",
              "class":"modbus",
              "name":"Indoor temperature sensor",
              "icon":"",
              "status":"online",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "software_version":"Galmet Prima v1.x",
              "visible":true,
              "color":"#FF00FF",
              "room_id":null,
              "temperature":221
           }
        },
        "Device.Modbus.KaisaiKHCHeatPump":{
           "value":{
              "id":23,
              "type":"heat_pump",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "variant":"kaisai_khc",
              "class":"modbus",
              "name":"My Kaisai Heat Pump",
              "icon":"",
              "status":"online",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "software_version":"Kaisai KHC v1.x",
              "visible":true,
              "color":"#FF00FF",
              "room_id":null,
              "work_mode":"heating",
              "fixed_target_temperature_minimum":35,
              "fixed_target_temperature_maximum":65,
              "temperature_outdoor":100,
              "heating_system_pressure":13,
              "hot_gas_temperature":400,
              "condensation_temperature":200,
              "water_inlet_temperature":440,
              "water_outlet_temperature":440,
              "running_hours":100,
              "electric_heater_active":false,
              "zone_1":{
                 "heat_demand":false,
                 "cool_demand":false,
                 "fixed_target_temperature":45,
                 "heat_curve":3,
                 "heat_curve_target_temperature":345,
                 "heat_curve_enabled":false
              },
              "zone_2":{
                 "heat_demand":false,
                 "cool_demand":false,
                 "fixed_target_temperature":45,
                 "heat_curve":3,
                 "heat_curve_target_temperature":345,
                 "heat_curve_enabled":false
              },
              "work_frequency":113,
              "outdoor_unit_work_mode":"heating",
              "fan_speed":139,
              "t1_water_outlet_temperature":433,
              "t2_temperature":456,
              "device_power":4000,
              "energy_used_total":45454,
              "energy_generated_total":42558,
              "outdoor_unit_capacity":4500,
              "water_flow":12000,
              "buffer_up_temperature":444,
              "buffer_down_temperature":433,
              "pump_i_state":false,
              "pump_o_state":true,
              "pump_d_state":true,
              "pump_s_state":false,
              "pump_c_state":false,
              "electric_heater_state":false,
              "sv_1_state":false,
              "sv_2_state":false,
              "defrost_state":false
           }
        },
        "Device.Modbus.KaisaiKHCMainDhw":{
           "value":{
              "id":24,
              "type":"common_dhw_main",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "variant":"kaisai_khc",
              "class":"modbus",
              "name":"My Kaisai KHC DHW",
              "icon":"",
              "status":"online",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "software_version":"Kaisai KHC v1.x",
              "visible":true,
              "color":"#FF00FF",
              "room_id":null,
              "target_temperature":45,
              "temperature_domestic_hot_water":450,
              "dhw_demand":true,
              "electric_heater_active":false,
              "circulation_pump_enabled":true,
              "electric_heater_state":false
           }
        },
        "Device.Modbus.KaisaiKHCTemperatureSensor":{
           "value":{
              "id":25,
              "type":"temperature_sensor",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "variant":"kaisai_khc",
              "class":"modbus",
              "name":"Indoor temperature sensor",
              "icon":"",
              "status":"online",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "software_version":"Kaisai KHC v1.x",
              "visible":true,
              "color":"#FF00FF",
              "room_id":null,
              "temperature":221
           }
        },
        "Device.Modbus.GoodWeSdtMsDnsXsInverter":{
           "value":{
              "id":26,
              "type":"inverter",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "variant":"goodwe_sdt_ms_dns_xs",
              "class":"modbus",
              "name":"My GoodWe SDT Inverter",
              "icon":"",
              "status":"online",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "software_version":"GoodWe SDT/MS/DNS/XS v1.x",
              "visible":true,
              "color":"#FF00FF",
              "room_id":null,
              "run_mode":"normal",
              "pv_total_active_power":500,
              "energy_fed_total":100000,
              "energy_fed_today":1000,
              "pv_1":{
                 "active_power":250000,
                 "voltage":500000,
                 "current":100000
              },
              "pv_2":{
                 "active_power":250000,
                 "voltage":500000,
                 "current":100000
              },
              "phase_1":{
                 "voltage":230000,
                 "current":10000
              },
              "phase_2":{
                 "voltage":230000,
                 "current":10000
              },
              "phase_3":{
                 "voltage":230000,
                 "current":10000
              }
           }
        },
        "Device.Modbus.GoodWeMtSmtInverter":{
           "value":{
              "id":27,
              "type":"inverter",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "variant":"goodwe_mt_smt",
              "class":"modbus",
              "name":"My GoodWe SDT Inverter",
              "icon":"",
              "status":"online",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "software_version":"GoodWe MT/SMT v1.x",
              "visible":true,
              "color":"#FF00FF",
              "room_id":null,
              "run_mode":"normal",
              "pv_total_active_power":500,
              "energy_fed_total":100000,
              "energy_fed_today":1000,
              "power_to_grid":500,
              "pv_1":{
                 "active_power":250000,
                 "voltage":500000,
                 "current":100000
              },
              "pv_2":{
                 "active_power":250000,
                 "voltage":500000,
                 "current":100000
              },
              "pv_3":{
                 "active_power":250000,
                 "voltage":500000,
                 "current":100000
              },
              "pv_4":{
                 "active_power":250000,
                 "voltage":500000,
                 "current":100000
              },
              "phase_1":{
                 "voltage":230000,
                 "current":10000
              },
              "phase_2":{
                 "voltage":230000,
                 "current":10000
              },
              "phase_3":{
                 "voltage":230000,
                 "current":10000
              }
           }
        },
        "Device.Modbus.HeatEcoHeatPump":{
           "value":{
              "id":28,
              "type":"heat_pump",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "variant":"heat_eco",
              "class":"modbus",
              "name":"My HeatEco Heat Pump",
              "icon":"",
              "status":"online",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "software_version":"HeatEco v1.x",
              "visible":true,
              "color":"#FF00FF",
              "room_id":null,
              "work_mode":"heating_only",
              "fixed_heating_target_temperature":300,
              "fixed_cooling_target_temperature":200,
              "bottom_hysteresis":10,
              "top_hysteresis":10,
              "pid":{
                 "proportional_gain":10,
                 "integral_time":1,
                 "differential_time":1
              },
              "water_inlet_temperature":300,
              "water_outlet_temperature":300,
              "temperature_outdoor":100,
              "discharge_gas_temperature":300,
              "suction_gas_temperature":300,
              "discharge_pressure":15100,
              "suction_pressure":10100,
              "coil_temperature":234,
              "evaporation_temperature":342,
              "flow_switch_active":false,
              "emergency_switch_active":false,
              "terminal_signal_switch_active":false,
              "sequential_protection_switch_active":false,
              "fan_high_speed_active":false,
              "fan_low_speed_active":false,
              "four_way_valve_active":false,
              "pump_active":false,
              "three_way_valve_active":false,
              "crankshaft_heater_active":false,
              "chassis_heater_active":false,
              "electric_heater_active":true,
              "fan_output":234,
              "pump_output":345,
              "fan_mode":"eco",
              "pump_mode":"normal",
              "eev_opening":99,
              "heat_demand":false,
              "cool_demand":false
           }
        },
        "Device.Modbus.HeatEcoMainDhw":{
           "value":{
              "id":29,
              "type":"common_dhw_main",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "variant":"heat_eco",
              "class":"modbus",
              "name":"My HeatEco DHW",
              "icon":"",
              "status":"online",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "software_version":"HeatEco v1.x",
              "visible":true,
              "color":"#FF00FF",
              "room_id":null,
              "target_temperature":450,
              "bottom_hysteresis":10,
              "top_hysteresis":10,
              "temperature_domestic_hot_water":400,
              "dhw_demand":true
           }
        },
        "Device.Modbus.SolisInverter":{
           "value":{
              "id":30,
              "type":"inverter",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "variant":"solis",
              "class":"modbus",
              "name":"My Solis Inverter",
              "icon":"",
              "status":"online",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "software_version":"Solis v1.x",
              "visible":true,
              "color":"#FF00FF",
              "room_id":null,
              "run_mode":"normal",
              "power_to_grid":3000000,
              "energy_produced_total":100000,
              "energy_produced_today":1000,
              "pv_total_active_power":1000000,
              "grid_total_active_power":5000000,
              "pv_1":{
                 "active_power":250000,
                 "voltage":500000,
                 "current":100000
              },
              "pv_2":{
                 "active_power":250000,
                 "voltage":500000,
                 "current":100000
              },
              "pv_3":{
                 "active_power":250000,
                 "voltage":500000,
                 "current":100000
              },
              "pv_4":{
                 "active_power":250000,
                 "voltage":500000,
                 "current":100000
              },
              "phase_1":{
                 "voltage":230000,
                 "current":10000
              },
              "phase_2":{
                 "voltage":230000,
                 "current":10000
              },
              "phase_3":{
                 "voltage":230000,
                 "current":10000
              },
              "active_power_limit":100
           }
        },
        "Device.Modbus.HuaweiSUN2000Inverter":{
           "value":{
              "id":31,
              "type":"inverter",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "variant":"huawei_sun_2000",
              "class":"modbus",
              "name":"My Huawei Inverter",
              "icon":"",
              "status":"online",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "software_version":"Huawei SUN2000 v1.x",
              "visible":true,
              "color":"#FF00FF",
              "room_id":null,
              "run_mode":"running",
              "pv_1":{
                 "active_power":250000,
                 "voltage":500000,
                 "current":100000
              },
              "pv_2":{
                 "active_power":250000,
                 "voltage":500000,
                 "current":100000
              },
              "pv_3":{
                 "active_power":250000,
                 "voltage":500000,
                 "current":100000
              },
              "pv_4":{
                 "active_power":250000,
                 "voltage":500000,
                 "current":100000
              },
              "pv_total_active_power":500,
              "energy_produced_total":10000,
              "energy_produced_today":200,
              "power_to_grid":-500,
              "phase_1":{
                 "voltage":230000,
                 "current":10000
              },
              "phase_2":{
                 "voltage":230000,
                 "current":10000
              },
              "phase_3":{
                 "voltage":230000,
                 "current":10000
              },
              "model_id":55,
              "inverter_model":"SUN2000-60KTL-M0",
              "active_power_limit":100,
              "active_power_control_mode":"unlimited"
           }
        },
        "Device.Modbus.HuaweiSUN2000Battery":{
           "value":{
              "id":32,
              "type":"battery",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "variant":"huawei_sun_2000",
              "class":"modbus",
              "name":"My Huawei Battery",
              "icon":"",
              "status":"online",
              "messages":[
                 
              ],
              "labels":[
                 "battery_charge_support"
              ],
              "tags":[
                 
              ],
              "software_version":"Huawei SUN2000 v1.x",
              "visible":true,
              "color":"#FF00FF",
              "room_id":null,
              "state":"running",
              "energy_charged_today":123431,
              "energy_charged_total":4442234,
              "energy_discharged_today":123431,
              "energy_discharged_total":4442234,
              "maximum_charging_power":2500000,
              "maximum_discharging_power":2500000,
              "charging_cutoff_capacity":950,
              "discharge_cutoff_capacity":150,
              "soc":50,
              "forced_charging_duration":60,
              "forced_charging_power":3000
           }
        },
        "Device.Modbus.HuaweiSUN2000EnergyMeter":{
           "value":{
              "id":32,
              "type":"energy_meter",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "variant":"huawei_sun_2000",
              "class":"modbus",
              "name":"My Huawei Energy meter",
              "icon":"",
              "status":"online",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "software_version":"Huawei SUN2000 v1.x",
              "visible":true,
              "color":"#FF00FF",
              "room_id":null,
              "state":"running",
              "total_active_power":213000
           }
        },
        "Device.Modbus.KM1EnergyMeterConverter":{
           "value":{
              "id":34,
              "type":"energy_meter",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "variant":"p1",
              "class":"modbus",
              "name":"My KM1 energy meter converter",
              "icon":"",
              "status":"online",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "software_version":"Converter KM1 Energy Meter v1.x",
              "visible":true,
              "color":"#FF00FF",
              "room_id":null,
              "p1_version_id":50,
              "tariff_1":{
                 "energy_fed_total":1234567,
                 "energy_consumed_total":232900
              },
              "tariff_2":{
                 "energy_fed_total":109001,
                 "energy_consumed_total":1090778
              },
              "tariff_indicator":1,
              "power_to_grid":2001000,
              "power_from_grid":0,
              "number_of_power_failures":0,
              "number_of_long_power_failures":1,
              "total_active_power":2001000,
              "phase_1":{
                 "voltage":236000,
                 "current":8000,
                 "active_power":2001000,
                 "number_of_voltage_sags":0,
                 "number_of_voltage_swells":0
              },
              "phase_2":{
                 "voltage":0,
                 "current":0,
                 "active_power":0,
                 "number_of_voltage_sags":0,
                 "number_of_voltage_swells":0
              },
              "phase_3":{
                 "voltage":0,
                 "current":0,
                 "active_power":0,
                 "number_of_voltage_sags":0,
                 "number_of_voltage_swells":0
              },
              "uses_energy_of_building":false
           }
        },
        "Device.Modbus.AmpowrAmpiHomeInverter":{
           "value":{
              "id":35,
              "type":"inverter",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "variant":"ampowr_ampi_home_1_phase",
              "class":"modbus",
              "name":"My Ampowr Ampi Home inverter",
              "icon":"",
              "status":"online",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "software_version":"Ampowr AmpiHOME v1.x",
              "visible":true,
              "color":"#FF00FF",
              "room_id":null,
              "pv_1":{
                 "active_power":250000,
                 "voltage":500000,
                 "current":100000
              },
              "pv_2":{
                 "active_power":250000,
                 "voltage":500000,
                 "current":100000
              },
              "pv_total_active_power":500,
              "energy_produced_total":10000,
              "energy_produced_month":1000,
              "energy_produced_year":8000,
              "energy_produced_today":200,
              "inverter_model":"AH-KE-INV-3.68-I",
              "system_state":"standby",
              "radiator_temperature":450,
              "inverter_working_mode":"self_consumption",
              "pv_input_mode":"indenpendend",
              "power_control_enabled":true,
              "active_power_limit":100
           }
        },
        "Device.Modbus.AmpowrAmpiHomeEnergyMeter1Phase":{
           "value":{
              "id":36,
              "type":"energy_meter",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "variant":"ampowr_ampi_home_1_phase",
              "class":"modbus",
              "name":"My Ampowr Ampi Home energy meter",
              "icon":"",
              "status":"online",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "software_version":"Ampowr AmpiHOME v1.x",
              "visible":true,
              "color":"#FF00FF",
              "room_id":null,
              "energy_consumed_total":200000,
              "energy_consumed_month":10000,
              "energy_consumed_year":100000,
              "energy_consumed_today":5000,
              "energy_fed_total":5000,
              "energy_fed_month":1000,
              "energy_fed_year":4000,
              "energy_fed_today":500,
              "phase_1":{
                 "voltage":236000,
                 "current":8000,
                 "active_power":2001000
              },
              "uses_energy_of_building":false
           }
        },
        "Device.Modbus.AmpowrAmpiHomeEnergyMeter3Phase":{
           "value":{
              "id":37,
              "type":"energy_meter",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "variant":"ampowr_ampi_home_3_phase",
              "class":"modbus",
              "name":"My Ampowr Ampi Home energy meter",
              "icon":"",
              "status":"online",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "software_version":"Ampowr AmpiHOME v1.x",
              "visible":true,
              "color":"#FF00FF",
              "room_id":null,
              "energy_consumed_total":200000,
              "energy_consumed_month":10000,
              "energy_consumed_year":100000,
              "energy_consumed_today":5000,
              "energy_fed_total":5000,
              "energy_fed_month":1000,
              "energy_fed_year":4000,
              "energy_fed_today":500,
              "phase_1":{
                 "voltage":236000,
                 "current":8000,
                 "active_power":2001000
              },
              "phase_2":{
                 "voltage":236000,
                 "current":8000,
                 "active_power":2001000
              },
              "phase_3":{
                 "voltage":236000,
                 "current":8000,
                 "active_power":2001000
              },
              "inverter_working_mode":"peak_shift",
              "forced_state":"charge",
              "uses_energy_of_building":false
           }
        },
        "Device.Modbus.AmpowrAmpiHomeBattery":{
           "value":{
              "id":38,
              "type":"battery",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "variant":"ampowr_ampi_home_1_phase",
              "class":"modbus",
              "name":"My Ampowr Ampi Home battery",
              "icon":"",
              "status":"online",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "software_version":"Ampowr AmpiHOME v1.x",
              "visible":true,
              "color":"#FF00FF",
              "room_id":null,
              "energy_charged_today":123431,
              "energy_charged_total":4442234,
              "energy_discharged_today":123431,
              "energy_discharged_total":4442234,
              "radiator_temperature":450,
              "depth_of_discharge_enabled":true,
              "depth_of_discharge_bms_enabled":true,
              "off_grid_depth_of_discharge":90,
              "on_grid_depth_of_discharge":90,
              "voltage":150000,
              "current":10000,
              "charge_power":1000000,
              "soc":95,
              "temperature":350,
              "charge_voltage":230000,
              "charge_current_limit":250000,
              "maximum_charge_power":100,
              "maximum_discharge_power":100,
              "grid_max_soc_charge":100
           }
        },
        "Device.Modbus.HeatcompHCEV01CarCharger":{
           "value":{
              "id":39,
              "type":"car_charger",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "variant":"wallbox_ev",
              "class":"modbus",
              "name":"My Heatcomp HC-EV01 car charger",
              "icon":"",
              "status":"online",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "software_version":"Heatcomp HC-EV01 v1.x",
              "visible":true,
              "color":"#FF00FF",
              "room_id":null,
              "state":"initializing",
              "error":"none",
              "voltage":230000,
              "current":20000,
              "charge_power":1500000,
              "energy_charged_total":4442234,
              "energy_charged_today":123431,
              "temperature":400,
              "charge_time":320,
              "current_limit":20000,
              "postpone_time":0,
              "charge_time_left":0
           }
        },
        "Device.Modbus.DaikinAlthermaHeatPump":{
           "value":{
              "id":40,
              "type":"heat_pump",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "variant":"daikin_altherma",
              "class":"modbus",
              "name":"My Daikin Altherma Heat Pump",
              "icon":"",
              "status":"online",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "software_version":"Altherma v1.x",
              "visible":true,
              "color":"#FF00FF",
              "room_id":null,
              "work_mode":"heating",
              "temperature_outdoor":100,
              "heating_supply":450,
              "heating_return":400,
              "evaporation_temperature":350,
              "compressor_running":true,
              "circulation_pump_running":true,
              "heating_target_temperature":220,
              "cooling_target_temperature":200,
              "heat_demand":true,
              "cool_demand":false,
              "heating_water_target_temperature":55,
              "cooling_water_target_temperature":22,
              "quiet_mode":false,
              "weather_dependent_mode":"fixed",
              "weather_dependent_mode_heating_slope_offset":3,
              "weather_dependent_mode_cooling_slope_offset":0,
              "electric_heater_active":false,
              "disinfection_active":false,
              "defrost_startup_active":false,
              "hot_start_active":false,
              "three_way_valve_state":"space_heating",
              "operation_mode":"heating",
              "pre_heater_water_temperature":255,
              "flow_rate":123
           }
        },
        "Device.Modbus.DaikinAlthermaMainDhw":{
           "value":{
              "id":41,
              "type":"common_dhw_main",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "variant":"daikin_altherma",
              "class":"modbus",
              "name":"My Daikin Altherma Main DHW",
              "icon":"",
              "status":"online",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "software_version":"Altherma v1.x",
              "visible":true,
              "color":"#FF00FF",
              "room_id":null,
              "target_temperature":450,
              "temperature_domestic_hot_water":400,
              "dhw_demand":true,
              "booster_mode_active":false
           }
        },
        "Device.Modbus.DaikinAlthermaTemperatureSensor":{
           "value":{
              "id":42,
              "type":"temperature_sensor",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "variant":"daikin_altherma",
              "class":"modbus",
              "name":"Daikin room temperature sensor",
              "icon":"",
              "status":"online",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "software_version":"Altherma v1.x",
              "visible":true,
              "color":"#FF00FF",
              "room_id":null,
              "temperature":233
           }
        },
        "Device.Modbus.EcoGeoHighPowerHeatPump":{
           "value":{
              "id":42,
              "type":"heat_pump",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "variant":"eco_geo_high_power",
              "class":"modbus",
              "name":"My EcoGeo Heat Pump",
              "icon":"",
              "status":"online",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "software_version":"EcoGeo HighPower v1.x",
              "visible":true,
              "color":"#FF00FF",
              "room_id":null,
              "state":"on",
              "work_mode":"heating",
              "temperature_outdoor":100,
              "brine_out_temperature":300,
              "brine_in_temperature":500,
              "brine_pressure":300,
              "heating_supply":400,
              "heating_return":200,
              "heating_system_pressure":300,
              "hot_gas_temperature":500,
              "condensation_temperature":300,
              "evaporation_temperature":500,
              "running_hours":100,
              "number_of_starts":1,
              "electric_heater_emergency":false,
              "electric_heater_active":true,
              "heat_demand":false,
              "cool_demand":false,
              "fixed_heating_target_temperature":340,
              "fixed_cooling_target_temperature":210,
              "target_temperature_mode":"fixed",
              "heat_curve_base_point":20,
              "heat_curve_end_point":65,
              "heat_curve_end_point_outside":-5
           }
        },
        "Device.Modbus.EcoGeoHighPowerMainDhw":{
           "value":{
              "id":43,
              "type":"common_dhw_main",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "variant":"eco_geo_high_power",
              "class":"modbus",
              "name":"My EcoGeo HighPower DHW",
              "icon":"",
              "status":"online",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "software_version":"EcoGeo HighPower v1.x",
              "visible":true,
              "color":"#FF00FF",
              "room_id":null,
              "target_temperature":450,
              "temperature_domestic_hot_water":400,
              "dhw_demand":true
           }
        },
        "Device.Modbus.TechLE3x230mb":{
           "value":{
              "id":44,
              "type":"energy_meter",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "variant":"tech_le3x230mb",
              "class":"modbus",
              "name":"My Tech Energy Meter",
              "icon":"",
              "status":"online",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "software_version":"LE-3x230mb v1.x",
              "visible":true,
              "color":"#FF00FF",
              "room_id":null,
              "phase_1":{
                 "active_power":1000000,
                 "voltage":230000,
                 "current":10000,
                 "apparent_power":100000,
                 "reactive_power":100000
              },
              "phase_2":{
                 "active_power":1000000,
                 "voltage":230000,
                 "current":10000,
                 "apparent_power":100000,
                 "reactive_power":100000
              },
              "phase_3":{
                 "active_power":1000000,
                 "voltage":230000,
                 "current":10000,
                 "apparent_power":100000,
                 "reactive_power":100000
              },
              "total_active_power":3000000,
              "total_apparent_power":300000,
              "total_reacive_power":300000,
              "energy_consumed_total":200000,
              "energy_consumed_today":5000,
              "energy_fed_total":5000,
              "energy_fed_today":500,
              "reactive_energy_consumed_total":200000,
              "reactive_energy_consumed_today":5000,
              "reactive_energy_fed_total":5000,
              "reactive_energy_fed_today":500,
              "monthly_energy_consumption":[
                 {
                    "year":2025,
                    "month":6,
                    "value":4242421
                 },
                 {
                    "year":2025,
                    "month":7,
                    "value":4281921
                 }
              ],
              "energy_consumed_current_month":{
                 "year":2025,
                 "month":8,
                 "value":4313
              },
              "energy_consumed_last_month":{
                 "year":2025,
                 "month":7,
                 "value":1237
              },
              "energy_consumed_month_before_last_month":{
                 "year":2025,
                 "month":6,
                 "value":9913
              },
              "monthly_energy_fed":[
                 {
                    "year":2025,
                    "month":6,
                    "value":182421
                 },
                 {
                    "year":2025,
                    "month":7,
                    "value":180025
                 }
              ],
              "energy_fed_current_month":{
                 "year":2025,
                 "month":8,
                 "value":431
              },
              "energy_fed_last_month":{
                 "year":2025,
                 "month":7,
                 "value":237
              },
              "energy_fed_month_before_last_month":{
                 "year":2025,
                 "month":6,
                 "value":993
              },
              "uses_energy_of_building":false
           }
        },
        "Device.Modbus.HeatcompInverter":{
           "value":{
              "id":45,
              "type":"inverter",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "variant":"heatcomp_inverter",
              "class":"modbus",
              "name":"My Heatcomp inverter",
              "icon":"",
              "status":"online",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "software_version":"Heatcomp Inverter v1.x",
              "visible":true,
              "color":"#FF00FF",
              "room_id":null,
              "run_mode":"standby",
              "power_to_grid":1000000,
              "energy_produced_total":10000,
              "energy_produced_today":200,
              "energy_fed_total":5000,
              "energy_fed_today":100,
              "energy_consumed_total":5000,
              "energy_consumed_today":100,
              "pv_total_active_power":500,
              "pv_1":{
                 "active_power":250000,
                 "voltage":500000,
                 "current":100000
              },
              "pv_2":{
                 "active_power":250000,
                 "voltage":500000,
                 "current":100000
              },
              "grid_total_active_power":10000,
              "phase_1":{
                 "active_power":250000,
                 "voltage":500000,
                 "current":100000
              },
              "phase_2":{
                 "active_power":250000,
                 "voltage":500000,
                 "current":100000
              },
              "phase_3":{
                 "active_power":250000,
                 "voltage":500000,
                 "current":100000
              }
           }
        },
        "Device.Modbus.HeatcompBattery":{
           "value":{
              "id":46,
              "type":"battery",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "variant":"heatcomp_inverter",
              "class":"modbus",
              "name":"My Heatcomp battery",
              "icon":"",
              "status":"online",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "software_version":"Heatcomp Inverter v1.x",
              "visible":true,
              "color":"#FF00FF",
              "room_id":null,
              "soc":75,
              "charge_current":80000,
              "charge_power":100000,
              "charge_current_limit":100000,
              "voltage":48500,
              "energy_charged_total":50000,
              "energy_charged_today":10000,
              "energy_discharged_total":50000,
              "energy_discharged_today":10000,
              "scheduled_charge":{
                 "enabled":true,
                 "start_time_1":300,
                 "end_time_1":600,
                 "start_time_2":800,
                 "end_time_2":1000,
                 "start_time_3":1100,
                 "end_time_3":1300
              },
              "scheduled_discharge":{
                 "enabled":true,
                 "start_time_1":100,
                 "end_time_1":200,
                 "start_time_2":700,
                 "end_time_2":800,
                 "start_time_3":1000,
                 "end_time_3":1100
              },
              "max_grid_charge_power":2500,
              "grid_active_power_set":0,
              "charge_work_mode":"schedule"
           }
        },
        "Device.SBus.Relay":{
           "value":{
              "id":1,
              "type":"relay",
              "variant":"generic",
              "class":"sbus",
              "name":"My relay",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 "has_backlight",
                 "relay_startup_state_support",
                 "trigger_signal_config_support"
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "address":552255,
              "endpoint":1,
              "software_version":"DIN1 v1.0.0",
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "state":false,
              "timeout":15,
              "timeout_enabled":true,
              "voice_assistant_device_type":"light",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "inverted":false,
              "backlight_mode":"fixed",
              "backlight_brightness":80,
              "backlight_idle_color":"#FF00FF",
              "backlight_active_color":"#00FF00",
              "time_since_state_change":120,
              "startup_state":"off",
              "work_mode":"standard",
              "trigger_signal_type":"impulse",
              "allowed_trigger_signal_types'":[
                 "impulse",
                 "state_change"
              ]
           }
        },
        "Device.SBus.TemperatureSensor":{
           "value":{
              "id":2,
              "type":"temperature_sensor",
              "variant":"generic",
              "class":"sbus",
              "name":"My temperature sensor",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "address":552256,
              "endpoint":2,
              "software_version":"TS v1.0.0",
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "temperature":250,
              "calibration":-10,
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ]
           }
        },
        "Device.SBus.HumiditySensor":{
           "value":{
              "id":3,
              "type":"humidity_sensor",
              "variant":"generic",
              "class":"sbus",
              "name":"My humidity sensor",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "address":552257,
              "endpoint":1,
              "software_version":"HS v1.0.0",
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "humidity":567,
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ]
           }
        },
        "Device.SBus.TemperatureRegulator":{
           "value":{
              "id":4,
              "type":"temperature_regulator",
              "variant":"generic",
              "class":"sbus",
              "name":"My temperature regulator",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "address":552259,
              "endpoint":1,
              "software_version":"TR v1.0.0",
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "target_temperature":235,
              "target_temperature_mode":{
                 "current":"time_limited",
                 "remaining_time":63
              },
              "target_temperature_minimum":50,
              "target_temperature_maximum":350,
              "target_temperature_reached":true,
              "keylock":"off",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "confirm_time_mode":true,
              "user_menu_lock":{
                 "enabled":false,
                 "pin_code":"",
                 "pin_code_length_minimum":4,
                 "pin_code_length_maximum":4,
                 "allowed_characters":"0123456789"
              }
           }
        },
        "Device.SBus.TwoStateInputSensor":{
           "value":{
              "id":5,
              "type":"two_state_input_sensor",
              "variant":"generic",
              "class":"sbus",
              "name":"My input sensor",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "address":552257,
              "endpoint":2,
              "software_version":"IC v1.0.0",
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "state":false,
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "inverted":false
           }
        },
        "Device.SBus.Button":{
           "value":{
              "id":6,
              "type":"button",
              "variant":"generic",
              "class":"sbus",
              "name":"My button",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "address":552259,
              "endpoint":3,
              "software_version":"IC v1.0.0",
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "buttons_count":1,
              "action":"button_1_clicked_10_times",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ]
           }
        },
        "Device.SBus.AnalogInput":{
           "value":{
              "id":7,
              "type":"analog_input",
              "variant":"generic",
              "class":"sbus",
              "name":"My Analog input",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "address":552266,
              "endpoint":4,
              "software_version":"IC v1.0.0",
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "raw_value":1146,
              "value":2325.85,
              "formula":"object.raw_value*2 + math.sqrt(object.raw_value)",
              "unit":"mV",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ]
           }
        },
        "Device.SBus.Dimmer":{
           "value":{
              "id":8,
              "type":"dimmer",
              "variant":"generic",
              "class":"sbus",
              "name":"My dimmer",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "address":552255,
              "endpoint":2,
              "software_version":"DIM v1.0.0",
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "state":false,
              "target_level":75,
              "backlight_mode":"fixed",
              "backlight_brightness":80,
              "backlight_idle_color":"#FF00FF",
              "backlight_active_color":"#00FF00",
              "ambient_light_intensity":80,
              "output_temperature":250,
              "level_calibration":{
                 "minimum":40,
                 "maximum":60
              },
              "switch_mode":"single_monostable",
              "allowed_switch_modes":[
                 "single_monostable",
                 "single_bistable"
              ],
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ]
           }
        },
        "Device.SBus.RGBController":{
           "value":{
              "id":9,
              "type":"rgb_controller",
              "variant":"generic",
              "class":"sbus",
              "name":"My RGB",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "address":552255,
              "endpoint":2,
              "software_version":"RGB v1.0.0",
              "status":"online",
              "visible":true,
              "color":"#ff00ff",
              "voice_assistant_device_type":"light",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "state":false,
              "brightness":75,
              "led_color":"#ab12c9",
              "white_temperature":3500,
              "color_mode":"animation",
              "led_strip_type":"rgbw",
              "white_temperature_correction":3000,
              "cool_white_temperature_correction":6000,
              "warm_white_temperature_correction":3500,
              "available_animations":[
                 {
                    "style":"aurora",
                    "description":{
                       "text":"Aurora",
                       "id":12014
                    },
                    "steps":[
                       {
                          "color":"#00c6c6",
                          "min_transition_time":520,
                          "max_transition_time":840
                       },
                       {
                          "color":"#00f7e4",
                          "min_transition_time":1000,
                          "max_transition_time":1230
                       },
                       {
                          "color":"#00d9fb",
                          "min_transition_time":1000,
                          "max_transition_time":1320
                       },
                       {
                          "color":"#5472c9",
                          "min_transition_time":610,
                          "max_transition_time":1010
                       }
                    ]
                 },
                 {
                    "style":"colorshift",
                    "description":{
                       "text":"Shift",
                       "id":12017
                    },
                    "steps":[
                       {
                          "color":"#00ff7f",
                          "min_transition_time":1000,
                          "max_transition_time":1000
                       },
                       {
                          "color":"#010101",
                          "min_transition_time":1000,
                          "max_transition_time":1000
                       },
                       {
                          "color":"#0096ff",
                          "min_transition_time":1000,
                          "max_transition_time":1000
                       },
                       {
                          "color":"#010101",
                          "min_transition_time":1000,
                          "max_transition_time":1000
                       }
                    ]
                 },
                 {
                    "style":"fire",
                    "description":{
                       "text":"Fireplace",
                       "id":1843
                    },
                    "steps":[
                       {
                          "color":"#ff9600",
                          "min_transition_time":150,
                          "max_transition_time":650
                       },
                       {
                          "color":"#b77300",
                          "min_transition_time":40,
                          "max_transition_time":460
                       },
                       {
                          "color":"#e58d0a",
                          "min_transition_time":230,
                          "max_transition_time":580
                       },
                       {
                          "color":"#d08d00",
                          "min_transition_time":80,
                          "max_transition_time":540
                       }
                    ]
                 }
              ],
              "animations":[
                 {
                    "id":1,
                    "style":"aurora",
                    "name":"Aurora 1",
                    "description":{
                       "text":"Aurora",
                       "id":12014
                    },
                    "steps":[
                       {
                          "color":"#00c6c6",
                          "min_transition_time":520,
                          "max_transition_time":840
                       },
                       {
                          "color":"#00f7e4",
                          "min_transition_time":1000,
                          "max_transition_time":1230
                       },
                       {
                          "color":"#00d9fb",
                          "min_transition_time":1000,
                          "max_transition_time":1320
                       },
                       {
                          "color":"#5472c9",
                          "min_transition_time":610,
                          "max_transition_time":1010
                       }
                    ]
                 },
                 {
                    "id":2,
                    "style":"aurora",
                    "name":"Aurora 2",
                    "description":{
                       "text":"Aurora",
                       "id":12014
                    },
                    "steps":[
                       {
                          "color":"#00c0c0",
                          "min_transition_time":520,
                          "max_transition_time":840
                       },
                       {
                          "color":"#0f0733",
                          "min_transition_time":1000,
                          "max_transition_time":1230
                       },
                       {
                          "color":"#10ff00",
                          "min_transition_time":1000,
                          "max_transition_time":1320
                       },
                       {
                          "color":"#084a3d",
                          "min_transition_time":610,
                          "max_transition_time":1010
                       }
                    ]
                 },
                 {
                    "id":3,
                    "style":"colorshift",
                    "name":"Color change",
                    "description":{
                       "text":"Shift",
                       "id":12017
                    },
                    "steps":[
                       {
                          "color":"#00ff7f",
                          "min_transition_time":1000,
                          "max_transition_time":1000
                       },
                       {
                          "color":"#010101",
                          "min_transition_time":1000,
                          "max_transition_time":1000
                       },
                       {
                          "color":"#0096ff",
                          "min_transition_time":1000,
                          "max_transition_time":1000
                       },
                       {
                          "color":"#010101",
                          "min_transition_time":1000,
                          "max_transition_time":1000
                       }
                    ]
                 },
                 {
                    "id":4,
                    "style":"fire",
                    "name":"My fireplace",
                    "description":{
                       "text":"Fireplace",
                       "id":1843
                    },
                    "steps":[
                       {
                          "color":"#ff9600",
                          "min_transition_time":150,
                          "max_transition_time":650
                       },
                       {
                          "color":"#b77300",
                          "min_transition_time":40,
                          "max_transition_time":460
                       },
                       {
                          "color":"#e58d0a",
                          "min_transition_time":230,
                          "max_transition_time":580
                       },
                       {
                          "color":"#d08d00",
                          "min_transition_time":80,
                          "max_transition_time":540
                       }
                    ]
                 }
              ],
              "active_animation":1
           }
        },
        "Device.SBus.MotionSensor":{
           "value":{
              "id":13,
              "type":"motion_sensor",
              "variant":"generic",
              "class":"sbus",
              "name":"My motion sensor",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "address":552255,
              "endpoint":2,
              "software_version":"MS v1.0.0",
              "status":"online",
              "color":"#ff00ff",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "visible":true,
              "enabled":true,
              "blind_duration":5,
              "pulses_treshold":6,
              "pulses_window":4,
              "motion_detected":false,
              "time_since_motion":50,
              "sensor_type":"pir"
           }
        },
        "Device.SBus.LightSensor":{
           "value":{
              "id":14,
              "type":"light_sensor",
              "variant":"generic",
              "class":"sbus",
              "name":"My light sensor",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "address":552255,
              "endpoint":2,
              "software_version":"MS v1.0.0",
              "status":"online",
              "color":"#ff00ff",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "visible":true,
              "illuminance":654
           }
        },
        "Device.SBus.PressureSensor":{
           "value":{
              "id":15,
              "type":"pressure_sensor",
              "variant":"generic",
              "class":"sbus",
              "name":"My pressure sensor",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "address":552255,
              "endpoint":2,
              "software_version":"MS v1.0.0",
              "status":"online",
              "color":"#ff00ff",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "visible":true,
              "pressure":9899,
              "altitude":311
           }
        },
        "Device.SBus.CO2Sensor":{
           "value":{
              "id":16,
              "type":"co2_sensor",
              "variant":"generic",
              "class":"sbus",
              "name":"My CO2 sensor",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "address":552255,
              "endpoint":2,
              "software_version":"MS v1.0.0",
              "status":"online",
              "color":"#ff00ff",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "visible":true,
              "co2":350
           }
        },
        "Device.SBus.IAQSensor":{
           "value":{
              "id":17,
              "type":"iaq_sensor",
              "variant":"generic",
              "class":"sbus",
              "name":"My IAQ sensor",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "address":552255,
              "endpoint":2,
              "software_version":"MS v1.0.0",
              "status":"online",
              "color":"#ff00ff",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "visible":true,
              "iaq":75,
              "iaq_accuracy":"high",
              "air_quality":"moderate"
           }
        },
        "Device.SBus.BlindController":{
           "value":{
              "id":18,
              "type":"blind_controller",
              "variant":"generic",
              "class":"sbus",
              "name":"My Blind Controller",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 "has_backlight",
                 "percent_opening_control",
                 "has_lift_duration",
                 "has_tilt_duration",
                 "has_tilt_cycle_distance",
                 "percent_tilt_control",
                 "has_motor_running_current_threshold",
                 "has_motor_overload_current_threshold"
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "address":552255,
              "endpoint":2,
              "software_version":"MS v1.0.0",
              "status":"online",
              "color":"#ff00ff",
              "voice_assistant_device_type":"blind_controller_percent_control",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "visible":true,
              "target_opening":70,
              "current_opening":20,
              "window_covering_type":"tilt_blind",
              "available_window_covering_types":[
                 "roller_share",
                 "titl_blind"
              ],
              "lift_control_mode":"current_detection",
              "allowed_lift_control_modes":[
                 "current_detection",
                 "fixed_duration"
              ],
              "target_tilt":50,
              "current_tilt":10,
              "tilt_range":180,
              "full_cycle_duration":90,
              "tilt_duration":750,
              "tilt_cycle_distance":700,
              "motor_running_current_threshold":150,
              "motor_overload_current_threshold":2000,
              "buttons_inverted":false,
              "outputs_inverted":true,
              "backlight_mode":"fixed",
              "backlight_brightness":80,
              "backlight_idle_color":"#FF00FF",
              "backlight_active_color":"#00FF00"
           }
        },
        "Device.SBus.AnalogOutput":{
           "value":{
              "id":19,
              "type":"analog_output",
              "variant":"generic",
              "class":"sbus",
              "name":"My Analog output",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "address":552255,
              "endpoint":2,
              "software_version":"KW v1.0.0",
              "status":"online",
              "color":"#ff00ff",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "visible":true,
              "value":5000,
              "value_minimum":0,
              "value_maximum":10000,
              "raw_value":32767,
              "raw_value_minimum":0,
              "raw_value_maximum":65535
           }
        },
        "Device.SBus.PulseWidthModulation":{
           "value":{
              "id":20,
              "type":"pulse_width_modulation",
              "variant":"generic",
              "class":"sbus",
              "name":"My PWM",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "address":552255,
              "endpoint":2,
              "software_version":"KW v1.0.0",
              "status":"online",
              "color":"#ff00ff",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "visible":true,
              "frequency":5000,
              "frequency_minimum":0,
              "frequency_maximum":10000,
              "duty_cycle":80
           }
        },
        "Device.SBus.FloodSensor":{
           "value":{
              "id":21,
              "type":"flood_sensor",
              "variant":"generic",
              "class":"sbus",
              "name":"My Flood sensor",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "address":552255,
              "endpoint":2,
              "software_version":"FS v1.0.0",
              "status":"online",
              "color":"#ff00ff",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "visible":true,
              "flood_detected":false
           }
        },
        "Device.SBus.Valve":{
           "value":{
              "id":22,
              "type":"common_valve",
              "variant":"generic",
              "class":"sbus",
              "name":"My Valve",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "address":552255,
              "endpoint":2,
              "software_version":"EHI-01 v1.0.0",
              "status":"online",
              "color":"#ff00ff",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "enabled":true,
              "state":"work",
              "open_percent":10000,
              "temperature_valve":444,
              "opening_direction":"left",
              "max_single_move":5,
              "minimal_opening":5,
              "pause_time":10,
              "hysteresis":2,
              "proportional_gain":1,
              "opening_time":120,
              "calibration_time":120,
              "opening_time_mode":"linked",
              "floor_overheating_temperature":400,
              "heat_source_protection":true,
              "heat_source_protection_temperature":700,
              "return_protection":true,
              "return_protection_temperature":500,
              "central_heating_target_temperature":400,
              "floor_heating_target_temperature":300,
              "cooling_target_temperature":400,
              "valve_type":"central_heating",
              "work_mode":"heating",
              "emergency_behaviour":"open",
              "valve_closes_from_pump_threshold":true,
              "blockade":false,
              "blockade_reasons":[
                 "boiler_priority",
                 "room_regulator"
              ]
           }
        },
        "Device.SBus.ValvePump":{
           "value":{
              "id":23,
              "type":"valve_pump",
              "variant":"generic",
              "class":"sbus",
              "name":"My Valve",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "address":552255,
              "endpoint":2,
              "software_version":"EHI-01 v1.0.0",
              "status":"online",
              "color":"#ff00ff",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "state":true,
              "relay_control_mode":"internal",
              "emergency_behaviour":"turn_on",
              "antistop":true,
              "work_mode":"always_on",
              "temperature_threshold_heating":300,
              "temperature_threshold_cooling":300,
              "pump_work_in_calibration":true,
              "blockade":false
           }
        },
        "Device.SBus.EnergyMeter":{
           "value":{
              "id":4,
              "type":"energy_meter",
              "variant":"generic",
              "class":"sbus",
              "name":"My energy meter",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 "has_current_sensor",
                 "has_voltage_sensor"
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "address":552255,
              "software_version":"DIN1 v1.0.0",
              "status":"online",
              "visible":true,
              "endpoint":1,
              "color":"#FF00FF",
              "current":120,
              "voltage":230000,
              "active_power":7000,
              "energy_consumed_today":600,
              "energy_consumed_yesterday":500,
              "energy_consumed_total":3000000,
              "voice_assistant_device_type":"not_set",
              "purpose":"general"
           }
        },
        "Device.SBus.ValveAnalogPID":{
           "value":{
              "id":4,
              "type":"valve_analog_pid",
              "variant":"generic",
              "class":"sbus",
              "name":"My Valve",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "address":552255,
              "software_version":"KW-15 v1.0.0",
              "status":"online",
              "visible":true,
              "endpoint":1,
              "color":"#FF00FF",
              "heating_target_temperature":450,
              "heating_target_temperature_minimum":250,
              "heating_target_temperature_maximum":750,
              "cooling_target_temperature":350,
              "cooling_target_temperature_minimum":100,
              "cooling_target_temperature_maximum":600,
              "work_mode":"heating",
              "current_temperature":367,
              "proportional_gain":21,
              "integral_gain":11,
              "derivative_gain":5,
              "calculated_pid_value":1603,
              "output_value":1500,
              "voice_assistant_device_type":"not_set",
              "purpose":"general"
           }
        },
        "Device.SBus.WaterMeter":{
           "value":{
              "id":4,
              "type":"water_meter",
              "variant":"generic",
              "class":"sbus",
              "name":"My water meter",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "address":552255,
              "software_version":"WM v1.0.0",
              "status":"online",
              "visible":true,
              "endpoint":1,
              "color":"#FF00FF",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "current_water_flow":41235,
              "total_water_volume":500000,
              "monthly_water_volume":[
                 {
                    "year":2025,
                    "month":6,
                    "volume":4242421
                 },
                 {
                    "year":2025,
                    "month":7,
                    "volume":4281921
                 }
              ],
              "water_volume_current_month":{
                 "year":2025,
                 "month":8,
                 "enegy":4313
              },
              "water_volume_last_month":{
                 "year":2025,
                 "month":7,
                 "volume":1237
              },
              "water_volume_month_before_last_month":{
                 "year":2025,
                 "month":6,
                 "volume":9913
              }
           }
        },
        "Device.SBus.HeatMeter":{
           "value":{
              "id":4,
              "type":"water_meter",
              "variant":"generic",
              "class":"sbus",
              "name":"My water meter",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "address":552255,
              "software_version":"WM v1.0.0",
              "status":"online",
              "visible":true,
              "endpoint":1,
              "color":"#FF00FF",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "current_water_flow":41235,
              "total_water_volume":500000,
              "monthly_water_volume":[
                 {
                    "year":2025,
                    "month":6,
                    "volume":4242421
                 },
                 {
                    "year":2025,
                    "month":7,
                    "volume":4281921
                 }
              ],
              "water_volume_current_month":{
                 "year":2025,
                 "month":8,
                 "enegy":4313
              },
              "water_volume_last_month":{
                 "year":2025,
                 "month":7,
                 "volume":1237
              },
              "water_volume_month_before_last_month":{
                 "year":2025,
                 "month":6,
                 "volume":9913
              },
              "flow_temperature":477,
              "return_temperature":366,
              "active_power":52100,
              "monthly_energy_consumption":[
                 {
                    "year":2025,
                    "month":6,
                    "energy":4242421
                 },
                 {
                    "year":2025,
                    "month":7,
                    "energy":4281921
                 }
              ],
              "energy_consumed_current_month":{
                 "year":2025,
                 "month":8,
                 "enegy":4313
              },
              "energy_consumed_last_month":{
                 "year":2025,
                 "month":7,
                 "energy":1237
              },
              "energy_consumed_month_before_last_month":{
                 "year":2025,
                 "month":6,
                 "energy":9913
              }
           }
        },
        "Device.SBus.FanCoil":{
           "value":{
              "id":6,
              "type":"fan_coil",
              "variant":"generic",
              "class":"sbus",
              "name":"My fan coil",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "address":552255,
              "software_version":"FC v1.0.0",
              "status":"online",
              "visible":true,
              "endpoint":1,
              "color":"#FF00FF",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "state":"idle",
              "profile_type":"eco",
              "work_mode":"automatic",
              "fan_operation_mode":"automatic",
              "installation_type":"two_pipes",
              "target_temperature_minimum":50,
              "target_temperature_maximum":350,
              "comfort_profile":{
                 "target_temperature":210,
                 "target_temperature_minimum":200,
                 "target_temperature_maximum":220,
                 "delta_temperature":50
              },
              "eco_profile":{
                 "target_temperature_minimum":150,
                 "target_temperature_maximum":200,
                 "delta_temperature_minimum":20,
                 "delta_temperature_maximum":30,
                 "deadband":10
              },
              "protection_profile":{
                 "target_temperature_min":50,
                 "target_temperature_min_minimum":50,
                 "target_temperature_max":200,
                 "target_temperature_max_maximum":250,
                 "delta_temperature_minimum":20,
                 "delta_temperature_maximum":30
              },
              "hysteresis":{
                 "automatic":50,
                 "two_state_valve":{
                    "heating":50,
                    "cooling":50
                 }
              },
              "two_pipe_installation":{
                 "valve_type":"two_state",
                 "valve_state":"closed",
                 "valve_current_position":0
              },
              "four_pipe_installation":{
                 "valve_type":"two_state",
                 "valve_1":{
                    "mode":"heating",
                    "default_state":"normal_close",
                    "state":"closed",
                    "current_position":0
                 },
                 "valve_2":{
                    "mode":"cooling",
                    "default_state":"normal_open",
                    "state":"open",
                    "current_position":100
                 }
              },
              "fan":{
                 "output_type":"relay",
                 "manual_fan_gear":"first",
                 "relay_fan":{
                    "current_gear":"first",
                    "first_gear_hysteresis":10,
                    "second_gear_hysteresis":20,
                    "third_gear_hysteresis":30
                 },
                 "analog_fan":{
                    "manual_first_gear_percent":20,
                    "manual_second_gear_percent":50,
                    "manual_third_gear_percent":80,
                    "automatic_output_percent":60
                 }
              },
              "boost_mode":{
                 "cyclic_check_temperature_time":1800,
                 "work_time":600,
                 "work_time_left":300
              },
              "room_temperature_sensor_source":"from_module",
              "factory_reset_user_timestamps":[
                 1700000000,
                 1700003600
              ],
              "factory_reset_service_timestamps":[
                 1700007200,
                 1700010800
              ]
           }
        },
        "Device.Lora.TemperatureSensor":{
           "value":{
              "id":1,
              "type":"temperature_sensor",
              "class":"lora",
              "eui":"a840414f6182be4d",
              "name":"My temperature sensor",
              "icon":"",
              "messages":[
                 {
                    "type":"warning",
                    "message":{
                       "id":44,
                       "text":"Low battery"
                    },
                    "code":"1"
                 },
                 {
                    "type":"error",
                    "message":{
                       "id":455,
                       "text":"Temperature sensor damaged"
                    },
                    "code":"2"
                 }
              ],
              "labels":[
                 "floor",
                 "battery_powered"
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "signal":56,
              "software_version":"CL-Mini v1.0.0",
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "sub_id":1,
              "battery":100,
              "temperature":244,
              "calibration":0,
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ]
           }
        },
        "Device.Lora.HumiditySensor":{
           "value":{
              "id":2,
              "type":"humidity_sensor",
              "variant":"generic",
              "class":"lora",
              "eui":"a840414f6182be4d",
              "name":"My humidity sensor",
              "icon":"",
              "messages":[
                 {
                    "type":"warning",
                    "message":{
                       "id":44,
                       "text":"Low battery"
                    },
                    "code":"1"
                 },
                 {
                    "type":"error",
                    "message":{
                       "id":455,
                       "text":"Humidity sensor damaged"
                    },
                    "code":"1"
                 }
              ],
              "labels":[
                 "battery_powered"
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "signal":56,
              "software_version":"CL-Mini v1.0.0",
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "sub_id":1,
              "battery":100,
              "humidity":566,
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ]
           }
        },
        "Device.Lora.OpeningSensor":{
           "value":{
              "id":3,
              "type":"opening_sensor",
              "variant":"generic",
              "class":"lora",
              "eui":"a84041fc3109b4d5",
              "name":"My opening sensor",
              "icon":"",
              "messages":[
                 {
                    "type":"warning",
                    "message":{
                       "id":44,
                       "text":"Low battery"
                    },
                    "code":"1"
                 }
              ],
              "labels":[
                 "battery_powered"
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "signal":56,
              "software_version":"LDS01 v1.3.0",
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "sub_id":1,
              "battery":11,
              "open":true,
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ]
           }
        },
        "Device.Lora.FloodSensor":{
           "value":{
              "id":4,
              "type":"flood_sensor",
              "variant":"generic",
              "class":"lora",
              "eui":"a84041a1066cd417",
              "name":"My flood sensor",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 "battery_powered"
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "signal":62,
              "software_version":"LWL01 v1.4.0",
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "sub_id":1,
              "battery":50,
              "flood_detected":false,
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ]
           }
        },
        "Device.Lora.Relay":{
           "value":{
              "id":5,
              "type":"relay",
              "variant":"generic",
              "class":"lora",
              "name":"My relay",
              "eui":"a8404100000021a4",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "signal":77,
              "software_version":"DIN1 v1.0.0",
              "status":"online",
              "visible":true,
              "sub_id":1,
              "color":"#FF00FF",
              "voice_assistant_device_type":"light",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "state":false,
              "inverted":false,
              "work_mode":"standard"
           }
        },
        "Device.Lora.TwoStateInputSensor":{
           "value":{
              "id":6,
              "type":"two_state_input_sensor",
              "variant":"generic",
              "class":"lora",
              "name":"My input sensor",
              "eui":"a840410000c8f162",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "signal":56,
              "software_version":"LT-33222-L 1.0.0",
              "status":"online",
              "visible":true,
              "sub_id":1,
              "color":"#FF00FF",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "state":true,
              "inverted":false
           }
        },
        "Device.Lora.SmokeSensor":{
           "value":{
              "id":7,
              "type":"smoke_sensor",
              "variant":"generic",
              "class":"lora",
              "name":"My Smoke sensor",
              "eui":"c5a7b2b2f1c5a7b2",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "signal":61,
              "software_version":"CD-01 1.0.0",
              "status":"online",
              "visible":true,
              "sub_id":1,
              "color":"#FF00FF",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "locked":false,
              "dirt_level":50,
              "smoke_detected":true,
              "high_temperature_detected":false,
              "tamper_detected":false,
              "uptime":600
           }
        },
        "Device.RegistrationBody":{
           "value":{
              "class":"system_module",
              "type":"lora_gateway",
              "tech_key":"f3a59ca4611900deffa53ebc01584e62"
           }
        },
        "Device.SystemModule.WTPTransceiver":{
           "value":{
              "id":6,
              "type":"wtp_transceiver",
              "variant":"generic",
              "class":"system_module",
              "name":"WTP Transceiver",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "room_id":null,
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "software_version":"Built-in MCU v0.3.0",
              "enabled":true,
              "uuid":"FFFFFFFFFFFFFFFFFFFFFF01",
              "transceiver_address":1815979098,
              "link_latency":50,
              "avg_link_latency":50,
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "ip":"127.0.0.1",
              "diagnostic":{
                 "tech_heap":{
                    "used":160,
                    "total_size":236
                 },
                 "sys":{
                    "cpu_temp":33
                 }
              }
           }
        },
        "Device.SystemModule.WTPExtender":{
           "value":{
              "id":7,
              "type":"wtp_extender",
              "variant":"generic",
              "class":"system_module",
              "name":"WTP Extender",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 "has_ethernet"
              ],
              "room_id":null,
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "software_version":"Extender v0.3.0",
              "enabled":true,
              "uuid":"40003F000851353331363332",
              "transceiver_address":1415449098,
              "link_latency":15,
              "latest_link_latency":50,
              "network_name":"TECH WIFI",
              "network_signal":100,
              "network_channel":1,
              "ethernet_connected":true,
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "ip":"192.168.1.2",
              "diagnostic":{
                 "tech_heap":{
                    "used":160,
                    "total_size":236
                 },
                 "sys":{
                    "cpu_temp":33
                 }
              }
           }
        },
        "Device.SystemModule.SBusExtender":{
           "value":{
              "id":7,
              "type":"sbus_extender",
              "variant":"generic",
              "class":"system_module",
              "name":"SBus Extender",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 "has_ethernet"
              ],
              "room_id":null,
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "software_version":"SBusExtender v1.0.0",
              "enabled":true,
              "uuid":"40AB3F0118534433511363332",
              "transceiver_address":5451249098,
              "link_latency":5,
              "latest_link_latency":50,
              "network_name":"TECH WIFI",
              "network_signal":77,
              "network_channel":10,
              "ethernet_connected":true,
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "ip":"192.168.1.2",
              "diagnostic":{
                 "tech_heap":{
                    "used":160,
                    "total_size":236
                 },
                 "sys":{
                    "cpu_temp":33
                 }
              }
           }
        },
        "Device.SystemModule.ModbusExtender":{
           "value":{
              "id":8,
              "type":"modbus_extender",
              "variant":"generic",
              "class":"system_module",
              "name":"Modbus Extender",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 "has_ethernet"
              ],
              "room_id":null,
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "software_version":"ModbusExtender v1.0.0",
              "enabled":true,
              "uuid":"40AB3F01185344343412332132",
              "transceiver_address":5451249198,
              "link_latency":5,
              "latest_link_latency":50,
              "network_name":"TECH WIFI",
              "network_signal":77,
              "network_channel":10,
              "ethernet_connected":true,
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "ip":"192.168.1.2",
              "slave_mode":false,
              "slave_config":{
                 "baud_rate":9600,
                 "parity":"none",
                 "stop_bits":"one"
              },
              "diagnostic":{
                 "tech_heap":{
                    "used":160,
                    "total_size":236
                 },
                 "sys":{
                    "cpu_temp":33
                 }
              }
           }
        },
        "Device.SystemModule.TECHRSTransceiver":{
           "value":{
              "id":60,
              "type":"techrs_transceiver",
              "variant":"generic",
              "class":"system_module",
              "name":"TECHRS Transceiver",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "room_id":null,
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "software_version":"Built-in MCU v0.3.0",
              "enabled":true,
              "uuid":"FFFFFFFFFFFFFFFFFFFFFF04",
              "transceiver_address":1815979098,
              "link_latency":50,
              "avg_link_latency":50,
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "ip":"127.0.0.1",
              "diagnostic":{
                 "tech_heap":{
                    "used":160,
                    "total_size":236
                 },
                 "sys":{
                    "cpu_temp":33
                 }
              }
           }
        },
        "Device.SystemModule.TECHRSExtender":{
           "value":{
              "id":70,
              "type":"techrs_extender",
              "variant":"generic",
              "class":"system_module",
              "name":"TECHRS Extender",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 "has_ethernet"
              ],
              "room_id":null,
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "software_version":"Extender v0.3.0",
              "enabled":true,
              "uuid":"40003F000851353331364442",
              "transceiver_address":1426449098,
              "link_latency":15,
              "latest_link_latency":50,
              "network_name":"TECH WIFI",
              "network_signal":100,
              "network_channel":1,
              "ethernet_connected":true,
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "ip":"192.168.1.2",
              "diagnostic":{
                 "tech_heap":{
                    "used":160,
                    "total_size":236
                 },
                 "sys":{
                    "cpu_temp":33
                 }
              }
           }
        },
        "Device.SystemModule.LoraGateway":{
           "value":{
              "id":9,
              "type":"lora_gateway",
              "variant":"generic",
              "class":"system_module",
              "name":"Lora gateway",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "room_id":null,
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "software_version":"KerOS v4.3.3",
              "enabled":true,
              "uuid":"7276ff00080E0000",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ]
           }
        },
        "Device.SystemModule.IrRemote":{
           "value":{
              "id":10,
              "type":"ir_remote",
              "variant":"broadlink",
              "class":"system_module",
              "name":"IR Remote",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "room_id":null,
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "software_version":"RM4C mini v52098",
              "enabled":true,
              "uuid":"aabbccddeeff",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "broadlink_device_type":"0x520D",
              "learn_status":"in_progress",
              "last_learned_data":"0x2600",
              "last_learned_frequency'":0,
              "ip":"192.168.1.3"
           }
        },
        "Device.SystemModule.RfRemote":{
           "value":{
              "id":11,
              "type":"rf_remote",
              "variant":"broadlink",
              "class":"system_module",
              "name":"RF Remote",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "room_id":null,
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "software_version":"RM4C mini v52098",
              "enabled":true,
              "uuid":"aabbccddeeff",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "broadlink_device_type":"0x520D",
              "learn_status":"in_progress",
              "last_learned_data":"0x2600",
              "last_learned_frequency'":0,
              "ip":"192.168.1.3"
           }
        },
        "Device.SystemModule.SBusTransceiver":{
           "value":{
              "id":10,
              "type":"sbus_transceiver",
              "variant":"generic",
              "class":"system_module",
              "name":"SBus Transceiver",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "room_id":null,
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "software_version":"Built-in MCU v0.3.0",
              "enabled":true,
              "uuid":"FFFFFFFFFFFFFFFFFFFFFF02",
              "transceiver_address":1815979098,
              "link_latency":50,
              "avg_link_latency":50,
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "ip":"127.0.0.1",
              "diagnostic":{
                 "tech_heap":{
                    "used":160,
                    "total_size":236
                 },
                 "sys":{
                    "cpu_temp":33
                 }
              }
           }
        },
        "Device.SystemModule.ModbusTransceiver":{
           "value":{
              "id":11,
              "type":"modbus_transceiver",
              "variant":"generic",
              "class":"system_module",
              "name":"Modbus Transceiver",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "room_id":null,
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "software_version":"uarthost v0.8.1",
              "enabled":true,
              "uuid":"FFFFFFFFFFFFFFFFFFFFFF03",
              "transceiver_address":1234,
              "link_latency":50,
              "avg_link_latency":50,
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "ip":"127.0.0.1",
              "slave_mode":false,
              "slave_config":{
                 "baud_rate":9600,
                 "parity":"none",
                 "stop_bits":"one"
              },
              "diagnostic":{
                 "tech_heap":{
                    "used":160,
                    "total_size":236
                 },
                 "sys":{
                    "cpu_temp":33
                 }
              }
           }
        },
        "Device.AlarmSystem.Satel.TwoStateInputSensor":{
           "value":{
              "id":13,
              "type":"two_state_input_sensor",
              "variant":"satel",
              "class":"alarm_system",
              "name":"My input sensor",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "software_version":"Integra-32 v1.0.0",
              "status":"online",
              "visible":true,
              "sub_id":1,
              "parent_id":2,
              "color":"#FF00FF",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "state":true,
              "inverted":false
           }
        },
        "Device.AlarmSystem.Satel.TwoStateOutput":{
           "value":{
              "id":14,
              "type":"two_state_output",
              "variant":"satel",
              "class":"alarm_system",
              "name":"My output",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "software_version":"Integra-32 v1.0.0",
              "status":"online",
              "visible":true,
              "sub_id":1,
              "parent_id":2,
              "color":"#FF00FF",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "state":true
           }
        },
        "Device.AlarmSystem.Satel.AlarmZone":{
           "value":{
              "id":15,
              "type":"alarm_zone",
              "variant":"satel",
              "class":"alarm_system",
              "name":"Zone 1",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "software_version":"Integra-32 v1.0.0",
              "status":"online",
              "visible":true,
              "sub_id":1,
              "parent_id":2,
              "color":"#FF00FF",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "armed":true,
              "violated":false,
              "associations":{
                 "inputs":[
                    {
                       "id":14,
                       "class":"alarm_system"
                    }
                 ]
              },
              "zone_status":"armed"
           }
        },
        "Device.CustomDeviceModule.Battery":{
           "value":{
              "id":1,
              "type":"battery",
              "variant":"generic",
              "class":"custom_device_module",
              "name":"Battery",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "software_version":"CM01 v1.0.0",
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "uuid":"module-1-uuid",
              "custom_device_id":1,
              "battery":44,
              "signal":75,
              "params_callback_function":"onModuleParamChanged",
              "command_callback_function":"onModuleCommand",
              "charge_power":23232,
              "soc":55,
              "energy_charged_today":5321,
              "energy_discharged_today":7575,
              "battery_charge_support":true
           }
        },
        "Device.CustomDeviceModule.CarCharger":{
           "value":{
              "id":1,
              "type":"car_charger",
              "variant":"generic",
              "class":"custom_device_module",
              "name":"Car Charger",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "software_version":"CCH01 v1.0.0",
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "uuid":"module-1-uuid",
              "custom_device_id":1,
              "battery":44,
              "signal":75,
              "params_callback_function":"onModuleParamChanged",
              "command_callback_function":"onModuleCommand",
              "charge_power":23232,
              "energy_charged_total":5321
           }
        },
        "Device.CustomDeviceModule.Dimmer":{
           "value":{
              "id":2,
              "type":"dimmer",
              "variant":"generic",
              "class":"custom_device_module",
              "name":"Dimmer",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "software_version":"CM01 v1.0.0",
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "uuid":"module-1-uuid",
              "custom_device_id":1,
              "battery":44,
              "signal":75,
              "params_callback_function":"onModuleParamChanged",
              "command_callback_function":"onModuleCommand",
              "state":true,
              "target_level":55
           }
        },
        "Device.CustomDeviceModule.DomesticHotWater":{
           "value":{
              "id":3,
              "type":"common_dhw_main",
              "variant":"generic",
              "class":"custom_device_module",
              "name":"DHW",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "software_version":"CM01 v1.0.0",
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "uuid":"module-1-uuid",
              "custom_device_id":1,
              "battery":44,
              "signal":75,
              "params_callback_function":"onModuleParamChanged",
              "command_callback_function":"onModuleCommand",
              "current_temperature":212,
              "target_temperature":220,
              "hysteresis":21,
              "heat_demand":true
           }
        },
        "Device.CustomDeviceModule.EnergyMeter":{
           "value":{
              "id":4,
              "type":"energy_meter",
              "variant":"generic",
              "class":"custom_device_module",
              "name":"Energy meter",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "software_version":"CM01 v1.0.0",
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "uuid":"module-1-uuid",
              "custom_device_id":1,
              "battery":44,
              "signal":75,
              "params_callback_function":"onModuleParamChanged",
              "command_callback_function":"onModuleCommand",
              "total_active_power":2323000,
              "energy_sum_total":5909278,
              "uses_energy_of_building":true
           }
        },
        "Device.CustomDeviceModule.HeatPump":{
           "value":{
              "id":4,
              "type":"heat_pump",
              "variant":"generic",
              "class":"custom_device_module",
              "name":"Heat pump",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "software_version":"CM01 v1.0.0",
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "uuid":"module-1-uuid",
              "custom_device_id":1,
              "battery":44,
              "signal":75,
              "params_callback_function":"onModuleParamChanged",
              "command_callback_function":"onModuleCommand",
              "enabled":true,
              "thermal_demand":"none",
              "electric_heater_active":false,
              "target_temperature_indoor":216
           }
        },
        "Device.CustomDeviceModule.HumiditySensor":{
           "value":{
              "id":5,
              "type":"humidity_sensor",
              "variant":"generic",
              "class":"custom_device_module",
              "name":"Humidity sensor",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "software_version":"CM01 v1.0.0",
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "uuid":"module-1-uuid",
              "custom_device_id":1,
              "battery":44,
              "signal":75,
              "params_callback_function":"onModuleParamChanged",
              "command_callback_function":"onModuleCommand",
              "humidity":660
           }
        },
        "Device.CustomDeviceModule.Inverter":{
           "value":{
              "id":6,
              "type":"inverter",
              "variant":"generic",
              "class":"custom_device_module",
              "name":"Inverter",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "software_version":"CM01 v1.0.0",
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "uuid":"module-1-uuid",
              "custom_device_id":1,
              "battery":44,
              "signal":75,
              "params_callback_function":"onModuleParamChanged",
              "command_callback_function":"onModuleCommand",
              "pv_total_active_power":521930,
              "power_to_grid":90431,
              "energy_produced_total":782331
           }
        },
        "Device.CustomDeviceModule.Relay":{
           "value":{
              "id":7,
              "type":"relay",
              "variant":"generic",
              "class":"custom_device_module",
              "name":"Relay",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "software_version":"CM01 v1.0.0",
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "uuid":"module-1-uuid",
              "custom_device_id":1,
              "battery":44,
              "signal":75,
              "params_callback_function":"onModuleParamChanged",
              "command_callback_function":"onModuleCommand",
              "state":true,
              "timeout":15,
              "timeout_enabled":false,
              "time_since_state_change":154
           }
        },
        "Device.CustomDeviceModule.RGBController":{
           "value":{
              "id":8,
              "type":"rgb_controller",
              "variant":"generic",
              "class":"custom_device_module",
              "name":"RGB controller",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "software_version":"CM01 v1.0.0",
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "uuid":"module-1-uuid",
              "custom_device_id":1,
              "battery":44,
              "signal":75,
              "params_callback_function":"onModuleParamChanged",
              "command_callback_function":"onModuleCommand",
              "state":true,
              "brightness":64,
              "led_color":"#defede",
              "white_temperature":3500,
              "color_mode":"rgb",
              "available_color_modes":[
                 "rgb",
                 "temperature"
              ]
           }
        },
        "Device.CustomDeviceModule.TemperatureRegulator":{
           "value":{
              "id":9,
              "type":"temperature_regulator",
              "variant":"generic",
              "class":"custom_device_module",
              "name":"Temperature regulator",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "software_version":"CM01 v1.0.0",
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "uuid":"module-1-uuid",
              "custom_device_id":1,
              "battery":44,
              "signal":75,
              "params_callback_function":"onModuleParamChanged",
              "command_callback_function":"onModuleCommand",
              "target_temperature":220,
              "target_temperature_mode":{
                 "current":"constant",
                 "remaining_time":0
              },
              "target_temperature_minimum":50,
              "target_temperature_maximum":350,
              "target_temperature_reached":false,
              "confirm_time_mode":false,
              "system_mode":"heating"
           }
        },
        "Device.CustomDeviceModule.TemperatureSensor":{
           "value":{
              "id":10,
              "type":"temperature_sensor",
              "variant":"generic",
              "class":"custom_device_module",
              "name":"Temperature sensor",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "software_version":"CM01 v1.0.0",
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "uuid":"module-1-uuid",
              "custom_device_id":1,
              "battery":44,
              "signal":75,
              "params_callback_function":"onModuleParamChanged",
              "command_callback_function":"onModuleCommand",
              "temperature":221
           }
        },
        "Device.CustomDeviceModule.TwoStateInputSensor":{
           "value":{
              "id":10,
              "type":"two_state_input_sensor",
              "variant":"generic",
              "class":"custom_device_module",
              "name":"Two state input sensor",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "software_version":"CM01 v1.0.0",
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "uuid":"module-1-uuid",
              "custom_device_id":1,
              "battery":44,
              "signal":75,
              "params_callback_function":"onModuleParamChanged",
              "command_callback_function":"onModuleCommand",
              "state":true
           }
        },
        "Device.CustomDeviceModule.AnalogInput":{
           "value":{
              "id":11,
              "type":"analog_input",
              "variant":"generic",
              "class":"custom_device_module",
              "name":"Analog input",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "software_version":"CM01 v1.0.0",
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "uuid":"module-1-uuid",
              "custom_device_id":1,
              "battery":44,
              "signal":75,
              "params_callback_function":"onModuleParamChanged",
              "command_callback_function":"onModuleCommand",
              "value":2315,
              "unit":"mV",
              "value_valid":true
           }
        },
        "Device.CustomDeviceModule.AnalogOutput":{
           "value":{
              "id":12,
              "type":"analog_output",
              "variant":"generic",
              "class":"custom_device_module",
              "name":"Analog output",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "software_version":"CM01 v1.0.0",
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "uuid":"module-1-uuid",
              "custom_device_id":1,
              "battery":44,
              "signal":75,
              "params_callback_function":"onModuleParamChanged",
              "command_callback_function":"onModuleCommand",
              "value":2315,
              "value_minimum":0,
              "value_maximum":10000,
              "unit":"mV"
           }
        },
        "Device.CustomDeviceModule.AQSensor":{
           "value":{
              "id":13,
              "type":"aq_sensor",
              "variant":"generic",
              "class":"custom_device_module",
              "name":"Air Quality sensor",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "software_version":"CM01 v1.0.0",
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "uuid":"module-1-uuid",
              "custom_device_id":1,
              "battery":44,
              "signal":75,
              "params_callback_function":"onModuleParamChanged",
              "command_callback_function":"onModuleCommand",
              "pm1p0":12,
              "pm2p5":21,
              "pm4p0":44,
              "pm10p0":35,
              "air_quality":"good"
           }
        },
        "Device.CustomDeviceModule.BlindController":{
           "value":{
              "id":14,
              "type":"blind_controller",
              "variant":"generic",
              "class":"custom_device_module",
              "name":"Blind controller",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 "percent_opening_control",
                 "percent_tilt_control"
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "software_version":"CM01 v1.0.0",
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "uuid":"module-1-uuid",
              "custom_device_id":1,
              "battery":44,
              "signal":75,
              "params_callback_function":"onModuleParamChanged",
              "command_callback_function":"onModuleCommand",
              "target_opening":50,
              "current_opening":50,
              "target_tilt":0,
              "current_tilt":0,
              "percent_control_supported":true,
              "tilt_control_supported":true
           }
        },
        "Device.CustomDeviceModule.Co2Sensor":{
           "value":{
              "id":15,
              "type":"co2_sensor",
              "variant":"generic",
              "class":"custom_device_module",
              "name":"Co2 sensor",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "software_version":"CM01 v1.0.0",
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "uuid":"module-1-uuid",
              "custom_device_id":1,
              "battery":44,
              "signal":75,
              "params_callback_function":"onModuleParamChanged",
              "command_callback_function":"onModuleCommand",
              "co2":111
           }
        },
        "Device.CustomDeviceModule.FloodSensor":{
           "value":{
              "id":16,
              "type":"flood_sensor",
              "variant":"generic",
              "class":"custom_device_module",
              "name":"Flood sensor",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "software_version":"CM01 v1.0.0",
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "uuid":"module-1-uuid",
              "custom_device_id":1,
              "battery":44,
              "signal":75,
              "params_callback_function":"onModuleParamChanged",
              "command_callback_function":"onModuleCommand",
              "flood_detected":false
           }
        },
        "Device.CustomDeviceModule.IAQSensor":{
           "value":{
              "id":16,
              "type":"iaq_sensor",
              "variant":"generic",
              "class":"custom_device_module",
              "name":"IAQ sensor",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "software_version":"CM01 v1.0.0",
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "uuid":"module-1-uuid",
              "custom_device_id":1,
              "battery":44,
              "signal":75,
              "params_callback_function":"onModuleParamChanged",
              "command_callback_function":"onModuleCommand",
              "iaq":57,
              "air_quality":"moderate"
           }
        },
        "Device.CustomDeviceModule.LightSensor":{
           "value":{
              "id":17,
              "type":"light_sensor",
              "variant":"generic",
              "class":"custom_device_module",
              "name":"Light sensor",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "software_version":"CM01 v1.0.0",
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "uuid":"module-1-uuid",
              "custom_device_id":1,
              "battery":44,
              "signal":75,
              "params_callback_function":"onModuleParamChanged",
              "command_callback_function":"onModuleCommand",
              "illuminance":150
           }
        },
        "Device.CustomDeviceModule.MotionSensor":{
           "value":{
              "id":18,
              "type":"motion_sensor",
              "variant":"generic",
              "class":"custom_device_module",
              "name":"Motion sensor",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "software_version":"CM01 v1.0.0",
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "uuid":"module-1-uuid",
              "custom_device_id":1,
              "battery":44,
              "signal":75,
              "params_callback_function":"onModuleParamChanged",
              "command_callback_function":"onModuleCommand",
              "enable":true,
              "motion_detected":false,
              "time_since_motion":120,
              "sensor_type":"unknown"
           }
        },
        "Device.CustomDeviceModule.OpeningSensor":{
           "value":{
              "id":19,
              "type":"opening_sensor",
              "variant":"generic",
              "class":"custom_device_module",
              "name":"Opening sensor",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "software_version":"CM01 v1.0.0",
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "uuid":"module-1-uuid",
              "custom_device_id":1,
              "battery":44,
              "signal":75,
              "params_callback_function":"onModuleParamChanged",
              "command_callback_function":"onModuleCommand",
              "open":true
           }
        },
        "Device.CustomDeviceModule.PressureSensor":{
           "value":{
              "id":20,
              "type":"pressure_sensor",
              "variant":"generic",
              "class":"custom_device_module",
              "name":"Pressure sensor",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "software_version":"CM01 v1.0.0",
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "uuid":"module-1-uuid",
              "custom_device_id":1,
              "battery":44,
              "signal":75,
              "params_callback_function":"onModuleParamChanged",
              "command_callback_function":"onModuleCommand",
              "pressure":9900
           }
        },
        "Device.CustomDeviceModule.RadiatorActuator":{
           "value":{
              "id":21,
              "type":"radiator_actuator",
              "variant":"generic",
              "class":"custom_device_module",
              "name":"Radiator actuator",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "software_version":"CM01 v1.0.0",
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "uuid":"module-1-uuid",
              "custom_device_id":1,
              "battery":44,
              "signal":75,
              "params_callback_function":"onModuleParamChanged",
              "command_callback_function":"onModuleCommand",
              "opening":5,
              "opening_minimum":5,
              "opening_maximum":100,
              "emergency_opening":50
           }
        },
        "Device.CustomDeviceModule.SmokeSensor":{
           "value":{
              "id":22,
              "type":"smoke_sensor",
              "variant":"generic",
              "class":"custom_device_module",
              "name":"Smoke sensor",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "software_version":"CM01 v1.0.0",
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "uuid":"module-1-uuid",
              "custom_device_id":1,
              "battery":44,
              "signal":75,
              "params_callback_function":"onModuleParamChanged",
              "command_callback_function":"onModuleCommand",
              "smoke_detected":true
           }
        },
        "Device.CustomDeviceModule.HeatMeter":{
           "value":{
              "id":23,
              "type":"heat_meter",
              "variant":"generic",
              "class":"custom_device_module",
              "name":"Heat meter",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "software_version":"HM1 v1.0.0",
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "uuid":"module-1-uuid",
              "custom_device_id":1,
              "battery":44,
              "signal":75,
              "params_callback_function":"onModuleParamChanged",
              "command_callback_function":"onModuleCommand",
              "current_water_flow":4139,
              "total_water_volume":3000000,
              "energy_consumed_total":100000,
              "flow_temperature":377,
              "return_temperature":355,
              "active_power":320000
           }
        },
        "Device.CustomDeviceModule.WaterMeter":{
           "value":{
              "id":23,
              "type":"water_meter",
              "variant":"generic",
              "class":"custom_device_module",
              "name":"Water meter",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "software_version":"WM1 v1.0.0",
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "uuid":"module-1-uuid",
              "custom_device_id":1,
              "battery":44,
              "signal":75,
              "params_callback_function":"onModuleParamChanged",
              "command_callback_function":"onModuleCommand",
              "current_water_flow":4139,
              "total_water_volume":3000000
           }
        },
        "Device.CustomDeviceModule.GasMeter":{
           "value":{
              "id":23,
              "type":"gas_meter",
              "variant":"generic",
              "class":"custom_device_module",
              "name":"Gas meter",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "software_version":"GM1 v1.0.0",
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "uuid":"module-1-uuid",
              "custom_device_id":1,
              "battery":44,
              "signal":75,
              "params_callback_function":"onModuleParamChanged",
              "command_callback_function":"onModuleCommand",
              "current_gas_flow":4139,
              "gas_consumed_total":3000000
           }
        },
        "Device.CustomDeviceModule.AirConditioner":{
           "value":{
              "id":24,
              "type":"air_conditioner",
              "variant":"generic",
              "class":"custom_device_module",
              "name":"Air Conditioner",
              "icon":"",
              "messages":[
                 
              ],
              "labels":[
                 
              ],
              "tags":[
                 
              ],
              "room_id":null,
              "software_version":"AC1 v1.0.0",
              "status":"online",
              "visible":true,
              "color":"#FF00FF",
              "voice_assistant_device_type":"not_set",
              "purpose":"general",
              "supervised_properties":[
                 
              ],
              "delayed_actions":[
                 
              ],
              "uuid":"module-1-uuid",
              "custom_device_id":1,
              "battery":44,
              "signal":75,
              "params_callback_function":"onModuleParamChanged",
              "command_callback_function":"onModuleCommand",
              "target_temperature":235,
              "target_temperature_minimum":50,
              "target_temperature_maximum":350,
              "room_temperature":220,
              "state":true,
              "available_modes":[
                 "off",
                 "automatic",
                 "cooling",
                 "heating",
                 "fan",
                 "drying",
                 "ion",
                 "eco"
              ],
              "mode":"cooling",
              "available_fan_speeds":[
                 "automatic",
                 "low",
                 "low_medium",
                 "medium",
                 "medium_high",
                 "high",
                 "turbo",
                 "silent"
              ],
              "fan_speed":"medium",
              "horizontal_swing_available_states":[
                 "stopped",
                 "full_swing",
                 "fixed_left",
                 "fixed_left_center",
                 "fixed_center",
                 "fixed_right_center",
                 "fixed_right"
              ],
              "horizontal_swing_state":"full_swing",
              "vertical_swing_available_states":[
                 "stopped",
                 "full_swing",
                 "fixed_top",
                 "fixed_top_center",
                 "fixed_center",
                 "fixed_bottom_center",
                 "fixed_bottom"
              ],
              "vertical_swing_state":"full_swing"
           }
        },
        "Parent.SystemModule":{
           "value":{
              "id":1,
              "status":"online",
              "uuid":"FFFFFFFFFFFFFFFFFFFFFF01",
              "version":"unknown",
              "firm":"TECH",
              "model":"unknown",
              "name":"System Module",
              "type":"generic",
              "class":"system_module_parent_device",
              "devices":[
                 
              ],
              "software_status":"up_to_date",
              "update_details":{
                 "available_version":"3.2.1",
                 "progress":46
              },
              "has_messages":false,
              "labels":[
                 
              ]
           }
        },
        "Parent.Tech":{
           "value":{
              "id":1,
              "status":"online",
              "address":"005D00433138510A33343938",
              "version":"1.0.0",
              "firm":"tech",
              "model":"L9",
              "name":"L9 Central",
              "type":"pellet_boiler",
              "class":"tech_parent_device",
              "devices":[
                 
              ],
              "software_status":"up_to_date",
              "update_details":{
                 "available_version":"3.2.1",
                 "progress":46
              },
              "has_messages":false,
              "labels":[
                 
              ]
           }
        },
        "Parent.WTP":{
           "value":{
              "id":2,
              "status":"online",
              "address":43425251,
              "version":"1.0.0",
              "firm":"Tech",
              "model":"PS-08",
              "name":"PS-08",
              "type":"generic",
              "class":"wtp_parent_device",
              "devices":[
                 
              ],
              "software_status":"up_to_date",
              "update_details":{
                 "available_version":"3.2.1",
                 "progress":46
              },
              "has_messages":false,
              "labels":[
                 
              ]
           }
        },
        "Parent.SBus":{
           "value":{
              "id":3,
              "status":"online",
              "address":43425251,
              "version":"1.0.0",
              "firm":"Tech",
              "model":"PS-08",
              "name":"PS-08",
              "type":"generic",
              "class":"sbus_parent_device",
              "devices":[
                 
              ],
              "software_status":"up_to_date",
              "update_details":{
                 "available_version":"3.2.1",
                 "progress":46
              },
              "has_messages":false,
              "labels":[
                 
              ]
           }
        },
        "Parent.SBus.SceneControlPanel":{
           "value":{
              "id":4,
              "status":"online",
              "address":43425251,
              "version":"1.0.0",
              "firm":"Tech",
              "model":"F-10",
              "name":"F-10",
              "type":"scene_control_panel",
              "class":"sbus_parent_device",
              "devices":[
                 
              ],
              "software_status":"up_to_date",
              "update_details":{
                 "available_version":"3.2.1",
                 "progress":46
              },
              "has_messages":false,
              "labels":[
                 "bistable_switch_support"
              ],
              "buttons":[
                 {
                    "id":1,
                    "type":"display_button",
                    "scene_id":3,
                    "text":"Kitchen lights",
                    "icons_set":1,
                    "icon":"lamp",
                    "mode":"momentary",
                    "labels":[
                       "bistable_switch_support"
                    ],
                    "state":false,
                    "associations":{
                       "output":{
                          "id":0,
                          "class":""
                       }
                    }
                 },
                 {
                    "id":2,
                    "type":"display_button",
                    "scene_id":2,
                    "text":"AC office",
                    "icons_set":1,
                    "icon":"air-conditioning",
                    "mode":"momentary",
                    "labels":[
                       "bistable_switch_support"
                    ],
                    "state":false,
                    "associations":{
                       "output":{
                          "id":0,
                          "class":""
                       }
                    }
                 },
                 {
                    "id":3,
                    "type":"display_button",
                    "scene_id":0,
                    "text":"",
                    "icons_set":1,
                    "icon":"",
                    "mode":"momentary",
                    "labels":[
                       "bistable_switch_support"
                    ],
                    "state":false,
                    "associations":{
                       "output":{
                          "id":0,
                          "class":""
                       }
                    }
                 },
                 {
                    "id":4,
                    "type":"display_button",
                    "scene_id":3,
                    "text":"Lights in living room",
                    "icons_set":1,
                    "icon":"lamp",
                    "mode":"bistable",
                    "labels":[
                       "bistable_switch_support"
                    ],
                    "state":false,
                    "associations":{
                       "output":{
                          "id":3,
                          "class":"wtp"
                       }
                    }
                 }
              ],
              "pages":[
                 {
                    "id":5,
                    "type":"display_page_with_buttons",
                    "buttons":[
                       1,
                       2
                    ],
                    "max_buttons":6
                 },
                 {
                    "id":6,
                    "type":"display_page_with_buttons",
                    "buttons":[
                       3,
                       4
                    ],
                    "max_buttons":6
                 },
                 {
                    "id":7,
                    "type":"display_page_with_buttons",
                    "buttons":[
                       
                    ],
                    "max_buttons":6
                 },
                 {
                    "id":0,
                    "type":"main_page"
                 },
                 {
                    "id":8,
                    "type":"weather_page"
                 },
                 {
                    "id":9,
                    "type":"sensors_page",
                    "sensor_widgets":[
                       11,
                       12
                    ],
                    "max_sensor_widgets":3
                 },
                 {
                    "id":10,
                    "type":"sensors_page",
                    "sensor_widgets":[
                       
                    ],
                    "max_sensor_widgets":3
                 },
                 {
                    "id":11,
                    "type":"thermostat_page",
                    "name_max_size":32,
                    "thermostat_local_endpoint_id":6,
                    "associations":{
                       "thermostat":{
                          "id":2,
                          "class":"virtual"
                       }
                    }
                 },
                 {
                    "id":13,
                    "type":"alarm_zones_page",
                    "alarm_zone_widgets":[
                       11,
                       12
                    ],
                    "max_alarm_zone_widgets":3,
                    "name":"Alarm zone page"
                 }
              ],
              "page_order":[
                 5,
                 0,
                 6
              ],
              "page_order_max_pages":4,
              "autolock":{
                 "enabled":true,
                 "pin_code":"Ab88",
                 "pin_code_length_minimum":3,
                 "pin_code_length_maximum":8,
                 "allowed_characters":"0123456789"
              },
              "allowed_icons":[
                 "air-conditioning",
                 "baby-boy",
                 "baby-girl",
                 "battery",
                 "bear",
                 "bin",
                 "blocks"
              ],
              "quick_page":7,
              "sensor_widgets":[
                 {
                    "id":11,
                    "type":"sensor_widget",
                    "associations":{
                       "sensor":{
                          "id":12,
                          "class":"wtp"
                       }
                    },
                    "icons_set":4,
                    "sensor_type":"aqSensorPm10p0"
                 },
                 {
                    "id":12,
                    "type":"sensor_widget",
                    "associations":{
                       "sensor":{
                          "id":2,
                          "class":"tech"
                       }
                    },
                    "icons_set":4,
                    "sensor_type":"temperatureSensor"
                 },
                 {
                    "id":13,
                    "type":"sensor_widget",
                    "associations":{
                       "sensor":{
                          "id":0,
                          "class":""
                       }
                    },
                    "icons_set":4,
                    "sensor_type":"unspecified"
                 }
              ],
              "alarm_zone_widgets":[
                 {
                    "id":11,
                    "type":"alarm_zone_widget",
                    "associations":{
                       "alarm_zone":{
                          "id":12,
                          "class":"wtp"
                       }
                    },
                    "local_endpoint_id":123
                 },
                 {
                    "id":12,
                    "type":"alarm_zone_widget",
                    "associations":{
                       "alarm_zone":{
                          "id":2,
                          "class":"tech"
                       }
                    },
                    "local_endpoint_id":133
                 }
              ],
              "user_menu_lock":{
                 "enabled":true,
                 "pin_code":"1234",
                 "pin_code_length_minimum":4,
                 "pin_code_length_maximum":4,
                 "allowed_characters":"0123456789"
              },
              "backlight":{
                 "available_modes":[
                    "automatic",
                    "fixed",
                    "day_night"
                 ],
                 "mode":"automatic",
                 "fixed_brightness":85
              }
           }
        },
        "Parent.Lora":{
           "value":{
              "id":4,
              "status":"online",
              "address":18724661,
              "version":"1.0.0",
              "firm":"Tech",
              "model":"PS-08",
              "name":"PS-08",
              "type":"generic",
              "class":"lora_parent_device",
              "devices":[
                 
              ],
              "software_status":"up_to_date",
              "update_details":{
                 "available_version":"3.2.1",
                 "progress":46
              },
              "has_messages":false,
              "labels":[
                 
              ]
           }
        },
        "Parent.SBus.EHI01":{
           "value":{
              "id":5,
              "status":"online",
              "address":43425251,
              "version":"1.0.0",
              "firm":"Tech",
              "model":"EHI-01",
              "name":"EHI-01",
              "type":"ehi_01_valve",
              "class":"sbus_parent_device",
              "devices":[
                 
              ],
              "software_status":"up_to_date",
              "update_details":{
                 "available_version":"3.2.1",
                 "progress":46
              },
              "has_messages":false,
              "labels":[
                 
              ],
              "heating_source_sensor":{
                 "associations":{
                    "temperature_sensor":{
                       "id":4,
                       "class":"wtp"
                    }
                 },
                 "local_endpoint_id":345,
                 "sensor_type":"heating_source_sensor"
              },
              "outdoor_sensor":{
                 "associations":{
                    "temperature_sensor":{
                       "id":5,
                       "class":"wtp"
                    }
                 },
                 "local_endpoint_id":346,
                 "sensor_type":"outdoor_sensor"
              },
              "return_sensor":{
                 "associations":{
                    "temperature_sensor":{
                       "id":6,
                       "class":"wtp"
                    }
                 },
                 "local_endpoint_id":347,
                 "sensor_type":"installation_return_sensor"
              }
           }
        },
        "Parent.SBus.FanCoil":{
           "value":{
              "id":5,
              "status":"online",
              "address":43425251,
              "version":"1.0.0",
              "firm":"Tech",
              "model":"FC-01",
              "name":"FC-01",
              "type":"fan_coil",
              "class":"sbus_parent_device",
              "devices":[
                 
              ],
              "software_status":"up_to_date",
              "update_details":{
                 "available_version":"3.2.1",
                 "progress":46
              },
              "has_messages":false,
              "labels":[
                 
              ],
              "room_temperature_sensor":{
                 "associations":{
                    "temperature_sensor":{
                       "id":4,
                       "class":"wtp"
                    }
                 },
                 "local_endpoint_id":343,
                 "sensor_type":"room_temperature_sensor"
              }
           }
        },
        "Parent.SBus.ParentDeviceWithMbus":{
           "value":{
              "id":5,
              "status":"online",
              "address":43425251,
              "version":"1.0.0",
              "firm":"Tech",
              "model":"KW-15m",
              "name":"KW-15m",
              "type":"inputs_card_with_mbus",
              "class":"sbus_parent_device",
              "devices":[
                 
              ],
              "software_status":"up_to_date",
              "update_details":{
                 "available_version":"3.2.1",
                 "progress":46
              },
              "has_messages":false,
              "labels":[
                 
              ],
              "mbus_master":{
                 "devices":[
                    {
                       "primary_address":12,
                       "secondary_address":13
                    }
                 ]
              }
           }
        },
        "Parent.AlarmSystem.Satel":{
           "value":{
              "id":5,
              "status":"online",
              "version":"1.0.0",
              "firm":"Satel",
              "model":"Integra-32 v1.2.3",
              "name":"Integra",
              "type":"satel_alarm_system",
              "class":"alarm_system_parent",
              "devices":[
                 
              ],
              "software_status":"up_to_date",
              "update_details":{
                 "available_version":"3.2.1",
                 "progress":46
              },
              "has_messages":false,
              "labels":[
                 
              ],
              "ip_address":"192.168.1.2",
              "port":7094,
              "module_version":"v2.09"
           }
        },
        "Modbus.Specification.Tcp":{
           "value":{
              "id":1,
              "name":"EcoGeo",
              "type":"heat_pump",
              "firm":"EcoForest",
              "firm_code":"eco_forest",
              "version":"EcoGeo v1.x",
              "config":{
                 "type":"modbus_tcp",
                 "port":502,
                 "device_id":0
              },
              "capabilities":[
                 
              ]
           }
        },
        "Modbus.Specification.Tcp.HuaweiSUN2000":{
           "value":{
              "id":18,
              "name":"HuaweiSUN2000",
              "type":"inverter",
              "firm":"Huawei",
              "firm_code":"huawei",
              "version":"Huawei SUN2000 v1.x",
              "config":{
                 "type":"modbus_tcp",
                 "port":502,
                 "device_id":1
              },
              "capabilities":[
                 "has_battery"
              ]
           }
        },
        "Modbus.Specification.Rtu":{
           "value":{
              "id":2,
              "name":"EcoAir",
              "type":"heat_pump",
              "firm":"EcoForest",
              "firm_code":"eco_forest",
              "version":"EcoAir v1.x",
              "config":{
                 "type":"modbus_rtu",
                 "slave_address":1,
                 "baud_rate":19200,
                 "parity":"even",
                 "stop_bits":"one"
              },
              "capabilities":[
                 
              ]
           }
        },
        "Parent.Modbus.Tcp":{
           "value":{
              "id":3,
              "status":"online",
              "version":"EcoGeo v1.x",
              "name":"My Heat Pump",
              "type":"heat_pump",
              "firm":"EcoForest",
              "model":"EcoGeo",
              "class":"modbus_parent_device",
              "devices":[
                 
              ],
              "software_status":"up_to_date",
              "update_details":{
                 "available_version":"3.2.1",
                 "progress":46
              },
              "has_messages":false,
              "labels":[
                 
              ],
              "config":{
                 "type":"modbus_tcp",
                 "ip_address":"10.0.0.1",
                 "port":502,
                 "device_id":0
              }
           }
        },
        "Parent.Modbus.Rtu":{
           "value":{
              "id":4,
              "status":"online",
              "version":"EcoAir v1.x",
              "name":"My 2nd Heat Pump",
              "type":"heat_pump",
              "firm":"EcoForest",
              "model":"EcoAir",
              "class":"modbus_parent_device",
              "devices":[
                 
              ],
              "software_status":"up_to_date",
              "update_details":{
                 "available_version":"3.2.1",
                 "progress":46
              },
              "has_messages":false,
              "labels":[
                 
              ],
              "config":{
                 "type":"modbus_rtu",
                 "slave_address":1,
                 "baud_rate":19200,
                 "parity":"even",
                 "stop_bits":"one",
                 "transceiver_uuid":"FFFFFFFFFFFFFFFFFFFFFF03",
                 "associations":{
                    "transceiver":{
                       "id":11,
                       "class":"system_module"
                    }
                 }
              }
           }
        },
        "Parent.Modbus.Request.Tcp":{
           "value":{
              "specification":1,
              "name":"My Heat Pump",
              "config":{
                 "type":"modbus_tcp",
                 "ip_address":"10.0.0.1",
                 "port":502,
                 "device_id":0
              }
           }
        },
        "Parent.Modbus.Request.Rtu":{
           "value":{
              "specification":2,
              "name":"My 2nd Heat Pump",
              "config":{
                 "type":"modbus_rtu",
                 "slave_address":1,
                 "baud_rate":19200,
                 "parity":"even",
                 "stop_bits":"one",
                 "associations":{
                    "transceiver":{
                       "id":11,
                       "class":"system_module"
                    }
                 }
              }
           }
        },
        "Parent.Modbus.Request.Tcp.HuaweiSUN2000":{
           "value":{
              "specification":18,
              "name":"My Inverter",
              "config":{
                 "type":"modbus_tcp",
                 "ip_address":"10.0.0.1",
                 "port":502,
                 "device_id":0
              },
              "capabilities":{
                 "has_battery":false
              }
           }
        },
        "Modbus.TcpConfig":{
           "value":{
              "type":"modbus_tcp",
              "port":502,
              "device_id":0
           }
        },
        "Parent.Modbus.TcpConfig":{
           "value":{
              "type":"modbus_tcp",
              "ip_address":"10.0.0.1",
              "port":502,
              "device_id":0
           }
        },
        "Modbus.RtuConfig":{
           "value":{
              "type":"modbus_rtu",
              "slave_address":1,
              "baud_rate":19200,
              "parity":"even",
              "stop_bits":"one"
           }
        },
        "Parent.Modbus.RtuConfig":{
           "value":{
              "type":"modbus_rtu",
              "slave_address":1,
              "baud_rate":19200,
              "parity":"even",
              "stop_bits":"one",
              "transceiver_uuid":"FFFFFFFFFFFFFFFFFFFFFF03",
              "associations":{
                 "transceiver":{
                    "id":11,
                    "class":"system_module"
                 }
              }
           }
        },
        "LuaVariable.Boolean":{
           "value":{
              "id":1,
              "type":"bool",
              "name":"My lua variable",
              "description":"",
              "value":false,
              "default_value":false
           }
        },
        "LuaVariable.Integer":{
           "value":{
              "id":2,
              "type":"int",
              "name":"My lua variable",
              "description":"",
              "value":12315552,
              "default_value":0
           }
        },
        "LuaVariable.String":{
           "value":{
              "id":3,
              "type":"string",
              "name":"My lua variable",
              "description":"",
              "value":"This is my string value",
              "default_value":""
           }
        },
        "LuaVariable.Table":{
           "value":{
              "id":4,
              "type":"table",
              "name":"My lua variable",
              "description":"",
              "value":{
                 "key":"value",
                 "another_key":"another_value"
              },
              "default_value":{
                 "key":"value",
                 "another_key":"another_value"
              }
           }
        },
        "LuaTimer":{
           "value":{
              "id":5,
              "unit":"seconds",
              "name":"My Timer",
              "description":""
           }
        },
        "LuaExampleWithoutCode":{
           "value":{
              "id":1,
              "name":{
                 "id":10784,
                 "text":"Two-way switch"
              }
           }
        },
        "LuaExample":{
           "value":{
              "id":1,
              "name":{
                 "id":10784,
                 "text":"Two-way switch"
              },
              "code":"switches={57,58}\nchangedSwitch = 0\nfor _, s in ipairs(switches) do\n  if wtp[s]:changedValue(\"state\") then\n    changedSwitch = s\n    break\n  end\nend\n\nif changedSwitch ~= 0 then\n  for _, s in ipairs(switches) do\n    if s ~= changedSwitch then\n      wtp[s]:setValue(\"state\", wtp[changedSwitch]:getValue(\"state\"))\n    end\n  end\nend"
           }
        },
        "LuaHttpClient":{
           "value":{
              "id":6,
              "name":"My server request",
              "url":"https://myserver.com",
              "body":"{\"update\":\"name\"}",
              "headers":{
                 "Content-Type":"application/json",
                 "Accept-Language":"pl,en-US;q=0.7,en;q=0.3"
              },
              "query_params":{
                 "parameter1":"Value-1",
                 "parameter2":"Value-2"
              }
           }
        },
        "LuaModbusClient":{
           "value":{
              "id":7,
              "name":"My Heat Pump client",
              "type":"modbus_rtu",
              "slave_address":1,
              "baud_rate":115200,
              "parity":"none",
              "stop_bits":"one",
              "transceiver_uuid":"FFFFFFFFFFFFFFFFFFFFFF03",
              "associations":{
                 "transceiver":{
                    "id":11,
                    "class":"system_module"
                 }
              }
           }
        },
        "LuaModbusTcpClient":{
           "value":{
              "id":8,
              "name":"My Heat Pump client",
              "type":"modbus_tcp",
              "ip_address":"192.168.0.100",
              "port":502,
              "device_id":0
           }
        },
        "LuaMqttClient":{
           "value":{
              "id":6,
              "name":"My client",
              "broker":"my.broker.com",
              "port":1883,
              "client_id":"my-client",
              "username":"user",
              "password":"H@CK3RM@N",
              "tls":{
                 "enabled":true,
                 "certificate":"-----BEGIN CERTIFICATE-----\\nRGlkIHlvdSBzZXJpb3VzbHkgdGhpbmsgdGhhdCB0aGVyZSB3b3VsZCBiZSBhIHJlYWwgY2VydGlmaWNhdGUgaGVyZT8gOi0p\\n-----END CERTIFICATE-----",
                 "private_key":"-----BEGIN PRIVATE KEY-----\\nRGlkIHlvdSBzZXJpb3VzbHkgdGhpbmsgdGhhdCB0aGVyZSB3b3VsZCBiZSBhIHJlYWwgcHJpdmF0ZSBrZXkgaGVyZT8gOi0p\\n-----END PRIVATE KEY-----",
                 "ca_certificate":"-----BEGIN CERTIFICATE-----\\nRGlkIHlvdSBzZXJpb3VzbHkgdGhpbmsgdGhhdCB0aGVyZSB3b3VsZCBiZSBhIHJlYWwgY2VydGlmaWNhdGUgaGVyZT8gOi0p\\n-----END CERTIFICATE-----"
              },
              "last_will":{
                 "topic":"my/last/will",
                 "payload":"I am gone",
                 "qos":1,
                 "retain":true
              },
              "subscriptions":[
                 {
                    "topic":"first_topic",
                    "qos":0
                 },
                 {
                    "topic":"first_level_wildcard/+/data",
                    "qos":1
                 },
                 {
                    "topic":"multi_level_wildcard/#",
                    "qos":2
                 }
              ]
           }
        },
        "LuaWsClient":{
           "value":{
              "id":6,
              "name":"My client",
              "url":"ws://my.server.com",
              "headers":{
                 "Content-Type":"application/json",
                 "Accept-Language":"pl,en-US;q=0.7,en;q=0.3"
              },
              "query_params":{
                 "parameter1":"Value-1",
                 "parameter2":"Value-2"
              }
           }
        },
        "Weather":{
           "value":{
              "city_name":"Warszawa",
              "sunrise":1637907120,
              "sunset":1637938020,
              "current":{
                 "cloud_coverage":42,
                 "feels_like":245,
                 "humidity":66,
                 "pressure":1024,
                 "rain":31,
                 "snow":3,
                 "temperature":233,
                 "timestamp":1629357763,
                 "weather":{
                    "description":"clear sky",
                    "id":800,
                    "main":"Clear"
                 },
                 "wind":{
                    "degrees":120,
                    "gust":41,
                    "speed":10
                 }
              },
              "daily":[
                 {
                    "cloud_coverage":100,
                    "feels_like":{
                       "day":182,
                       "evening":204,
                       "morning":155,
                       "night":159
                    },
                    "humidity":67,
                    "pressure":1017,
                    "rain":14,
                    "snow":0,
                    "temperature":{
                       "day":185,
                       "evening":205,
                       "max":221,
                       "min":155,
                       "morning":158,
                       "night":161
                    },
                    "timestamp":1629453600,
                    "weather":{
                       "description":"light rain",
                       "id":500,
                       "main":"Rain"
                    },
                    "wind":{
                       "degrees":202,
                       "gust":43,
                       "speed":26
                    }
                 },
                 {
                    "cloud_coverage":88,
                    "feels_like":{
                       "day":192,
                       "evening":224,
                       "morning":175,
                       "night":179
                    },
                    "humidity":47,
                    "pressure":1001,
                    "rain":0,
                    "snow":0,
                    "temperature":{
                       "day":202,
                       "evening":199,
                       "max":210,
                       "min":161,
                       "morning":165,
                       "night":163
                    },
                    "timestamp":1629540000,
                    "weather":{
                       "description":"scattered clouds",
                       "id":802,
                       "main":"Clouds"
                    },
                    "wind":{
                       "degrees":115,
                       "gust":85,
                       "speed":37
                    }
                 },
                 {
                    "cloud_coverage":100,
                    "feels_like":{
                       "day":114,
                       "evening":141,
                       "morning":134,
                       "night":93
                    },
                    "humidity":93,
                    "pressure":1021,
                    "rain":71,
                    "snow":0,
                    "temperature":{
                       "day":118,
                       "evening":148,
                       "max":148,
                       "min":92,
                       "morning":134,
                       "night":92
                    },
                    "timestamp":1629799200,
                    "weather":{
                       "description":"moderate rain",
                       "id":501,
                       "main":"Rain"
                    },
                    "wind":{
                       "degrees":354,
                       "gust":101,
                       "speed":64
                    }
                 },
                 {
                    "cloud_coverage":0,
                    "feels_like":{
                       "day":129,
                       "evening":153,
                       "morning":59,
                       "night":90
                    },
                    "humidity":58,
                    "pressure":1023,
                    "rain":0,
                    "snow":0,
                    "temperature":{
                       "day":139,
                       "evening":162,
                       "max":162,
                       "min":70,
                       "morning":70,
                       "night":100
                    },
                    "timestamp":1629885600,
                    "weather":{
                       "description":"clear sky",
                       "id":800,
                       "main":"Clear"
                    },
                    "wind":{
                       "degrees":48,
                       "gust":31,
                       "speed":26
                    }
                 }
              ],
              "hourly":[
                 {
                    "cloud_coverage":42,
                    "feels_like":245,
                    "humidity":66,
                    "pressure":1024,
                    "rain":31,
                    "snow":3,
                    "temperature":233,
                    "timestamp":1629356400,
                    "weather":{
                       "description":"clear sky",
                       "id":800,
                       "main":"Clear"
                    },
                    "wind":{
                       "degrees":120,
                       "gust":41,
                       "speed":10
                    },
                    "precipitation_probability":4
                 },
                 {
                    "cloud_coverage":12,
                    "feels_like":263,
                    "humidity":66,
                    "pressure":1000,
                    "rain":0,
                    "snow":0,
                    "temperature":243,
                    "timestamp":1629360000,
                    "weather":{
                       "description":"clear sky",
                       "id":800,
                       "main":"Clear"
                    },
                    "wind":{
                       "degrees":120,
                       "gust":11,
                       "speed":5
                    },
                    "precipitation_probability":0
                 },
                 {
                    "cloud_coverage":77,
                    "feels_like":223,
                    "humidity":66,
                    "pressure":1000,
                    "rain":66,
                    "snow":0,
                    "temperature":213,
                    "timestamp":1629363600,
                    "weather":{
                       "description":"shower rain",
                       "id":521,
                       "main":"Rain"
                    },
                    "wind":{
                       "degrees":120,
                       "gust":11,
                       "speed":5
                    },
                    "precipitation_probability":74
                 }
              ]
           }
        },
        "Automation.Model":{
           "value":{
              "id":1,
              "name":"My automation",
              "icon":"",
              "enabled":true,
              "type":"code",
              "banned":true,
              "ban_reason":"Syntax error on line 6.",
              "error_counter":2,
              "max_errors":2,
              "max_execution_time":30,
              "lua":"tech[82]:setValue(\"state\", false)",
              "schema":"{\"json\": \"schema\", \"goes\": \"here\"}",
              "dir_id":1,
              "tags":[
                 "lights",
                 "living room"
              ],
              "delayed_actions":[
                 
              ]
           }
        },
        "Scene.Model":{
           "value":{
              "id":1,
              "name":"My scene",
              "icon":"",
              "enabled":true,
              "type":"blockly",
              "banned":false,
              "ban_reason":" ",
              "error_counter":4,
              "max_errors":5,
              "max_execution_time":15,
              "lua":"tech[22]:setValue(\"state\", false)",
              "schema":"{\"json\": \"schema\", \"goes\": \"here\"}",
              "labels":[
                 "in_room"
              ],
              "room_id":1,
              "dir_id":1,
              "tags":[
                 "lights",
                 "living room"
              ],
              "delayed_actions":[
                 
              ]
           }
        },
        "Directory.Model":{
           "value":{
              "id":1,
              "name":"My Directory",
              "type":"automations",
              "is_root":false,
              "parent_id":1,
              "items":[
                 1,
                 2,
                 3
              ],
              "children":[
                 2,
                 3,
                 4
              ]
           }
        },
        "Schedule.Thermal":{
           "value":{
              "id":1,
              "type":"thermal",
              "name":"My weekly schedule",
              "icon":"",
              "current_target_temperature":500,
              "fallback":200,
              "associations":{
                 "thermostats":[
                    {
                       "id":22,
                       "class":"virtual"
                    },
                    {
                       "id":260,
                       "class":"virtual"
                    }
                 ],
                 "heat_pump_managers":[
                    {
                       "id":5,
                       "class":"virtual"
                    },
                    {
                       "id":33,
                       "class":"virtual"
                    }
                 ]
              },
              "monday":[
                 {
                    "start":360,
                    "end":420,
                    "target_temperature":250
                 },
                 {
                    "start":840,
                    "end":1260,
                    "target_temperature":215
                 }
              ],
              "tuesday":[
                 {
                    "start":360,
                    "end":420,
                    "target_temperature":215
                 },
                 {
                    "start":840,
                    "end":1260,
                    "target_temperature":250
                 }
              ],
              "wednesday":[
                 {
                    "start":360,
                    "end":420,
                    "target_temperature":260
                 },
                 {
                    "start":840,
                    "end":1260,
                    "target_temperature":210
                 }
              ],
              "thursday":[
                 {
                    "start":360,
                    "end":420,
                    "target_temperature":250
                 },
                 {
                    "start":840,
                    "end":1260,
                    "target_temperature":250
                 }
              ],
              "friday":[
                 {
                    "start":360,
                    "end":420,
                    "target_temperature":100
                 },
                 {
                    "start":840,
                    "end":1260,
                    "target_temperature":100
                 }
              ],
              "saturday":[
                 {
                    "start":360,
                    "end":420,
                    "target_temperature":250
                 },
                 {
                    "start":840,
                    "end":1260,
                    "target_temperature":250
                 }
              ],
              "sunday":[
                 {
                    "start":360,
                    "end":420,
                    "target_temperature":300
                 },
                 {
                    "start":840,
                    "end":1260,
                    "target_temperature":250
                 }
              ]
           }
        },
        "Schedule.TemperatureCurve":{
           "value":{
              "id":1,
              "type":"temperature_curve",
              "name":"My heat curve",
              "icon":"",
              "current_target_temperature":500,
              "outdoor_temperature_override":null,
              "fallback":200,
              "associations":{
                 "heat_buffers":[
                    {
                       "id":1,
                       "class":"tech"
                    },
                    {
                       "id":2,
                       "class":"tech"
                    }
                 ],
                 "valves":[
                    {
                       "id":3,
                       "class":"tech"
                    },
                    {
                       "id":4,
                       "class":"tech"
                    }
                 ],
                 "pellet_boilers":[
                    {
                       "id":5,
                       "class":"tech"
                    },
                    {
                       "id":6,
                       "class":"tech"
                    }
                 ],
                 "domestic_hot_waters":[
                    {
                       "id":7,
                       "class":"tech"
                    },
                    {
                       "id":8,
                       "class":"tech"
                    }
                 ],
                 "temperature_sensors":{
                    "id":9,
                    "class":"tech"
                 }
              },
              "points":[
                 {
                    "outdoor_temperature":-200,
                    "target_temperature":600
                 },
                 {
                    "outdoor_temperature":-100,
                    "target_temperature":500
                 },
                 {
                    "outdoor_temperature":0,
                    "target_temperature":400
                 },
                 {
                    "outdoor_temperature":100,
                    "target_temperature":300
                 }
              ]
           }
        },
        "Schedule.RelayControl":{
           "value":{
              "id":1,
              "type":"relay_control",
              "name":"My weekly schedule",
              "icon":"",
              "control_policy":"continuous",
              "associations":{
                 "relays":[
                    {
                       "id":22,
                       "class":"wtp"
                    },
                    {
                       "id":260,
                       "class":"wtp"
                    }
                 ]
              },
              "monday":{
                 "enabled":true,
                 "configuration":[
                    {
                       "start":360,
                       "end":420,
                       "state":false
                    },
                    {
                       "start":840,
                       "end":1260,
                       "state":true
                    }
                 ]
              },
              "tuesday":{
                 "enabled":true,
                 "configuration":[
                    {
                       "start":360,
                       "end":420,
                       "state":false
                    },
                    {
                       "start":840,
                       "end":1260,
                       "state":true
                    }
                 ]
              },
              "wednesday":{
                 "enabled":true,
                 "configuration":[
                    {
                       "start":360,
                       "end":420,
                       "state":false
                    },
                    {
                       "start":840,
                       "end":1260,
                       "state":true
                    }
                 ]
              },
              "thursday":{
                 "enabled":true,
                 "configuration":[
                    {
                       "start":360,
                       "end":420,
                       "state":false
                    },
                    {
                       "start":840,
                       "end":1260,
                       "state":true
                    }
                 ]
              },
              "friday":{
                 "enabled":true,
                 "configuration":[
                    {
                       "start":360,
                       "end":420,
                       "state":false
                    },
                    {
                       "start":840,
                       "end":1260,
                       "state":true
                    }
                 ]
              },
              "saturday":{
                 "enabled":true,
                 "configuration":[
                    {
                       "start":360,
                       "end":420,
                       "state":false
                    },
                    {
                       "start":840,
                       "end":1260,
                       "state":true
                    }
                 ]
              },
              "sunday":{
                 "enabled":true,
                 "configuration":[
                    {
                       "start":360,
                       "end":420,
                       "state":false
                    },
                    {
                       "start":840,
                       "end":1260,
                       "state":true
                    }
                 ]
              }
           }
        },
        "LuaLog":{
           "value":{
              "type":"log",
              "details":"main",
              "payload":{
                 "timestamp":1634308688340,
                 "tag":"ERROR",
                 "line":"syntax error: scene_19.lua:12: syntax error near 'a'"
              }
           }
        },
        "Floor.Model":{
           "value":{
              "id":1,
              "name":"Ground floor",
              "rooms":[
                 1,
                 2,
                 3
              ]
           }
        },
        "Room.Model":{
           "value":{
              "id":1,
              "name":"My room",
              "icon":"",
              "color":"blue",
              "scenes":[
                 1,
                 3,
                 6
              ],
              "devices":[
                 {
                    "class":"wtp",
                    "id":1
                 },
                 {
                    "class":"tech",
                    "id":2
                 },
                 {
                    "class":"wtp",
                    "id":777
                 }
              ],
              "has_error":false,
              "has_warning":false,
              "is_heating":false,
              "is_cooling":false,
              "labels":[
                 "on_floor"
              ],
              "floor_id":1,
              "is_window_open":false,
              "heating_configuration_finished":true,
              "climate_control_status":{
                 "issues":[
                    "thermostat_without_temperature_sensor"
                 ],
                 "skipped":[
                    "thermostat_without_temperature_sensor"
                 ]
              },
              "is_light_on":true
           }
        },
        "PartialUpdateExample":{
           "description":"Only `name` will be changed. Rest of object values remain unmodified.",
           "value":{
              "name":"New name"
           }
        },
        "LogSettings":{
           "value":{
              "log":{
                 "INFO":true,
                 "STATUS":false,
                 "ERROR":true,
                 "LUA_SCRIPT":true
              },
              "debug":{
                 "STANDARD_DEBUG":false,
                 "LUA_DEBUG":false,
                 "COAP_DEBUG":false,
                 "EVENTBUS_DEBUG":false,
                 "REST_DEBUG":false,
                 "WTP_DEVICE_DEBUG":false,
                 "WTP_MANAGER_DEBUG":false,
                 "TECH_DEVICE_DEBUG":false,
                 "VIRTUAL_DEVICE_DEBUG":false,
                 "TECH_DEVICE_UPDATE_DEBUG":false,
                 "SYSMODULE_DEVICE_DEBUG":false,
                 "DB_QUERY_DEBUG":false,
                 "STATISTICS_DEBUG":false,
                 "TDFP_DEBUG":false,
                 "DBG_SBUS":false,
                 "DBG_MODBUS":false,
                 "DBG_SBUS_APP":false,
                 "LORA_DEVICE_DEBUG":false
              }
           }
        },
        "LocalizationSettings":{
           "value":{
              "latitude":50.04909270347284,
              "longitude":19.929825012526262
           }
        },
        "WeatherSettings":{
           "value":{
              "enabled":false,
              "associations":{
                 "outdoor_sensor":{
                    "id":1,
                    "class":"wtp"
                 }
              },
              "access_type":"api"
           }
        },
        "BuildingSettings":{
           "value":{
              "building_type":"house"
           }
        },
        "EnergyCenter.Associations":{
           "value":{
              "grid":{
                 "id":1,
                 "class":"modbus"
              },
              "pv":{
                 "id":4,
                 "class":"modbus"
              },
              "battery":{
                 "id":99,
                 "class":"modbus"
              }
           }
        },
        "EnergyCenter.FlowMonitor":{
           "value":{
              "summary":{
                 "building":{
                    "available":true,
                    "value":0
                 },
                 "grid":{
                    "available":true,
                    "value":0
                 },
                 "pv":{
                    "available":true,
                    "value":0
                 },
                 "battery":{
                    "available":true,
                    "value":0,
                    "state_of_charge":{
                       "available":true,
                       "value":50
                    }
                 }
              },
              "flow":{
                 "pv_to_battery":{
                    "value":0
                 },
                 "pv_to_building":{
                    "value":0
                 },
                 "pv_to_grid":{
                    "value":0
                 },
                 "grid_to_battery":{
                    "value":0
                 },
                 "grid_to_building":{
                    "value":0
                 },
                 "battery_to_building":{
                    "value":0
                 }
              },
              "building_consumption_details":{
                 "rest":0,
                 "by_devices":[
                    {
                       "id":3,
                       "class":"tech",
                       "value":0
                    },
                    {
                       "id":4,
                       "class":"wtp",
                       "value":0
                    }
                 ]
              },
              "voltage":{
                 "grid":{
                    "phases":[
                       320000,
                       12233
                    ],
                    "max":320000
                 }
              }
           }
        },
        "EnergyCenter.EnergyStorage":{
           "value":{
              "available":true,
              "status":"charging",
              "power":1300,
              "energy_charged_today":15000000,
              "energy_discharged_today":23000,
              "state_of_charge":{
                 "available":true,
                 "value":50
              }
           }
        },
        "EnergyCenter.EnergyConsumption":{
           "value":{
              "available":true,
              "total":{
                 "total_consumption":100000,
                 "house_consumption":50000,
                 "electrical_outlets_consumption":50000,
                 "car_chargers_consumption":50000
              },
              "today":{
                 "total_consumption":100000,
                 "house_consumption":50000,
                 "electrical_outlets_consumption":50000,
                 "car_chargers_consumption":50000
              }
           }
        },
        "EnergyCenter.EnergyProduction":{
           "value":{
              "available":true,
              "total":{
                 "autoconsumption":100000,
                 "energy_storage":50000,
                 "grid_export":50000
              },
              "today":{
                 "autoconsumption":10000,
                 "energy_storage":5000,
                 "grid_export":5000
              }
           }
        },
        "ModbusSettings":{
           "value":{
              "cache_refresh":60,
              "request_delay":20,
              "keep_cached":3600,
              "tcp_connection_timeout":300
           }
        },
        "FloorsSettings":{
           "value":{
              "visible":true
           }
        },
        "ModbusParentDeviceDiagnosticInfo":{
           "value":{
              "id":1,
              "name":"My EcoAir Heat Pump",
              "firm":"EcoForest",
              "model":"EcoAir",
              "type":"heat_pump",
              "config":{
                 "type":"modbus_rtu",
                 "slave_address":1,
                 "baud_rate":19200,
                 "parity":"even",
                 "stop_bits":"one"
              },
              "devices":[
                 {
                    "id":1,
                    "name":"My EcoAir Heat Pump",
                    "type":"heat_pump",
                    "parameters_status":{
                       "work_mode":{
                          "read_registers":[
                             {
                                "address":5063,
                                "status":"OK",
                                "type":"HOLDING_REGISTERS",
                                "raw_value":1
                             }
                          ],
                          "write_registers":[
                             {
                                "address":5063,
                                "status":"OK",
                                "type":"HOLDING_REGISTERS",
                                "multi_write":false
                             }
                          ]
                       },
                       "running_hours":{
                          "read_registers":[
                             {
                                "address":5010,
                                "status":"OK",
                                "type":"HOLDING_REGISTERS",
                                "raw_value":1
                             },
                             {
                                "address":5011,
                                "status":"OK",
                                "type":"ILLEGAL_DATA_ADDRESS",
                                "raw_value":1
                             }
                          ],
                          "write_registers":[
                             
                          ]
                       }
                    }
                 }
              ]
           }
        },
        "Response.NotModified":{
           "description":"Returned when user tried to update object supplying same data as current values.",
           "value":{
              "error":{
                 "message":{
                    "text":"Object not modified.",
                    "id":7204
                 }
              }
           }
        },
        "Response.RequestParseError":{
           "description":"Returned when e-home-main process received invalid Json Request structure.",
           "value":{
              "error":{
                 "message":{
                    "text":"Request data parse error.",
                    "id":7205
                 }
              }
           }
        },
        "Response.GoRequestParseError":{
           "description":"Returned when e-home-go process failed to parse incoming json request.",
           "value":{
              "error":{
                 "message":{
                    "text":"Request data parse error.",
                    "id":7205
                 }
              }
           }
        },
        "Response.EmptyDataError":{
           "description":"Returned when request requires content but user didn`t supply data.",
           "value":{
              "error":{
                 "message":{
                    "text":"Data cannot be empty.",
                    "id":7206
                 }
              }
           }
        },
        "Response.InvalidObjectIdSupplied":{
           "description":"Returned when request url contains invalid object id (eg. non integer or out of int64 range).",
           "value":{
              "error":{
                 "message":{
                    "text":"Invalid object ID.",
                    "id":7207
                 }
              }
           }
        },
        "Response.InvalidObjectTypeSupplied":{
           "description":"Returned when request contains invalid object type string.",
           "value":{
              "error":{
                 "message":{
                    "text":"Invalid object type.",
                    "id":7208
                 }
              }
           }
        },
        "Response.QueryError":{
           "description":"Returned when request to influx failed.",
           "value":{
              "error":{
                 "message":{
                    "text":"Error message goes here.",
                    "id":7208
                 }
              }
           }
        },
        "Response.Unauthorized":{
           "description":"Returned when authorization token (header) is invalid or expired.",
           "value":{
              "error":{
                 "message":{
                    "text":"Unauthorized.",
                    "id":6462
                 }
              }
           }
        },
        "Response.RouteNotFound":{
           "description":"Returned when route is not implemented.",
           "value":{
              "error":{
                 "message":{
                    "text":"Path not found.",
                    "id":7212
                 }
              }
           }
        },
        "Response.ObjectNotFound":{
           "description":"Returned when specific object was not found.",
           "value":{
              "error":{
                 "message":{
                    "text":"Object not found.",
                    "id":7211
                 }
              }
           }
        },
        "Response.LuaHttpServerPathNotFound":{
           "description":"Returned when specific route hook for path was not found in lua http server.",
           "value":{
              "error":{
                 "message":{
                    "text":"No results.",
                    "id":1623
                 }
              }
           }
        },
        "Response.MethodNotAllowed":{
           "description":"Returned when route method is not implemented.",
           "value":{
              "error":{
                 "message":{
                    "text":"Method not allowed.",
                    "id":7213
                 }
              }
           }
        },
        "Response.RequestTimeout":{
           "description":"Returned when request timeout happened. eg. e-home-main process works incorrectly or processing took more than 1 second.",
           "value":{
              "error":{
                 "message":{
                    "text":"Request timeout exceeded",
                    "id":7334
                 }
              }
           }
        },
        "Response.RegistrationAlreadyInProgress":{
           "description":"Returned when registration is already in progress and cannot be enabled again currently.",
           "value":{
              "error":{
                 "message":{
                    "text":"Registration already in progress.",
                    "id":7214
                 }
              }
           }
        },
        "Response.IdentificationAlreadyInProgress":{
           "description":"Returned when devices identification is already in progress and cannot be enabled again currently.",
           "value":{
              "error":{
                 "message":{
                    "text":"Device identification is in progress",
                    "id":10615
                 }
              }
           }
        },
        "Response.DeviceNotOffline":{
           "description":"Returned when device cannot be removed because it is not in offline state.",
           "value":{
              "error":{
                 "message":{
                    "text":"Device is not offline and cannot be removed.",
                    "id":7216
                 }
              }
           }
        },
        "Response.DeviceAssociatedWithThermostat":{
           "description":"Returned when device cannot be removed because it is not in offline state.",
           "value":{
              "error":{
                 "message":{
                    "text":"Device is associated with thermostat and cannot be removed.",
                    "id":7215
                 }
              }
           }
        },
        "Response.InvalidWeatherSettings":{
           "description":"Returned when weather feature is not turned on.",
           "value":{
              "error":{
                 "message":{
                    "text":"Invalid weather service settings",
                    "id":8931
                 }
              }
           }
        },
        "Response.ValidationFailed":{
           "description":"Returned when request contains invalid data.",
           "value":{
              "error":{
                 "message":{
                    "id":7221,
                    "text":"Validation failed"
                 },
                 "errors":{
                    "my_string_param":{
                       "id":7242,
                       "params":[
                          
                       ],
                       "text":"Parameter should not contain special characters"
                    }
                 }
              }
           }
        },
        "Response.ValidationFailedInvalidAppID":{
           "description":"Returned when request contains invalid data.",
           "value":{
              "error":{
                 "message":{
                    "id":7221,
                    "text":"Validation failed"
                 },
                 "errors":{
                    "app_id":{
                       "id":8932,
                       "params":[
                          
                       ],
                       "text":"Invalid App ID"
                    }
                 }
              }
           }
        },
        "Response.ValidationFailedNoInternetConnection":{
           "description":"Returned when there is no Internet connection and it is required for request.",
           "value":{
              "error":{
                 "message":{
                    "id":7221,
                    "text":"Validation failed"
                 },
                 "errors":{
                    "app_id":{
                       "id":8212,
                       "params":[
                          
                       ],
                       "text":"No Internet connection"
                    }
                 }
              }
           }
        },
        "Response.ObjectAllocationError":{
           "description":"Returned when server failed to allocate object.",
           "value":{
              "error":{
                 "message":{
                    "text":"Failed to create object.",
                    "id":7217
                 }
              }
           }
        },
        "Response.DatabaseError":{
           "description":"Returned when database save error happened.",
           "value":{
              "error":{
                 "message":{
                    "text":"Database save process failed.",
                    "id":7218
                 }
              }
           }
        },
        "Response.ContainerOperationError":{
           "description":"Returned when container operation error happened eg. container is locked due to heavy processing.",
           "value":{
              "error":{
                 "message":{
                    "text":"Container operation failed.",
                    "id":7219
                 }
              }
           }
        },
        "Response.UnknownError":{
           "description":"Returned when unknown error happended. As always, this shouldn`t happen, but we all know it will happen :-)",
           "value":{
              "error":{
                 "message":{
                    "text":"Unknown error.",
                    "id":7220
                 }
              }
           }
        },
        "Response.NoDataAvailable":{
           "description":"Returned when there is no requested data available.",
           "value":{
              "error":{
                 "message":{
                    "text":"No data",
                    "id":105
                 }
              }
           }
        },
        "Response.LuaHttpServerInternalError":{
           "description":"Returned when error during request processing happened at lua side.",
           "value":{
              "error":{
                 "message":{
                    "text":"A client error occurred and your request couldn\"t be completed.",
                    "id":8693
                 }
              }
           }
        },
        "Response.LuaHttpServerNotImplemented":{
           "description":"Returned when specific route hook for path was found but no response was generated by handler.",
           "value":{
              "error":{
                 "message":{
                    "text":"Handle HTTP response.",
                    "id":10857
                 }
              }
           }
        },
        "Response.AsyncResponseTimeout":{
           "description":"Returned when request operation timed out.",
           "value":{
              "error":{
                 "message":{
                    "text":"Request timeout exceeded.",
                    "id":7334
                 }
              }
           }
        }
     },
     "responses":{
        "NoContent":{
           "description":"Success, no content returned."
        },
        "NotModified":{
           "description":"Content not modified.",
           "content":{
              "application/json":{
                 "schema":{
                    "$ref":"#/components/schemas/Response.Error"
                 },
                 "examples":{
                    "NotModified":{
                       "$ref":"#/components/examples/Response.NotModified"
                    }
                 }
              }
           }
        },
        "DevicesSuccessfullyDeleted":{
           "description":"Devices successfully deleted.",
           "content":{
              "application/json":{
                 "schema":{
                    "type":"object",
                    "required":[
                       "data"
                    ],
                    "properties":{
                       "data":{
                          "description":"Returned list of deleted devices.",
                          "type":"array",
                          "items":{
                             "allOf":[
                                {
                                   "$ref":"#/components/schemas/Device.AssociationInfoWithParent"
                                }
                             ]
                          }
                       }
                    }
                 },
                 "examples":{
                    "DeviceDeleteSuccess":{
                       "description":"Returned list of deleted devices.",
                       "value":{
                          "data":[
                             {
                                "id":44,
                                "class":"wtp"
                             },
                             {
                                "id":55,
                                "class":"wtp"
                             }
                          ]
                       }
                    }
                 }
              }
           }
        },
        "QueryError":{
           "description":"Influx Query error.",
           "content":{
              "application/json":{
                 "schema":{
                    "$ref":"#/components/schemas/Response.Error"
                 },
                 "examples":{
                    "QueryError":{
                       "$ref":"#/components/examples/Response.QueryError"
                    }
                 }
              }
           }
        },
        "ValidationFailed":{
           "description":"Validation error.",
           "content":{
              "application/json":{
                 "schema":{
                    "$ref":"#/components/schemas/Response.ValidationError"
                 },
                 "examples":{
                    "ValidationFailed":{
                       "$ref":"#/components/examples/Response.ValidationFailed"
                    }
                 }
              }
           }
        },
        "UnknownError":{
           "description":"Server side error.",
           "content":{
              "application/json":{
                 "schema":{
                    "$ref":"#/components/schemas/Response.Error"
                 },
                 "examples":{
                    "UnknownError":{
                       "$ref":"#/components/examples/Response.UnknownError"
                    }
                 }
              }
           }
        },
        "ServiceUnavailable":{
           "description":"Server side error.",
           "content":{
              "application/json":{
                 "schema":{
                    "$ref":"#/components/schemas/Response.ReasonError"
                 }
              }
           }
        },
        "ObjectNotFound":{
           "description":"Object not found.",
           "content":{
              "application/json":{
                 "schema":{
                    "$ref":"#/components/schemas/Response.Error"
                 },
                 "examples":{
                    "ObjectNotFound":{
                       "$ref":"#/components/examples/Response.ObjectNotFound"
                    }
                 }
              }
           }
        },
        "LuaHttpServerPathNotFound":{
           "description":"Returned when specific route hook for path was not found in lua http server.",
           "content":{
              "application/json":{
                 "schema":{
                    "$ref":"#/components/schemas/Response.Error"
                 },
                 "examples":{
                    "LuaHttpServerPathNotFound":{
                       "$ref":"#/components/examples/Response.LuaHttpServerPathNotFound"
                    }
                 }
              }
           }
        },
        "UnauthorizedError":{
           "description":"Authorization error.",
           "content":{
              "application/json":{
                 "schema":{
                    "$ref":"#/components/schemas/Response.Error"
                 },
                 "examples":{
                    "UnauthorizedError":{
                       "$ref":"#/components/examples/Response.Unauthorized"
                    }
                 }
              }
           }
        },
        "InvalidObjectIdSupplied":{
           "description":"Invalid object ID supplied.",
           "content":{
              "application/json":{
                 "schema":{
                    "$ref":"#/components/schemas/Response.Error"
                 },
                 "examples":{
                    "UnauthorizedError":{
                       "$ref":"#/components/examples/Response.InvalidObjectIdSupplied"
                    }
                 }
              }
           }
        },
        "MethodNotAllowed":{
           "description":"Method not allowed.",
           "content":{
              "application/json":{
                 "schema":{
                    "$ref":"#/components/schemas/Response.Error"
                 },
                 "examples":{
                    "MethodNotAllowed":{
                       "$ref":"#/components/examples/Response.MethodNotAllowed"
                    }
                 }
              }
           }
        },
        "RequestTimeout":{
           "description":"Server (Gateway) side error.",
           "content":{
              "application/json":{
                 "schema":{
                    "$ref":"#/components/schemas/Response.GoGatewayError"
                 },
                 "examples":{
                    "RequestTimeout":{
                       "$ref":"#/components/examples/Response.RequestTimeout"
                    }
                 }
              }
           }
        },
        "InvalidWeatherSettings":{
           "description":"Invalid weather service settings.",
           "content":{
              "application/json":{
                 "schema":{
                    "$ref":"#/components/schemas/Response.GoGatewayError"
                 },
                 "examples":{
                    "InvalidWeatherSettings":{
                       "$ref":"#/components/examples/Response.InvalidWeatherSettings"
                    }
                 }
              }
           }
        },
        "NoDataAvailable":{
           "description":"No data available.",
           "content":{
              "application/json":{
                 "schema":{
                    "$ref":"#/components/schemas/Response.GoGatewayError"
                 },
                 "examples":{
                    "NoDataAvailable":{
                       "$ref":"#/components/examples/Response.NoDataAvailable"
                    }
                 }
              }
           }
        },
        "RegistrationAlreadyInProgress":{
           "description":"Application error.",
           "content":{
              "application/json":{
                 "schema":{
                    "$ref":"#/components/schemas/Response.Error"
                 },
                 "examples":{
                    "RegistrationAlreadyInProgress":{
                       "$ref":"#/components/examples/Response.RegistrationAlreadyInProgress"
                    }
                 }
              }
           }
        },
        "IdentificationAlreadyInProgress":{
           "description":"Application error.",
           "content":{
              "application/json":{
                 "schema":{
                    "$ref":"#/components/schemas/Response.Error"
                 },
                 "examples":{
                    "IdentificationAlreadyInProgress":{
                       "$ref":"#/components/examples/Response.IdentificationAlreadyInProgress"
                    }
                 }
              }
           }
        },
        "ObjectContainerBusyError":{
           "description":"Server side error.",
           "content":{
              "application/json":{
                 "schema":{
                    "$ref":"#/components/schemas/Response.Error"
                 }
              }
           }
        },
        "LuaHttpServerNotImplemented":{
           "description":"Returned when specific route hook for path was found but no response was generated by handler.",
           "content":{
              "application/json":{
                 "schema":{
                    "$ref":"#/components/schemas/Response.Error"
                 },
                 "examples":{
                    "LuaHttpServerPathNotFound":{
                       "$ref":"#/components/examples/Response.LuaHttpServerNotImplemented"
                    }
                 }
              }
           }
        }
     },
     "securitySchemes":{
        "JWT":{
           "type":"apiKey",
           "in":"header",
           "name":"Authorization"
        }
     }
  },
  "security":[
     {
        "JWT":[
           
        ]
     }
  ]
}